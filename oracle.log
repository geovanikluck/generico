  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','DDL','SUBPARTITION','SHARD_TABLESPACE',NULL,0,NULL,2,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','DDL','SUBPARTITION','CONSTRAINTS_AS_ALTER','0',0,NULL,1,NULL,NULL);

1 row created.

SQL> 
SQL> -- INDEX_PARTITION transform parameters
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','DDL','INDEX_PARTITION','STORAGE','1',0,NULL,1,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','DDL','INDEX_PARTITION','UNIQUE_NAME',NULL,0,NULL,2,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','DDL','INDEX_PARTITION','SHARD_TABLESPACE',NULL,0,NULL,2,NULL,NULL);

1 row created.

SQL> 
SQL> -- DOMAIN_INDEX_PARTITION transform parameters
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','DDL','DOMAIN_INDEX_PARTITION','STORAGE','1',0,NULL,1,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','DDL','DOMAIN_INDEX_PARTITION','UNIQUE_NAME',NULL,0,NULL,2,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','DDL','DOMAIN_INDEX_PARTITION','SHARD_TABLESPACE',NULL,0,NULL,2,NULL,NULL);

1 row created.

SQL> 
SQL> -- [SUB]PARTITION_OBJNUM object parse items
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','PARTITION_OBJNUM','PRS_OBJNUM','0',0,
  5      'KU$.OBJ_NUM',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','SUBPARTITION_OBJNUM','PRS_OBJNUM','0',0,
  5      'KU$.OBJ_NUM',NULL,NULL,NULL);

1 row created.

SQL> 
SQL> -- Partition object parse items
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','PARTITION','PRS_OBJNUM','0',0,
  5      'KU$.OBJ_NUM',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','PARTITION','PRS_OBJNUM_NAME','0',0,
  5      'KU$.TABPART.SCHEMA_OBJ.SUBNAME',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','PARTITION','PRS_OBJECT_TYPE','0',0,
  5      '''PARTITION''',NULL,NULL,NULL);

1 row created.

SQL> 
SQL> -- for partition, schema/name invents a name for table/partition
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','PARTITION','PRS_SCHEMA','0',0,
  5      'KU$.TABPART.SCHEMA_OBJ.OWNER_NAME',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','PARTITION','PRS_NAME','0',0,
  5      'KU$.SCHEMA_OBJ.NAME||''_''||KU$.TABPART.SCHEMA_OBJ.SUBNAME',
  6      NULL,NULL,NULL);

1 row created.

SQL> -- for partition, base schema/name finds the (partitioned) source table
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','PARTITION','PRS_BASE_OBJECT_NAME','0',0,
  5      'KU$.SCHEMA_OBJ.NAME',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','PARTITION','PRS_BASE_OBJECT_SCHEMA','0',0,
  5      'KU$.SCHEMA_OBJ.OWNER_NAME',NULL,NULL,NULL);

1 row created.

SQL> 
SQL> -- for partition, anc schema/name finds table for domidx secondary tables
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','PARTITION','PRS_ANC_OBJECT_NAME','0',0,
  5    'decode(
  6       bitand(KU$.SCHEMA_OBJ.flags, 16),
  7       16,
  8       (select ao.name
  9        from  sys.ku$_schemaobj_view ao, sys.ind$ i, sys.secobj$ s
 10        where i.bo#=ao.obj_num and i.obj#=s.obj# and
 11              s.secobj#=ku$.schema_obj.obj_num),
 12       KU$.SCHEMA_OBJ.NAME)',
 13    NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','PARTITION','PRS_ANC_OBJECT_SCHEMA','0',0,
  5    'decode(
  6       bitand(KU$.SCHEMA_OBJ.flags, 16),
  7       16,
  8       (select ao.owner_name
  9        from  sys.ku$_schemaobj_view ao, sys.ind$ i, sys.secobj$ s
 10        where i.bo#=ao.obj_num and i.obj#=s.obj# and
 11              s.secobj#=ku$.schema_obj.obj_num),
 12       KU$.SCHEMA_OBJ.OWNER_NAME)',
 13    NULL,NULL,NULL);

1 row created.

SQL> 
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','PARTITION','PRS_TABLESPACE','0',0,
  5      'KU$.TS_NAME',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','PARTITION','PRS_REFPAR_LEVEL','0',0,
  5      'KU$.REFPAR_LEVEL',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','PARTITION','PRS_BIND_PATTERN','0',0, NULL,NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','PARTITION','PRS_ALT_CONNECT_TYPE','0',0, NULL,NULL,NULL,NULL);

1 row created.

SQL> 
SQL> -- Subpartition object parse items
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','SUBPARTITION','PRS_OBJNUM','0',0,
  5      'KU$.OBJ_NUM',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','SUBPARTITION','PRS_OBJNUM_NAME','0',0,
  5      'KU$.TABPART.SCHEMA_OBJ.SUBNAME',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','SUBPARTITION','PRS_OBJECT_TYPE','0',0,
  5      '''SUBPARTITION''',NULL,NULL,NULL);

1 row created.

SQL> 
SQL> -- for subpartition, schema/name invents a name for table/subpartition
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','SUBPARTITION','PRS_SCHEMA','0',0,
  5      'KU$.TABPART.SCHEMA_OBJ.OWNER_NAME',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','SUBPARTITION','PRS_NAME','0',0,
  5      'KU$.SCHEMA_OBJ.NAME||''_''||KU$.TABPART.SCHEMA_OBJ.SUBNAME',
  6      NULL,NULL,NULL);

1 row created.

SQL> 
SQL> -- for subpartition, base schema/name finds the (subpartitioned) source table
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','SUBPARTITION','PRS_BASE_OBJECT_NAME','0',0,
  5      'KU$.SCHEMA_OBJ.NAME',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','SUBPARTITION','PRS_BASE_OBJECT_SCHEMA','0',0,
  5      'KU$.SCHEMA_OBJ.OWNER_NAME',NULL,NULL,NULL);

1 row created.

SQL> 
SQL> -- for subpartition, anc schema/name finds table for domidx secondary tables
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','SUBPARTITION','PRS_ANC_OBJECT_NAME','0',0,
  5    'decode(
  6       bitand(KU$.SCHEMA_OBJ.flags, 16),
  7       16,
  8       (select ao.name
  9        from  sys.ku$_schemaobj_view ao, sys.ind$ i, sys.secobj$ s
 10        where i.bo#=ao.obj_num and i.obj#=s.obj# and
 11              s.secobj#=ku$.schema_obj.obj_num),
 12       KU$.SCHEMA_OBJ.NAME)',
 13    NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','SUBPARTITION','PRS_ANC_OBJECT_SCHEMA','0',0,
  5    'decode(
  6       bitand(KU$.SCHEMA_OBJ.flags, 16),
  7       16,
  8       (select ao.owner_name
  9        from  sys.ku$_schemaobj_view ao, sys.ind$ i, sys.secobj$ s
 10        where i.bo#=ao.obj_num and i.obj#=s.obj# and
 11              s.secobj#=ku$.schema_obj.obj_num),
 12       KU$.SCHEMA_OBJ.OWNER_NAME)',
 13    NULL,NULL,NULL);

1 row created.

SQL> 
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','SUBPARTITION','PRS_TABLESPACE','0',0,
  5      'KU$.TS_NAME',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','SUBPARTITION','PRS_REFPAR_LEVEL','0',0,
  5      'KU$.REFPAR_LEVEL',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','SUBPARTITION','PRS_BIND_PATTERN','0',0, NULL,NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','SUBPARTITION','PRS_ALT_CONNECT_TYPE','0',0, NULL,NULL,NULL,NULL);

1 row created.

SQL> -- Partition object stylesheets (uses table stylesheets)
SQL> insert into metaxsl$ (xmltag, transform, model, script) values
  2   ('PARTITION_T', 'DDL', 'ORACLE', 'kutable');

1 row created.

SQL> insert into metaxsl$ (xmltag, transform, model, script) values
  2   ('PARTITION_T', 'PARSE', 'ORACLE', 'kuprsso');

1 row created.

SQL> 
SQL> -- Subpartition object stylesheets (uses table stylesheets)
SQL> insert into metaxsl$ (xmltag, transform, model, script) values
  2   ('SUBPARTITION_T', 'DDL', 'ORACLE', 'kutable');

1 row created.

SQL> insert into metaxsl$ (xmltag, transform, model, script) values
  2   ('SUBPARTITION_T', 'PARSE', 'ORACLE', 'kuprsso');

1 row created.

SQL> 
SQL> -- Index Partition object parse items
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','INDEX_PARTITION','PRS_OBJECT_TYPE','0',0,
  5      '''INDEX_PARTITION''',NULL,NULL,NULL);

1 row created.

SQL> 
SQL> -- Index Partition object schema, name
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','INDEX_PARTITION','PRS_SCHEMA','0',0,
  5      'KU$.IND_PART.SCHEMA_OBJ.OWNER_NAME',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','INDEX_PARTITION','PRS_NAME','0',0,
  5      'KU$.SCHEMA_OBJ.NAME||''_''||KU$.IND_PART.SCHEMA_OBJ.SUBNAME',
  6      NULL,NULL,NULL);

1 row created.

SQL> -- Index Partition object base schema, name
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','INDEX_PARTITION','PRS_BASE_OBJECT_SCHEMA','0',0,
  5      'KU$.BASE_OBJ.OWNER_NAME',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','INDEX_PARTITION','PRS_BASE_OBJECT_NAME','0',0,
  5      'KU$.BASE_OBJ.NAME',NULL,NULL,NULL);

1 row created.

SQL> -- Index Partition object anc schema, name
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','INDEX_PARTITION','PRS_ANC_OBJECT_SCHEMA','0',0,
  5    'decode(
  6       bitand(KU$.BASE_OBJ.flags, 16),
  7       16,
  8       (select ao.owner_name
  9        from  sys.ku$_schemaobj_view ao, sys.ind$ i, sys.secobj$ s
 10        where i.bo#=ao.obj_num and i.obj#=s.obj# and
 11              s.secobj#=ku$.base_obj.obj_num),
 12       ku$.base_obj.owner_name)',
 13    NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','INDEX_PARTITION','PRS_ANC_OBJECT_NAME','0',0,
  5    'decode(
  6       bitand(KU$.BASE_OBJ.flags, 16),
  7       16,
  8       (select ao.name
  9        from  sys.ku$_schemaobj_view ao, sys.ind$ i, sys.secobj$ s
 10        where i.bo#=ao.obj_num and i.obj#=s.obj# and
 11              s.secobj#=ku$.base_obj.obj_num),
 12       ku$.base_obj.name)',
 13    NULL,NULL,NULL);

1 row created.

SQL> 
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','INDEX_PARTITION','PRS_TABLESPACE','0',0,
  5      'KU$.TS_NAME',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','INDEX_PARTITION','PRS_REFPAR_LEVEL','0',0,
  5      'KU$.REFPAR_LEVEL',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','INDEX_PARTITION','PRS_BIND_PATTERN','0',0, NULL,NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','INDEX_PARTITION','PRS_ALT_CONNECT_TYPE','0',0, NULL,NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','INDEX_PARTITION','PRS_UNSUPPORTED_OBJECT','0',0,
  5     'decode(cardinality(KU$.COL_LIST),0,''1'',''0'')',NULL,NULL,NULL);

1 row created.

SQL> 
SQL> -- DOMAIN_INDEX_PARTITION object parse items
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','DOMAIN_INDEX_PARTITION','PRS_OBJECT_TYPE','0',0,
  5      '''INDEX_PARTITION''',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','DOMAIN_INDEX_PARTITION','PRS_NAME','0',0,
  5      'KU$.SCHEMA_OBJ.NAME||''_''||KU$.IND_PART.SCHEMA_OBJ.SUBNAME',
  6      NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','DOMAIN_INDEX_PARTITION','PRS_BASE_OBJECT_NAME','0',0,
  5      'KU$.BASE_OBJ.NAME',NULL,NULL,NULL);

1 row created.

SQL> 
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','DOMAIN_INDEX_PARTITION','PRS_BASE_OBJECT_SCHEMA','0',0,
  5      'KU$.BASE_OBJ.OWNER_NAME',NULL,NULL,NULL);

1 row created.

SQL> 
SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','DOMAIN_INDEX_PARTITION','PRS_SCHEMA','0',0,
  5      'KU$.IND_PART.SCHEMA_OBJ.OWNER_NAME',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','DOMAIN_INDEX_PARTITION','PRS_TABLESPACE','0',0,
  5      'KU$.TS_NAME',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','DOMAIN_INDEX_PARTITION','PRS_REFPAR_LEVEL','0',0,
  5      'KU$.REFPAR_LEVEL',NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','DOMAIN_INDEX_PARTITION','PRS_BIND_PATTERN','0',0, NULL,NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','DOMAIN_INDEX_PARTITION','PRS_ALT_CONNECT_TYPE','0',0, NULL,NULL,NULL,NULL);

1 row created.

SQL> insert into metaxslparam$ (model, transform, type, param,
  2                             default_val, properties, parse_attr,
  3                             datatype, lower_bound, upper_bound) values
  4   ('ORACLE','PARSE','DOMAIN_INDEX_PARTITION','PRS_UNSUPPORTED_OBJECT','0',0,
  5     'decode(cardinality(KU$.COL_LIST),0,''1'',''0'')',NULL,NULL,NULL);

1 row created.

SQL> 
SQL> -- Index Partition object stylesheets (uses index stylesheets)
SQL> insert into metaxsl$ (xmltag, transform, model, script) values
  2   ('INDEX_PARTITION_T', 'DDL', 'ORACLE', 'kuindex');

1 row created.

SQL> insert into metaxsl$ (xmltag, transform, model, script) values
  2   ('INDEX_PARTITION_T', 'PARSE', 'ORACLE', 'kuprsso');

1 row created.

SQL> 
SQL> -- populate metaaudit$
SQL> --
SQL> -- NOTE: look in dsec.bsq for STMT_AUDIT_OPTION_MAP for the names
SQL> --       of the options. this data maps the version in which the
SQL> --       option was introduced with the option number.
SQL> --
SQL> -- start with a clean slate
SQL> delete from metaaudit$;

0 rows deleted.

SQL> 
SQL> -- insert audit option numbers into metaaudit$, by version
SQL> -- 10.0.0.0.0 - NOTE these came from 11.01.00.07
SQL> insert into metaaudit$ values ('10.00.00.00.00', 3);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 4);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 5);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 6);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 7);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 8);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 9);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 10);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 11);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 12);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 13);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 14);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 15);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 16);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 17);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 18);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 19);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 20);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 21);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 22);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 23);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 24);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 25);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 26);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 27);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 28);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 29);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 30);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 31);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 32);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 33);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 34);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 35);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 36);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 37);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 38);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 39);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 40);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 41);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 42);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 43);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 44);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 45);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 46);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 47);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 48);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 49);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 50);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 52);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 54);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 57);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 58);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 60);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 61);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 62);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 63);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 65);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 66);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 67);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 68);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 69);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 71);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 72);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 73);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 77);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 80);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 81);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 82);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 83);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 84);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 85);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 86);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 90);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 91);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 92);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 93);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 94);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 95);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 96);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 97);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 98);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 99);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 100);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 101);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 103);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 104);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 105);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 106);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 107);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 108);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 109);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 111);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 115);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 120);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 121);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 125);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 126);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 127);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 128);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 130);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 131);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 135);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 138);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 139);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 140);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 141);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 142);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 143);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 144);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 146);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 147);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 151);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 152);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 153);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 154);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 160);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 161);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 162);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 163);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 165);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 167);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 172);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 173);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 174);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 175);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 176);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 177);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 178);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 179);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 180);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 181);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 182);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 183);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 184);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 187);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 188);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 189);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 190);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 191);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 192);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 193);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 210);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 211);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 214);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 215);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 216);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 217);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 218);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 219);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 220);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 221);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 222);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 223);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 224);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 225);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 226);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 233);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 234);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 235);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 236);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 237);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 238);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 241);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 242);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 243);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 244);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 245);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 246);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 247);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 248);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 249);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 250);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 251);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 252);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 253);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 254);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 255);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 256);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 257);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 258);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 259);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 260);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 261);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 262);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 263);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 264);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 265);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 266);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 267);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 268);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 269);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 270);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 271);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 272);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 273);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 274);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 275);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 276);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 277);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 278);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 279);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 280);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 281);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 282);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 283);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 284);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 285);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 286);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 287);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 288);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 289);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 290);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 291);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 292);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 293);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 294);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 295);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 296);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 297);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 298);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 300);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 301);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 302);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 303);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 304);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 305);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 306);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 307);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 308);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 309);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 310);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 311);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 312);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 313);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 314);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 315);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 316);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 317);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 318);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 319);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 320);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 321);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 322);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 323);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 324);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 325);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 326);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 327);

1 row created.

SQL> insert into metaaudit$ values ('10.00.00.00.00', 350);

1 row created.

SQL> 
SQL> -- insert audit option numbers into metaaudit$, by version
SQL> -- 11.2.0.2.0
SQL> insert into metaaudit$ values ('11.02.00.00.00',  51);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00',  78);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00', 186);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00', 200);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00', 201);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00', 202);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00', 203);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00', 204);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00', 205);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00', 206);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00', 207);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00', 208);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00', 209);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00', 212);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00', 213);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00', 227);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00', 228);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00', 328);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00', 329);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00', 330);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.00.00', 331);

1 row created.

SQL> 
SQL> -- insert audit option numbers into metaaudit$, by version
SQL> -- 11.2.0.4.0
SQL> insert into metaaudit$ values ('11.02.00.04.00', 299);

1 row created.

SQL> insert into metaaudit$ values ('11.02.00.04.00', 351);

1 row created.

SQL> 
SQL> -- insert audit option numbers into metaaudit$, by version
SQL> -- 12.0.0.0.0
SQL> insert into metaaudit$ values ('12.00.00.00.00',  53);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00',  56);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 334);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 335);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 336);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 337);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 338);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 339);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 340);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 341);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 342);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 343);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 344);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 345);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 346);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 347);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 348);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 349);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 352);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 353);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 354);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 355);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 356);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 357);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 375);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 377);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 385);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 386);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 387);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 388);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 389);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 391);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 392);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 393);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 394);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 395);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 396);

1 row created.

SQL> insert into metaaudit$ values ('12.00.00.00.00', 397);

1 row created.

SQL> 
SQL> -- insert audit option numbers into metaaudit$, by version
SQL> -- 12.2.0.0.0
SQL> insert into metaaudit$ values ('12.02.00.00.00', 240);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 358);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 359);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 360);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 361);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 362);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 363);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 364);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 365);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 366);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 367);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 378);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 379);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 380);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 390);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 398);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 399);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 400);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 401);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 402);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 403);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 404);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 405);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 406);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 407);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 408);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 409);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.00.00', 410);

1 row created.

SQL> 
SQL> -- insert audit option numbers into metaaudit$, by version
SQL> -- 12.2.0.2.0
SQL> insert into metaaudit$ values ('12.02.00.02.00', 411);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.02.00', 412);

1 row created.

SQL> insert into metaaudit$ values ('12.02.00.02.00', 414);

1 row created.

SQL> 
SQL> -- define views for DataPump Master Control Process
SQL> 
SQL> -- View for validating object path names (allowing cross version compatibility)
SQL> create or replace public synonym DATAPUMP_PATHS_VERSION
  2   for DATAPUMP_PATHS_VERSION
  3  /

Synonym created.

SQL> -- View for validating object path names - compatible with release prior to
SQL> --  12.0 (11.2.0.3 has some V12 path names!)
SQL> create or replace public synonym DATAPUMP_PATHS for DATAPUMP_PATHS
  2  /

Synonym created.

SQL> 
SQL> -- View for mapping object paths in dump file set to import mode
SQL> create or replace public synonym DATAPUMP_PATHMAP for DATAPUMP_PATHMAP
  2  /

Synonym created.

SQL> -- View to get full path spec of TABLE_DATA
SQL> create or replace public synonym DATAPUMP_TABLE_DATA for DATAPUMP_TABLE_DATA
  2  /

Synonym created.

SQL> 
SQL> -- define views for worker process
SQL> 
SQL> create or replace public synonym DATAPUMP_OBJECT_CONNECT
  2    for DATAPUMP_OBJECT_CONNECT
  3  /

Synonym created.

SQL> 
SQL> -- view to see if transform is supported for a particular object type.
SQL> 
SQL> -- define DBA_EXPORT_OBJECTS catalog views
SQL> 
SQL> create or replace public synonym DBA_EXPORT_OBJECTS for DBA_EXPORT_OBJECTS
  2  /

Synonym created.

SQL> comment on table DBA_EXPORT_OBJECTS is
  2  'Export INCLUDE and EXCLUDE object type names'
  3  /

Comment created.

SQL> comment on column DBA_EXPORT_OBJECTS.HET_TYPE is
  2  'Name of heterogeneous object type'
  3  /

Comment created.

SQL> comment on column DBA_EXPORT_OBJECTS.OBJECT_PATH is
  2  'Simple path name of member object type'
  3  /

Comment created.

SQL> comment on column DBA_EXPORT_OBJECTS.COMMENTS is
  2  'Description of object type'
  3  /

Comment created.

SQL> comment on column DBA_EXPORT_OBJECTS.NAMED is
  2  'Do objects of this type have names?'
  3  /

Comment created.

SQL> create or replace public synonym TABLE_EXPORT_OBJECTS for TABLE_EXPORT_OBJECTS
  2  /

Synonym created.

SQL> comment on table TABLE_EXPORT_OBJECTS is
  2  'INCLUDE and EXCLUDE object type names for table mode export'
  3  /

Comment created.

SQL> comment on column TABLE_EXPORT_OBJECTS.OBJECT_PATH is
  2  'Simple path name of member object type'
  3  /

Comment created.

SQL> comment on column TABLE_EXPORT_OBJECTS.COMMENTS is
  2  'Description of object type'
  3  /

Comment created.

SQL> comment on column TABLE_EXPORT_OBJECTS.NAMED is
  2  'Do objects of this type have names?'
  3  /

Comment created.

SQL> create or replace public synonym SCHEMA_EXPORT_OBJECTS
  2   for SCHEMA_EXPORT_OBJECTS
  3  /

Synonym created.

SQL> comment on table SCHEMA_EXPORT_OBJECTS is
  2  'INCLUDE and EXCLUDE object type names for schema mode export'
  3  /

Comment created.

SQL> comment on column SCHEMA_EXPORT_OBJECTS.OBJECT_PATH is
  2  'Simple path name of member object type'
  3  /

Comment created.

SQL> comment on column SCHEMA_EXPORT_OBJECTS.COMMENTS is
  2  'Description of object type'
  3  /

Comment created.

SQL> comment on column SCHEMA_EXPORT_OBJECTS.NAMED is
  2  'Do objects of this type have names?'
  3  /

Comment created.

SQL> create or replace public synonym DATABASE_EXPORT_OBJECTS
  2   for DATABASE_EXPORT_OBJECTS
  3  /

Synonym created.

SQL> comment on table DATABASE_EXPORT_OBJECTS is
  2  'INCLUDE and EXCLUDE object type names for full database export'
  3  /

Comment created.

SQL> comment on column DATABASE_EXPORT_OBJECTS.OBJECT_PATH is
  2  'Simple path name of member object type'
  3  /

Comment created.

SQL> comment on column DATABASE_EXPORT_OBJECTS.COMMENTS is
  2  'Description of object type'
  3  /

Comment created.

SQL> comment on column DATABASE_EXPORT_OBJECTS.NAMED is
  2  'Do objects of this type have names?'
  3  /

Comment created.

SQL> create or replace public synonym TABLESPACE_EXPORT_OBJECTS
  2   for TABLESPACE_EXPORT_OBJECTS
  3  /

Synonym created.

SQL> comment on table TABLESPACE_EXPORT_OBJECTS is
  2  'INCLUDE and EXCLUDE object type names for tablespace mode export'
  3  /

Comment created.

SQL> comment on column TABLESPACE_EXPORT_OBJECTS.OBJECT_PATH is
  2  'Simple path name of member object type'
  3  /

Comment created.

SQL> comment on column TABLESPACE_EXPORT_OBJECTS.COMMENTS is
  2  'Description of object type'
  3  /

Comment created.

SQL> comment on column TABLESPACE_EXPORT_OBJECTS.NAMED is
  2  'Do objects of this type have names?'
  3  /

Comment created.

SQL> 
SQL> create or replace public synonym TRANSPORTABLE_EXPORT_OBJECTS
  2   for TRANSPORTABLE_EXPORT_OBJECTS
  3  /

Synonym created.

SQL> comment on table TRANSPORTABLE_EXPORT_OBJECTS is
  2  'INCLUDE and EXCLUDE object type names for tablespace mode export'
  3  /

Comment created.

SQL> comment on column TRANSPORTABLE_EXPORT_OBJECTS.OBJECT_PATH is
  2  'Simple path name of member object type'
  3  /

Comment created.

SQL> comment on column TRANSPORTABLE_EXPORT_OBJECTS.COMMENTS is
  2  'Description of object type'
  3  /

Comment created.

SQL> comment on column TRANSPORTABLE_EXPORT_OBJECTS.NAMED is
  2  'Do objects of this type have names?'
  3  /

Comment created.

SQL> 
SQL> -- Bug 8354702: Define views with all path names for the export modes.
SQL> -- These are used by dbms_metadata.set_filter to process IN/EXCLUDE_PATH_EXPR
SQL> 
SQL> 
SQL> create or replace public synonym DBA_EXPORT_PATHS
  2   for DBA_EXPORT_PATHS
  3  /

Synonym created.

SQL> 
SQL> create or replace public synonym TABLE_EXPORT_PATHS
  2   for TABLE_EXPORT_PATHS
  3  /

Synonym created.

SQL> 
SQL> 
SQL> create or replace public synonym SCHEMA_EXPORT_PATHS
  2   for SCHEMA_EXPORT_PATHS
  3  /

Synonym created.

SQL> 
SQL> 
SQL> create or replace public synonym DATABASE_EXPORT_PATHS
  2   for DATABASE_EXPORT_PATHS
  3  /

Synonym created.

SQL> 
SQL> 
SQL> create or replace public synonym TABLESPACE_EXPORT_PATHS
  2   for TABLESPACE_EXPORT_PATHS
  3  /

Synonym created.

SQL> 
SQL> --
SQL> -- TABLE_DATA is not a path in transportable_export, but the Data Pump
SQL> -- worker specifies it for all export modes.  Rather than change the
SQL> -- worker code, we include TABLE_DATA in this view.
SQL> --
SQL> create or replace public synonym TRANSPORTABLE_EXPORT_PATHS
  2   for TRANSPORTABLE_EXPORT_PATHS
  3  /

Synonym created.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> -- This view is for OEM: allows the GUI to get a list of object types
SQL> -- for each REMAP_ param.
SQL> 
SQL> create or replace public synonym DATAPUMP_REMAP_OBJECTS
  2    for DATAPUMP_REMAP_OBJECTS
  3  /

Synonym created.

SQL> 
SQL> -- views to document metadata api transforms, transform params and parse items
SQL> 
SQL> create or replace public synonym dbms_metadata_transforms
  2    for sys.dbms_metadata_transforms
  3  /

Synonym created.

SQL> create or replace public synonym dbms_metadata_transform_params
  2    for dbms_metadata_transform_params
  3  /

Synonym created.

SQL> create or replace public synonym dbms_metadata_parse_items
  2    for dbms_metadata_parse_items
  3  /

Synonym created.

SQL> 
SQL> comment on column dbms_metadata_transforms.object_type is
  2   'Object type name'
  3  /

Comment created.

SQL> comment on column dbms_metadata_transforms.transform is
  2   'Transform name'
  3  /

Comment created.

SQL> comment on column dbms_metadata_transforms.input_type is
  2   'Type of input document'
  3  /

Comment created.

SQL> comment on column dbms_metadata_transforms.output_type is
  2   'Type of output document'
  3  /

Comment created.

SQL> comment on column dbms_metadata_transforms.description is
  2   'Description of the transform'
  3  /

Comment created.

SQL> 
SQL> comment on column dbms_metadata_transform_params.object_type is
  2   'Object type name'
  3  /

Comment created.

SQL> comment on column dbms_metadata_transform_params.transform is
  2   'Transform name'
  3  /

Comment created.

SQL> comment on column dbms_metadata_transform_params.param is
  2   'Parameter name'
  3  /

Comment created.

SQL> comment on column dbms_metadata_transform_params.datatype is
  2   'BOOLEAN, TEXT, NUMBER or UNSPECIFIED'
  3  /

Comment created.

SQL> comment on column dbms_metadata_transform_params.default_val is
  2   'default value of transform parameter'
  3  /

Comment created.

SQL> comment on column dbms_metadata_transform_params.description is
  2   'Description of the transform parameter'
  3  /

Comment created.

SQL> 
SQL> comment on column dbms_metadata_parse_items.object_type is
  2   'Object type name'
  3  /

Comment created.

SQL> comment on column dbms_metadata_parse_items.parse_item is
  2   'Parse item name'
  3  /

Comment created.

SQL> comment on column dbms_metadata_parse_items.alter_xml is
  2   'Y = can be used when generating ALTER_XML document'
  3  /

Comment created.

SQL> comment on column dbms_metadata_parse_items.fetch_xml_clob is
  2   'Y = can be returned by FETCH_XML_CLOB'
  3  /

Comment created.

SQL> comment on column dbms_metadata_parse_items.convert is
  2   'Y = can be returned by CONVERT or FETCH_DDL'
  3  /

Comment created.

SQL> comment on column dbms_metadata_parse_items.description is
  2   'Description of the parse item'
  3  /

Comment created.

SQL> 
SQL> 
SQL> 
SQL> -- heterogeneous object types are created by catmet2.sql
SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> @@catpcnfg.sql
SQL> Rem
SQL> Rem
SQL> Rem catpcnfg.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2016, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catpcnfg.sql - CATPROC CoNFiGuration
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script runs required configuration scripts to set up
SQL> Rem      scheduler and other required objects
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      The script is run by catproc.sql as a single process script
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catpcnfg.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catpcnfg.sql
SQL> Rem SQL_PHASE: CATPCNFG
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catproc.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    sramakri    06/09/16 - remove CDC from 12.2
SQL> Rem    molagapp    01/14/15 - Project 47808 - Restore from preplugin backup
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    banand      08/23/12 - add remove dbmsrspreq.plb
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    banand      06/23/11 - add dbmsrspreq.plb for Recovery Server schema
SQL> Rem    ilistvin    11/13/06 - add catmwin.sql
SQL> Rem    jinwu       11/02/06 - move catstr.sql and catpstr.sql
SQL> Rem    elu         10/23/06 - catrep restructure
SQL> Rem    rburns      08/25/06 - move prvtsnap
SQL> Rem    rburns      07/27/06 - configuration scripts
SQL> Rem    rburns      07/27/06 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> Rem Resource Manager
SQL> @@execrm.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/execrm.sql /main/7 2014/02/20 12:45:40 surman Exp $
SQL> Rem
SQL> Rem execrm.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2013, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      execrm.sql - EXECute Resource Manager packages
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/execrm.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/execrm.sql
SQL> Rem SQL_PHASE: EXECRM
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpcnfg.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    jomcdon     08/23/11 - project 27116: move to dbms_rmin_sys
SQL> Rem    suelee      03/18/09 - Map dataload function to etl_group
SQL> Rem    nchoudhu    07/14/08 - XbranchMerge nchoudhu_sage_july_merge117 from
SQL> Rem                           st_rdbms_11.1.0
SQL> Rem    aksshah     07/03/08 - Add default mapping for dataload functions
SQL> Rem    aksshah     03/01/08 - Add default mapping for backup/copy operations
SQL> Rem    rburns      05/31/06 - Resource Manager packages
SQL> Rem    rburns      05/31/06 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> 
SQL> -- install mandatory and system managed (but non-mandatory) objects.
SQL> execute dbms_rmin_sys.install;

PL/SQL procedure successfully completed.

SQL> 
SQL> -- grant system privilege to IMP_FULL_DATABASE and EXP_FULL_DATABASE
SQL> execute dbms_resource_manager_privs.grant_system_privilege('IMP_FULL_DATABASE', 'ADMINISTER_RESOURCE_MANAGER', FALSE);

PL/SQL procedure successfully completed.

SQL> execute dbms_resource_manager_privs.grant_system_privilege('EXP_FULL_DATABASE', 'ADMINISTER_RESOURCE_MANAGER', FALSE);

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem Scheduler objects
SQL> @@execsch.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/execsch.sql /main/31 2017/04/13 18:51:02 prshanth Exp $
SQL> Rem
SQL> Rem execsch.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2017, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      execsch.sql - EXECute Scheduler PL/SQL
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Create Scheduler objects
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      Run after schedule package loads, but before dependents
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/execsch.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/execsch.sql
SQL> Rem SQL_PHASE: EXECSCH
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpcnfg.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    prshanth    04/10/17 - Bug 25832935: move fixes of 23039033 and 23030152
SQL> Rem                           to the ICD of cleanup_task
SQL> Rem    jnunezg     02/07/17 - bug 25422950: Modify file_watch_job
SQL> Rem    geadon      09/16/16 - bug 24515918: add parameters for global idx
SQL> Rem                           cleanup
SQL> Rem    thbaby      04/06/16 - Bug 23039033: skip app object check in
SQL> Rem                           cleanup_transient_type, cleanup_transient_pkg
SQL> Rem    thbaby      04/06/16 - Bug 23030152: skip app object check in
SQL> Rem                           cleanup_online_pmo
SQL> Rem    jnunezg     03/15/16 - Do not give grants with admin option
SQL> Rem    pxwong      11/26/14 - re-enable in-memory project
SQL> Rem    richen      01/16/14 - 17974868: Create DEFAULT_JOB_CLASS if and only if
SQL> Rem                           it doesnt exist
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    gravipat    11/06/13 - 17709031: Use create_cdbview procedure to create
SQL> Rem                           cdb views
SQL> Rem    jnunezg     09/11/13 - Remove recompile calls
SQL> Rem    talliu      03/15/13 - Change FILE_SIZE_UPD to every 5 mins
SQL> Rem    jerrede     01/14/13 - XbranchMerge jerrede_bug-16097914 from
SQL> Rem                           st_rdbms_12.1.0.1
SQL> Rem    talliu      01/14/13 - add one scheduler job to perform file size update
SQL> Rem    jerrede     01/09/13 - Fix lrg 6762378 Invalid scheduler object
SQL> Rem    surman      12/10/12 - XbranchMerge surman_bug-12876907 from main
SQL> Rem    surman      11/14/12 - 12876907: Add ORACLE_SCRIPT
SQL> Rem    geadon      10/18/12 - ignore dbms_part.cleanup_gidx errors
SQL> Rem    jnunezg     08/29/12 - Dont create SCHEDULER$_LOG_DIR object at DB
SQL> Rem                           creation time
SQL> Rem    thbaby      04/30/12 - create scheduler jobs for cleanup
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    pxwong      03/20/11 - disable project 25225 and 25227
SQL> Rem    gravipat    12/05/11 - Create cdbview using CDB$VIEW function
SQL> Rem    geadon      09/20/11 - add pmo deferred global idx maintenance job
SQL> Rem    paestrad    07/20/11 - Changes for new job types and external job output
SQL> Rem    rgmani      07/13/11 - Scheduler DB consolidation related views
SQL> Rem    rramkiss    11/09/09 - change email_server_ssl to
SQL> Rem                           email_server_encryption
SQL> Rem    rramkiss    10/20/09 - add new sched attribs for e-mail encryption/auth
SQL> Rem    evoss       04/01/09 - add local pseudo destinations
SQL> Rem    rgmani      03/14/08 - Add file watch job
SQL> Rem    rramkiss    03/13/08 - add new e-mail scheduler attributes
SQL> Rem    rburns      07/29/06 - create scheduler objects
SQL> Rem    rburns      07/29/06 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> -- Create CDB views that are used by scheduler
SQL> execute CDBView.create_cdbview(false, 'SYS', 'JOB$_REDUCED', 'JOB$_CDB');

PL/SQL procedure successfully completed.

SQL> 
SQL> execute CDBView.create_cdbview(false, 'SYS', 'SCHEDULER$_JOB', 'SCHEDULER$_CDB_JOB');

PL/SQL procedure successfully completed.

SQL> 
SQL> execute CDBView.create_cdbview(false, 'SYS', 'SCHEDULER$_WINDOW', 'SCHEDULER$_CDB_WINDOW');

PL/SQL procedure successfully completed.

SQL> 
SQL> execute CDBView.create_cdbview(false, 'SYS', 'SCHEDULER$_LIGHTWEIGHT_JOB', 'SCHEDULER$_CDB_LIGHTWEIGHT_JOB');

PL/SQL procedure successfully completed.

SQL> 
SQL> execute CDBView.create_cdbview(false, 'SYS', 'SCHEDULER$_CLASS', 'SCHEDULER$_CDB_CLASS');

PL/SQL procedure successfully completed.

SQL> 
SQL> execute CDBView.create_cdbview(false, 'SYS', 'SCHEDULER$_PROGRAM', 'SCHEDULER$_CDB_PROGRAM');

PL/SQL procedure successfully completed.

SQL> 
SQL> execute CDBView.create_cdbview(false, 'SYS', 'SCHEDULER$_GLOBAL_ATTRIBUTE', 'SCHEDULER$_CDB_GLOBAL_ATTRIB');

PL/SQL procedure successfully completed.

SQL> 
SQL> execute CDBView.create_cdbview(false, 'SYS', 'SCHEDULER$_COMB_LW_JOB', 'SCHEDULER$_CDB_COMB_LW_JOB');

PL/SQL procedure successfully completed.

SQL> 
SQL> /* Scheduler admin role */
SQL> CREATE ROLE scheduler_admin
  2  /

Role created.

SQL> GRANT create job, create any job, execute any program, execute any class,
  2  manage scheduler, create external job, create credential, create any credential
  3  TO scheduler_admin WITH ADMIN OPTION
  4  /

Grant succeeded.

SQL> GRANT scheduler_admin TO dba
  2  /

Grant succeeded.

SQL> 
SQL> /* Create a default class and grant execute on it to PUBLIC */
SQL> DECLARE
  2    dummy varchar2(1);
  3  BEGIN
  4    SELECT null INTO dummy
  5    FROM sys.obj$ o
  6    WHERE o.name = 'DEFAULT_JOB_CLASS'
  7    AND o.owner# = 0;
  8  
  9  EXCEPTION
 10    WHEN NO_DATA_FOUND THEN
 11    BEGIN
 12      --dbms_output.put_line('DEFAUTL_JOB_CLASS is not found! Create it...');
 13      dbms_scheduler.create_job_class(job_class_name => 'DEFAULT_JOB_CLASS',
 14        comments=>'This is the default job class.');
 15      dbms_scheduler.set_attribute('DEFAULT_JOB_CLASS','SYSTEM',TRUE);
 16      EXECUTE IMMEDIATE 'grant execute on sys.default_job_class to public with grant option';
 17    EXCEPTION
 18      WHEN OTHERS THEN
 19        if sqlcode = -27477 then NULL;
 20        else raise;
 21        end if;
 22    END;
 23    WHEN OTHERS THEN RAISE;
 24  END;
 25  /

PL/SQL procedure successfully completed.

SQL> 
SQL> /* Create a default class and grant execute on it to PUBLIC */
SQL> begin
  2  dbms_scheduler.create_job_class(job_class_name => 'SCHED$_LOG_ON_ERRORS_CLASS',
  3   logging_level => DBMS_SCHEDULER.LOGGING_FAILED_RUNS,
  4   comments=>'This is the default job class if you want minimal logging.');
  5  dbms_scheduler.set_attribute('SCHED$_LOG_ON_ERRORS_CLASS','SYSTEM',TRUE);
  6  exception
  7    when others then
  8      if sqlcode = -27477 then NULL;
  9      else raise;
 10      end if;
 11  end;
 12  /

PL/SQL procedure successfully completed.

SQL> 
SQL> /* Create a default class for in-memory jobs and grant execute on it to PUBLIC */
SQL> /* This new default class logs the minimum in order to be the fastest, only failed
SQL>    runs are logged */
SQL> begin
  2  dbms_scheduler.create_job_class(job_class_name => 'DEFAULT_IN_MEMORY_JOB_CLASS',
  3   logging_level => DBMS_SCHEDULER.LOGGING_FAILED_RUNS,
  4   comments=>'This is the default job class for in-memory jobs.');
  5  dbms_scheduler.set_attribute('DEFAULT_IN_MEMORY_JOB_CLASS','SYSTEM',TRUE);
  6  exception
  7    when others then
  8      if sqlcode = -27477 then NULL;
  9      else raise;
 10      end if;
 11  end;
 12  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> /* Create a job class for jobs created through DBMS_JOB api and
SQL>    grant execute on it to PUBLIC */
SQL> begin
  2  dbms_scheduler.create_job_class(job_class_name => 'DBMS_JOB$',
  3   logging_level=>DBMS_SCHEDULER.LOGGING_OFF,
  4   comments=>'This is the job class for jobs created through DBMS_JOB.');
  5  dbms_scheduler.set_attribute('DBMS_JOB$','SYSTEM',TRUE);
  6  exception
  7    when others then
  8      if sqlcode = -27477 then NULL;
  9      else raise;
 10      end if;
 11  end;
 12  /

PL/SQL procedure successfully completed.

SQL> grant execute on sys.dbms_job$ to public with grant option
  2  /

Grant succeeded.

SQL> 
SQL> 
SQL> -- Only set the 'MAX_JOB_SLAVE_PROCESSES', 'LOG_HISTORY','DEFAULT_TIMEZONE'
SQL> -- global attributes to their default values only if they do not already
SQL> -- exist in the table.  This is to retain their value on upgrades.
SQL> 
SQL> DECLARE
  2    dummy varchar2(1);
  3  BEGIN
  4   SELECT null into dummy
  5   FROM sys.obj$ o, sys.scheduler$_global_attribute a
  6   WHERE o.obj# = a.obj# AND o.name = 'MAX_JOB_SLAVE_PROCESSES';
  7  
  8  EXCEPTION
  9    WHEN NO_DATA_FOUND THEN
 10    BEGIN
 11      dbms_scheduler.set_scheduler_attribute('MAX_JOB_SLAVE_PROCESSES', NULL);
 12    EXCEPTION
 13      WHEN OTHERS THEN
 14        if sqlcode = -955 then NULL;
 15        else raise;
 16        end if;
 17    END;
 18    WHEN OTHERS THEN RAISE;
 19  END;
 20  /

PL/SQL procedure successfully completed.

SQL> 
SQL> DECLARE
  2    dummy varchar2(1);
  3  BEGIN
  4   SELECT null into dummy
  5   FROM sys.obj$ o, sys.scheduler$_global_attribute a
  6   WHERE o.obj# = a.obj# AND o.name = 'LOG_HISTORY';
  7  
  8  EXCEPTION
  9    WHEN NO_DATA_FOUND THEN
 10    BEGIN
 11      dbms_scheduler.set_scheduler_attribute('LOG_HISTORY', 30);
 12    EXCEPTION
 13      WHEN OTHERS THEN
 14        if sqlcode = -955 then NULL;
 15        else raise;
 16        end if;
 17    END;
 18    WHEN OTHERS THEN RAISE;
 19  END;
 20  /

PL/SQL procedure successfully completed.

SQL> 
SQL> DECLARE
  2    dummy varchar2(1);
  3  BEGIN
  4   SELECT null into dummy
  5   FROM sys.obj$ o, sys.scheduler$_global_attribute a
  6   WHERE o.obj# = a.obj# AND o.name = 'DEFAULT_TIMEZONE';
  7  
  8  EXCEPTION
  9    WHEN NO_DATA_FOUND THEN
 10    BEGIN
 11      dbms_scheduler.set_scheduler_attribute('DEFAULT_TIMEZONE',
 12                              dbms_scheduler.get_sys_time_zone_name);
 13    EXCEPTION
 14      WHEN OTHERS THEN
 15        if sqlcode = -955 then NULL;
 16        else raise;
 17        end if;
 18    END;
 19    WHEN OTHERS THEN RAISE;
 20  END;
 21  /

PL/SQL procedure successfully completed.

SQL> 
SQL> DECLARE
  2    dummy varchar2(1);
  3  BEGIN
  4   SELECT null into dummy
  5   FROM sys.obj$ o, sys.scheduler$_global_attribute a
  6   WHERE o.obj# = a.obj# AND o.name = 'EMAIL_SERVER';
  7  EXCEPTION
  8    WHEN NO_DATA_FOUND THEN
  9    BEGIN
 10      dbms_scheduler.set_scheduler_attribute('EMAIL_SERVER', NULL);
 11    EXCEPTION
 12      WHEN OTHERS THEN
 13        if sqlcode = -955 then NULL; else raise; end if;
 14    END;
 15    WHEN OTHERS THEN RAISE;
 16  END;
 17  /

PL/SQL procedure successfully completed.

SQL> 
SQL> DECLARE
  2    dummy varchar2(1);
  3  BEGIN
  4   SELECT null into dummy
  5   FROM sys.obj$ o, sys.scheduler$_global_attribute a
  6   WHERE o.obj# = a.obj# AND o.name = 'EMAIL_SERVER_ENCRYPTION';
  7  EXCEPTION
  8    WHEN NO_DATA_FOUND THEN
  9    BEGIN
 10      dbms_scheduler.set_scheduler_attribute('EMAIL_SERVER_ENCRYPTION', 'NONE');
 11    EXCEPTION
 12      WHEN OTHERS THEN
 13        if sqlcode = -955 then NULL; else raise; end if;
 14    END;
 15    WHEN OTHERS THEN RAISE;
 16  END;
 17  /

PL/SQL procedure successfully completed.

SQL> 
SQL> DECLARE
  2    dummy varchar2(1);
  3  BEGIN
  4   SELECT null into dummy
  5   FROM sys.obj$ o, sys.scheduler$_global_attribute a
  6   WHERE o.obj# = a.obj# AND o.name = 'EMAIL_SERVER_CREDENTIAL';
  7  EXCEPTION
  8    WHEN NO_DATA_FOUND THEN
  9    BEGIN
 10      dbms_scheduler.set_scheduler_attribute('EMAIL_SERVER_CREDENTIAL', NULL);
 11    EXCEPTION
 12      WHEN OTHERS THEN
 13        if sqlcode = -955 then NULL; else raise; end if;
 14    END;
 15    WHEN OTHERS THEN RAISE;
 16  END;
 17  /

PL/SQL procedure successfully completed.

SQL> 
SQL> DECLARE
  2    dummy varchar2(1);
  3  BEGIN
  4   SELECT null into dummy
  5   FROM sys.obj$ o, sys.scheduler$_global_attribute a
  6   WHERE o.obj# = a.obj# AND o.name = 'EMAIL_SENDER';
  7  EXCEPTION
  8    WHEN NO_DATA_FOUND THEN
  9    BEGIN
 10      dbms_scheduler.set_scheduler_attribute('EMAIL_SENDER', NULL);
 11    EXCEPTION
 12      WHEN OTHERS THEN
 13        if sqlcode = -955 then NULL; else raise; end if;
 14    END;
 15    WHEN OTHERS THEN RAISE;
 16  END;
 17  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> --Create pseudo local external destination
SQL> BEGIN
  2  dbms_isched.create_agent_destination(
  3    destination_name => 'sched$_local_pseudo_agent',
  4    hostname         => 'pseudo_host',
  5    port             => '0',
  6    comments         => 'Place holder for synonym LOCAL dest');
  7  exception
  8    when others then
  9      if sqlcode = -27477 then NULL;
 10      else raise;
 11      end if;
 12  END;
 13  /

PL/SQL procedure successfully completed.

SQL> 
SQL> --Create pseudo local db destination
SQL> BEGIN
  2  dbms_scheduler.create_database_destination(
  3    destination_name  => 'sched$_local_pseudo_db',
  4    agent             => 'sched$_local_pseudo_agent',
  5    tns_name          => 'pseudo_inst',
  6    comments          => 'Place holder for synonym LOCAL_DB dest');
  7  exception
  8    when others then
  9      if sqlcode = -27477 then NULL;
 10      else raise;
 11      end if;
 12  END;
 13  /

PL/SQL procedure successfully completed.

SQL> 
SQL> --Create purge log program.
SQL> BEGIN
  2  dbms_scheduler.create_program(
  3    program_name=>'purge_log_prog',
  4    program_type=>'STORED_PROCEDURE',
  5    program_action=>'dbms_scheduler.auto_purge',
  6    number_of_arguments=>0,
  7    enabled=>TRUE,
  8    comments=>'purge log program');
  9  exception
 10    when others then
 11      if sqlcode = -27477 then NULL;
 12      else raise;
 13      end if;
 14  END;
 15  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create daily schedule.
SQL> BEGIN
  2  dbms_scheduler.create_schedule(
  3     schedule_name=>'DAILY_PURGE_SCHEDULE',
  4     repeat_interval=>'freq=daily;byhour=3;byminute=0;bysecond=0');
  5  exception
  6    when others then
  7      if sqlcode = -27477 then NULL;
  8      else raise;
  9      end if;
 10  END;
 11  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create purge log job
SQL> BEGIN
  2    sys.dbms_scheduler.create_job(
  3      job_name=>'PURGE_LOG',
  4      program_name=>'purge_log_prog',
  5      schedule_name=>'DAILY_PURGE_SCHEDULE',
  6      job_class=>'DEFAULT_JOB_CLASS',
  7      enabled=>TRUE,
  8      auto_drop=>FALSE,
  9      comments=>'purge log job');
 10    sys.dbms_scheduler.set_attribute('PURGE_LOG','FOLLOW_DEFAULT_TIMEZONE',TRUE);
 11  exception
 12    when others then
 13      if sqlcode = -27477 then NULL;
 14      else raise;
 15      end if;
 16  END;
 17  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create file watcher program
SQL> BEGIN
  2    dbms_scheduler.create_program(
  3      program_name =>'FILE_WATCHER_PROGRAM',
  4      program_type=>'STORED_PROCEDURE',
  5      program_action =>'dbms_ischedfw.file_watch_job',
  6      number_of_arguments => 0,
  7      enabled => TRUE,
  8      comments => 'File Watcher program');
  9  exception
 10    when others then
 11      if sqlcode = -27477 then NULL;
 12      else raise;
 13      end if;
 14  END;
 15  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create FileWatcher Schedule
SQL> BEGIN
  2    dbms_scheduler.create_schedule(
  3      schedule_name => 'FILE_WATCHER_SCHEDULE',
  4      repeat_interval => 'FREQ=MINUTELY;INTERVAL=10');
  5  exception
  6    when others then
  7      if sqlcode = -27477 then NULL;
  8      else raise;
  9      end if;
 10  END;
 11  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create file watcher job
SQL> BEGIN
  2    sys.dbms_scheduler.create_job(
  3      job_name=>'FILE_WATCHER',
  4      program_name=>'FILE_WATCHER_PROGRAM',
  5      schedule_name=>'FILE_WATCHER_SCHEDULE',
  6      job_class=>'SCHED$_LOG_ON_ERRORS_CLASS',
  7      enabled=>FALSE,
  8      auto_drop=>FALSE,
  9      comments=>'File watcher job');
 10  exception
 11    when others then
 12      if sqlcode = -27477 then NULL;
 13      else raise;
 14      end if;
 15  END;
 16  /

PL/SQL procedure successfully completed.

SQL> 
SQL> begin
  2    dbms_scheduler.set_scheduler_attribute('LAST_OBSERVED_EVENT', NULL);
  3  exception
  4    when others then
  5      if sqlcode = -955 then NULL;
  6      else raise;
  7      end if;
  8  end;
  9  /

PL/SQL procedure successfully completed.

SQL> 
SQL> begin
  2    dbms_scheduler.set_scheduler_attribute('EVENT_EXPIRY_TIME', NULL);
  3  exception
  4    when others then
  5      if sqlcode = -955 then NULL;
  6      else raise;
  7      end if;
  8  end;
  9  /

PL/SQL procedure successfully completed.

SQL> 
SQL> begin
  2    dbms_scheduler.set_scheduler_attribute('FILE_WATCHER_COUNT', '0');
  3  exception
  4    when others then
  5      if sqlcode = -955 then NULL;
  6      else raise;
  7      end if;
  8  end;
  9  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- create deferred global index maintenance schedule
SQL> BEGIN
  2    dbms_scheduler.create_schedule(
  3     schedule_name      => 'sys.pmo_deferred_gidx_maint_sched',
  4     repeat_interval    => 'FREQ=DAILY; BYHOUR=02; BYMINUTE=0; BYSECOND=0');
  5  
  6    EXCEPTION
  7      when others then
  8        if sqlcode = -27477 then NULL;
  9        else raise;
 10        end if;
 11  END;
 12  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- create deferred global index maintenance program
SQL> BEGIN
  2    BEGIN
  3      dbms_scheduler.disable('sys.pmo_deferred_gidx_maint', TRUE);
  4      dbms_scheduler.drop_program('sys.pmo_deferred_gidx_maint', TRUE);
  5  
  6      EXCEPTION
  7        when others then
  8          if sqlcode = -27476 then NULL;
  9          else raise;
 10          end if;
 11    END;
 12  
 13    dbms_scheduler.create_program(
 14      program_name        => 'sys.pmo_deferred_gidx_maint',
 15      program_type        => 'STORED_PROCEDURE',
 16      program_action      => 'dbms_part.cleanup_gidx_job',
 17      number_of_arguments => 2,
 18      enabled             => FALSE,
 19      comments
 20        => 'Oracle defined automatic index cleanup for partition maintenance '
 21        || 'operations with deferred global index maintenance ');
 22  
 23    DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT(
 24      program_name => 'sys.pmo_deferred_gidx_maint',
 25      argument_position => 1,
 26      argument_name => 'parallel',
 27      argument_type => 'VARCHAR2',
 28      default_value => NULL);
 29  
 30    DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT(
 31      program_name => 'sys.pmo_deferred_gidx_maint',
 32      argument_position => 2,
 33      argument_name => 'options',
 34      argument_type => 'VARCHAR2',
 35      default_value => NULL);
 36  
 37    SYS.DBMS_SCHEDULER.ENABLE('sys.pmo_deferred_gidx_maint');
 38  END;
 39  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- create deferred global index maintenance job
SQL> BEGIN
  2    dbms_scheduler.create_job(
  3      job_name           => 'sys.pmo_deferred_gidx_maint_job',
  4      program_name       => 'sys.pmo_deferred_gidx_maint',
  5      schedule_name      => 'sys.pmo_deferred_gidx_maint_sched',
  6      job_class          => 'SCHED$_LOG_ON_ERRORS_CLASS',
  7      enabled            => TRUE,
  8      auto_drop          => FALSE,
  9      comments
 10        => 'Oracle defined automatic index cleanup for partition maintenance '
 11        || 'operations with deferred global index maintenance ');
 12  
 13    EXCEPTION
 14      when others then
 15        if sqlcode = -27477 then
 16            SYS.DBMS_SCHEDULER.ENABLE('sys.pmo_deferred_gidx_maint_job');
 17        else
 18          raise;
 19        end if;
 20  END;
 21  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- create scheduler job to remove non-existent objects
SQL> declare
  2    exist   number;
  3    jobname varchar2(128);
  4  begin
  5    jobname := 'CLEANUP_NON_EXIST_OBJ';
  6  
  7    select count(*) into exist
  8    from   dba_scheduler_jobs
  9    where  job_name=jobname AND owner='SYS';
 10  
 11    if exist = 0 then
 12      dbms_scheduler.create_job(
 13               job_name   => jobname,
 14               job_type   => 'PLSQL_BLOCK',
 15               -- cleanup_task with task id KPDB_FUNC_CLNUP_NEXIST_OBJ
 16               job_action =>
 17                 'declare
 18                    myinterval number;
 19                  begin
 20                    myinterval := dbms_pdb.cleanup_task(1);
 21                    if myinterval <> 0 then
 22                      next_date := systimestamp +
 23                        numtodsinterval(myinterval, ''second'');
 24                    end if;
 25                  end;',
 26               start_date => systimestamp + numtodsinterval(120, 'second'),
 27               repeat_interval => 'FREQ = HOURLY; INTERVAL = 12',
 28               job_class => 'SCHED$_LOG_ON_ERRORS_CLASS',
 29               enabled => TRUE,
 30               comments => 'Cleanup Non Existent Objects in obj$');
 31    end if;
 32  end;
 33  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- create scheduler job to perform online index build cleanup
SQL> declare
  2    exist   number;
  3    jobname varchar2(128);
  4  begin
  5    jobname := 'CLEANUP_ONLINE_IND_BUILD';
  6  
  7    select count(*) into exist
  8    from   dba_scheduler_jobs
  9    where  job_name=jobname AND owner='SYS';
 10  
 11    if exist = 0 then
 12      dbms_scheduler.create_job(
 13               job_name   => jobname,
 14               job_type   => 'PLSQL_BLOCK',
 15               -- cleanup_task with task id KPDB_FUNC_CLNUP_ONLINE_IND
 16               job_action =>
 17                 'declare
 18                    myinterval number;
 19                  begin
 20                    myinterval := dbms_pdb.cleanup_task(2);
 21                    if myinterval <> 0 then
 22                      next_date := systimestamp +
 23                        numtodsinterval(myinterval, ''second'');
 24                    end if;
 25                  end;',
 26               start_date => systimestamp + numtodsinterval(130, 'second'),
 27               repeat_interval => 'FREQ = HOURLY; INTERVAL = 1',
 28               job_class => 'SCHED$_LOG_ON_ERRORS_CLASS',
 29               enabled => TRUE,
 30               comments => 'Cleanup Online Index Build');
 31    end if;
 32  end;
 33  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- create scheduler job to perform tab$ and tabpart$ cleanup
SQL> declare
  2    exist   number;
  3    jobname varchar2(128);
  4  begin
  5    jobname := 'CLEANUP_TAB_IOT_PMO';
  6  
  7    select count(*) into exist
  8    from   dba_scheduler_jobs
  9    where  job_name=jobname AND owner='SYS';
 10  
 11    if exist = 0 then
 12      dbms_scheduler.create_job(
 13               job_name   => jobname,
 14               job_type   => 'PLSQL_BLOCK',
 15               -- cleanup_task with task id KPDB_FUNC_CLNUP_TAB
 16               job_action =>
 17                 'declare
 18                    myinterval number;
 19                  begin
 20                    myinterval := dbms_pdb.cleanup_task(3);
 21                    if myinterval <> 0 then
 22                      next_date := systimestamp +
 23                        numtodsinterval(myinterval, ''second'');
 24                    end if;
 25                  end;',
 26               start_date => systimestamp + numtodsinterval(140, 'second'),
 27               repeat_interval => 'FREQ = HOURLY; INTERVAL = 1',
 28               job_class => 'SCHED$_LOG_ON_ERRORS_CLASS',
 29               enabled => TRUE,
 30               comments => 'Cleanup Tables after IOT PMO');
 31    end if;
 32  end;
 33  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- create scheduler job to cleanup transient types
SQL> declare
  2    exist   number;
  3    jobname varchar2(128);
  4  begin
  5    jobname := 'CLEANUP_TRANSIENT_TYPE';
  6  
  7    select count(*) into exist
  8    from   dba_scheduler_jobs
  9    where  job_name=jobname AND owner='SYS';
 10  
 11    if exist = 0 then
 12      dbms_scheduler.create_job(
 13               job_name   => jobname,
 14               job_type   => 'PLSQL_BLOCK',
 15               -- cleanup_task with task id KPDB_FUNC_CLNUP_TRANS_TYP
 16               -- Bug 23039033: skip app object check by setting parameter
 17               -- Bug 25832935: move fix of 23039033 to ICD of cleanup_task
 18               job_action =>
 19                 'declare
 20                    myinterval number;
 21                  begin
 22                    myinterval := dbms_pdb.cleanup_task(4);
 23                    if myinterval <> 0 then
 24                      next_date := systimestamp +
 25                        numtodsinterval(myinterval, ''second'');
 26                    end if;
 27                  end;',
 28               start_date => systimestamp + numtodsinterval(150, 'second'),
 29               repeat_interval => 'FREQ = HOURLY; INTERVAL = 2',
 30               job_class => 'SCHED$_LOG_ON_ERRORS_CLASS',
 31               enabled => TRUE,
 32               comments => 'Cleanup Transient Types');
 33    end if;
 34  end;
 35  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- create scheduler job to cleanup cursor transient packages
SQL> declare
  2    exist   number;
  3    jobname varchar2(128);
  4  begin
  5    jobname := 'CLEANUP_TRANSIENT_PKG';
  6  
  7    select count(*) into exist
  8    from   dba_scheduler_jobs
  9    where  job_name=jobname AND owner='SYS';
 10  
 11    if exist = 0 then
 12      dbms_scheduler.create_job(
 13               job_name   => jobname,
 14               job_type   => 'PLSQL_BLOCK',
 15               -- cleanup_task with task id KPDB_FUNC_CLNUP_TRANS_PKG
 16               -- Bug 23039033: skip app object check by setting parameter
 17               -- Bug 25832935: move fix of 23039033 to ICD of cleanup_task
 18               job_action =>
 19                 'declare
 20                    myinterval number;
 21                  begin
 22                    myinterval := dbms_pdb.cleanup_task(5);
 23                    if myinterval <> 0 then
 24                      next_date := systimestamp +
 25                        numtodsinterval(myinterval, ''second'');
 26                    end if;
 27                  end;',
 28               start_date => systimestamp + numtodsinterval(160, 'second'),
 29               repeat_interval => 'FREQ = HOURLY; INTERVAL = 2',
 30               job_class => 'SCHED$_LOG_ON_ERRORS_CLASS',
 31               enabled => TRUE,
 32               comments => 'Cleanup Transient Packages');
 33    end if;
 34  end;
 35  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- create scheduler job to perform online PMO cleanup
SQL> declare
  2    exist   number;
  3    jobname varchar2(128);
  4  begin
  5    jobname := 'CLEANUP_ONLINE_PMO';
  6  
  7    select count(*) into exist
  8    from   dba_scheduler_jobs
  9    where  job_name=jobname AND owner='SYS';
 10  
 11    if exist = 0 then
 12      dbms_scheduler.create_job(
 13               job_name   => jobname,
 14               job_type   => 'PLSQL_BLOCK',
 15               -- cleanup_task with task id KPDB_FUNC_ONLINE_PMOP
 16               -- Bug 23030152: skip app object check by setting parameter
 17               -- Bug 25832935: move fix of 23030152 to ICD of cleanup_task
 18               job_action =>
 19                 'declare
 20                    myinterval number;
 21                  begin
 22                    myinterval := dbms_pdb.cleanup_task(6);
 23                    if myinterval <> 0 then
 24                      next_date := systimestamp +
 25                        numtodsinterval(myinterval, ''second'');
 26                    end if;
 27                  end;',
 28               start_date => systimestamp + numtodsinterval(170, 'second'),
 29               repeat_interval => 'FREQ = HOURLY; INTERVAL = 1',
 30               job_class => 'SCHED$_LOG_ON_ERRORS_CLASS',
 31               enabled => TRUE,
 32               comments => 'Cleanup after Failed PMO');
 33    end if;
 34  end;
 35  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> -- create scheduler job to perform file size update
SQL> declare
  2    exist   number;
  3    jobname varchar2(128);
  4  begin
  5    jobname := 'FILE_SIZE_UPD';
  6  
  7    select count(*) into exist
  8    from   dba_scheduler_jobs
  9    where  job_name=jobname AND owner='SYS';
 10  
 11    if exist = 0 then
 12      dbms_scheduler.create_job(
 13               job_name   => jobname,
 14               job_type   => 'PLSQL_BLOCK',
 15               -- cleanup_task with task id KPDB_FUNC_FILE_SIZE_UPD
 16               job_action =>
 17                 'declare
 18                    myinterval number;
 19                  begin
 20                    myinterval := dbms_pdb.cleanup_task(7);
 21                    if myinterval <> 0 then
 22                      next_date := systimestamp +
 23                        numtodsinterval(myinterval, ''second'');
 24                    end if;
 25                  end;',
 26               start_date => systimestamp + numtodsinterval(170, 'second'),
 27               repeat_interval => 'FREQ = MINUTELY; INTERVAL = 5',
 28               job_class => 'SCHED$_LOG_ON_ERRORS_CLASS',
 29               enabled => TRUE,
 30               comments => 'Update file size periodically');
 31    end if;
 32  end;
 33  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- ***************************************************************************
SQL> -- This has to be the last thing executed in catsch.sql
SQL> -- Do not add anything after this
SQL> -- ***************************************************************************
SQL> 
SQL> begin
  2    dbms_scheduler.set_scheduler_attribute('CURRENT_OPEN_WINDOW', NULL);
  3  exception
  4    when others then
  5      if sqlcode = -955 then NULL;
  6      else raise;
  7      end if;
  8  end;
  9  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> -- Scheduler calls to AQ packages
SQL> @@catscqa.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catscqa.sql /st_rdbms_19/1 2018/09/24 15:39:40 alestrel Exp $
SQL> Rem
SQL> Rem catscqa.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catscqa.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catscqa.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catscqa.sql
SQL> Rem SQL_PHASE: CATSCQA
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpcnfg.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    alestrel    09/18/18 - Bug 27692204. Grant read on file watchers aq
SQL> Rem                           table
SQL> Rem    raeburns    02/29/16 - Bug 22820096: remove ALTER TABLE UPGRADE
SQL> Rem    alestrel    01/13/16 - bug 22119906 : upgrade scheduler _remdb_jobqtab
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    ssubrama    01/11/13 - lrg 8755441 remove add_buffer call to scheduler
SQL> Rem                           queue
SQL> Rem    ssubrama    01/07/13 - lrg 8553081 add buffer is not in upgrade
SQL> Rem    maba        10/15/12 - fixed bug 14615619 to validate
SQL> Rem                           scheduler$_event_queue
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    desingh     05/10/11 - remove secondary index on history IOT
SQL> Rem    nbhatt      06/04/10 - create secondary index on history iot
SQL> Rem    rgmani      02/26/08 - File watch
SQL> Rem    jawilson    07/19/06 - Script containing scheduler AQ calls
SQL> Rem    jawilson    07/19/06 - Script containing scheduler AQ calls
SQL> Rem    jawilson    07/19/06 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> /* moved down to after reloading dbms_job packages */
SQL> begin
  2    dbms_aqadm.create_queue_table
  3      (queue_table => 'scheduler$_event_qtab',
  4       queue_payload_type => 'sys.scheduler$_event_info',
  5       multiple_consumers => true,
  6       comment => 'Scheduler event queue table',
  7       secure => true);
  8  exception
  9    when others then
 10      if sqlcode = -24001 then NULL;
 11      else raise;
 12      end if;
 13  end;
 14  /

PL/SQL procedure successfully completed.

SQL> 
SQL> begin
  2    dbms_aqadm.create_queue
  3      (queue_name => 'scheduler$_event_queue',
  4       queue_table => 'scheduler$_event_qtab',
  5       retention_time => 3600,
  6       comment => 'Scheduler event queue');
  7  exception
  8    when others then
  9      if sqlcode = -24006 then NULL;
 10      else raise;
 11      end if;
 12  end;
 13  /

PL/SQL procedure successfully completed.

SQL> 
SQL> begin
  2    dbms_aqadm.start_queue(queue_name => 'scheduler$_event_queue');
  3  exception
  4    when others then
  5      if sqlcode = -04063 then
  6        dbms_system.ksdwrt(1, 'Error-04063 scheduler$_event_queue will be re-validated');
  7      else
  8        raise;
  9      end if;
 10  end;
 11  /

PL/SQL procedure successfully completed.

SQL> 
SQL> begin
  2    dbms_aqadm.grant_queue_privilege('DEQUEUE', 'SYS.SCHEDULER$_EVENT_QUEUE',
  3                                     'PUBLIC');
  4  end;
  5  /

PL/SQL procedure successfully completed.

SQL> 
SQL> begin
  2    dbms_aqadm.create_queue_table
  3      (queue_table => 'scheduler$_remdb_jobqtab',
  4       queue_payload_type => 'sys.scheduler$_remote_db_job_info',
  5       multiple_consumers => true,
  6       storage_clause => 'nested table user_data.arguments store as ' ||
  7                         'scheduler$_rjq_ant',
  8       comment => 'Scheduler remote db job queue table',
  9       secure => false);
 10  exception
 11    when others then
 12      if sqlcode = -24001 then NULL;
 13      else raise;
 14      end if;
 15  end;
 16  /

PL/SQL procedure successfully completed.

SQL> 
SQL> begin
  2    dbms_aqadm.create_queue
  3      (queue_name => 'scheduler$_remdb_jobq',
  4       queue_table => 'scheduler$_remdb_jobqtab',
  5       comment => 'Scheduler remote db job queue');
  6  exception
  7    when others then
  8      if sqlcode = -24006 then NULL;
  9      else raise;
 10      end if;
 11  end;
 12  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> begin
  2    dbms_aqadm.start_queue(queue_name => 'scheduler$_remdb_jobq');
  3  end;
  4  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Have to Call Internal AQ package because calling dbms_aqadm breaks
SQL> -- because of dependency on dbms_datapump has not been loaded. Since
SQL> -- this is an internal API call we do it from our internal package.
SQL> begin
  2    dbms_aqadm_sys.create_aq_agent(agent_name => 'SCHEDULER$_EVENT_AGENT',
  3                                   name_canonicalized => FALSE);
  4  exception
  5    when others then
  6      if sqlcode = -24089 then null;
  7      else raise;
  8      end if;
  9  end;
 10  /

PL/SQL procedure successfully completed.

SQL> 
SQL> begin
  2    dbms_aqadm_sys.enable_db_access('SCHEDULER$_EVENT_AGENT', 'SYS', FALSE);
  3  end;
  4  /

PL/SQL procedure successfully completed.

SQL> 
SQL> begin
  2    dbms_aqadm_sys.create_aq_agent(agent_name => 'SCHEDULER$_REMDB_AGENT',
  3                                   name_canonicalized => FALSE);
  4  exception
  5    when others then
  6      if sqlcode = -24089 then null;
  7      else raise;
  8      end if;
  9  end;
 10  /

PL/SQL procedure successfully completed.

SQL> 
SQL> begin
  2    dbms_aqadm_sys.enable_db_access('SCHEDULER$_REMDB_AGENT', 'SYS', FALSE);
  3  end;
  4  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- File watcher queues
SQL> 
SQL> begin
  2    dbms_aqadm.create_queue_table
  3      (queue_table => 'scheduler_filewatcher_qt',
  4       queue_payload_type => 'sys.scheduler_filewatcher_result',
  5       multiple_consumers => true,
  6       storage_clause => 'nested table user_data.matching_requests store as ' ||
  7                         'scheduler$_fwq_ant',
  8       comment => 'Scheduler file watcher result queue table',
  9       secure => true);
 10  exception
 11    when others then
 12      if sqlcode = -24001 then NULL;
 13      else raise;
 14      end if;
 15  end;
 16  /

PL/SQL procedure successfully completed.

SQL> 
SQL> begin
  2    dbms_aqadm.create_queue
  3      (queue_name => 'scheduler_filewatcher_q',
  4       queue_table => 'scheduler_filewatcher_qt',
  5       comment => 'Scheduler file watcher results queue');
  6  exception
  7    when others then
  8      if sqlcode = -24006 then NULL;
  9      else raise;
 10      end if;
 11  end;
 12  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> begin
  2    dbms_aqadm.start_queue(queue_name => 'scheduler_filewatcher_q');
  3  end;
  4  /

PL/SQL procedure successfully completed.

SQL> 
SQL> begin
  2    dbms_aqadm.grant_queue_privilege('DEQUEUE', 'SYS.SCHEDULER_FILEWATCHER_Q',
  3                                     'PUBLIC');
  4  end;
  5  /

PL/SQL procedure successfully completed.

SQL> 
SQL> grant read on scheduler_filewatcher_qt to public;

Grant succeeded.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> -- Svrman calls to AQ and Scheduler
SQL> @@catmwin.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catmwin.sql /main/25 2014/02/20 12:45:49 surman Exp $
SQL> Rem
SQL> Rem catmwin.sql
SQL> Rem
SQL> Rem Copyright (c) 2003, 2013, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catmwin.sql - Catalog script for Maintenance WINdow
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Defines maintenance window and stats collection job.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      Must be run when connected as SYSDBA
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catmwin.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catmwin.sql
SQL> Rem SQL_PHASE: CATMWIN
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpcnfg.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    jomcdon     10/19/11 - get appropriate maintenance plan via rmin API
SQL> Rem    jomcdon     09/09/11 - handle non-existence of maintenance plan on root
SQL> Rem    mjstewar    01/04/08 - Move upgrade changes to a1101000.sql
SQL> Rem    mjstewar    11/09/07 - disable HM_CREATE_OFFLINE_DICTIONARY
SQL> Rem    husun       09/12/07 - bug-6412947 - add timeout parameter to
SQL> Rem                           DRA_REEVALUATE_OPEN_FAILURES
SQL> Rem    husun       02/12/07 - bug-5878597 - add dbms_ir.reevaluateopenfailures
SQL> Rem                           to maintence window
SQL> Rem    ilistvin    11/08/06 - move alert queue creation here
SQL> Rem    ilistvin    11/03/06 - do not diable old windows if they exist
SQL> Rem    siroych     10/10/06 - add job for offline dictionary creation
SQL> Rem    ilistvin    08/01/06 - create WEEKEND and WEEKNIGHT windows
SQL> Rem    ilistvin    07/13/06 - set resource plan to DEFAULT_MAINTENANCE_PLAN
SQL> Rem    ilistvin    06/07/06 - set resource plan to NULL
SQL> Rem    ilistvin    04/04/06 - changes for AUTOTASK
SQL> Rem    mtakahar    02/23/05 - #(4175406) change gather_stats_* comments
SQL> Rem    mtakahar    09/15/04 - gather_stats_job termination callback
SQL> Rem    ilistvin    07/14/04 - move set_attribute outside exception block
SQL> Rem    smuthuli    04/26/04 - auto space advisor
SQL> Rem    jxchen      12/19/03 - Set "restartable" attribute for GATHER_STATS_JOB
SQL> Rem    schakkap    12/05/03 - stop auto stats collection at end of mgmt window
SQL> Rem    evoss       12/02/03 -
> Rem    evoss       11/17/03 - add follow_default_timezone attr for windows and
SQL> Rem    rramkiss    06/16/03 - flag system-managed objects
SQL> Rem    rramkiss    06/16/03 - suppress already_exists errors
SQL> Rem    jxchen      06/12/03 - Add job definition
SQL> Rem    jxchen      06/04/03 - jxchen_mwin_main
SQL> Rem    jxchen      05/12/03 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> DECLARE
  2   MAINTENANCE_PLAN VARCHAR2(30);
  3  BEGIN
  4  
  5    -- Get the appropriate maintenance plan name from resource manager.
  6    MAINTENANCE_PLAN := dbms_rmin_sys.rm$_get_maintenance_plan();
  7  
  8    --
  9    -- Create MONDAY_WINDOW window.
 10    -- Monday window is 10pm Monday to 2am Tuesday
 11    --
 12    BEGIN
 13       BEGIN
 14       dbms_scheduler.create_window(
 15          window_name=>'MONDAY_WINDOW',
 16          resource_plan=>MAINTENANCE_PLAN,
 17          repeat_interval=>'freq=daily;byday=MON;byhour=22;' ||
 18                        'byminute=0; bysecond=0',
 19          duration=>interval '4' hour,
 20          comments=>'Monday window for maintenance tasks');
 21       EXCEPTION
 22          when others then
 23            if sqlcode = -27477 then NULL;
 24            else raise;
 25            end if;
 26       END;
 27       dbms_scheduler.set_attribute('MONDAY_WINDOW','SYSTEM',TRUE);
 28       dbms_scheduler.set_attribute('MONDAY_WINDOW',
 29                                     'FOLLOW_DEFAULT_TIMEZONE',TRUE);
 30    EXCEPTION
 31          when others then
 32            if sqlcode = -27477 then NULL;
 33            else raise;
 34            end if;
 35    END;
 36  
 37    --
 38    -- Create TUESDAY_WINDOW window.
 39    -- Tuesday window is 10pm Tuesday to 2am Wednesday
 40    --
 41    BEGIN
 42       BEGIN
 43       dbms_scheduler.create_window(
 44          window_name=>'TUESDAY_WINDOW',
 45          resource_plan=>MAINTENANCE_PLAN,
 46          repeat_interval=>'freq=daily;byday=TUE;byhour=22;' ||
 47                        'byminute=0; bysecond=0',
 48          duration=>interval '4' hour,
 49          comments=>'Tuesday window for maintenance tasks');
 50       EXCEPTION
 51          when others then
 52            if sqlcode = -27477 then NULL;
 53            else raise;
 54            end if;
 55       END;
 56       dbms_scheduler.set_attribute('TUESDAY_WINDOW','SYSTEM',TRUE);
 57       dbms_scheduler.set_attribute('TUESDAY_WINDOW',
 58                                     'FOLLOW_DEFAULT_TIMEZONE',TRUE);
 59    EXCEPTION
 60          when others then
 61            if sqlcode = -27477 then NULL;
 62            else raise;
 63            end if;
 64    END;
 65  
 66    --
 67    -- Create WEDNESDAY_WINDOW window.
 68    -- Wednesday window is 10pm Wednesday to 2am Thursday
 69    --
 70    BEGIN
 71       BEGIN
 72       dbms_scheduler.create_window(
 73          window_name=>'WEDNESDAY_WINDOW',
 74          resource_plan=>MAINTENANCE_PLAN,
 75          repeat_interval=>'freq=daily;byday=WED;byhour=22;' ||
 76                        'byminute=0; bysecond=0',
 77          duration=>interval '4' hour,
 78          comments=>'Wednesday window for maintenance tasks');
 79       EXCEPTION
 80          when others then
 81            if sqlcode = -27477 then NULL;
 82            else raise;
 83            end if;
 84       END;
 85       dbms_scheduler.set_attribute('WEDNESDAY_WINDOW','SYSTEM',TRUE);
 86       dbms_scheduler.set_attribute('WEDNESDAY_WINDOW',
 87                                     'FOLLOW_DEFAULT_TIMEZONE',TRUE);
 88    EXCEPTION
 89          when others then
 90            if sqlcode = -27477 then NULL;
 91            else raise;
 92            end if;
 93    END;
 94  
 95    --
 96    -- Create THURSDAY_WINDOW window.
 97    -- Thursday window is 10pm Thursday to 2am Friday
 98    --
 99    BEGIN
100       BEGIN
101       dbms_scheduler.create_window(
102          window_name=>'THURSDAY_WINDOW',
103          resource_plan=>MAINTENANCE_PLAN,
104          repeat_interval=>'freq=daily;byday=THU;byhour=22;' ||
105                        'byminute=0; bysecond=0',
106          duration=>interval '4' hour,
107          comments=>'Thursday window for maintenance tasks');
108       EXCEPTION
109          when others then
110            if sqlcode = -27477 then NULL;
111            else raise;
112            end if;
113       END;
114       dbms_scheduler.set_attribute('THURSDAY_WINDOW','SYSTEM',TRUE);
115       dbms_scheduler.set_attribute('THURSDAY_WINDOW',
116                                     'FOLLOW_DEFAULT_TIMEZONE',TRUE);
117    EXCEPTION
118          when others then
119            if sqlcode = -27477 then NULL;
120            else raise;
121            end if;
122    END;
123  
124    --
125    -- Create FRIDAY_WINDOW window.
126    -- Friday window is 10pm Friday to 2am Saturday
127    --
128    BEGIN
129       BEGIN
130       dbms_scheduler.create_window(
131          window_name=>'FRIDAY_WINDOW',
132          resource_plan=>MAINTENANCE_PLAN,
133          repeat_interval=>'freq=daily;byday=FRI;byhour=22;' ||
134                        'byminute=0; bysecond=0',
135          duration=>interval '4' hour,
136          comments=>'Friday window for maintenance tasks');
137       EXCEPTION
138          when others then
139            if sqlcode = -27477 then NULL;
140            else raise;
141            end if;
142       END;
143       dbms_scheduler.set_attribute('FRIDAY_WINDOW','SYSTEM',TRUE);
144       dbms_scheduler.set_attribute('FRIDAY_WINDOW',
145                                     'FOLLOW_DEFAULT_TIMEZONE',TRUE);
146    EXCEPTION
147          when others then
148            if sqlcode = -27477 then NULL;
149            else raise;
150            end if;
151    END;
152  
153    --
154    -- Create SATURDAY_WINDOW window.
155    -- Friday window is 6 am Saturday to 2am Sunday
156    --
157    BEGIN
158       BEGIN
159       dbms_scheduler.create_window(
160          window_name=>'SATURDAY_WINDOW',
161          resource_plan=>MAINTENANCE_PLAN,
162          repeat_interval=>'freq=daily;byday=SAT;byhour=6;' ||
163                        'byminute=0; bysecond=0',
164          duration=>interval '20' hour,
165          comments=>'Saturday window for maintenance tasks');
166       EXCEPTION
167          when others then
168            if sqlcode = -27477 then NULL;
169            else raise;
170            end if;
171       END;
172       dbms_scheduler.set_attribute('SATURDAY_WINDOW','SYSTEM',TRUE);
173       dbms_scheduler.set_attribute('SATURDAY_WINDOW',
174                                     'FOLLOW_DEFAULT_TIMEZONE',TRUE);
175    EXCEPTION
176          when others then
177            if sqlcode = -27477 then NULL;
178            else raise;
179            end if;
180    END;
181  
182    --
183    -- Create SUNDAY_WINDOW window.
184    -- Friday window is 6 am Sunday to 2am Monday
185    --
186    BEGIN
187       BEGIN
188       dbms_scheduler.create_window(
189          window_name=>'SUNDAY_WINDOW',
190          resource_plan=>MAINTENANCE_PLAN,
191          repeat_interval=>'freq=daily;byday=SUN;byhour=6;' ||
192                        'byminute=0; bysecond=0',
193          duration=>interval '20' hour,
194          comments=>'Sunday window for maintenance tasks');
195       EXCEPTION
196          when others then
197            if sqlcode = -27477 then NULL;
198            else raise;
199            end if;
200       END;
201       dbms_scheduler.set_attribute('SUNDAY_WINDOW','SYSTEM',TRUE);
202       dbms_scheduler.set_attribute('SUNDAY_WINDOW',
203                                     'FOLLOW_DEFAULT_TIMEZONE',TRUE);
204    EXCEPTION
205          when others then
206            if sqlcode = -27477 then NULL;
207            else raise;
208            end if;
209    END;
210  END;
211  /

PL/SQL procedure successfully completed.

SQL> 
SQL> BEGIN
  2   --
  3   -- Set up scheduler objects for Automated Maintenance Tasks.
  4   -- This includes 'MAINTENANCE_WINDOW_GROUP'
  5   --
  6   dbms_autotask_prvt.setup(0);
  7   --
  8   -- Add new windows to the 'MAINTENANCE_WINDOW_GROUP'.
  9   --
 10     BEGIN
 11     dbms_scheduler.add_window_group_member('MAINTENANCE_WINDOW_GROUP',
 12                      'MONDAY_WINDOW');
 13     dbms_scheduler.add_window_group_member('MAINTENANCE_WINDOW_GROUP',
 14                      'TUESDAY_WINDOW');
 15     dbms_scheduler.add_window_group_member('MAINTENANCE_WINDOW_GROUP',
 16                      'WEDNESDAY_WINDOW');
 17     dbms_scheduler.add_window_group_member('MAINTENANCE_WINDOW_GROUP',
 18                      'THURSDAY_WINDOW');
 19     dbms_scheduler.add_window_group_member('MAINTENANCE_WINDOW_GROUP',
 20                      'FRIDAY_WINDOW');
 21     dbms_scheduler.add_window_group_member('MAINTENANCE_WINDOW_GROUP',
 22                      'SATURDAY_WINDOW');
 23     dbms_scheduler.add_window_group_member('MAINTENANCE_WINDOW_GROUP',
 24                      'SUNDAY_WINDOW');
 25     EXCEPTION
 26       when others then raise;
 27     END;
 28   --
 29   -- synchronize all AUTOTASK window groups with 'MAINTENANCE_WINDOW_GROUP'
 30   --
 31   dbms_autotask_prvt.setup(3);
 32  
 33  EXCEPTION
 34        when others then raise;
 35  END;
 36  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create gather stats program.
SQL> BEGIN
  2  dbms_scheduler.create_program(
  3    program_name=>'gather_stats_prog',
  4    program_type=>'STORED_PROCEDURE',
  5    program_action=>'dbms_stats.gather_database_stats_job_proc',
  6    number_of_arguments=>0,
  7    enabled=>TRUE,
  8    comments
  9        =>'Oracle defined automatic optimizer statistics collection program');
 10  EXCEPTION
 11    when others then
 12      if sqlcode = -27477 then NULL;
 13      else raise;
 14      end if;
 15  END;
 16  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create auto space advisor program.
SQL> BEGIN
  2  dbms_scheduler.create_program(
  3    program_name=>'auto_space_advisor_prog',
  4    program_type=>'STORED_PROCEDURE',
  5    program_action=>'dbms_space.auto_space_advisor_job_proc',
  6    number_of_arguments=>0,
  7    enabled=>TRUE,
  8    comments=>'auto space advisor maintenance program');
  9  EXCEPTION
 10    when others then
 11      if sqlcode = -27477 then NULL;
 12      else raise;
 13      end if;
 14  END;
 15  /

PL/SQL procedure successfully completed.

SQL> 
SQL> --Create autotask repository data ageing program
SQL> BEGIN
  2  dbms_scheduler.create_program(
  3    program_name=>'ora$age_autotask_data',
  4    program_type=>'STORED_PROCEDURE',
  5    program_action=>'dbms_autotask_prvt.age',
  6    number_of_arguments=>0,
  7    enabled=>TRUE,
  8    comments=>'deletes obsolete AUTOTASK repository data');
  9  exception
 10    when others then
 11      if sqlcode = -27477 then NULL;
 12      else raise;
 13      end if;
 14  END;
 15  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create autotask repository data ageing job
SQL> BEGIN
  2    sys.dbms_scheduler.create_job(
  3      job_name=>'ORA$AUTOTASK_CLEAN',
  4      program_name=>'ora$age_autotask_data',
  5      schedule_name=>'DAILY_PURGE_SCHEDULE',
  6      job_class=>'DEFAULT_JOB_CLASS',
  7      enabled=>TRUE,
  8      auto_drop=>FALSE,
  9      comments=>'Delete obsolete AUTOTASK repository data');
 10    sys.dbms_scheduler.set_attribute('ORA$AUTOTASK_CLEAN','FOLLOW_DEFAULT_TIMEZONE',TRUE);
 11  exception
 12    when others then
 13      if sqlcode = -27477 then NULL;
 14      else raise;
 15      end if;
 16  END;
 17  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create weeknight window (it is created so that import from 10.x works properly)
SQL> BEGIN
  2     dbms_scheduler.create_window(
  3        window_name=>'WEEKNIGHT_WINDOW',
  4        resource_plan=>NULL,
  5        repeat_interval=>'freq=daily;byday=MON,TUE,WED,THU,FRI;byhour=22;' ||
  6                      'byminute=0; bysecond=0',
  7        duration=>interval '480' minute,
  8        comments=>'Weeknight window - for compatibility only');
  9     dbms_scheduler.disable('WEEKNIGHT_WINDOW', TRUE);
 10     dbms_scheduler.set_attribute('WEEKNIGHT_WINDOW',
 11                                   'SYSTEM',TRUE);
 12     dbms_scheduler.set_attribute('WEEKNIGHT_WINDOW',
 13                                   'FOLLOW_DEFAULT_TIMEZONE',TRUE);
 14  EXCEPTION
 15        when others then
 16          if sqlcode = -27477 then NULL;
 17          else raise;
 18          end if;
 19  END;
 20  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create weekend window (it is created so that import from 10.x works properly)
SQL> BEGIN
  2      dbms_scheduler.create_window(
  3         window_name=>'WEEKEND_WINDOW',
  4         resource_plan=>NULL,
  5         repeat_interval=>'freq=daily;byday=SAT;byhour=0;byminute=0;bysecond=0',
  6         duration=>interval '2880' minute,
  7         comments=>'Weekend window - for compatibility only');
  8      dbms_scheduler.disable('WEEKEND_WINDOW', TRUE);
  9      dbms_scheduler.set_attribute('WEEKEND_WINDOW','SYSTEM',TRUE);
 10      dbms_scheduler.set_attribute('WEEKEND_WINDOW',
 11                                   'FOLLOW_DEFAULT_TIMEZONE',TRUE);
 12  EXCEPTION
 13        when others then
 14          if sqlcode = -27477 then NULL;
 15          else raise;
 16          end if;
 17  END;
 18  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create job for creation of offline dictionary for Database Repair Advisor
SQL> BEGIN
  2    sys.dbms_scheduler.create_job(
  3      job_name=>'HM_CREATE_OFFLINE_DICTIONARY',
  4      job_type=>'STORED_PROCEDURE',
  5      job_action=>'dbms_hm.create_offline_dictionary',
  6      schedule_name=>'MAINTENANCE_WINDOW_GROUP',
  7      job_class=>'DEFAULT_JOB_CLASS',
  8      enabled=>FALSE,
  9      auto_drop=>FALSE,
 10      comments=>'Create offline dictionary in ADR for DRA name translation');
 11  exception
 12    when others then
 13      if sqlcode = -27477 then NULL;
 14      else raise;
 15      end if;
 16  END;
 17  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create job for reevaluate open failures for Database Repair Advisor
SQL> BEGIN
  2    sys.dbms_scheduler.create_job(
  3      job_name=>'DRA_REEVALUATE_OPEN_FAILURES',
  4      job_type=>'STORED_PROCEDURE',
  5      job_action=>'dbms_ir.reevaluateopenfailures',
  6      number_of_arguments=>4,
  7      schedule_name=>'MAINTENANCE_WINDOW_GROUP',
  8      job_class=>'DEFAULT_JOB_CLASS',
  9      enabled=>FALSE,
 10      auto_drop=>FALSE,
 11      comments=>'Reevaluate open failures for DRA');
 12  exception
 13    when others then
 14      if sqlcode = -27477 then NULL;
 15      else raise;
 16      end if;
 17  END;
 18  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Set the parameters.
SQL> BEGIN
  2    -- In previous releases the job did not have any parameters.
  3    -- So, to handle the case where we're upgrading, set the
  4    -- 'number_of_arguments' attribute.  The job must be disabled
  5    -- to do this.
  6    sys.dbms_scheduler.disable('DRA_REEVALUATE_OPEN_FAILURES');
  7    sys.dbms_scheduler.set_attribute(
  8      name=> 'DRA_REEVALUATE_OPEN_FAILURES',
  9      attribute=> 'number_of_arguments',
 10      value=> 4);
 11    sys.dbms_scheduler.set_job_argument_value(
 12      job_name=> 'DRA_REEVALUATE_OPEN_FAILURES',
 13      argument_position=> 1,
 14      argument_value=> 'TRUE');
 15    sys.dbms_scheduler.set_job_argument_value(
 16      job_name=> 'DRA_REEVALUATE_OPEN_FAILURES',
 17      argument_position=> 2,
 18      argument_value=> 'TRUE');
 19    sys.dbms_scheduler.set_job_argument_value(
 20      job_name=> 'DRA_REEVALUATE_OPEN_FAILURES',
 21      argument_position=> 3,
 22      argument_value=> 'TRUE');
 23    -- Timeout of 15 minutes (900 seconds)
 24    sys.dbms_scheduler.set_job_argument_value(
 25      job_name=> 'DRA_REEVALUATE_OPEN_FAILURES',
 26      argument_position=> 4,
 27      argument_value=> '900');
 28    sys.dbms_scheduler.enable('DRA_REEVALUATE_OPEN_FAILURES');
 29  END;
 30  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create alert queue table and alert queue
SQL> BEGIN
  2     BEGIN
  3     dbms_aqadm.create_queue_table(
  4              queue_table => 'SYS.ALERT_QT',
  5              queue_payload_type => 'SYS.ALERT_TYPE',
  6              storage_clause => 'TABLESPACE "SYSAUX"',
  7              multiple_consumers => TRUE,
  8              comment => 'Server Generated Alert Queue Table',
  9              secure => TRUE);
 10     dbms_aqadm.create_queue(
 11              queue_name => 'SYS.ALERT_QUE',
 12              queue_table => 'SYS.ALERT_QT',
 13              comment => 'Server Generated Alert Queue');
 14     EXCEPTION
 15       when others then
 16         if sqlcode = -24001 then NULL;
 17         else raise;
 18         end if;
 19     END;
 20     dbms_aqadm.start_queue('SYS.ALERT_QUE', TRUE, TRUE);
 21     dbms_aqadm.start_queue('SYS.AQ$_ALERT_QT_E', FALSE, TRUE);
 22     commit;
 23  EXCEPTION
 24    when others then
 25       raise;
 26  END;
 27  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create an AQ agent to be used to enqueue alert messages
SQL> BEGIN
  2      DECLARE
  3        agent SYS.AQ$_AGENT;
  4      BEGIN
  5        agent := SYS.AQ$_AGENT('server_alert', NULL, NULL);
  6        dbms_aqadm.create_aq_agent('server_alert');
  7      EXCEPTION
  8        when others then
  9          if sqlcode = -24089 then NULL;
 10          else raise;
 11          end if;
 12      END;
 13      dbms_aqadm.enable_db_access('server_alert', 'SYS');
 14  EXCEPTION
 15    when others then raise;
 16  END;
 17  /

PL/SQL procedure successfully completed.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem on-disk versions of rman support
SQL> -- dependent on streams
SQL> @@catpplb.sql
SQL> Rem
SQL> Rem
SQL> Rem catpplb.sql
SQL> Rem
SQL> Rem Copyright (c) 2015, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catpplb.sql - Catalog Pre-PLugin Backup tables and views
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Catalog Pre-PLugin Backup tables and views that are necessary to
SQL> Rem      to restore pre-plugin backups of PDB.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/catpplb.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/catpplb.sql
SQL> Rem    SQL_PHASE: CATPPLB
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    SQL_CALLING_FILE: rdbms/admin/catpcnfg.sql
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    youngtak    04/03/18 - Bug 27502161: add DIFMOD to X$KCCDI
SQL> Rem    jingzhen    03/09/18 - bug 27669106: rename X$PDBHISTORY
SQL> Rem    molagapp    11/02/17 - RTI 20485278
SQL> Rem    jingzhen    10/30/17 - Bug 27099034 and 27358482: add missing columns
SQL> Rem                           and table definitions
SQL> Rem    molagapp    08/10/17 - Bug 26595855: rename con_id -> unplug_con_id
SQL> Rem    jingzhen    06/19/17 - RTI 20393192: add kccd2x_ced_scn to X$KCCDI2
SQL> Rem    molagapp    06/03/17 - add inst_id runtime column
SQL> Rem    jingzhen    04/26/17 - bug 25454856: add SYS.RPP$X$KCCPIC
SQL> Rem    molagapp    03/08/17 - bug-25666562
SQL> Rem    yuli        09/21/16 - bug 19798066: add more fields into x$kccpdb
SQL> Rem    jingzhen    07/05/16 - Add PDBCRCVBSCN in RPP and CDB_ROPP X$KCCPDB
SQL> Rem    molagapp    06/14/16 - bug 23007304
SQL> Rem    jingzhen    10/20/15 - Add the PDBLOCALUNDOSCN in RPP and CDB_ROPP
SQL> Rem    jingzhen    10/20/15 - bug 22074876: change the RAW rows back from
SQL> Rem                           VARCHAR2
SQL> Rem    molagapp    10/05/15 - bug-21651380
SQL> Rem    molagapp    06/25/15 - bug-21258967
SQL> Rem    molagapp    05/30/15 - bug-21132967
SQL> Rem    molagapp    05/05/15 - Create Job during installation
SQL> Rem    molagapp    03/11/15 - Project 47808 - Phase 2
SQL> Rem    molagapp    02/18/15 - skip partition if feature not enabled
SQL> Rem    molagapp    01/22/15 - Project 47808 - Restore from preplugin backup
SQL> Rem    molagapp    01/21/15 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> Rem
SQL> Rem SYS.RPPX$ tables content are populated while exporting backup meta-data.
SQL> Rem These are kept in SYSAUX tablespace of PDB because SYSTEM tablespace of
SQL> Rem PDB might be too much to hold its pre-plugin backups.
SQL> Rem
SQL> Rem SYS.ROPPX$ tables content are populated while importing backup meta-data.
SQL> Rem These are kept in SYSAUX tablespace of ROOT because SYSTEM tablepsace
SQL> Rem of ROOT might be too much to hold all PDB pre-plugin backups.
SQL> Rem
SQL> Rem From 18.1, rpp$ and ropp$ contains meta-columns that contain
SQL> Rem pseudo-controlfile-only information. Meta-columns do not exist in real
SQL> Rem controlfile and always locate at the beginning of the rpp$'s and ropp$'s
SQL> Rem New columns are always appended to the end of the tables.
SQL> 
SQL> Rem X$KCCDI pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCDI(
  2    INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,DICTS                         VARCHAR2(20)
  6    ,DIDBN                         VARCHAR2(9)
  7    ,DIRDB                         NUMBER
  8    ,DICCT                         VARCHAR2(20)
  9    ,DIFLG                         NUMBER
 10    ,DIIRS                         VARCHAR2(20)
 11    ,DIRLS                         VARCHAR2(20)
 12    ,DIRLC                         VARCHAR2(20)
 13    ,DIRLC_I                       NUMBER
 14    ,DIPRS                         VARCHAR2(20)
 15    ,DIPRC                         VARCHAR2(20)
 16    ,DIPRC_I                       NUMBER
 17    ,DIRDC                         NUMBER
 18    ,DINDF                         NUMBER
 19    ,DINTF                         NUMBER
 20    ,DINOF                         NUMBER
 21    ,DICPT                         NUMBER
 22    ,DISCN                         VARCHAR2(20)
 23    ,DINET                         NUMBER
 24    ,DINOT                         NUMBER
 25    ,DIOTH                         NUMBER
 26    ,DIOTT                         NUMBER
 27    ,DIETB                         RAW(132)
 28    ,DIMLM                         NUMBER
 29    ,DIMDM                         NUMBER
 30    ,DIARH                         NUMBER
 31    ,DIART                         NUMBER
 32    ,DIPRT                         NUMBER
 33    ,DIFAS                         VARCHAR2(20)
 34    ,DICKP_SCN                     VARCHAR2(20)
 35    ,DICKP_TIM                     VARCHAR2(20)
 36    ,DICSQ                         NUMBER
 37    ,DIDBI                         NUMBER
 38    ,DISSC_SCN                     VARCHAR2(20)
 39    ,DISSC_TIM                     VARCHAR2(20)
 40    ,DISFP                         NUMBER
 41    ,DIBSC                         NUMBER
 42    ,DIPOFB                        NUMBER
 43    ,DIPNFB                        NUMBER
 44    ,DICOFB                        NUMBER
 45    ,DICNFB                        NUMBER
 46    ,DIVTS                         VARCHAR2(20)
 47    ,DICID                         NUMBER
 48    ,DIDOR                         NUMBER
 49    ,DISLH                         NUMBER
 50    ,DISLT                         NUMBER
 51    ,DIRAE                         NUMBER
 52    ,DIACID                        NUMBER
 53    ,DIARS                         VARCHAR2(20)
 54    ,DISOS                         NUMBER
 55    ,DIDGD                         NUMBER
 56    ,DIMLA                         NUMBER
 57    ,DIPDB                         NUMBER
 58    ,DIFL2                         NUMBER
 59    ,DIPLID                        NUMBER
 60    ,DIPLN                         VARCHAR2(101)
 61    ,DICUR_SCN                     VARCHAR2(20)
 62    ,DIDBUN                        VARCHAR2(30)
 63    ,DIFSTS                        NUMBER
 64    ,DIFOPR                        NUMBER
 65    ,DIFTHS                        NUMBER
 66    ,DIFTGT                        VARCHAR2(30)
 67    ,DIFOBS                        VARCHAR2(512)
 68    ,DIDBOP                        NUMBER
 69    ,DIBFN                         NUMBER
 70    ,DIBSQ                         NUMBER
 71    ,DIFL3                         NUMBER
 72    ,DIPRCT                        VARCHAR2(512)
 73    ,RPP_CDBDBID                   NUMBER
 74    ,RPP_TIMESTAMP                 NUMBER
 75    ,RPP_META_SPARE1               NUMBER
 76    ,RPP_META_SPARE2               NUMBER
 77    ,DIFMOD                        NUMBER
 78  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCCDI2 pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCDI2(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,DI2AB_DAY                     NUMBER
  6    ,DI2AB_MON                     NUMBER
  7    ,DI2AB_YEAR                    NUMBER
  8    ,DI2AB_NUM                     NUMBER
  9    ,DI2CTFN                       NUMBER
 10    ,DI2CTST                       NUMBER
 11    ,DI2CTCPC                      NUMBER
 12    ,DI2RDI                        NUMBER
 13    ,DI2INC                        NUMBER
 14    ,DI2FBM_FLN                    NUMBER
 15    ,DI2FBM_THR                    NUMBER
 16    ,DI2FBM_SEQ                    NUMBER
 17    ,DI2FBM_BNO                    NUMBER
 18    ,DI2FBM_BOF                    NUMBER
 19    ,DI2LD_SCN                     VARCHAR2(20)
 20    ,DI2LR_SCN                     VARCHAR2(20)
 21    ,DI2FLAG                       NUMBER
 22    ,DI2FB_LOG_COUNT               NUMBER
 23    ,DI2FB_BLK_COUNT               VARCHAR2(23)
 24    ,DI2ACTISCN                    VARCHAR2(20)
 25    ,DI2SL_THID                    NUMBER
 26    ,DI2IRT                        VARCHAR2(20)
 27    ,DI2RSP_OLDEST                 NUMBER
 28    ,DI2FLG                        NUMBER
 29    ,DI2SSBY_RDI                   NUMBER
 30    ,DI2SSBY_PIC                   NUMBER
 31    ,DI2SSBY_GRSP                  NUMBER
 32    ,DI2PDBUN                      VARCHAR2(30)
 33    ,DI2MIN_REQ_CAPTURE_SCN        NUMBER
 34    ,DI2FBRET                      NUMBER
 35    ,DI2DBUN                       VARCHAR2(30)
 36    ,DI2MIN_ACTSCN                 NUMBER
 37    ,DI2CTSS                       NUMBER
 38    ,DI2FBDNBLKS                   NUMBER
 39    ,DI2FBRLS                      VARCHAR2(20)
 40    ,DI2FBRLC                      VARCHAR2(20)
 41    ,DI2MINFDSCN                   VARCHAR2(20)
 42    ,DI2MINFBSCN                   VARCHAR2(20)
 43    ,DI2MVSUM                      NUMBER
 44    ,DI2FB_FREELIST                NUMBER
 45    ,DI2FB_DELETELIST              NUMBER
 46    ,DI2CCID_LOWER                 NUMBER
 47    ,DI2CCID_UPPER                 NUMBER
 48    ,DI2PREV_CCID_LOWER            NUMBER
 49    ,DI2PREV_CCID_UPPER            NUMBER
 50    ,DI2MVUSE_PRI                  NUMBER
 51    ,DI2GUID                       RAW(16)
 52    ,DI2SBP_TIM                    VARCHAR2(20)
 53    ,DI2MINDFHCKPSCN               VARCHAR2(20)
 54    ,DI2_IRV                       NUMBER
 55    ,DI2PREVCYCLEDFHCKPSCN         VARCHAR2(20)
 56    ,DI2_CED_SCN                   VARCHAR2(20)
 57    ,DI2DPC_HEAD                   NUMBER
 58    ,DI2DPC_TAIL                   NUMBER
 59    ,DI2_FB_BLOCK_CNT_HIGH         NUMBER
 60    ,DI2_FB_BLOCK_CNT_LOW          NUMBER
 61    ,DI2_HIGHEST_SEEN_SCN          NUMBER
 62    ,DI2_HALF                      NUMBER
 63    ,DI2_MINSCNINC                 NUMBER
 64    ,DI2_SBYNRTS                   NUMBER
 65    ,DI2_FBWCUR                    NUMBER
 66    ,DI2_FBWPST                    NUMBER
 67    ,DI2_NOCT                      NUMBER
 68    ,DI2_FBL_SWITCH_CNT            NUMBER
 69    ,DI2_LAST_ETB_CHG_SCN          NUMBER
 70    ,DI2_SSBY_APRATE               NUMBER
 71    ,DI2_SBYORTS                   NUMBER
 72    ,DI2_SSBY_RECTIME              NUMBER
 73    ,DI2_FBCS                      NUMBER
 74    ,DI2_SCANFINSCN                NUMBER
 75    ,DI2_FBPS                      NUMBER
 76    ,RPP_CDBDBID                   NUMBER
 77    ,RPP_TIMESTAMP                 NUMBER
 78    ,RPP_META_SPARE1               NUMBER
 79    ,RPP_META_SPARE2               NUMBER
 80  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> Rem X$KCCIC pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCIC(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,ICRID                         NUMBER
  6    ,ICRLS                         VARCHAR2(20)
  7    ,ICRLC                         VARCHAR2(20)
  8    ,ICRLC_I                       NUMBER
  9    ,ICPRS                         VARCHAR2(20)
 10    ,ICPRC                         VARCHAR2(20)
 11    ,ICPRC_I                       NUMBER
 12    ,ICLLH                         NUMBER
 13    ,ICLOR                         NUMBER
 14    ,ICHLH                         NUMBER
 15    ,ICHOR                         NUMBER
 16    ,ICPINC                        NUMBER
 17    ,ICFLG                         NUMBER
 18    ,ICALW                         VARCHAR2(26)
 19    ,ICSTM                         NUMBER
 20    ,RPP_CDBDBID                   NUMBER
 21    ,RPP_TIMESTAMP                 NUMBER
 22    ,RPP_META_SPARE1               NUMBER
 23    ,RPP_META_SPARE2               NUMBER
 24  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> Rem X$KCCPDB pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCPDB(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,PDBRNO                        NUMBER
  6    ,PDBDBID                       NUMBER
  7    ,PDBDBN                        VARCHAR2(128)
  8    ,PDBNLN                        NUMBER
  9    ,PDBINC                        NUMBER
 10    ,PDBSTA                        NUMBER
 11    ,PDBFLG                        NUMBER
 12    ,PDBINS                        VARCHAR2(20)
 13    ,PDBRDI                        NUMBER
 14    ,PDBSTSI                       NUMBER
 15    ,PDBSAB                        RAW(132)
 16    ,PDBADCNE                      NUMBER
 17    ,PDBADCNR                      NUMBER
 18    ,PDBDFP                        NUMBER
 19    ,PDBTFP                        NUMBER
 20    ,PDBNDF                        NUMBER
 21    ,PDBNTF                        NUMBER
 22    ,PDBCRS                        VARCHAR2(20)
 23    ,PDBOTB                        RAW(132)
 24    ,PDBCSS                        VARCHAR2(20)
 25    ,PDBMKID                       RAW(16)
 26    ,PDBUID                        NUMBER
 27    ,PDBGUID                       RAW(16)
 28    ,PDBIRCVBSCN                   VARCHAR2(20)
 29    ,PDBIRCVESCN                   VARCHAR2(20)
 30    ,PDBIRCV1_THR                  NUMBER
 31    ,PDBIRCV1_SEQ                  NUMBER
 32    ,PDBIRCV1_BNO                  NUMBER
 33    ,PDBIRCV1_SCN                  VARCHAR2(20)
 34    ,PDBIRCV2_THR                  NUMBER
 35    ,PDBIRCV2_SEQ                  NUMBER
 36    ,PDBIRCV2_BNO                  NUMBER
 37    ,PDBIRCV2_SCN                  VARCHAR2(20)
 38    ,PDBIRCV3_THR                  NUMBER
 39    ,PDBIRCV3_SEQ                  NUMBER
 40    ,PDBIRCV3_BNO                  NUMBER
 41    ,PDBIRCV3_SCN                  VARCHAR2(20)
 42    ,PDBCRCVBSCN                   VARCHAR2(20)
 43    ,PDBRDB                        NUMBER
 44    ,PDBCCID_LOWER                 NUMBER
 45    ,PDBCCID_UPPER                 NUMBER
 46    ,PDBPREV_CCID_LOWER            NUMBER
 47    ,PDBPREV_CCID_UPPER            NUMBER
 48    ,PDBMIN_ACTSCN                 VARCHAR2(20)
 49    ,PDBSCAN_FINSCN                VARCHAR2(20)
 50    ,PDBMA_RLS                     VARCHAR2(20)
 51    ,PDBMA_RLC                     NUMBER
 52    ,PDBPCSS                       NUMBER
 53    ,PDBCRI_INC_SCN                NUMBER
 54    ,PDBCRI_INC_TIM                NUMBER
 55    ,PDBCRI_BR_SCN                 NUMBER
 56    ,PDBCRI_BR_TIM                 NUMBER
 57    ,PDBCRI_ER_SCN                 NUMBER
 58    ,PDBCRI_ER_TIM                 NUMBER
 59    ,PDBRLC                        NUMBER
 60    ,PDBRLS                        NUMBER
 61    ,PDBKOD_ENA                    NUMBER
 62    ,PDBKOD_KEY                    RAW(48)
 63    ,PDBKOD_MKEYID                 RAW(16)
 64    ,PDBKOD_MKLOC                  NUMBER
 65    ,PDBKOD_FLAG                   NUMBER
 66    ,PDBINT                        NUMBER
 67    ,PDB_TDE_CONF                  NUMBER
 68    ,RPP_CDBDBID                   NUMBER
 69    ,RPP_TIMESTAMP                 NUMBER
 70    ,RPP_META_SPARE1               NUMBER
 71    ,RPP_META_SPARE2               NUMBER
 72  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> Rem X$KCPDBINC pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCPDBINC(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,DBINC                         NUMBER
  6    ,DBRLS                         NUMBER
  7    ,DBRLC                         DATE
  8    ,PDBINC                        NUMBER
  9    ,STATUS                        NUMBER
 10    ,PR_CNFRM                      NUMBER
 11    ,INCSCN                        NUMBER
 12    ,INCTIME                       DATE
 13    ,BRSCN                         NUMBER
 14    ,BRTIME                        DATE
 15    ,ERSCN                         NUMBER
 16    ,ERTIME                        DATE
 17    ,PR_DBINC                      NUMBER
 18    ,PR_DBRLS                      NUMBER
 19    ,PR_DBRLC                      DATE
 20    ,PR_PDBINC                     NUMBER
 21    ,PR_PDBINC_NULL                NUMBER
 22    ,PR_INCSCN                     NUMBER
 23    ,PR_ERSCN                      NUMBER
 24    ,FB_ALLOWED                    NUMBER
 25    ,RPP_CDBDBID                   NUMBER
 26    ,RPP_TIMESTAMP                 NUMBER
 27    ,RPP_META_SPARE1               NUMBER
 28    ,RPP_META_SPARE2               NUMBER
 29  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> Rem X$KCCTS pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCTS(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,TSRNO                         NUMBER
  6    ,TSTSN                         NUMBER
  7    ,TSNAM                         VARCHAR2(30)
  8    ,TSFLG                         NUMBER
  9    ,TSDFP                         NUMBER
 10    ,TSPSS                         VARCHAR2(20)
 11    ,TSPST                         VARCHAR2(20)
 12    ,TSPCS                         VARCHAR2(20)
 13    ,TSPCT                         VARCHAR2(20)
 14    ,TSKRI                         NUMBER
 15    ,RPP_CDBDBID                   NUMBER
 16    ,RPP_TIMESTAMP                 NUMBER
 17    ,RPP_META_SPARE1               NUMBER
 18    ,RPP_META_SPARE2               NUMBER
 19  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCCFE pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCFE(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,FENUM                         NUMBER
  6    ,FECSZ                         NUMBER
  7    ,FEBSZ                         NUMBER
  8    ,FESTA                         NUMBER
  9    ,FECRC_SCN                     VARCHAR2(20)
 10    ,FECRC_TIM                     VARCHAR2(20)
 11    ,FECRC_THR                     NUMBER
 12    ,FECRC_RBA_SEQ                 NUMBER
 13    ,FECRC_RBA_BNO                 NUMBER
 14    ,FECRC_RBA_BOF                 NUMBER
 15    ,FECRC_ETB                     RAW(132)
 16    ,FECPS                         VARCHAR2(20)
 17    ,FECPT                         VARCHAR2(20)
 18    ,FECPC                         NUMBER
 19    ,FESTS                         VARCHAR2(20)
 20    ,FESTT                         VARCHAR2(20)
 21    ,FEBSC                         VARCHAR2(20)
 22    ,FEFNH                         NUMBER
 23    ,FEFNT                         NUMBER
 24    ,FEDUP                         NUMBER
 25    ,FEPFAFN                       NUMBER
 26    ,FEURS                         VARCHAR2(20)
 27    ,FEURT                         VARCHAR2(20)
 28    ,FEOFS                         VARCHAR2(20)
 29    ,FEONC_SCN                     VARCHAR2(20)
 30    ,FEONC_TIM                     VARCHAR2(20)
 31    ,FEONC_THR                     NUMBER
 32    ,FEONC_RBA_SEQ                 NUMBER
 33    ,FEONC_RBA_BNO                 NUMBER
 34    ,FEONC_RBA_BOF                 NUMBER
 35    ,FEONC_ETB                     RAW(132)
 36    ,FEPOR                         NUMBER
 37    ,FETSN                         NUMBER
 38    ,FETSI                         NUMBER
 39    ,FERFN                         NUMBER
 40    ,FEPFT                         NUMBER
 41    ,FEDOR                         NUMBER
 42    ,FEPDI                         NUMBER
 43    ,FEFDB                         NUMBER
 44    ,FEPLG_SCN                     VARCHAR2(20)
 45    ,FEPAX                         NUMBER
 46    ,FEFLG                         NUMBER
 47    ,FEPFP                         NUMBER
 48    ,FEPLUS                        NUMBER
 49    ,FEPRLS                        NUMBER
 50    ,FEPRLT                        DATE
 51    ,FEFCRS                        NUMBER
 52    ,FEFCRT                        DATE
 53    ,FEFCPS                        NUMBER
 54    ,FEFCPT                        DATE
 55    ,FEMVST                        NUMBER
 56    ,FEPFDI                        NUMBER
 57    ,FEPFCPS                       NUMBER
 58    ,FEPFRLS                       NUMBER
 59    ,FEPFRLT                       NUMBER
 60    ,FEIBRFT                       NUMBER
 61    ,FERFNO                        NUMBER
 62    ,RPP_CDBDBID                   NUMBER
 63    ,RPP_TIMESTAMP                 NUMBER
 64    ,RPP_META_SPARE1               NUMBER
 65    ,RPP_META_SPARE2               NUMBER
 66  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCCFN pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCFN(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,FNNUM                         NUMBER
  6    ,FNTYP                         NUMBER
  7    ,FNFNO                         NUMBER
  8    ,FNFWD                         NUMBER
  9    ,FNBWD                         NUMBER
 10    ,FNFLG                         NUMBER
 11    ,FNNAM                         VARCHAR2(513)
 12    ,FNONM                         VARCHAR2(513)
 13    ,FNBOF                         NUMBER
 14    ,FNUNN                         NUMBER
 15    ,BYTES                         NUMBER
 16    ,RPP_CDBDBID                   NUMBER
 17    ,RPP_TIMESTAMP                 NUMBER
 18    ,RPP_META_SPARE1               NUMBER
 19    ,RPP_META_SPARE2               NUMBER
 20  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCVDF pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCVDF(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,DF_FECSZ                      NUMBER
  6    ,DF_FEBSZ                      NUMBER
  7    ,DF_FESTA                      NUMBER
  8    ,DF_FECRC_THR                  NUMBER
  9    ,DF_FECRC_RBA_SEQ              NUMBER
 10    ,DF_FECRC_RBA_BNO              NUMBER
 11    ,DF_FECRC_RBA_BOF              NUMBER
 12    ,DF_FECRC_ETB                  RAW(132)
 13    ,DF_FECPC                      NUMBER
 14    ,DF_FEONC_THR                  NUMBER
 15    ,DF_FEONC_RBA_SEQ              NUMBER
 16    ,DF_FEONC_RBA_BNO              NUMBER
 17    ,DF_FEONC_RBA_BOF              NUMBER
 18    ,DF_FEONC_ETB                  RAW(132)
 19    ,DF_FEPOR                      NUMBER
 20    ,DF_FETSN                      NUMBER
 21    ,DF_FETSI                      NUMBER
 22    ,DF_FERFN                      NUMBER
 23    ,DF_FEPFT                      NUMBER
 24    ,DF_FEPDI                      NUMBER
 25    ,DF_FEFNH                      NUMBER
 26    ,DF_FEFNT                      NUMBER
 27    ,DF_FEDUP                      NUMBER
 28    ,DF_FEFLG                      NUMBER
 29    ,DF_FEPLUS                     NUMBER
 30    ,DF_FEPRLS                     NUMBER
 31    ,DF_FEPRLT                     DATE
 32    ,DF_FEFCRS                     NUMBER
 33    ,DF_FEFCRT                     DATE
 34    ,DF_FEFCPS                     NUMBER
 35    ,DF_FEFCPT                     DATE
 36    ,DF_FEMVST                     NUMBER
 37    ,DF_FENUM                      NUMBER
 38    ,DF_FECRC_SCN                  VARCHAR2(20)
 39    ,DF_FECRC_TIM                  VARCHAR2(20)
 40    ,DF_FECPS                      VARCHAR2(20)
 41    ,DF_FECPT                      VARCHAR2(20)
 42    ,DF_FESTS                      VARCHAR2(20)
 43    ,DF_FESTT                      VARCHAR2(20)
 44    ,DF_FEBSC                      VARCHAR2(20)
 45    ,DF_FEURS                      VARCHAR2(20)
 46    ,DF_FEURT                      VARCHAR2(20)
 47    ,DF_FEOFS                      VARCHAR2(20)
 48    ,DF_FEONC_SCN                  VARCHAR2(20)
 49    ,DF_FEONC_TIM                  VARCHAR2(20)
 50    ,DF_FEDOR                      NUMBER
 51    ,DF_FEDOR_ROOT                 NUMBER
 52    ,DF_FEUNKNOWN                  NUMBER
 53    ,DF_FEFDB                      NUMBER
 54    ,DF_FEPLG_SCN                  VARCHAR2(20)
 55    ,DF_FEPAX                      NUMBER
 56    ,DF_HXONS                      NUMBER
 57    ,DF_HXSTS                      VARCHAR2(20)
 58    ,DF_HXERR                      NUMBER
 59    ,DF_HXVER                      NUMBER
 60    ,DF_FHSWV                      NUMBER
 61    ,DF_FHCVN                      NUMBER
 62    ,DF_FHDBI                      NUMBER
 63    ,DF_FHDBN                      VARCHAR2(9)
 64    ,DF_FHCSQ                      NUMBER
 65    ,DF_FHFSZ                      NUMBER
 66    ,DF_FHBSZ                      NUMBER
 67    ,DF_FHFNO                      NUMBER
 68    ,DF_FHTYP                      NUMBER
 69    ,DF_FHRDB                      NUMBER
 70    ,DF_FHCRS                      VARCHAR2(20)
 71    ,DF_FHCRT                      VARCHAR2(20)
 72    ,DF_FHRLC                      VARCHAR2(20)
 73    ,DF_FHRLC_I                    NUMBER
 74    ,DF_FHRLS                      VARCHAR2(20)
 75    ,DF_FHPRC                      VARCHAR2(20)
 76    ,DF_FHPRC_I                    NUMBER
 77    ,DF_FHPRS                      VARCHAR2(20)
 78    ,DF_FHBTI                      VARCHAR2(20)
 79    ,DF_FHBSC                      VARCHAR2(20)
 80    ,DF_FHBTH                      NUMBER
 81    ,DF_FHSTA                      NUMBER
 82    ,DF_FHSCN                      VARCHAR2(20)
 83    ,DF_FHTIM                      VARCHAR2(20)
 84    ,DF_FHTHR                      NUMBER
 85    ,DF_FHRBA_SEQ                  NUMBER
 86    ,DF_FHRBA_BNO                  NUMBER
 87    ,DF_FHRBA_BOF                  NUMBER
 88    ,DF_FHETB                      RAW(132)
 89    ,DF_FHCPC                      NUMBER
 90    ,DF_FHRTS                      VARCHAR2(20)
 91    ,DF_FHCCC                      NUMBER
 92    ,DF_FHBCP_SCN                  VARCHAR2(20)
 93    ,DF_FHBCP_TIM                  VARCHAR2(20)
 94    ,DF_FHBCP_THR                  NUMBER
 95    ,DF_FHBCP_RBA_SEQ              NUMBER
 96    ,DF_FHBCP_RBA_BNO              NUMBER
 97    ,DF_FHBCP_RBA_BOF              NUMBER
 98    ,DF_FHBCP_ETB                  RAW(132)
 99    ,DF_FHBHZ                      NUMBER
100    ,DF_FHXCD                      RAW(16)
101    ,DF_FHTSN                      NUMBER
102    ,DF_FHTNM                      VARCHAR2(30)
103    ,DF_FHRFN                      NUMBER
104    ,DF_FHAFS                      VARCHAR2(20)
105    ,DF_FHRFS                      VARCHAR2(20)
106    ,DF_FHRFT                      DATE
107    ,DF_HXIFZ                      NUMBER
108    ,DF_HXNRCV                     NUMBER
109    ,DF_HXFNM                      VARCHAR2(513)
110    ,DF_FHPOFB                     NUMBER
111    ,DF_FHPNFB                     NUMBER
112    ,DF_FHPRE10                    NUMBER
113    ,DF_FHFIRSTUNRECSCN            VARCHAR2(20)
114    ,DF_FHFIRSTUNRECTIME           VARCHAR2(20)
115    ,DF_FHFTUS                     VARCHAR2(20)
116    ,DF_FHFTUT                     VARCHAR2(20)
117    ,DF_FHFUUS                     VARCHAR2(20)
118    ,DF_FHFUUT                     VARCHAR2(20)
119    ,DF_HXLMDBA                    NUMBER
120    ,DF_HXLMLD_SCN                 VARCHAR2(20)
121    ,DF_FHFCRS                     NUMBER
122    ,DF_FHFCRT                     DATE
123    ,DF_FHFCPS                     NUMBER
124    ,DF_FHFCPT                     DATE
125    ,DF_FHPLUS                     NUMBER
126    ,DF_FHFDBI                     NUMBER
127    ,DF_FHPIDI                     NUMBER
128    ,DF_FHPIFN                     NUMBER
129    ,DF_FHPRLS                     NUMBER
130    ,DF_FHPRLT                     DATE
131    ,DF_FHPTSN                     NUMBER
132    ,DF_FHBSSZ                     NUMBER
133    ,DF_FHBSFMT                    NUMBER
134    ,DF_FHBSEOFSCN                 NUMBER
135    ,DF_FHBSMAP                    RAW(32)
136    ,DF_HXUOPC_SCN                 NUMBER
137    ,DF_FHPDBI                     NUMBER
138    ,DF_FHPDBDBI                   NUMBER
139    ,DF_FHPDBIDN                   RAW(16)
140    ,DF_FNTYP                      NUMBER
141    ,DF_FNFWD                      NUMBER
142    ,DF_FNBWD                      NUMBER
143    ,DF_FNFLG                      NUMBER
144    ,DF_FNNAM                      VARCHAR2(513)
145    ,DF_FNNUM                      NUMBER
146    ,DF_FNONM                      VARCHAR2(513)
147    ,DF_FNBOF                      NUMBER
148    ,DF_FNUNN                      NUMBER
149    ,DF_BYTES                      NUMBER
150    ,DF_FNAUXNAM                   VARCHAR2(513)
151    ,DF_FHPDBUID                   NUMBER
152  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCCTF pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCTF(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,TFNUM                         NUMBER
  6    ,TFAFN                         NUMBER
  7    ,TFCSZ                         NUMBER
  8    ,TFBSZ                         NUMBER
  9    ,TFSTA                         NUMBER
 10    ,TFCRC_SCN                     VARCHAR2(20)
 11    ,TFCRC_TIM                     VARCHAR2(20)
 12    ,TFFNH                         NUMBER
 13    ,TFFNT                         NUMBER
 14    ,TFDUP                         NUMBER
 15    ,TFTSN                         NUMBER
 16    ,TFTSI                         NUMBER
 17    ,TFRFN                         NUMBER
 18    ,TFPFT                         NUMBER
 19    ,TFMSZ                         NUMBER
 20    ,TFNSZ                         NUMBER
 21    ,TFPFP                         NUMBER
 22    ,RPP_CDBDBID                   NUMBER
 23    ,RPP_TIMESTAMP                 NUMBER
 24    ,RPP_META_SPARE1               NUMBER
 25    ,RPP_META_SPARE2               NUMBER
 26  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCVFH pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCVFH(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,HXFIL                         NUMBER
  6    ,HXONS                         NUMBER
  7    ,HXSTS                         VARCHAR2(20)
  8    ,HXERR                         NUMBER
  9    ,HXVER                         NUMBER
 10    ,FHSWV                         NUMBER
 11    ,FHCVN                         NUMBER
 12    ,FHDBI                         NUMBER
 13    ,FHDBN                         VARCHAR2(9)
 14    ,FHCSQ                         NUMBER
 15    ,FHFSZ                         NUMBER
 16    ,FHBSZ                         NUMBER
 17    ,FHFNO                         NUMBER
 18    ,FHTYP                         NUMBER
 19    ,FHRDB                         NUMBER
 20    ,FHCRS                         VARCHAR2(20)
 21    ,FHCRT                         VARCHAR2(20)
 22    ,FHRLC                         VARCHAR2(20)
 23    ,FHRLC_I                       NUMBER
 24    ,FHRLS                         VARCHAR2(20)
 25    ,FHPRC                         VARCHAR2(20)
 26    ,FHPRC_I                       NUMBER
 27    ,FHPRS                         VARCHAR2(20)
 28    ,FHBTI                         VARCHAR2(20)
 29    ,FHBSC                         VARCHAR2(20)
 30    ,FHBTH                         NUMBER
 31    ,FHSTA                         NUMBER
 32    ,FHSCN                         VARCHAR2(20)
 33    ,FHTIM                         VARCHAR2(20)
 34    ,FHTHR                         NUMBER
 35    ,FHRBA_SEQ                     NUMBER
 36    ,FHRBA_BNO                     NUMBER
 37    ,FHRBA_BOF                     NUMBER
 38    ,FHETB                         RAW(132)
 39    ,FHCPC                         NUMBER
 40    ,FHRTS                         VARCHAR2(20)
 41    ,FHCCC                         NUMBER
 42    ,FHBCP_SCN                     VARCHAR2(20)
 43    ,FHBCP_TIM                     VARCHAR2(20)
 44    ,FHBCP_THR                     NUMBER
 45    ,FHBCP_RBA_SEQ                 NUMBER
 46    ,FHBCP_RBA_BNO                 NUMBER
 47    ,FHBCP_RBA_BOF                 NUMBER
 48    ,FHBCP_ETB                     RAW(132)
 49    ,FHBHZ                         NUMBER
 50    ,FHXCD                         RAW(16)
 51    ,FHTSN                         NUMBER
 52    ,FHTNM                         VARCHAR2(30)
 53    ,FHRFN                         NUMBER
 54    ,FHAFS                         VARCHAR2(20)
 55    ,FHRFS                         VARCHAR2(20)
 56    ,FHRFT                         DATE
 57    ,HXIFZ                         NUMBER
 58    ,HXNRCV                        NUMBER
 59    ,HXFNM                         VARCHAR2(513)
 60    ,FHPOFB                        NUMBER
 61    ,FHPNFB                        NUMBER
 62    ,FHPRE10                       NUMBER
 63    ,FHFIRSTUNRECSCN               VARCHAR2(20)
 64    ,FHFIRSTUNRECTIME              VARCHAR2(20)
 65    ,FHFTURS                       VARCHAR2(20)
 66    ,FHFTURT                       VARCHAR2(20)
 67    ,FHFUTURS                      VARCHAR2(20)
 68    ,FHFUTURT                      VARCHAR2(20)
 69    ,HXLMDBA                       NUMBER
 70    ,HXLMLD_SCN                    VARCHAR2(20)
 71    ,FHFCRS                        NUMBER
 72    ,FHFCRT                        DATE
 73    ,FHFCPS                        NUMBER
 74    ,FHFCPT                        DATE
 75    ,FHPLUS                        NUMBER
 76    ,FHFDBI                        NUMBER
 77    ,FHPIDI                        NUMBER
 78    ,FHPIFN                        NUMBER
 79    ,FHPRLS                        NUMBER
 80    ,FHPRLT                        DATE
 81    ,FHPTSN                        NUMBER
 82    ,FHBSSZ                        NUMBER
 83    ,FHBSFMT                       NUMBER
 84    ,FHBSEOFSCN                    NUMBER
 85    ,FHBSMAP                       RAW(32)
 86    ,HXUOPC_SCN                    NUMBER
 87    ,FHPDBI                        NUMBER
 88    ,FHPDBDBI                      NUMBER
 89    ,FHPDBIDN                      RAW(16)
 90    ,FHPIN_SCN                     NUMBER
 91    ,FHPIN_TIME                    DATE
 92    ,FHPBR_SCN                     NUMBER
 93    ,FHPBR_TIME                    DATE
 94    ,FHPER_SCN                     NUMBER
 95    ,FHPER_TIME                    DATE
 96    ,FHPIC                         NUMBER
 97    ,FHSPARSE                      NUMBER
 98    ,FHPLID                        NUMBER
 99    ,FHCLPLID                      NUMBER
100    ,FHCPLID                       NUMBER
101    ,FHPDBUID                      NUMBER
102    ,FHALG                         NUMBER
103    ,FHKEY                         RAW(48)
104    ,FHMKID                        RAW(48)
105    ,FHKEYFLG                      NUMBER
106    ,FHMKLOC                       NUMBER
107  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCVFHTMP pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCVFHTMP(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,HTMPXFIL                      NUMBER
  6    ,HTMPXONS                      NUMBER
  7    ,HTMPXERR                      NUMBER
  8    ,HTMPXVER                      NUMBER
  9    ,FHTMPSWV                      NUMBER
 10    ,FHTMPCVN                      NUMBER
 11    ,FHTMPDBI                      NUMBER
 12    ,FHTMPDBN                      VARCHAR2(9)
 13    ,FHTMPCSQ                      NUMBER
 14    ,FHTMPFSZ                      NUMBER
 15    ,FHTMPBSZ                      NUMBER
 16    ,FHTMPFNO                      NUMBER
 17    ,FHTMPTYP                      NUMBER
 18    ,FHTMPCRS                      VARCHAR2(20)
 19    ,FHTMPCRT                      VARCHAR2(20)
 20    ,FHTMPSTA                      NUMBER
 21    ,FHTMPCCC                      NUMBER
 22    ,FHTMPXCD                      RAW(16)
 23    ,FHTMPTSN                      NUMBER
 24    ,FHTMPTNM                      VARCHAR2(30)
 25    ,FHTMPRFN                      NUMBER
 26    ,HTMPXFNM                      VARCHAR2(513)
 27  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCVFHALL pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCVFHALL(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,HXFIL                         NUMBER
  6    ,HXONS                         NUMBER
  7    ,HXSTS                         VARCHAR2(20)
  8    ,HXERR                         NUMBER
  9    ,HXVER                         NUMBER
 10    ,FHSWV                         NUMBER
 11    ,FHCVN                         NUMBER
 12    ,FHDBI                         NUMBER
 13    ,FHDBN                         VARCHAR2(9)
 14    ,FHCSQ                         NUMBER
 15    ,FHFSZ                         NUMBER
 16    ,FHBSZ                         NUMBER
 17    ,FHFNO                         NUMBER
 18    ,FHTYP                         NUMBER
 19    ,FHRDB                         NUMBER
 20    ,FHCRS                         VARCHAR2(20)
 21    ,FHCRT                         VARCHAR2(20)
 22    ,FHRLC                         VARCHAR2(20)
 23    ,FHRLC_I                       NUMBER
 24    ,FHRLS                         VARCHAR2(20)
 25    ,FHPRC                         VARCHAR2(20)
 26    ,FHPRC_I                       NUMBER
 27    ,FHPRS                         VARCHAR2(20)
 28    ,FHBTI                         VARCHAR2(20)
 29    ,FHBSC                         VARCHAR2(20)
 30    ,FHBTH                         NUMBER
 31    ,FHSTA                         NUMBER
 32    ,FHSCN                         VARCHAR2(20)
 33    ,FHTIM                         VARCHAR2(20)
 34    ,FHTHR                         NUMBER
 35    ,FHRBA_SEQ                     NUMBER
 36    ,FHRBA_BNO                     NUMBER
 37    ,FHRBA_BOF                     NUMBER
 38    ,FHETB                         RAW(132)
 39    ,FHCPC                         NUMBER
 40    ,FHRTS                         VARCHAR2(20)
 41    ,FHCCC                         NUMBER
 42    ,FHBCP_SCN                     VARCHAR2(20)
 43    ,FHBCP_TIM                     VARCHAR2(20)
 44    ,FHBCP_THR                     NUMBER
 45    ,FHBCP_RBA_SEQ                 NUMBER
 46    ,FHBCP_RBA_BNO                 NUMBER
 47    ,FHBCP_RBA_BOF                 NUMBER
 48    ,FHBCP_ETB                     RAW(132)
 49    ,FHBHZ                         NUMBER
 50    ,FHXCD                         RAW(16)
 51    ,FHTSN                         NUMBER
 52    ,FHTNM                         VARCHAR2(30)
 53    ,FHRFN                         NUMBER
 54    ,FHAFS                         VARCHAR2(20)
 55    ,FHRFS                         VARCHAR2(20)
 56    ,FHRFT                         DATE
 57    ,HXIFZ                         NUMBER
 58    ,HXNRCV                        NUMBER
 59    ,HXFNM                         VARCHAR2(513)
 60    ,FHPOFB                        NUMBER
 61    ,FHPNFB                        NUMBER
 62    ,FHPRE10                       NUMBER
 63    ,FHFIRSTUNRECSCN               VARCHAR2(20)
 64    ,FHFIRSTUNRECTIME              VARCHAR2(20)
 65    ,FHFTURS                       VARCHAR2(20)
 66    ,FHFTURT                       VARCHAR2(20)
 67    ,FHFUTURS                      VARCHAR2(20)
 68    ,FHFUTURT                      VARCHAR2(20)
 69    ,HXLMDBA                       NUMBER
 70    ,HXLMLD_SCN                    VARCHAR2(20)
 71    ,FHFCRS                        NUMBER
 72    ,FHFCRT                        DATE
 73    ,FHFCPS                        NUMBER
 74    ,FHFCPT                        DATE
 75    ,FHPLUS                        NUMBER
 76    ,FHFDBI                        NUMBER
 77    ,FHPIDI                        NUMBER
 78    ,FHPIFN                        NUMBER
 79    ,FHPRLS                        NUMBER
 80    ,FHPRLT                        DATE
 81    ,FHPTSN                        NUMBER
 82    ,FHBSSZ                        NUMBER
 83    ,FHBSFMT                       NUMBER
 84    ,FHBSEOFSCN                    NUMBER
 85    ,FHBSMAP                       RAW(32)
 86    ,HXUOPC_SCN                    NUMBER
 87    ,FHPDBI                        NUMBER
 88    ,FHPDBDBI                      NUMBER
 89    ,FHPDBIDN                      RAW(16)
 90    ,FHPIN_SCN                     NUMBER
 91    ,FHPIN_TIME                    DATE
 92    ,FHPBR_SCN                     NUMBER
 93    ,FHPBR_TIME                    DATE
 94    ,FHPER_SCN                     NUMBER
 95    ,FHPER_TIME                    DATE
 96    ,FHPIC                         NUMBER
 97    ,FHSPARSE                      NUMBER
 98    ,FHPLID                        NUMBER
 99    ,FHCLPLID                      NUMBER
100    ,FHCPLID                       NUMBER
101    ,FHPDBUID                      NUMBER
102    ,FHALG                         NUMBER
103    ,FHKEY                         RAW(48)
104    ,FHMKID                        RAW(48)
105    ,FHKEYFLG                      NUMBER
106    ,FHMKLOC                       NUMBER
107  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCCRT pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCRT(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,RTNUM                         NUMBER
  6    ,RTSTA                         NUMBER
  7    ,RTCKP_SCN                     VARCHAR2(20)
  8    ,RTCKP_TIM                     VARCHAR2(20)
  9    ,RTCKP_THR                     NUMBER
 10    ,RTCKP_RBA_SEQ                 NUMBER
 11    ,RTCKP_RBA_BNO                 NUMBER
 12    ,RTCKP_RBA_BOF                 NUMBER
 13    ,RTCKP_ETB                     RAW(132)
 14    ,RTOTF                         NUMBER
 15    ,RTOTB                         NUMBER
 16    ,RTNLF                         NUMBER
 17    ,RTLFH                         NUMBER
 18    ,RTLFT                         NUMBER
 19    ,RTCLN                         NUMBER
 20    ,RTSEQ                         NUMBER
 21    ,RTENB                         VARCHAR2(20)
 22    ,RTETS                         VARCHAR2(20)
 23    ,RTDIS                         VARCHAR2(20)
 24    ,RTDIT                         VARCHAR2(20)
 25    ,RTLHP                         NUMBER
 26    ,RTSID                         VARCHAR2(16)
 27    ,RTOTS                         VARCHAR2(20)
 28    ,RTFBCU                        NUMBER
 29    ,RTFBRS                        NUMBER
 30    ,RPP_CDBDBID                   NUMBER
 31    ,RPP_TIMESTAMP                 NUMBER
 32    ,RPP_META_SPARE1               NUMBER
 33    ,RPP_META_SPARE2               NUMBER
 34  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCCLE pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCLE(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,LENUM                         NUMBER
  6    ,LESIZ                         NUMBER
  7    ,LESEQ                         NUMBER
  8    ,LEHWS                         NUMBER
  9    ,LEBSZ                         NUMBER
 10    ,LENAB                         NUMBER
 11    ,LEFLG                         NUMBER
 12    ,LETHR                         NUMBER
 13    ,LELFF                         NUMBER
 14    ,LELFB                         NUMBER
 15    ,LELOS                         VARCHAR2(20)
 16    ,LELOT                         VARCHAR2(20)
 17    ,LENXS                         VARCHAR2(20)
 18    ,LENXT                         VARCHAR2(20)
 19    ,LEPVS                         VARCHAR2(20)
 20    ,LEARF                         NUMBER
 21    ,LEARB                         NUMBER
 22    ,LEFNH                         NUMBER
 23    ,LEFNT                         NUMBER
 24    ,LEDUP                         NUMBER
 25    ,RPP_CDBDBID                   NUMBER
 26    ,RPP_TIMESTAMP                 NUMBER
 27    ,RPP_META_SPARE1               NUMBER
 28    ,RPP_META_SPARE2               NUMBER
 29  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCCSL pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCSL(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,SLNUM                         NUMBER
  6    ,SLPDB                         NUMBER
  7    ,SLTHR                         NUMBER
  8    ,SLSEQ                         NUMBER
  9    ,SLSIZ                         NUMBER
 10    ,SLBSZ                         NUMBER
 11    ,SLNAB                         NUMBER
 12    ,SLFLG                         NUMBER
 13    ,SLLOS                         VARCHAR2(20)
 14    ,SLLOT                         VARCHAR2(20)
 15    ,SLNXS                         VARCHAR2(20)
 16    ,SLNXT                         VARCHAR2(20)
 17    ,SLRLC                         NUMBER
 18    ,SLRLS                         VARCHAR2(20)
 19    ,SLLASTSCN                     VARCHAR2(20)
 20    ,SLLASTTIM                     VARCHAR2(20)
 21    ,RPP_CDBDBID                   NUMBER
 22    ,RPP_TIMESTAMP                 NUMBER
 23    ,RPP_META_SPARE1               NUMBER
 24    ,RPP_META_SPARE2               NUMBER
 25  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCCTIR pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCTIR(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,TIRNUM                        NUMBER
  6    ,TIRSID                        VARCHAR2(80)
  7    ,RPP_CDBDBID                   NUMBER
  8    ,RPP_TIMESTAMP                 NUMBER
  9    ,RPP_META_SPARE1               NUMBER
 10    ,RPP_META_SPARE2               NUMBER
 11  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCCOR pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCOR(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,ORRID                         NUMBER
  6    ,ORTSM                         VARCHAR2(20)
  7    ,ORSTM                         NUMBER
  8    ,ORDFP                         NUMBER
  9    ,ORFNP                         NUMBER
 10    ,OROFS                         VARCHAR2(20)
 11    ,ORONS                         VARCHAR2(20)
 12    ,ORONT                         VARCHAR2(20)
 13    ,ORRLS                         VARCHAR2(20)
 14    ,ORRLC                         VARCHAR2(20)
 15    ,ORIC                          NUMBER
 16    ,ORONC_THR                     NUMBER
 17    ,ORONC_RBA_SEQ                 NUMBER
 18    ,ORONC_RBA_BNO                 NUMBER
 19    ,ORONC_RBA_BOF                 NUMBER
 20    ,ORONC_ETB                     VARCHAR2(264)
 21    ,RPP_CDBDBID                   NUMBER
 22    ,RPP_TIMESTAMP                 NUMBER
 23    ,RPP_META_SPARE1               NUMBER
 24    ,RPP_META_SPARE2               NUMBER
 25  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCCLH pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCLH(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,LHRID                         NUMBER
  6    ,LHTSM                         VARCHAR2(20)
  7    ,LHSTM                         NUMBER
  8    ,LHTHP                         NUMBER
  9    ,LHTNP                         NUMBER
 10    ,LHSEQ                         NUMBER
 11    ,LHLOS                         VARCHAR2(20)
 12    ,LHLOT                         VARCHAR2(20)
 13    ,LHNXS                         VARCHAR2(20)
 14    ,LHNAM                         VARCHAR2(513)
 15    ,LHRLS                         VARCHAR2(20)
 16    ,LHRLC                         VARCHAR2(20)
 17    ,LHIC                          NUMBER
 18    ,RPP_CDBDBID                   NUMBER
 19    ,RPP_TIMESTAMP                 NUMBER
 20    ,RPP_META_SPARE1               NUMBER
 21    ,RPP_META_SPARE2               NUMBER
 22  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCCAL pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCAL(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,ALRID                         NUMBER
  6    ,ALPRC                         NUMBER
  7    ,ALTSM                         VARCHAR2(20)
  8    ,ALSTM                         NUMBER
  9    ,ALFLG                         NUMBER
 10    ,ALTHP                         NUMBER
 11    ,ALSEQ                         NUMBER
 12    ,ALRLS                         VARCHAR2(20)
 13    ,ALRLC                         VARCHAR2(20)
 14    ,ALLOS                         VARCHAR2(20)
 15    ,ALLOT                         VARCHAR2(20)
 16    ,ALNXS                         VARCHAR2(20)
 17    ,ALNXT                         VARCHAR2(20)
 18    ,ALBCT                         NUMBER
 19    ,ALBSZ                         NUMBER
 20    ,ALDST                         NUMBER
 21    ,ALNAM                         VARCHAR2(513)
 22    ,ALFL2                         NUMBER
 23    ,ALTOA                         NUMBER
 24    ,ALDLY                         NUMBER
 25    ,ALACD                         NUMBER
 26    ,ALXLC                         NUMBER
 27    ,RPP_CDBDBID                   NUMBER
 28    ,RPP_TIMESTAMP                 NUMBER
 29    ,RPP_META_SPARE1               NUMBER
 30    ,RPP_META_SPARE2               NUMBER
 31  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCCBS pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCBS(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,BSRID                         NUMBER
  6    ,BSTSM                         VARCHAR2(20)
  7    ,BSSTM                         NUMBER
  8    ,BSBSS                         NUMBER
  9    ,BSBST                         VARCHAR2(20)
 10    ,BSBSC                         NUMBER
 11    ,BSPCT                         NUMBER
 12    ,BSTYP                         NUMBER
 13    ,BSLVL                         NUMBER
 14    ,BSBSZ                         NUMBER
 15    ,BSKPT                         VARCHAR2(20)
 16    ,BSPFW                         NUMBER
 17    ,BSPLW                         NUMBER
 18    ,BSCAL                         NUMBER
 19    ,BSFLG2                        NUMBER
 20    ,BSGUID                        RAW(16)
 21    ,RPP_CDBDBID                   NUMBER
 22    ,RPP_TIMESTAMP                 NUMBER
 23    ,RPP_META_SPARE1               NUMBER
 24    ,RPP_META_SPARE2               NUMBER
 25  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCCBP pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCBP(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,BPRID                         NUMBER
  6    ,BPTSM                         VARCHAR2(20)
  7    ,BPSTM                         NUMBER
  8    ,BPBSS                         NUMBER
  9    ,BPBSC                         NUMBER
 10    ,BPFLG                         NUMBER
 11    ,BPNUM                         NUMBER
 12    ,BPEXT                         NUMBER
 13    ,BPTIM                         VARCHAR2(20)
 14    ,BPDEV                         VARCHAR2(17)
 15    ,BPHDL                         VARCHAR2(513)
 16    ,BPMDH                         VARCHAR2(65)
 17    ,BPCMT                         VARCHAR2(64)
 18    ,BPRSI                         NUMBER
 19    ,BPRST                         NUMBER
 20    ,BPTAG                         VARCHAR2(32)
 21    ,BPSZ1                         NUMBER
 22    ,BPFLG2                        NUMBER
 23    ,BPGUID                        RAW(16)
 24    ,RPP_CDBDBID                   NUMBER
 25    ,RPP_TIMESTAMP                 NUMBER
 26    ,RPP_META_SPARE1               NUMBER
 27    ,RPP_META_SPARE2               NUMBER
 28  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCCBF pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCBF(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,BFRID                         NUMBER
  6    ,BFTSM                         VARCHAR2(20)
  7    ,BFSTM                         NUMBER
  8    ,BFBSS                         NUMBER
  9    ,BFBSC                         NUMBER
 10    ,BFFLG                         NUMBER
 11    ,BFDFP                         NUMBER
 12    ,BFLVL                         NUMBER
 13    ,BFCRS                         VARCHAR2(20)
 14    ,BFCRT                         VARCHAR2(20)
 15    ,BFCPS                         VARCHAR2(20)
 16    ,BFCPT                         VARCHAR2(20)
 17    ,BFRLS                         VARCHAR2(20)
 18    ,BFRLC                         VARCHAR2(20)
 19    ,BFICS                         VARCHAR2(20)
 20    ,BFAFS                         VARCHAR2(20)
 21    ,BFNCB                         NUMBER
 22    ,BFMCB                         NUMBER
 23    ,BFLCB                         NUMBER
 24    ,BFFSZ                         NUMBER
 25    ,BFBCT                         NUMBER
 26    ,BFBSZ                         NUMBER
 27    ,BFLOR                         NUMBER
 28    ,BFBRD                         NUMBER
 29    ,BFSIX                         NUMBER
 30    ,BFFDI                         NUMBER
 31    ,BFPLUS                        NUMBER
 32    ,BFPRLS                        NUMBER
 33    ,BFPRLT                        DATE
 34    ,BFPTSN                        NUMBER
 35    ,BFSSB                         NUMBER
 36    ,BFSSZ                         NUMBER
 37    ,BFGUID                        RAW(16)
 38    ,RPP_CDBDBID                   NUMBER
 39    ,RPP_TIMESTAMP                 NUMBER
 40    ,RPP_META_SPARE1               NUMBER
 41    ,RPP_META_SPARE2               NUMBER
 42  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCCBL pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCBL(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,BLRID                         NUMBER
  6    ,BLTSM                         VARCHAR2(20)
  7    ,BLSTM                         NUMBER
  8    ,BLBSS                         NUMBER
  9    ,BLBSC                         NUMBER
 10    ,BLTHP                         NUMBER
 11    ,BLSEQ                         NUMBER
 12    ,BLRLS                         VARCHAR2(20)
 13    ,BLRLC                         VARCHAR2(20)
 14    ,BLLOS                         VARCHAR2(20)
 15    ,BLLOT                         VARCHAR2(20)
 16    ,BLNXS                         VARCHAR2(20)
 17    ,BLNXT                         VARCHAR2(20)
 18    ,BLBCT                         NUMBER
 19    ,BLBSZ                         NUMBER
 20    ,BLSIX                         NUMBER
 21    ,BLFLG                         NUMBER
 22    ,RPP_CDBDBID                   NUMBER
 23    ,RPP_TIMESTAMP                 NUMBER
 24    ,RPP_META_SPARE1               NUMBER
 25    ,RPP_META_SPARE2               NUMBER
 26  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCCBI pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCBI(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,BIRID                         NUMBER
  6    ,BITSM                         VARCHAR2(20)
  7    ,BISTM                         NUMBER
  8    ,BIBSS                         NUMBER
  9    ,BIBSC                         NUMBER
 10    ,BIMDT                         VARCHAR2(20)
 11    ,BIFSZ                         NUMBER
 12    ,BISIX                         NUMBER
 13    ,BIDUN                         VARCHAR2(30)
 14    ,BIFLG                         NUMBER
 15    ,BIGUID                        RAW(16)
 16    ,RPP_CDBDBID                   NUMBER
 17    ,RPP_TIMESTAMP                 NUMBER
 18    ,RPP_META_SPARE1               NUMBER
 19    ,RPP_META_SPARE2               NUMBER
 20  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCCDC pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCDC(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,DCRID                         NUMBER
  6    ,DCTSM                         VARCHAR2(20)
  7    ,DCSTM                         NUMBER
  8    ,DCFLG                         NUMBER
  9    ,DCDFP                         NUMBER
 10    ,DCRFN                         NUMBER
 11    ,DCDBI                         NUMBER
 12    ,DCCRS                         VARCHAR2(20)
 13    ,DCCRT                         VARCHAR2(20)
 14    ,DCCPS                         VARCHAR2(20)
 15    ,DCCPT                         VARCHAR2(20)
 16    ,DCRLS                         VARCHAR2(20)
 17    ,DCRLC                         VARCHAR2(20)
 18    ,DCRFS                         VARCHAR2(20)
 19    ,DCRFT                         VARCHAR2(20)
 20    ,DCAFS                         VARCHAR2(20)
 21    ,DCNCB                         NUMBER
 22    ,DCMCB                         NUMBER
 23    ,DCLCB                         NUMBER
 24    ,DCBCT                         NUMBER
 25    ,DCBSZ                         NUMBER
 26    ,DCLOR                         NUMBER
 27    ,DCKPT                         VARCHAR2(20)
 28    ,DCTAG                         VARCHAR2(32)
 29    ,DCNAM                         VARCHAR2(513)
 30    ,DCRSI                         NUMBER
 31    ,DCRST                         NUMBER
 32    ,DCFDI                         NUMBER
 33    ,DCPLUS                        NUMBER
 34    ,DCPRLS                        NUMBER
 35    ,DCPRLT                        DATE
 36    ,DCPTSN                        NUMBER
 37    ,DCCPTHR                       NUMBER
 38    ,DCFLG2                        NUMBER
 39    ,DCGUID                        RAW(16)
 40    ,RPP_CDBDBID                   NUMBER
 41    ,RPP_TIMESTAMP                 NUMBER
 42    ,RPP_META_SPARE1               NUMBER
 43    ,RPP_META_SPARE2               NUMBER
 44  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCCPD pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCPD(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,PCRID                         NUMBER
  6    ,PCTSM                         VARCHAR2(20)
  7    ,PCSTM                         NUMBER
  8    ,PCFLG                         NUMBER
  9    ,PCMPL                         NUMBER
 10    ,PCTYP                         NUMBER
 11    ,PCTIM                         VARCHAR2(20)
 12    ,PCDEV                         VARCHAR2(17)
 13    ,PCHDL                         VARCHAR2(513)
 14    ,PCMDH                         VARCHAR2(65)
 15    ,PCCMT                         VARCHAR2(81)
 16    ,PCTAG                         VARCHAR2(32)
 17    ,PDFLG                         NUMBER
 18    ,PDDFP                         NUMBER
 19    ,PDCRS                         VARCHAR2(20)
 20    ,PDCRT                         VARCHAR2(20)
 21    ,PDCPS                         VARCHAR2(20)
 22    ,PDCPT                         VARCHAR2(20)
 23    ,PDRLS                         VARCHAR2(20)
 24    ,PDRLC                         VARCHAR2(20)
 25    ,PDRFS                         VARCHAR2(20)
 26    ,PDRFT                         VARCHAR2(20)
 27    ,PDAFS                         VARCHAR2(20)
 28    ,PDFSZ                         NUMBER
 29    ,PDBSZ                         NUMBER
 30    ,PDLOR                         NUMBER
 31    ,PDKPT                         VARCHAR2(20)
 32    ,PCRSI                         NUMBER
 33    ,PCRST                         NUMBER
 34    ,PCFDI                         NUMBER
 35    ,PCPLUS                        NUMBER
 36    ,PCPRLS                        NUMBER
 37    ,PCPRLT                        DATE
 38    ,PCPTSN                        NUMBER
 39    ,PCGUID                        RAW(16)
 40    ,RPP_CDBDBID                   NUMBER
 41    ,RPP_TIMESTAMP                 NUMBER
 42    ,RPP_META_SPARE1               NUMBER
 43    ,RPP_META_SPARE2               NUMBER
 44  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> 
SQL> Rem X$KCCPA pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCPA(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,PCRID                         NUMBER
  6    ,PCTSM                         VARCHAR2(20)
  7    ,PCSTM                         NUMBER
  8    ,PCFLG                         NUMBER
  9    ,PCMPL                         NUMBER
 10    ,PCTIM                         VARCHAR2(20)
 11    ,PCDEV                         VARCHAR2(17)
 12    ,PCHDL                         VARCHAR2(513)
 13    ,PCMDH                         VARCHAR2(65)
 14    ,PCCMT                         VARCHAR2(81)
 15    ,PCTAG                         VARCHAR2(32)
 16    ,PATHP                         NUMBER
 17    ,PASEQ                         NUMBER
 18    ,PARLS                         VARCHAR2(20)
 19    ,PARLC                         VARCHAR2(20)
 20    ,PALOS                         VARCHAR2(20)
 21    ,PALOT                         VARCHAR2(20)
 22    ,PANXS                         VARCHAR2(20)
 23    ,PANXT                         VARCHAR2(20)
 24    ,PABCT                         NUMBER
 25    ,PABSZ                         NUMBER
 26    ,PCRSI                         NUMBER
 27    ,PCRST                         NUMBER
 28    ,PAFLG                         NUMBER
 29    ,PAKPT                         VARCHAR2(20)
 30    ,RPP_CDBDBID                   NUMBER
 31    ,RPP_TIMESTAMP                 NUMBER
 32    ,RPP_META_SPARE1               NUMBER
 33    ,RPP_META_SPARE2               NUMBER
 34  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> Rem X$KCCPIC pre-plugin table
SQL> CREATE TABLE SYS.RPP$X$KCCPIC(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,PICRNO                        NUMBER
  6    ,PICSTA                        NUMBER
  7    ,PICDBINC                      VARCHAR2(128)
  8    ,PICDBRLS                      VARCHAR2(128)
  9    ,PICDBRLC                      NUMBER
 10    ,PICID                         NUMBER
 11    ,PICINCS                       VARCHAR2(128)
 12    ,PICINCT                       VARCHAR2(128)
 13    ,PICBRLS                       VARCHAR2(128)
 14    ,PICBRLT                       VARCHAR2(128)
 15    ,PICERLS                       VARCHAR2(128)
 16    ,PICERLT                       VARCHAR2(128)
 17    ,PICPRIDBINC                   NUMBER
 18    ,PICPRIDBRLS                   VARCHAR2(128)
 19    ,PICPRIDBRLC                   NUMBER
 20    ,PICPRIPDBINC                  NUMBER
 21    ,PICPRIPDBINCS                 VARCHAR2(128)
 22    ,PICPRIPDBINCT                 VARCHAR2(128)
 23    ,PICPRIPDBBRLS                 VARCHAR2(128)
 24    ,PICPRIPDBBRLT                 VARCHAR2(128)
 25    ,PICPRIPDBERLS                 VARCHAR2(128)
 26    ,PICPRIPDBERLT                 VARCHAR2(128)
 27    ,RPP_CDBDBID                   NUMBER
 28    ,RPP_TIMESTAMP                 NUMBER
 29    ,RPP_META_SPARE1               NUMBER
 30    ,RPP_META_SPARE2               NUMBER
 31  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> Rem pseudo controlfile X$KCCBLKCOR
SQL> CREATE TABLE SYS.RPP$X$KCCBLKCOR(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,BLKRID                        NUMBER
  6    ,BLKSTM                        NUMBER
  7    ,BLKTYPE                       NUMBER
  8    ,BLKFNO                        NUMBER
  9    ,BLKCRS                        NUMBER
 10    ,BLKCRT                        DATE
 11    ,BLKTOT                        NUMBER
 12    ,BLKSBLK                       NUMBER
 13    ,BLKSCN                        NUMBER
 14    ,BLKESCN                       NUMBER
 15    ,BLKBTM                        DATE
 16    ,BLKETM                        DATE
 17    ,BLKICRID                      NUMBER
 18    ,BLKOBJID                      NUMBER
 19    ,RPP_CDBDBID                   NUMBER
 20    ,RPP_TIMESTAMP                 NUMBER
 21    ,RPP_META_SPARE1               NUMBER
 22    ,RPP_META_SPARE2               NUMBER
 23  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> Rem pseudo controlfile X$KCCCC
SQL> CREATE TABLE SYS.RPP$X$KCCCC(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,CCRID                         NUMBER
  6    ,CCTSM                         VARCHAR2(20)
  7    ,CCSTM                         NUMBER
  8    ,CCFLG                         NUMBER
  9    ,CCDCP                         NUMBER
 10    ,CCDCS                         NUMBER
 11    ,CCDFP                         NUMBER
 12    ,CCBLK                         NUMBER
 13    ,CCCNT                         NUMBER
 14    ,CCSCN                         VARCHAR2(20)
 15    ,RPP_CDBDBID                   NUMBER
 16    ,RPP_TIMESTAMP                 NUMBER
 17    ,RPP_META_SPARE1               NUMBER
 18    ,RPP_META_SPARE2               NUMBER
 19  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> Rem pseudo controlfile X$KCCFC
SQL> CREATE TABLE SYS.RPP$X$KCCFC(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,FCRID                         NUMBER
  6    ,FCTSM                         VARCHAR2(20)
  7    ,FCSTM                         NUMBER
  8    ,FCBSS                         NUMBER
  9    ,FCBSC                         NUMBER
 10    ,FCFLG                         NUMBER
 11    ,FCDFP                         NUMBER
 12    ,FCPNO                         NUMBER
 13    ,FCBLK                         NUMBER
 14    ,FCCNT                         NUMBER
 15    ,FCSCN                         VARCHAR2(20)
 16    ,RPP_CDBDBID                   NUMBER
 17    ,RPP_TIMESTAMP                 NUMBER
 18    ,RPP_META_SPARE1               NUMBER
 19    ,RPP_META_SPARE2               NUMBER
 20  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> Rem pseudo controlfile X$KCCRSR
SQL> CREATE TABLE SYS.RPP$X$KCCRSR(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,RSRRID                        NUMBER
  6    ,RSRTST                        NUMBER
  7    ,RSRIS                         NUMBER
  8    ,RSRCI                         VARCHAR2(33)
  9    ,RSROP                         VARCHAR2(33)
 10    ,RSRES                         NUMBER
 11    ,RSRLV                         NUMBER
 12    ,RSRMP                         NUMBER
 13    ,RSRPI                         NUMBER
 14    ,RSRPS                         NUMBER
 15    ,RSR0I                         NUMBER
 16    ,RSR0S                         NUMBER
 17    ,RSRST                         VARCHAR2(20)
 18    ,RSRET                         VARCHAR2(20)
 19    ,RSRIM                         NUMBER
 20    ,RSROM                         NUMBER
 21    ,RSRFL                         NUMBER
 22    ,RPP_CDBDBID                   NUMBER
 23    ,RPP_TIMESTAMP                 NUMBER
 24    ,RPP_META_SPARE1               NUMBER
 25    ,RPP_META_SPARE2               NUMBER
 26  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> Rem pseudo controlfile X$KCCTKH
SQL> CREATE TABLE SYS.RPP$X$KCCTKH(
  2     INDX                          NUMBER
  3    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  4    ,UNPLUG_CON_ID                 NUMBER
  5    ,TKHRID                        NUMBER
  6    ,TKHTSN                        NUMBER
  7    ,TKHVRS                        NUMBER
  8    ,TKHFLG                        NUMBER
  9    ,TKHSTM                        NUMBER
 10    ,TKHPREKEY                     NUMBER
 11    ,TKHKOD_ENA                    NUMBER
 12    ,TKHKOD_KEY                    RAW(48)
 13    ,TKHKOD_MKEYID                 RAW(16)
 14    ,TKHKOD_MKLOC                  NUMBER
 15    ,TKHKOD_FLAG                   NUMBER
 16    ,RPP_CDBDBID                   NUMBER
 17    ,RPP_TIMESTAMP                 NUMBER
 18    ,RPP_META_SPARE1               NUMBER
 19    ,RPP_META_SPARE2               NUMBER
 20  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> Rem pseudo controlfile table
SQL> Rem The following tables are only used for redo shipping purpose,
SQL> Rem and do not need to be saved during role transition.
SQL> 
SQL> Rem pseudo controlfile table for kccsdm
SQL> CREATE TABLE SYS.ROPP$X$KCCSDM(
  2     CDBDBID                       NUMBER
  3    ,TIMESTAMP                     NUMBER
  4    ,META_SPARE1                   NUMBER
  5    ,META_SPARE2                   NUMBER
  6    ,INDX                          NUMBER
  7    ,INST_ID                       NUMBER DEFAULT 1 NOT NULL
  8    ,CON_ID                        NUMBER
  9    ,SDMID                         NUMBER
 10    ,SDMGAP                        RAW(132)
 11    ,SDMDCON                       RAW(132)
 12    ,SDMFLAG                       NUMBER
 13    ,SDMASCN                       VARCHAR2(128)
 14    ,SDMRLS                        VARCHAR2(128)
 15    ,SDMRLC                        NUMBER
 16    ,SDMSTATUS                     NUMBER
 17  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> Rem pseudo controlfile table for controlfile header checkpoint
SQL> CREATE TABLE SYS.ROPP$X$KCCFHXCP(
  2     PDBID                         NUMBER
  3    ,CDBDBID                       NUMBER
  4    ,TIMESTAMP                     NUMBER
  5    ,META_SPARE1                   NUMBER
  6    ,META_SPARE2                   NUMBER
  7    ,FHXCP_SCN                     NUMBER
  8    ,FHXCP_TIM                     NUMBER
  9    ,FHXCP_THR                     NUMBER
 10    ,FHXCP_RBA_SEQ                 NUMBER
 11    ,FHXCP_RBA_BNO                 NUMBER
 12    ,FHXCP_RBA_BOF                 NUMBER
 13    ,FHXCP_ETB                     RAW(132)
 14  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> Rem PDB role transition history table
SQL> Rem  ORIGINAL_PDBDBID source pdbdbid at pdb creation
SQL> Rem  LOCAL_PDBID      local pdbid
SQL> Rem  CDBDBID          source cdbdbid
SQL> Rem  TIMESTAMP        lifespan begin timestamp
SQL> Rem  PDBID            pdbid in this lifespan
SQL> Rem  PDBDBID          pdbdbid in this lifespan
SQL> Rem  PDBGUID          pdbguid in this lifespan
SQL> Rem  TRANSTYPE        type of lifespan begin
SQL> Rem  PREV_PDBID       pdbid of previous lifespan
SQL> Rem  PREV_CDBDBID     cdbdbid of previous lifespan
SQL> Rem  PREV_TIMESTAMP   timestamp of previous lifespan
SQL> Rem  PDB_BR_SCN       lifespan begin resetlog scn
SQL> Rem  PDB_BR_TIM       lifespan begin timestamp
SQL> Rem  PDB_BEGIN_CKPT   lifespan begin ckpt structure
SQL> Rem  PDB_ER_SCN       lifespan end resetlog scn
SQL> Rem  PDB_ER_TIM       lifespan end resetlog timestamp
SQL> Rem  PDBENDSCN        lifespan end scn
SQL> CREATE TABLE SYS.ROPP$X$PDBHISTORY(
  2     ORIGINAL_PDBDBID              NUMBER
  3    ,LOCAL_PDBID                   NUMBER
  4    ,CDBDBID                       NUMBER
  5    ,TIMESTAMP                     NUMBER
  6    ,PDBID                         NUMBER
  7    ,PDBDBID                       NUMBER
  8    ,PDBGUID                       NUMBER
  9    ,TRANSTYPE                     NUMBER
 10    ,PREV_PDBID                    NUMBER
 11    ,PREV_CDBDBID                  NUMBER
 12    ,PREV_TIMESTAMP                NUMBER
 13    ,PDB_BR_SCN                    NUMBER
 14    ,PDB_BR_TIM                    NUMBER
 15    ,PDB_BEGIN_CKPT                RAW(156)
 16    ,PDB_ER_SCN                    NUMBER
 17    ,PDB_ER_TIM                    NUMBER
 18    ,PDBENDSCN                     NUMBER
 19  ) tablespace SYSAUX;

Table created.

SQL> 
SQL> Rem
SQL> Rem NOTE! NOTE! NOTE!
SQL> Rem
SQL> Rem If you add new table or sequence, then ensure to change
SQL> Rem downgrade scripts to drop/truncate that table and sequence.
SQL> Rem
SQL> Rem If you add new columns, then ugprade script must be changed and
SQL> Rem downgrade scripts must be changed to drop that column
SQL> Rem
SQL> Rem
SQL> 
SQL> Rem -------------------------------
> Rem Add new tables before this line
SQL> Rem -------------------------------
> 
SQL> Rem
SQL> Rem CDB views on top of pre-plugin tables
SQL> Rem
SQL> 
SQL> DECLARE
  2     name_in_use       EXCEPTION;
  3     job_doesnt_exist  EXCEPTION;
  4     prog_doesnt_exist EXCEPTION;
  5     queue_exist       EXCEPTION;
  6     queue_table_exist EXCEPTION;
  7     pragma exception_init( name_in_use, -955 );
  8     pragma exception_init( job_doesnt_exist, -27475 );
  9     pragma exception_init( prog_doesnt_exist, -27476 );
 10     pragma exception_init( queue_exist, -24006);
 11     pragma exception_init( queue_table_exist, -24001);
 12     partition      NUMBER;
 13     part_clause    VARCHAR2(128);
 14     l_columns      VARCHAR2(32767);
 15     l_ropp_columns VARCHAR2(32767);
 16     nullcol        VARCHAR2(8) := '$NULL$';
 17     l_program_name VARCHAR2(128) := 'SYS.ORA$PREPLUGIN_BACKUP_PRG';
 18     l_job_name     VARCHAR2(128) := 'SYS.ORA$PREPLUGIN_BACKUP_JOB';
 19     l_queue_name   VARCHAR2(128) := 'SYS.ORA$PREPLUGIN_BACKUP_QUE';
 20     l_queue_tab    VARCHAR2(128) := 'SYS.ORA$PREPLUGIN_BACKUP_QTB';
 21     l_pay_type     VARCHAR2(128) := 'SYS.ORA$PREPLUGIN_BACKUP_MSG_T';
 22  BEGIN
 23     SELECT decode(value, 'TRUE', 1, 0) INTO partition
 24       FROM v$option
 25      WHERE parameter = 'Partitioning';
 26  
 27     IF (partition > 0) THEN
 28        part_clause := 'PARTITION BY LIST (con_id) (PARTITION p0 VALUES (0))';
 29     END IF;
 30  
 31     FOR i IN
 32     (
 33        SELECT name_krbppbtbl                     name,
 34               rPP_krbppbtbl                      rPP,
 35               cdbrPP_krbppbtbl                   cdbrPP,
 36               roPP_krbppbtbl                     roPP,
 37               cdbroPP_krbppbtbl                  cdbroPP,
 38               nvl(seqName_krbppbtbl, nullcol)    seqName,
 39               instidName_krbppbtbl               instidName
 40          FROM X$KRBPPBTBL
 41     )
 42     LOOP
 43        CDBView.create_cdbview(FALSE, 'SYS', i.rPP, i.cdbrPP);
 44        EXECUTE IMMEDIATE
 45           'GRANT SELECT ON SYS.' || i.rPP || ' TO SELECT_CATALOG_ROLE';
 46        EXECUTE IMMEDIATE
 47           'CREATE OR REPLACE PUBLIC SYNONYM ' ||
 48            i.cdbrPP || ' FOR SYS.' || i.rPP;
 49        EXECUTE IMMEDIATE q'{
 50           SELECT LISTAGG(dbms_assert.enquote_name(column_name), ',')
 51                  WITHIN GROUP (ORDER BY column_id) x
 52             FROM all_tab_columns
 53            WHERE table_name = :1
 54            AND owner = 'SYS'
 55            AND column_name != 'INST_ID'
 56           }'
 57        INTO l_columns
 58        USING i.rPP;
 59  
 60        -- Add runtime instance_id columns
 61        l_ropp_columns := regexp_replace(l_columns,
 62           '(.*,)("' || i.instidName || '")(.*)',
 63           '\1\2,TO_NUMBER(SYS_CONTEXT(''USERENV'',''INSTANCE''))"INST_ID"\3');
 64  
 65        -- Add INST_ID column after the column name indicated by X$KRBPPBTBL
 66        l_columns := regexp_replace(l_columns,
 67           '(.*,)("' || i.instidName || '")(.*)', '\1\2,"INST_ID"\3');
 68  
 69        -- Rename UNPLUG_CON_ID column as CON_ID in ROPP$ tables
 70        l_columns := regexp_replace(l_columns,
 71           '(.*,)("UNPLUG_CON_ID")(.*)', '\1"UNPLUG_CON_ID" AS "CON_ID"\3');
 72        l_ropp_columns := regexp_replace(l_ropp_columns,
 73           '(.*,)("UNPLUG_CON_ID")(.*)', '\1"CON_ID"\3');
 74  
 75        BEGIN
 76           EXECUTE IMMEDIATE
 77              'CREATE TABLE SYS.' || i.roPP ||
 78              ' tablespace SYSAUX ' || part_clause ||
 79              ' AS (SELECT ' || l_columns ||
 80              '       FROM SYS.' || i.rPP ||
 81              '      WHERE 1 = 0 )';
 82  
 83           EXECUTE IMMEDIATE
 84              'ALTER TABLE SYS.' || i.roPP || ' MODIFY INST_ID DEFAULT 1 ';
 85        EXCEPTION
 86           WHEN name_in_use THEN
 87              NULL;
 88        END;
 89  
 90        BEGIN
 91           IF (i.seqName != nullcol) THEN
 92              EXECUTE IMMEDIATE 'CREATE SEQUENCE SYS.' || i.seqName;
 93           END IF;
 94        EXCEPTION
 95           WHEN name_in_use THEN
 96              NULL;
 97        END;
 98  
 99        EXECUTE IMMEDIATE
100           'CREATE OR REPLACE VIEW ' ||
101            i.cdbroPP || ' CONTAINER_DATA SHARING=OBJECT AS ' ||
102            'SELECT ' || l_ropp_columns || ' FROM SYS.' || i.roPP || ' T ';
103        EXECUTE IMMEDIATE
104           'GRANT SELECT ON SYS.' || i.roPP || ' TO SELECT_CATALOG_ROLE';
105        EXECUTE IMMEDIATE
106           'CREATE OR REPLACE PUBLIC SYNONYM ' ||
107           i.cdbroPP || ' FOR SYS.' || i.roPP;
108     END LOOP;
109  
110     BEGIN
111        dbms_aqadm.create_queue_table(
112           queue_table        => l_queue_tab,
113           queue_payload_type => l_pay_type,
114           multiple_consumers => TRUE,
115           comment            => l_queue_name);
116     EXCEPTION
117        WHEN queue_table_exist THEN
118           NULL;
119     END;
120  
121     BEGIN
122        dbms_aqadm.create_queue(
123           queue_name         => l_queue_name,
124           queue_table        => l_queue_tab,
125           comment            => l_queue_name);
126     EXCEPTION
127        WHEN queue_exist THEN
128           NULL;
129     END;
130  
131     dbms_aqadm.start_queue(
132        queue_name         => l_queue_name);
133  
134     BEGIN
135        dbms_scheduler.drop_program(
136           program_name => l_program_name,
137           force        => TRUE);
138     EXCEPTION
139        WHEN prog_doesnt_exist THEN
140           NULL;
141     END;
142  
143     dbms_scheduler.create_program(
144        program_name        => l_program_name,
145        program_type        => 'STORED_PROCEDURE',
146        program_action      =>
147          'sys.dbms_preplugin_backup.importX$RmanTablesUsingConId',
148        number_of_arguments => 1,
149        enabled             => FALSE,
150        comments            => 'Program to import preplugin backups');
151  
152     dbms_scheduler.define_metadata_argument(
153        program_name       => l_program_name,
154        metadata_attribute => 'event_message',
155        argument_position  => 1,
156        argument_name      => 'p_con_id');
157  
158     dbms_scheduler.enable(name => l_program_name);
159  
160     BEGIN
161        dbms_scheduler.drop_job(
162           job_name  => l_job_name,
163           force     => TRUE);
164     EXCEPTION
165        WHEN job_doesnt_exist THEN
166           NULL;
167     END;
168  
169     dbms_scheduler.create_job(
170        job_name        => l_job_name,
171        program_name    => l_program_name,
172        queue_spec      => l_queue_name,
173        enabled         => FALSE);
174  
175     dbms_scheduler.set_attribute(
176        name      => l_job_name,
177        attribute => 'parallel_instances',
178        value     => TRUE);
179  
180     -- RTI 20485278
181     -- If PDB gets closed immediately after open which can happen during
182     -- migration from non-cdb to pdb, then we will retry few times before
183     -- giving up the import.
184     dbms_scheduler.set_attribute(
185        name      => l_job_name,
186        attribute => 'restart_on_failure',
187        value     => TRUE);
188  END;
189  /

PL/SQL procedure successfully completed.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> @@prvtrmns.plb
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> create or replace package body dbms_rcvman wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  f7fc1 273cd
 21  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
2223  
2224  /

Package body created.

SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> @@prvtbkrs.plb
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> create or replace
  2  PACKAGE BODY dbms_backup_restore wrapped
  3  a000000
  4  1
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  abcd
 20  b
 21  65f94 c271
 22  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
704  
705  /

Package body created.

SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> @@prvtpplb.plb
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> CREATE OR REPLACE PACKAGE BODY sys.dbms_preplugin_backup wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  4500 11d6
 21  MDSRdSSfPWVxly0rCDS4jf/cZSAwgz26HiBo39OdcpLVtN1bOyWBPB7HwC7f3w6NffCr7VEH
 22  LE9GU8sYDnknXfto+3OGIFrMd8hmbDvNDLt0oDFsB2rupXgoy76+LDQIv4l+A6XsaBnk+b6+
 23  +NL5ucRknc/OtGg0+DqxZL8UxaQz6jwF/HuwGtgYFlUqlO6qzKHR5GYwzR/GbYGzCPr3xFJu
 24  aJblG9flQIfpAVzTI5RQNBjC9YZdAp0M5Lxj9CVNoxEdp2K7aoaB+pnU0IGi3l6RiE8y8aRR
 25  H9hXmMFySkbP7mGhc0bhs5V2P3U/JqXaBuTCza5xI2Ff47KM7iFeasqPEFMiQp+gyVkxblBM
 26  aSR+0W1NUetWW4RTSwdJcrUI5E/AVWfIQyECSsoM2Zeu1fE8+qdvXUM+D+sI+mAJGLIhacAl
 27  gSOG9ardfJbCqUAyNaFUka3YWuJ592pIXUJDIFgcoYnyd1eRiiBYePu6TBZQp569ekCXYWIr
 28  V799aIWHeofgH29pAbK2cLPXSxS5Qpustb4cLLxjmBYq/+FqankJ3z+TJVGjjczxxqA+mtR2
 29  G/zg7dyOI+nWq2F/8tOrYD/p6ZgM5FPhY+EQWe4FT6onAzXW2SryGiL6kA72AcFeWnznvJxk
 30  OJwyXtgOLepCo8YIObcTyNjLKSQxPGqcjiV15ppC92w8bK9fpo1Ptc60z1NssNtLUSF2yt7r
 31  N8003B3iGJkkSuZ1HHyZyjt1ktrWlWcd9/9ze+LOUZC+Drfj1nJ1N0lXjqDlmSG9rGwDwhv6
 32  5pe8h3Z8CCvCzbtHnDPKjeHvozPtSWpwVjW+NenTtSeoiCMM+ZDv3OLR8gp0DMKiXqFmvIDN
 33  bky6mIJuiH50JRcrL2urPGg/kUHpWb/cbzBVL3ZT4iHnjbFDGBMozxERzJGV5aWM8cK7lC6D
 34  6AL8rEtd7en7IlHHHtJk/+PZz6juvFAQdQRfzXaoNsoj5vSRpLATawUa6kIrw6a/uZmmhZDt
 35  oFpuhoL7NJUZSm85Q0SybCddypVyOZNxSSYGyVhJ29wU1M/iyxmOBXqaKwUwlez9OlyEqn/S
 36  moJx2Is4uh1SjpZs+a0XS2IR3SthyCMvK3fi5QJ4JfPEniRKMW/jjZwQv/bKz5yr3mztolSx
 37  In4Qn1isW/sfW1DA+P/Y52tCElX6LwJRZAOPV9nAoeJ+pk2AOv92/PFCaR7fC3kl0nmQXDt9
 38  mehYlCUV8W74Uibhbr3CUlbA3adsR5uSi2yFJZhElP2WvoQ3rv2VfkJPlTjS71UqEVLNo36u
 39  nNgOQopbw5TwU678IdAekLgPrnE8dxCnCjwBT8aIylA27t9onryAAGoQVMPM5q+AFDqEdRSP
 40  6ezT4UlMJMsThkHwzKH+cxfIWmfFaZQvGTGAKtXxb2GIiP1jdF15pf10doLzxE69ZZQ1Mypl
 41  GA56F2jeMhz2rA8ehznkCUvmOMVBdNUnR3w2lC/mssWmUBIC527dzbbQuDlI2e735Q16TLKW
 42  YqRGCWxPeBf46D8yspt9kuSiqatjk8618QhdrzXLMH1CrwSgQH/ZWJQtdAjy91BYy+phcGzg
 43  jdPlyUAK8+/O9uGn+wHvGfPkWWzhhSMzcBHGCMk+a2Pos0WNFclne5Q2yHrL05MXDsffvhC5
 44  98oNHyj2iYNt2Vp1RUlPC5DQpxuPjHd3rZ+bEeIvB2uB4+L3rI8qYvrmsKjiwUiS3U1BfcFP
 45  JZTDEVsQUEDDAu0bOJ5R6AKYEbIYQhLRG+Y3PSlqGzruKf4U2Try5JHuRXSc1+miljgQLjob
 46  4XJaWLYoxatFfupMWnRNmRul0ltHWa/0ZZVohdh1EwdCR8VeTTU8LwKv3jcjDJJh6N6lyBZ+
 47  9OheLRM5zBbVdE4XHTdDFgX6S7rD6gsVApenFXHid9Ri+u5tF3LI71wBHNTAXGE4qvKWrW3/
 48  NnXsuLtcPUPzaocMHDXSCVkeCtqhVsGcYRt8wBHewewTug5jrhtvpKgDhWA30QuwVlHqeLpg
 49  K5NK4AAx9Svr9+DQIvxIB0gGswBEhsbFAZBet9mzkDzvrcihLCXr9MBMB7q980Jap+Nhpi4C
 50  AIpy8ys03ZDOOYjrtTzoNpOQK22wHDpAEsiuuzeVES2ns8S7+iNguHnWN/VuNI4+fLP9fiza
 51  1eNOXWXlh8Tmv9xRTzwDD6Z9/5NER24QeJ6AaFzBZzqLRg0smDliwNM76KyPaMAwAiERqfVJ
 52  GqHyiRrXJclPGd0cFCE7tPTUUVzAtJb7EktS7QDDMivNMYk1HJP9EEIuMquKjOyVfkcfqlf6
 53  82t5YOys8bLH7K9x8qQ0SF2XyeiIkleFgkrQqs/u164UR/rd+Zzj0PdWiv06AIR9xBIWBpsS
 54  YCbglFefloK0/dkAC7+MsGaF41EK1mYIXkHcnADxOT3v2A8ayZ+wHYTFfGsCutYYESOv4WnZ
 55  OeFQv7C4EbFccuKq5yMAcDFEK+z0MExgtK04gIz5I4S41t/9aJxlzWeMkRMyibRbARuzyQRq
 56  7ZlFRn8ZxVlMPU9B9xGVq6dlVMLf9TqwuKuDImbJVnvkwLykYAeNEy0jUshsocM+MBVwLRkK
 57  OGadR2pi1YXCSWKMDgkGK8ROEAxb+3kPMPARU0kCnrbOJ8oJu5fO6hd+D1KwFtKv5S8HXvGH
 58  2+AtDDsDnVYbfYYO7HifgvrEwHTEqXFDI1mpl0gczab1jYVb0jIgmaOJOyVp4DfdVktWisAi
 59  XTuvCd3QX+2C3embKerhZXHXFLfMLsgNeatrM8io0jXVP6E70IhUL578UUeeaq+rFbqpBqyK
 60  Ic5SoNPjnwsckLN10XZD00nUA+MOjQ/4eaTadAzFp5mOzMK0yVYMqgYYd/8rFbk6EmHFbPHJ
 61  qOrhSXuHa9Bim3+N2tsUynYwj/X13VHsmZErZs7PaQmrRYuP408VLpni9L1mnilD1OAtHBfU
 62  h157JNcK2QWJa/f8u8luOHHNzWcpfnMgIH+wl7aOY3RlTc0zvo4LVW5qQrRpsZQniDSBXqSM
 63  5BtcKr7aA2ciM7SebtK0+ATHgUxSH0wJmS47v94FBwIv9E+73C2pC+h/aRpuvQlP8fwivL8J
 64  z5PtyEqr6FNvzrO9fXG8VyvCfHF5vk+1c0IBz+CYI7VkmCQiEDfITviY0D2YE5oZqjMkwcR4
 65  bZx4LCCxGUAELJ9TfhNMLm60rr8NnYzXQoq7dVrAjSYP6R/D7xfLs9DOeZpYKXkErpl8wuCy
 66  u7UubPkPfVADK7RLn2HMq9/IpKJ6EhXsqefbbPWT1GoGTSP4lWps35lSkV4wMLRnFAEvF2yU
 67  jns623PTtPLMy2JAMUGRLI1oJOVusslhT1pv6Z9Irr5qwsmf/cYznubaw+zAeM2T4Zf30sPJ
 68  nYATM4oVwzZ1/ZIceEQ1KAyVCOKZAqNYd5LJwyLRfU8k7FFOxD+Ie7TkRV8lpOe2AoUXQy4J
 69  wNYXwJECqsgD+IurM0sxkq8T7P54jXFAwd7+qsXnlbxyqVEP+Yl5gBh2z4zucEzrOZTl5z+v
 70  wiL5s4aWXdjCajDEW5ZZTU6Dbf1fgGgEwnX1iL9JbD/dCJ9jMgaXo+bZ8UKjadzL5/AR9NSy
 71  2i6E+BV2xBPZlZK+Fy3MURyfG3kyZYF/PIR2itKssUvBf2JnvWiB/vQJxPsJVC5M55zokMF6
 72  kkpsSuZq7Y93o1ur4IM5IpG0N2BD+TJuOmtRg96G9+wVTpyYFnesQGUkK9i+npF/xWo6vBKj
 73  4947sIrMhQQYatRps7yY8lHxraRleuFfsWSNs4rx5F0wzlR5uIuQMgZV/YtqxvLWo02jBqwg
 74  gh7I1utYJnt5MG97+R1Rs2atZDVCXgfC30kJ/lCJQ4943/yoiocBLrZZeMes+nygDVKyMxFo
 75  Ibte9oM95/hVmQ2U5MZ7IYNhXriVJMsRZHliJCgR0K9v2eyFUMoS0eLWoOaQdAYejMaWKw1C
 76  pLEDTfWmgBlLCcccPNGVPwHtAgTZc4WFE3c/5s3R/BNV9zQjRPL+v7jYetrHuaRpB0HUKSCI
 77  iSEZ8jEApz1QPWOg50r/w97trkiNwiO1G8dUEtsRT1PYXuNJqpbnsCvrbXT+8w8LoJaRuUgg
 78  PzqS7jxeP5UHnGNfdYHb6U1BrVsTgm7+tjcgJpk6fAIeN3/heqSlOyjvkDC8q1MLXkqAOwqC
 79  w9EuT4NOidK4F2rM5Zldu8NdxIQz3AEvSYZWMAPFC/JOlZJa2re7Zci+A4o4s9ZHNK+fXx/e
 80  mRM7wlOFBdISZQXwHqlIilFcSUEynScI84vYYJqWHJZSYnrTs9As7C39fIkP1KqFr/IXJSyt
 81  EuTxhIcIexJ6elxMoO1nV2Kgd90PGwMYaTm+CMZFWhHBHMfax08pYW1uz5QOnSU94jzXJI5T
 82  rsoccsmY5IGoMvmtMkOI6UO+lEP3wJucrg8k+eS52RJxaYcE2YUjskJP4Ztfnnpg/BDFapoO
 83  fM9yRaW8ATiEXLSjjhzab/SbfO+1Baqm/T9F4g==
 84  
 85  /

Package body created.

SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem grants for datapump import export
SQL> Rem
SQL> @@catdph.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catdph.sql /main/19 2018/07/19 11:08:43 bwright Exp $
SQL> Rem
SQL> Rem catdph.sql
SQL> Rem
SQL> Rem Copyright (c) 2004, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catdph.sql -  Main install script for all DataPump header components
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script is invoked from catproc.sql before catptabs.sql where
SQL> Rem      our scripts catdpb.sql and catnodpobs.sql are run in parallel.
SQL> Rem      Because of the parallel execution, we want as much of our installation
SQL> Rem      to be done in parallel.  Therefore, all new objects should try to be
SQL> Rem      added to catdpb.sql.  Only if conflicts or errors occur during upgrade,
SQL> Rem      the new operations should be added here.  This script gets run by itself
SQL> Rem      from catproc.sql before the catptabs.sql scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This is an old note and accuracy has not been confirmed:
SQL> Rem      When adding components to this file, remember to:
SQL> Rem      Update catnodp.sql, ship_it, getcat.tsc, tkdp2pfg.tsc, tkdpsuit.tsc,
SQL> Rem      tkdppfr.sql and tkdp2rst.tsc. (The last four are used for PL/SQL
SQL> Rem      code coverage.) Also consider upgrade/downgrade.
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catdph.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catdph.sql
SQL> Rem SQL_PHASE: CATDPH
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catproc.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    bwright     07/17/18 - Bug 28360226: Eat 'invalid directory object'
SQL> Rem    bwright     08/14/17 - Bug 26638628 Move as much from catdph to catdpb
SQL> Rem                           to maximize upgrade parallelism
SQL> Rem    bwright     07/10/17 - Bug 25651930: Use catnodpaq to drop AQ tables
SQL> Rem    sdipirro    05/26/15 - Fix potential lident issue
SQL> Rem    bwright     02/12/15 - Bug 20391526: fix long identifier issues
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    dgagne      08/30/13 - do not remove stats index
SQL> Rem    rphillip    12/11/12 - Bug 15888410: use global temp table for explain
SQL> Rem                           plan
SQL> Rem    dgagne      05/21/12 - drop stat table before recreating it
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    lbarton     09/09/10 - move prvtdput from catdph.sql to catpdbms.sql,
SQL> Rem                            catpprvt.sql
SQL> Rem    dgagne      02/01/10 - add update priv in sys.impdp_stats to public
SQL> Rem    sdipirro    04/24/07 - Support multiple queue tables
SQL> Rem    wfisher     09/12/06 - Disable application roles
SQL> Rem    rburns      08/13/06 - split out for parallel
SQL> Rem    bpwang      10/05/05 - Grant execute on dbms_server_alert
SQL> Rem    wfisher     09/01/05 - Lrg 1908671: Factoring for Standard Edition
SQL> Rem    wfisher     08/19/05 - Creating new roles
SQL> Rem    dgagne      10/15/04 - dgagne_split_catdp
SQL> Rem    dgagne      10/04/04 - Created
SQL> Rem
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> --
SQL> -- Need this here because dbmsslrt.sql moved before catdph.sql in catproc.sql
SQL> -- (could not move to catdpb.sql).
SQL> --
SQL> GRANT execute
  2  ON dbms_server_alert
  3  TO datapump_imp_full_database;

Grant succeeded.

SQL> 
SQL> --
SQL> -- ----------------------------------------------------------------------------
SQL> -- Import stats table
SQL> -- ----------------------------------------------------------------------------
SQL> -- The global temp. table used by datapump import to store statistics
SQL> -- information that will be used with dbms_stats.import... The worker will load
SQL> -- statistics information into this table and then call the dbms_stats package
SQL> -- to take the data in this table and create statistics.
SQL> --
SQL> BEGIN
  2    DBMS_STATS.DROP_STAT_TABLE('SYS', 'IMPDP_STATS');
  3  EXCEPTION
  4    WHEN OTHERS THEN
  5      IF SQLCODE = -20002 THEN
  6        NULL;
  7      ELSE
  8        RAISE;
  9      END IF;
 10  END;
 11  /

PL/SQL procedure successfully completed.

SQL> 
SQL> BEGIN
  2    DBMS_STATS.CREATE_STAT_TABLE('SYS','IMPDP_STATS', NULL, TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> GRANT delete,
  2        insert,
  3        select,
  4        update
  5  ON sys.impdp_stats
  6  TO PUBLIC
  7  /

Grant succeeded.

SQL> 
SQL> 
SQL> --
SQL> -- ----------------------------------------------------------------------------
SQL> -- Create the Data Pump default directory object (DATA_PUMP_DIR)
SQL> -- ----------------------------------------------------------------------------
SQL> --
SQL> BEGIN
  2    DBMS_DATAPUMP_UTL.CREATE_DEFAULT_DIR;
  3  EXCEPTION
  4    WHEN others THEN
  5      -- Bug 28360226. Eat error when PDB tries creating the
  6      -- directory object and it already exists in the root.
  7      -- Raise all other errors.
  8      IF (SQLCODE != -29280) THEN
  9        RAISE;
 10      END IF;
 11  END;
 12  /

PL/SQL procedure successfully completed.

SQL> --
SQL> -- ----------------------------------------------------------------------------
SQL> -- Create a global temporary table for when the export version is not the same
SQL> -- as the current version and the current master table needs to be downgraded.
SQL> -- This way, the data in the master can be copied to the global temporary table
SQL> -- and then it can be modified and once that is complete, the data can be
SQL> -- unloaded.
SQL> -- ----------------------------------------------------------------------------
SQL> --
SQL> BEGIN
  2    SYS.KUPV$FT.CREATE_GBL_TEMPORARY_MASTERS();
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> 
SQL> --
SQL> -- ----------------------------------------------------------------------------
SQL> -- Drop all DataPump queue tables by invoking DBMS_AQADM, so that package has
SQL> -- to be valid.  (couldn't move to catdpb.sql).  Note: Data Pump queue tables
SQL> -- are now created dynamically, so there is no need to create one here anymore.
SQL> -- ----------------------------------------------------------------------------
SQL> --
SQL> @@catnodpaq
SQL> Rem
SQL> Rem $Header: rdbms/admin/catnodpaq.sql /main/1 2017/07/31 11:05:56 bwright Exp $
SQL> Rem
SQL> Rem catnodpaq.sql
SQL> Rem
SQL> Rem Copyright (c) 2002, 2017, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem     catnodpaq.sql - Drop all DataPump AQ tables
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem
SQL> Rem    NOTES
SQL> Rem     This script only gets executed from downgrade and patching (dpload),
SQL> Rem     not during upgrade as the DBMS_ADADM package is not around then.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem     SQL_SOURCE_FILE: rdbms/admin/catnodpaq.sql
SQL> Rem     SQL_SHIPPED_FILE: rdbms/admin/catnodpaq.sql
SQL> Rem     SQL_PHASE: DOWNGRADE
SQL> Rem     SQL_STARTUP_MODE: DOWNGRADE
SQL> Rem     SQL_IGNORABLE_ERRORS: NONE
SQL> Rem     SQL_CALLING_FILE: rdbms/admin/catnodpall.sql
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED (MM/DD/YY)
SQL> Rem    bwright   07/06/17 - Created, separated from catnodp.
SQL> Rem
SQL> ----------------------------------------------
SQL> ---     Drop DataPump queue tables
SQL> ----------------------------------------------
SQL> DECLARE
  2    qt_name varchar2(128);
  3    CURSOR c1 IS SELECT table_name FROM dba_tables WHERE
  4      owner = 'SYS' AND table_name LIKE 'KUPC$DATAPUMP_QUETAB%';
  5  BEGIN
  6    OPEN c1;
  7    LOOP
  8      FETCH c1 INTO qt_name;
  9      EXIT WHEN c1%NOTFOUND;
 10      dbms_aqadm.drop_queue_table(queue_table => 'SYS.' || qt_name,
 11                                  force       => TRUE);
 12    END LOOP;
 13    CLOSE c1;
 14  EXCEPTION
 15    WHEN OTHERS THEN
 16      CLOSE c1;
 17      IF SQLCODE = -24002 THEN
 18        NULL;
 19      ELSE
 20        RAISE;
 21      END IF;
 22  END;
 23  /

PL/SQL procedure successfully completed.

SQL> --
SQL> -- ----------------------------------------------------------------------------
SQL> -- Build heterogeneous type definitions and install XSL stylesheets (from
SQL> -- rdbms/xml/xsl) in sys.metastylesheet.
SQL> -- ----------------------------------------------------------------------------
SQL> --
SQL> @@catmet2.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catmet2.sql /main/4 2014/02/20 12:45:37 surman Exp $
SQL> Rem
SQL> Rem catmet2.sql
SQL> Rem
SQL> Rem Copyright (c) 2004, 2014, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catmet2.sql - Creates heterogeneous types for Data Pump's mdapi
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Creates heterogeneous type definitions for
SQL> Rem        TABLE_EXPORT
SQL> Rem        SCHEMA_EXPORT
SQL> Rem        DATABASE_EXPORT
SQL> Rem        TRANSPORTABLE_EXPORT
SQL> Rem      Also loads xsl stylesheets
SQL> Rem      All this must be delayed until the packages have been built.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catmet2.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catmet2.sql
SQL> Rem SQL_PHASE: CATMET2
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catdph.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      01/23/14 - 13922626: Update SQL metadata
SQL> Rem    mjangir     09/21/12 - bug 14658090: run catmetx to enable diffing code
SQL> Rem    lbarton     06/22/04 - Bug 3695154: obsolete initmeta.sql
SQL> Rem    lbarton     04/27/04 - lbarton_bug-3334702
SQL> Rem    lbarton     01/28/04 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> -- create the types
SQL> 
SQL> exec dbms_metadata_build.set_debug(false);

PL/SQL procedure successfully completed.

SQL> exec DBMS_METADATA_DPBUILD.create_table_export;

PL/SQL procedure successfully completed.

SQL> exec DBMS_METADATA_DPBUILD.create_schema_export;

PL/SQL procedure successfully completed.

SQL> exec DBMS_METADATA_DPBUILD.create_database_export;

PL/SQL procedure successfully completed.

SQL> exec DBMS_METADATA_DPBUILD.create_transportable_export;

PL/SQL procedure successfully completed.

SQL> 
SQL> -- load XSL stylesheets
SQL> 
SQL> exec SYS.DBMS_METADATA_UTIL.LOAD_STYLESHEETS;

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Bug 6603832: Run catmetx.sql if XDB is installed in the database
SQL> -- Bug 14658090: Run catmetx.sql to enable the diffing code
SQL> COLUMN :xdb_metadata NEW_VALUE xdb_metadata_file NOPRINT
SQL> VARIABLE xdb_metadata VARCHAR2(50)
SQL> 
SQL> DECLARE
  2    xdb_version registry$.version%type;
  3    catalog_version registry$.version%type;
  4  BEGIN
  5    :xdb_metadata := 'nothing.sql';    -- initialize for not running catmetx.sql
  6    select version into catalog_version from registry$ where cid = 'CATALOG';
  7    select version into xdb_version from registry$ where cid='XDB';
  8    IF xdb_version = catalog_version THEN
  9      :xdb_metadata := 'catmetx.sql';
 10    END IF;
 11  EXCEPTION
 12    WHEN no_data_found THEN NULL;  --  XDB not loaded
 13  END;
 14  /

PL/SQL procedure successfully completed.

SQL> 
SQL> SELECT :xdb_metadata FROM DUAL;




1 row selected.

SQL> @@&xdb_metadata_file
SQL> Rem $Header: rdbms/admin/nothing.sql /main/4 2018/07/25 13:49:55 surman Exp $
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/nothing.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/nothing.sql
SQL> Rem SQL_PHASE: UTILITY
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: NONE
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> 
SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> --
SQL> -- ------------------
SQL> -- End of catdph.sql
SQL> -- ------------------
SQL> --
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> --CATCTL -R
SQL> --CATCTL -M  -D "Catproc SQL"               Anonymous PLSQL blocks
SQL> @@catpexec.sql     --CATFILE -X
SQL> Rem
SQL> Rem $Header: rdbms/admin/catpexec.sql /st_rdbms_19/4 2018/12/20 12:01:59 yxie Exp $
SQL> Rem
SQL> Rem catpexec.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catpexec.sql - CATProc EXECute pl/sql blocks
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script runs after all package and type bodies have been loaded
SQL> Rem      and created objects using the packages and types.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This script must be run only as a subscript of catproc.sql.
SQL> Rem      It can be run with catctl.pl as a multiprocess phase.
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catpexec.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catpexec.sql
SQL> Rem SQL_PHASE: CATPEXEC
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catproc.sql
SQL> Rem SQL_DRIVER_ONLY: YES
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    yxie        12/18/18 - bug29121405: remove argument to execemx
SQL> Rem    yxie        11/07/18 - proj79047: use omx for execemx default
SQL> Rem    yxie        07/05/18 - bug28014508: change execemx default to emx
SQL> Rem    yxie        05/09/18 - add default parameter to execemx
SQL> Rem    raeburns    05/14/17 - Bug 25906282: Use SQL_DRIVER_ONLY
SQL> Rem    sursridh    12/23/16 - Add support for pdb events notification.
SQL> Rem    shvmalik    11/25/16 - #25035608: revert back FCP txn
SQL> Rem    jlingow     07/01/16 - calling execschlb scheduler load balancing
SQL> Rem    shvmalik    06/30/16 - #23721669: add execfcp.sql
SQL> Rem    jftorres    02/17/15 - proj 45826: add execsmb.sql
SQL> Rem    jlingow     09/08/14 - proj-58146 Exec actions for remote scheduler
SQL> Rem                           agent.
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    jstraub     01/14/13 - XbranchMerge jstraub_lrg-8743190 from
SQL> Rem                           st_rdbms_12.1.0.1
SQL> Rem    jstraub     01/09/13 - remove catapex.sql
SQL> Rem    surman      12/10/12 - XbranchMerge surman_bug-12876907 from main
SQL> Rem    surman      11/14/12 - 12876907: Add ORACLE_SCRIPT
SQL> Rem    jerrede     10/04/12 - Fix Deadlock issue in catdph.sql when alter
SQL> Rem                           package dbms_metadata_util command was issued
SQL> Rem                           Moved to serial phase
SQL> Rem    nbenadja    06/21/12 - Move catgwmcat.sql and prvtgwm.cat to catpend.sql
SQL> Rem    rpang       03/28/12 - lrg 6858789: remove execnacl.sql
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    sdball      03/23/12 - Add GSM catalog and procedures
SQL> Rem    rpang       02/13/12 - Network ACL triton migration
SQL> Rem    dgraj       10/13/11 - Project 32079: Add script for TSDP
SQL> Rem    jerrede     12/13/11 - Add Comments for Parallel Upgrade
SQL> Rem    jerrede     10/13/11 - Parallel Upgrade ntt Changes
SQL> Rem    jerrede     09/08/11 - Parallel Upgrade Project #23496 change file
SQL> Rem                           names for catmeta files.
SQL> Rem    jerrede     09/01/11 - Parallel Upgrade Project #23496
SQL> Rem    xbarr       06/01/11 - remove prvtdmj
SQL> Rem    yxie        03/06/11 - em express catalog scripts
SQL> Rem    jstraub     03/15/11 - add catapex.sql
SQL> Rem    rburns      01/06/07 - final catproc cleanup
SQL> Rem    ilistvin    11/10/06 - move execsqlt.sql to execsvrm.sql
SQL> Rem    rburns      09/16/06 - split catsvrm.sql
SQL> Rem    jinwu       11/13/06 - add execstr.sql (Streams)
SQL> Rem    elu         10/23/06 - add replication files
SQL> Rem    arogers     10/23/06 - 5572026 - call execsvr.sql
SQL> Rem    rburns      08/23/06 - more restructuring
SQL> Rem    rburns      08/13/06 - more restructuring
SQL> Rem    jsoule      07/18/06 - add bsln job creation
SQL> Rem    dkapoor     05/23/06 - OCM integration
SQL> Rem    nlewis      06/06/06 - secure configuration changes
SQL> Rem    kneel       06/01/06 - add exechae.sql
SQL> Rem    pbelknap    05/26/06 - add execsqlt
SQL> Rem    rburns      05/19/06 - add queue files
SQL> Rem    rburns      01/13/06 - split catproc for parallel upgrade
SQL> Rem    rburns      01/13/06 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> 
SQL> Rem **********************************************************************
SQL> Rem
SQL> Rem  NOTE: SQL CODE NOT PERMITTED IN THIS FILE ONLY THE EXECUTION OF A
SQL> Rem       .SQL or .PLB file.
SQL> Rem
SQL> Rem **********************************************************************
SQL> 
SQL> Rem
SQL> Rem Catmeta Grants
SQL> Rem
SQL> @@catmetgrant2.sql
SQL> Rem Copyright (c) 1987, 2017, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem NAME
SQL> Rem    CATMETGRANT2.SQL - Grants of the Oracle dictionary for
SQL> Rem                       Metadata API.
SQL> Rem  FUNCTION
SQL> Rem     Grants privileges on views, objects and types of
SQL> Rem     the Oracle dictionary for use by the DataPump Metadata API.
SQL> Rem  NOTES
SQL> Rem     Must be run when connected to SYS or INTERNAL.
SQL> Rem     IMPORTANT! Keep the files catnomtt.sql and catnomta.sql in synch with
SQL> Rem     this file. These are invoked by catnodp.sql during downgrade.
SQL> Rem
SQL> Rem     All types must have EXECUTE granted to PUBLIC.
SQL> Rem     All top-level views used by the mdAPI to actually fetch full object
SQL> Rem     metadata (eg, KU$_TABLE_VIEW) must have SELECT granted to PUBLIC, but
SQL> Rem     must have CURRENT_USERID checking security clause.
SQL> Rem     All views subordinate to the top level views (eg, KU$_SCHEMAOBJ_VIEW)
SQL> Rem     must have SELECT granted to SELECT_CATALOG_ROLE.
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catmetgrant2.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catmetgrant2.sql
SQL> Rem SQL_PHASE: CATMETGRANT2
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem  MODIFIED
SQL> Rem     mjangir    03/27/17 - 23181020: adding ku$_xsolap_policy_list_t
SQL> Rem     sdavidso   01/19/17 - bug25225293 make procact_instance work with CBO
SQL> Rem     jjanosik   10/07/16 - Bug 24661809: Add grants for new types and views
SQL> Rem                           for procedural actions and objects
SQL> Rem     jjanosik   05/03/16 - bug 18083463 - change audit_view get rid of old
SQL> Rem                           versioned audit_views
SQL> Rem     mjangir    04/25/16 - Bug 22763372: adding ku$_rls_policy_list_t
SQL> Rem     jjanosik   02/02/16 - bug 20317926 - add grant for new trigger view
SQL> Rem     jjanosik   11/23/15 - rti 18756088 - add exp_full_database to audit
SQL> Rem                           views
SQL> Rem     jjanosik   09/23/15 - bug 13611733: Change some grants
SQL> Rem     sdavidso   03/06/15 - Parallel metadata export
SQL> Rem     rapayne    10/20/14 - bug 20164836: support for RAS schema level priv
SQL> Rem                           grants.
SQL> Rem     skayoor    11/30/14 - Proj 58196: Change Select priv to Read Priv
SQL> Rem     bwright    11/17/14 - Support 'audit policy by granted roles'
SQL> Rem     sdavidso   09/10/14 - bug14821907: find tablespaces: table
SQL> Rem     rapayne    04/26/14 - proj 46816: support for new sysrac priv.
SQL> Rem     surman     12/29/13 - 13922626: Update SQL metadata
SQL> Rem     rapayne    11/24/13 - Bug 15916457: add grant for new objgrant_list_t
SQL> Rem     sdavidso   10/15/13 - proj-47829 don't export READ/READ ALL TABLES to
SQL> Rem                           pre 12.1
SQL> Rem     lbarton    10/02/13 - Project 48787: views to document mdapi transforms
SQL> Rem     rapayne    04/15/13 - bug 16310682: reduce memory for procact_schema
SQL> Rem     rapayne    11/06/12 - bug 15832675: create 11_2_view_view to exclude
SQL> Rem                           views with bequeath current_user.
SQL> Rem     traney     08/02/12 - 14407652: edition enhancements
SQL> Rem     rapayne    08/10/12 - lrg 7071802: new mviews to support secondary
SQL> Rem                           materialized views.
SQL> Rem     lbarton    07/26/12 - bug 13454387: long varchar
SQL> Rem     ssonawan   07/19/12 - bug 13843068: add ku$_11_2_psw_hist_view
SQL> Rem     surman     03/27/12 - 13615447: Add SQL patching tags
SQL> Rem     sdavidso   01/31/12 - bug 11840083: reduce memory for procact_system
SQL> Rem     rapayne    01/02/12 - add credential objects
SQL> Rem     ebatbout   01/31/12 - Proj. 36950: Give select and execute privileges
SQL> Rem                           on code_base_grant type and view to public.
SQL> Rem     sdavidso   12/14/11 - add audit policy objects
SQL> Rem     lbarton    11/30/11 - 36954_dpump_tabcluster_zonemap
SQL> Rem     ebatbout   11/09/11 - Proj. 36951: Give select privilege to view,
SQL> Rem                           ku$_on_user_grant_view
SQL> Rem     sdavidso   11/03/11 - lrg 6000876: no export 12.1 privs to pre-12
SQL> Rem     dgagne     09/20/11 - add new stat grants
SQL> Rem     jerrede    09/07/11 - Created for Parallel Upgrade Project #23496
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> grant execute on ku$_opbinding_list_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_opbinding_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_operator_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_operator_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_indexop_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_indexop_list_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_indexop_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_indarraytype_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_indarraytype_list_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_indarraytype_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_indextype_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_indextype_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_objgrant_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_objgrant_list_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_objgrant_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_10_1_objgrant_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_sysgrant_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_sysgrant_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_10_1_sysgrant_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_11_2_sysgrant_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_12_1_sysgrant_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_triggercol_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_triggercol_list_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_triggercol_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_triggerdep_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_triggerdep_list_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_triggerdep_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_trigger_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_trigger_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_12_1_trigger_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_11_2_trigger_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_10_2_trigger_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_view_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_11_2_view_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_view_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_view_objnum_view to public
  2  /

Grant succeeded.

SQL> grant select on ku$_depviews_base_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant read on ku$_depviews_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_outline_hint_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_outline_hint_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_outline_node_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_outline_node_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_outline_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_outline_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_synonym_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_synonym_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_directory_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_directory_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_rollback_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_rollback_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_dblink_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_dblink_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_10_1_dblink_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_trlink_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_trlink_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_fga_rel_col_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_fga_rel_col_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_fga_policy_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_fga_policy_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_rls_sec_rel_col_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_rls_sec_rel_col_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_rls_associations_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_rls_assoc_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_rls_policy_objnum_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_rls_policy_objnum_view to PUBLIC
  2  /

Grant succeeded.

SQL> grant execute on ku$_rls_policy_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_rls_policy_list_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_rls_policy_view to PUBLIC
  2  /

Grant succeeded.

SQL> grant execute on ku$_rls_group_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_rls_group_view to PUBLIC
  2  /

Grant succeeded.

SQL> grant execute on ku$_rls_context_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_rls_context_view to PUBLIC
  2  /

Grant succeeded.

SQL> grant execute on ku$_m_view_scm_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_m_view_scm_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_m_view_srt_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_m_view_srt_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_m_view_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_m_view_h_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_m_view_ph_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_m_view_fh_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_m_view_pfh_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_m_view_iot_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_m_view_piot_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_m_view_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_zm_view_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_m_view_view_base to public
  2  /

Grant succeeded.

SQL> grant read on ku$_m_view_h_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_zm_view_h_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_m_view_ph_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_zm_view_ph_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_m_view_fh_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_zm_view_fh_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_m_view_pfh_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_zm_view_pfh_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_m_view_iot_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_zm_view_iot_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_m_view_piot_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_zm_view_piot_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_m_zonemap_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_m_zonemap_h_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_m_zonemap_ph_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_m_zonemap_fh_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_m_zonemap_pfh_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_m_zonemap_iot_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_m_zonemap_piot_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_refcol_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_refcol_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_slog_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_slog_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_m_view_log_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_m_view_log_h_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_m_view_log_ph_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_m_view_log_fh_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_m_view_log_pfh_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_m_view_log_view to select_catalog_role;

Grant succeeded.

SQL> grant read on ku$_m_view_log_h_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_m_view_log_ph_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_m_view_log_fh_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_m_view_log_pfh_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_library_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_library_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsprin_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsprin_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsobj_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsobj_list_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsobj_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsuser_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsuser_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsgrant_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsgrant_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsrole_grant_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsrole_grant_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsrgrant_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsrole_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsrole_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsroleset_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsroleset_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsaggpriv_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsaggpriv_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsaggpriv_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xspriv_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xspriv_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xspriv_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsacepriv_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsacepriv_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsacepriv_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xssecclsh_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xssecclsh_list_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xssecclsh_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xssclass_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xssclass_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsace_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsace_list_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsace_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsaclparam_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsaclparam_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsaclparam_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsacl_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsacl_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xspolicy_param_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xspolicy_param_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsinst_acl_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsinst_acl_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsinstacl_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsinst_rule_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsinst_rule_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsinst_inhkey_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsinst_inhkey_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsinstinhkey_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsinst_inh_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsinst_inh_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsinstinh_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsattrsec_list_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsattrsec_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsinstset_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsinstset_list_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsinstset_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsolap_policy_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsolap_policy_list_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsolap_policy_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsrls_policy_view to PUBLIC
  2  /

Grant succeeded.

SQL> grant execute on ku$_xspolicy_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xspolicy_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsnstmpl_attr_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsnstmpl_attr_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsnstmpl_attr_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_xsnspace_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_xsnspace_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_user_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_user_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_role_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_role_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_profile_attr_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_profile_attr_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_profile_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_profile_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_profile_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_defrole_item_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_defrole_list_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_defrole_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_defrole_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_defrole_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_proxy_role_item_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_proxy_role_list_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_proxy_role_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_proxy_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_proxy_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_10_1_proxy_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_rogrant_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_rogrant_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_11_2_rogrant_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_10_2_rogrant_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_tsquota_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_tsquota_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_resocost_item_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_resocost_list_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_resocost_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_resocost_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_resocost_view to  select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_sequence_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_sequence_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_context_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_context_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_dimension_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_dimension_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_assoc_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_assoc_view to public
  2  /

Grant succeeded.

SQL> grant select on ku$_pwdvfc_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_comment_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_comment_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_10_1_comment_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_cluster_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_cluster_view to public;

Grant succeeded.

SQL> grant execute on ku$_audit_t to public
  2  /

Grant succeeded.

SQL> grant read on sys.ku$_audit_view to public;

Grant succeeded.

SQL> grant read on sys.ku$_11_2_audit_view to public;

Grant succeeded.

SQL> /

Grant succeeded.

SQL> grant execute on ku$_audit_obj_t to public
  2  /

Grant succeeded.

SQL> grant select on sys.ku$_audit_obj_base_view to select_catalog_role;

Grant succeeded.

SQL> grant read on sys.ku$_audit_obj_view to public;

Grant succeeded.

SQL> grant execute on ku$_audit_default_t to public
  2  /

Grant succeeded.

SQL> grant select on sys.ku$_audit_default_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant read on ku$_java_objnum_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_java_source_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_java_source_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_qtab_storage_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_qtab_storage_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_queue_table_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_queue_table_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_queues_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_queues_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_qtrans_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_qtrans_view to       public
  2  /

Grant succeeded.

SQL> grant execute on ku$_job_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_job_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_histgrm_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_histgrm_list_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_histgrm_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_10_1_histgrm_min_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_10_1_histgrm_max_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_col_stats_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_col_stats_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_10_1_col_stats_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_10_1_col_stats_list_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_col_stats_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_10_1_tab_col_stats_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_10_1_ptab_col_stats_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_cached_stats_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_tab_cache_stats_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_ind_cache_stats_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_tab_ptab_stats_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_ptab_stats_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_10_1_tab_ptab_stats_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_10_1_ptab_stats_list_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_tab_only_stats_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_10_1_tab_only_stats_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_ptab_stats_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_10_1_ptab_stats_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_tab_col_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_tab_col_list_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_tab_col_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_10_2_tab_col_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_tab_stats_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_11_2_tab_stats_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_10_1_tab_stats_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_tab_stats_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_11_2_tab_stats_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_10_2_tab_stats_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_10_1_tab_stats_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_spind_stats_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_spind_stats_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_10_1_spind_stats_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_10_1_spind_stats_list_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_spind_stats_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_10_1_spind_stats_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_pind_stats_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_pind_stats_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_10_1_pind_stats_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_10_1_pind_stats_list_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_pind_stats_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_10_1_pind_stats_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_ind_col_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_ind_stats_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_11_2_ind_stats_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_10_1_ind_stats_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_ind_stats_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_11_2_ind_stats_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_10_2_ind_stats_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_10_1_ind_stats_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_sgi_col_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_sgi_col_list_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_find_sgc_cols_view to select_catalog_role;

Grant succeeded.

SQL> grant select on ku$_find_sgi_cols_view to select_catalog_role;

Grant succeeded.

SQL> grant execute on ku$_find_sgc_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_find_sgc_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_find_sgcol_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_find_attrcol_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_find_ntab_attrcol_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_up_stats_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_up_stats_list_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_up_stats_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_user_pref_stats_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_user_pref_stats_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_java_class_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_java_class_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_java_resource_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_java_resource_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_add_snap_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_add_snap_list_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_add_snap_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_refgroup_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_refgroup_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_monitor_t to  select_catalog_role
  2  /

Grant succeeded.

SQL> grant read on ku$_monitor_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_rmgr_plan_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_rmgr_plan_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_rmgr_plan_direct_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_rmgr_plan_direct_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_rmgr_consumer_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_rmgr_consumer_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_rmgr_init_consumer_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_rmgr_init_consumer_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_psw_hist_item_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_psw_hist_list_view to EXP_FULL_DATABASE
  2  /

Grant succeeded.

SQL> grant execute on ku$_psw_hist_list_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_psw_hist_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_psw_hist_view to EXP_FULL_DATABASE
  2  /

Grant succeeded.

SQL> grant select on ku$_11_2_psw_hist_view to EXP_FULL_DATABASE
  2  /

Grant succeeded.

SQL> grant execute on ku$_objpkg_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_objpkg_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_objpkg_privs_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_proc_grant_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_proc_audit_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant read on ku$_exppkgobj_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant read on ku$_exppkgact_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_procobj_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_procobj_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_procobj_objnum_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_procobj_grant_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_procobj_grant_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_procobj_audit_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_procobj_audit_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_procdepobj_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_procdepobj_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_procdepobjg_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_procdepobj_grant_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_procdepobja_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_procdepobj_audit_view to public
  2  /

Grant succeeded.

SQL> grant select on ku$_prepost_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_procobjact_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_procobjact_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_procact_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_procact_sys_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_procact_sys_pkg_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_procact_schema_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_procact_schema_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_procact_schema_pkg_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_procact_instance_t to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_procact_instance_tbl_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_procact_instance_view to public
  2  /

Grant succeeded.

SQL> grant select on ku$_expact_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_prepost_table_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_pre_table_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_post_table_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_callout_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_syscallout_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant read on ku$_schema_callout_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_instance_callout_view to public
  2  /

Grant succeeded.

SQL> grant select on ku$_tts_tabview to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_tts_tabpartview to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_tts_tabsubpartview to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_tts_tab_tablespace_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_tts_idxview to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_tts_indpartview to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_ttsp_indpartview to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_tts_indsubpartview to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_ttsp_indsubpartview to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_tts_idx_tablespace_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on ku$_ttsp_idx_tablespace_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant read on ku$_plugts_begin_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_plugts_tsname_full_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_plugts_tsname_table_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_plugts_tsname_index_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_plugts_tsname_indexp_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_plugts_tsname_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_plugts_checkpl_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_plugts_blk_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_plugts_blk_view to public
  2  /

Grant succeeded.

SQL> grant read on ku$_end_plugts_blk_view to public
  2  /

Grant succeeded.

SQL> grant select on ku$_plugts_early_tblsp_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_plugts_tablespace_t to public
  2  /

Grant succeeded.

SQL> grant select on ku$_plugts_tablespace_view to select_catalog_role
  2  /

Grant succeeded.

SQL> grant read on DATAPUMP_PATHS_VERSION to public
  2  /

Grant succeeded.

SQL> grant read on DATAPUMP_PATHS to public
  2  /

Grant succeeded.

SQL> grant read on DATAPUMP_PATHMAP to public
  2  /

Grant succeeded.

SQL> grant read on DATAPUMP_TABLE_DATA to public
  2  /

Grant succeeded.

SQL> grant read on DATAPUMP_OBJECT_CONNECT to public
  2  /

Grant succeeded.

SQL> grant read on DATAPUMP_DDL_TRANSFORM_PARAMS to public
  2  /

Grant succeeded.

SQL> grant select on DBA_EXPORT_OBJECTS to select_catalog_role
  2  /

Grant succeeded.

SQL> grant read on TABLE_EXPORT_OBJECTS to public
  2  /

Grant succeeded.

SQL> grant read on SCHEMA_EXPORT_OBJECTS to public
  2  /

Grant succeeded.

SQL> grant read on DATABASE_EXPORT_OBJECTS to public
  2  /

Grant succeeded.

SQL> grant read on TABLESPACE_EXPORT_OBJECTS to public
  2  /

Grant succeeded.

SQL> grant read on TRANSPORTABLE_EXPORT_OBJECTS to public
  2  /

Grant succeeded.

SQL> grant select on DBA_EXPORT_PATHS to select_catalog_role
  2  /

Grant succeeded.

SQL> grant read on TABLE_EXPORT_PATHS to public
  2  /

Grant succeeded.

SQL> grant read on SCHEMA_EXPORT_PATHS to public
  2  /

Grant succeeded.

SQL> grant read on DATABASE_EXPORT_PATHS to public
  2  /

Grant succeeded.

SQL> grant read on TABLESPACE_EXPORT_PATHS to public
  2  /

Grant succeeded.

SQL> grant read on TRANSPORTABLE_EXPORT_PATHS to public
  2  /

Grant succeeded.

SQL> grant read on DATAPUMP_REMAP_OBJECTS to public
  2  /

Grant succeeded.

SQL> grant select on dbms_metadata_all_transforms to select_catalog_role
  2  /

Grant succeeded.

SQL> grant read on dbms_metadata_transforms to public
  2  /

Grant succeeded.

SQL> grant read on dbms_metadata_transform_params to public
  2  /

Grant succeeded.

SQL> grant select on dbms_metadata_all_tparams to select_catalog_role
  2  /

Grant succeeded.

SQL> grant read on dbms_metadata_parse_items to public
  2  /

Grant succeeded.

SQL> grant select on dbms_metadata_all_parse_items to select_catalog_role
  2  /

Grant succeeded.

SQL> grant select on dbms_metadata_tparams_base to select_catalog_role
  2  /

Grant succeeded.

SQL> grant execute on ku$_audit_act_list_t to public;

Grant succeeded.

SQL> grant execute on ku$_audit_act_t to public;

Grant succeeded.

SQL> grant execute on ku$_audit_attr_list_t to public;

Grant succeeded.

SQL> grant execute on ku$_audit_context_t to public;

Grant succeeded.

SQL> grant execute on ku$_audit_namespace_list_t to public;

Grant succeeded.

SQL> grant execute on ku$_audit_namespace_t to public;

Grant succeeded.

SQL> grant execute on ku$_audit_pol_role_list_t to public;

Grant succeeded.

SQL> grant execute on ku$_audit_pol_role_t to public;

Grant succeeded.

SQL> grant execute on ku$_audit_policy_enable_t to public;

Grant succeeded.

SQL> grant execute on ku$_audit_policy_t to public;

Grant succeeded.

SQL> grant execute on ku$_audit_sys_priv_list_t to public;

Grant succeeded.

SQL> grant execute on ku$_audit_sys_priv_t to public;

Grant succeeded.

SQL> grant execute on ku$_auditp_obj_list_t to public;

Grant succeeded.

SQL> grant execute on ku$_auditp_obj_t to public;

Grant succeeded.

SQL> grant select on ku$_audcontext_namespace_view to select_catalog_role;

Grant succeeded.

SQL> grant select on ku$_audcontext_user_view to select_catalog_role;

Grant succeeded.

SQL> grant read on ku$_audit_context_view to exp_full_database;

Grant succeeded.

SQL> grant read on ku$_audit_policy_enable_view to exp_full_database;

Grant succeeded.

SQL> grant read on ku$_12audit_policy_enable_view to exp_full_database;

Grant succeeded.

SQL> grant read on ku$_audit_policy_view to exp_full_database;

Grant succeeded.

SQL> 
SQL> grant execute on ku$_on_user_grant_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_on_user_grant_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_code_base_grant_t to public
  2  /

Grant succeeded.

SQL> grant read on ku$_code_base_grant_view to public
  2  /

Grant succeeded.

SQL> grant execute on ku$_credential_t to public;

Grant succeeded.

SQL> grant read on ku$_credential_view to public;

Grant succeeded.

SQL> grant execute on ku$_user_editioning_t to public;

Grant succeeded.

SQL> grant execute on ku$_user_editioning_list_t to public;

Grant succeeded.

SQL> grant read on ku$_user_editioning_view to public;

Grant succeeded.

SQL> grant read on ku$_user_base_view to public;

Grant succeeded.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem EM Express and report framework registration
SQL> Rem
SQL> @@execemx.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/execemx.sql /st_rdbms_19/5 2018/12/20 12:01:59 yxie Exp $
SQL> Rem
SQL> Rem execemx.sql
SQL> Rem
SQL> Rem Copyright (c) 2011, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      execemx.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      To get JET version, call @execemx omx
SQL> Rem      To get flex version, call @execemx emx (default)
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/execemx.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/execemx.sql
SQL> Rem SQL_PHASE: EXECEMX
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    yxie        12/12/18 - set default parameter value
SQL> Rem    yxie        11/07/18 - proj79047: enable omx
SQL> Rem    yxie        09/14/18 - bug28651450: disable omx in 19.1
SQL> Rem    yxie        06/26/18 - bug28014508: change flex/jet to emx/omx
SQL> Rem    yxie        05/04/18 - add jet support for execemx
SQL> Rem    surman      01/23/14 - 13922626: Update SQL metadata
SQL> Rem    kyagoub     06/17/11 - reload all emx/framework files in register_files
SQL> Rem    yxie        03/06/11 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> 
SQL> Rem Register EM Exprses files
SQL> Rem Pass "omx" to indicate to use EM Express in OMX mode (JET)
SQL> Rem Pass "emx" to indicate to use EM Express in EMX mode (FLEX)
SQL> Rem Anything else will be defaulted to OMX mode
SQL> 
SQL> 
SQL> column p1 new_value 1
SQL> select null p1 from dual where 1=2;

no rows selected

SQL> select nvl( '&1','omx') p1 from dual ;

P1
---------
--CATFILE

1 row selected.

SQL> 
SQL> define ui_mode = &1;
SQL> 
SQL> undefine 1;
SQL> 
SQL> exec prvt_emx.register_files(TRUE, NULL, '&ui_mode');

PL/SQL procedure successfully completed.

SQL> 
SQL> undefine ui_mode;
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem Component Registry initialization
SQL> Rem
SQL> @@execcr.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/execcr.sql /main/6 2017/12/08 09:20:44 raeburns Exp $
SQL> Rem
SQL> Rem execcr.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2017, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      execcr.sql - EXECute Component Registry packages
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This scripts executes component registry procedures
SQL> Rem      required as part of database creation.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      Run from catpexec.sql (catproc.sql)
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/execcr.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/execcr.sql
SQL> Rem SQL_PHASE: EXECCR
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    raeburns    12/06/17 - Bug 27192259: Use dbms_system.get_env to set
SQL> Rem                           ORACLE_HOME and ORACLE_BASE directory paths
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    cdilling    07/12/06 - clean up session state
SQL> Rem    rburns      05/06/06 - component registry execute
SQL> Rem    rburns      05/06/06 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> show error package dbms_registry;
No errors.
SQL> show error procedure dbms_registry.set_session_namespace
No errors.
SQL> 
SQL> 
SQL> Rem
SQL> Rem Start with a clean session state for the package
SQL> Rem
SQL> execute DBMS_SESSION.RESET_PACKAGE;

PL/SQL procedure successfully completed.

SQL> 
SQL> show error package dbms_registry;
No errors.
SQL> show error procedure dbms_registry.set_session_namespace
No errors.
SQL> 
SQL> 
SQL> Rem
SQL> Rem Set up drop user invocation
SQL> Rem
SQL> 
SQL> DELETE FROM sys.duc$ WHERE owner='SYS' AND pack='DBMS_REGISTRY_SYS';

0 rows deleted.

SQL> INSERT INTO sys.duc$ (owner, pack, proc, operation#, seq, com)
  2    VALUES ('SYS','DBMS_REGISTRY_SYS','DROP_USER',1, 1,
  3            'Delete registry entries when schema or invoker is dropped');

1 row created.

SQL> COMMIT;

Commit complete.

SQL> 
SQL> Rem
SQL> Rem  Create CONTEXT for Registry Variables and set namespace to SERVER
SQL> Rem
SQL> 
SQL> 
SQL> 
SQL> CREATE OR REPLACE CONTEXT registry$ctx USING dbms_registry_sys;

Context created.

SQL> 
SQL> show error package dbms_registry;
No errors.
SQL> show error procedure dbms_registry.set_session_namespace
No errors.
SQL> 
SQL> 
SQL> alter session set events '4063 trace name context forever, level 1';

Session altered.

SQL> 
SQL> BEGIN
  2     dbms_registry.set_session_namespace('SERVER');
  3     dbms_registry_sys.set_registry_context('COMPONENT','RDBMS');
  4  END;
  5  /

PL/SQL procedure successfully completed.

SQL> 
SQL> alter session set events '4063 trace name context off';

Session altered.

SQL> 
SQL> show error package dbms_registry;
No errors.
SQL> show error procedure dbms_registry.set_session_namespace
No errors.
SQL> 
SQL> -- Bug 27192259: Create ORACLE_HOME and ORACLE_BASE directories
SQL> -- using dbms_system.get_env to get environment variables
SQL> 
SQL> DECLARE
  2    oracle_home_value sys.dir$.os_path%type;
  3    oracle_base_value sys.dir$.os_path%type;
  4  BEGIN
  5    sys.dbms_system.get_env('ORACLE_HOME', oracle_home_value);
  6    IF oracle_home_value IS  NULL THEN
  7       oracle_home_value := '/';
  8    END IF;
  9    execute immediate
 10      'CREATE OR REPLACE DIRECTORY ORACLE_HOME AS ' ||
 11         sys.dbms_assert.enquote_literal(oracle_home_value);
 12  
 13    sys.dbms_system.get_env('ORACLE_BASE', oracle_base_value);
 14    IF oracle_base_value IS  NULL THEN
 15       oracle_base_value := '/';
 16    END IF;
 17    execute immediate
 18      'CREATE OR REPLACE DIRECTORY ORACLE_BASE AS ' ||
 19         sys.dbms_assert.enquote_literal(oracle_base_value);
 20  end;
 21  /

PL/SQL procedure successfully completed.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem Heterogeneous Services:  Gateways and external procedures
SQL> Rem
SQL> @@caths.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/caths.sql /main/47 2016/11/17 11:36:23 lsheng Exp $
SQL> Rem
SQL> Rem caths.sql
SQL> Rem
SQL> Rem Copyright (c) 1997, 2016, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      caths.sql - CATalog script for Heterogeneous Services
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Create Heterogeneous Services data dictionary objects.
SQL> Rem
SQL> Rem      Contents of several tables and views are selected by
SQL> Rem      FDS_CLASS_ID and FDS_INST_ID columns.  FDS_INST_ID = NULL indicates
SQL> Rem      a default value; FDS_CLASS_ID cannot be defaulted.
SQL> Rem
SQL> Rem      Many HS data dictionary tables are populated automatically
SQL> Rem      by agent self-registration during normal server operation.
SQL> Rem
SQL> Rem
SQL> Rem      Objects created by this script are:
SQL> Rem
SQL> Rem        hs$_fds_class    Table:  FDS class definitions
SQL> Rem        hs_fds_class     View:   View of FDS class definitions
SQL> Rem        hs$_fds_class_date Table:FDS class timestamps for last access
SQL> Rem        hs_fds_class_date View:  View of FDS class timestamps
SQL> Rem        hs$_fds_inst     Table:  FDS instance definitions
SQL> Rem        hs_fds_inst      View:   View of FDS instance definitions
SQL> Rem        hs$_base_caps    Table:  Base capability definitions
SQL> Rem        hs_base_caps     View:   View of base capability definitions
SQL> Rem        hs$_class_caps   Table:  Class-specific FDS capabilities
SQL> Rem        hs_class_caps    View:   View of FDS class capabilities
SQL> Rem        hs$_inst_caps    Table:  Instance-specific FDS capabilities
SQL> Rem        hs_inst_caps     View:   View of instance capabilities
SQL> Rem        hs$_base_dd      Table:  Base DD translation definitions
SQL> Rem        hs_base_dd       View:   View of base DD translation definitions
SQL> Rem        hs$_class_dd     Table:  Class-specific FDS DD translations
SQL> Rem        hs_class_dd      View:   View of FDS class DD translations
SQL> Rem        hs$_inst_dd      Table:  Instance-specific FDS DD translations
SQL> Rem        hs_inst_dd       View:   View of FDS instance DD translations
SQL> Rem        hs$_class_init   Table:  Class-specific HS init parameters
SQL> Rem        hs_class_init    View:   View of class init parameters
SQL> Rem        hs$_inst_init    Table:  Instance-specific HS init parameters
SQL> Rem        hs_inst_init     View:   View of instance init parameters
SQL> Rem                                 Views of joined class & instance data:
SQL> Rem        hs_all_caps      View:   All FDS capabilities
SQL> Rem        hs_all_dd        View:   All FDS DD translations
SQL> Rem        hs_all_inits     View:   All HS initialization parameters
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This script must be run while connected as SYS.
SQL> Rem
SQL> Rem      The hs_all_* views represent only data recorded in
SQL> Rem      the server DD.  Additional instance capabilities ind
SQL> Rem      instance DD translations may be uploaded from HS agents
SQL> Rem      when each connection is established.  These uploaded
SQL> Rem      data are merged with data from the server DD for use
SQL> Rem      on the connection but are not visible in the server DD.
SQL> Rem
SQL> Rem      A similar upload of initialization parameters occurs,
SQL> Rem      with init parameters from agents logically being a properties
SQL> Rem      of the session rather than of a class or instance.
SQL> Rem      The
SQL> Rem
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/caths.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/caths.sql
SQL> Rem SQL_PHASE: CATHS
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    cvillad     10/25/16 - Add new cap
SQL> Rem    andmerca    11/04/15 - Add match recognize and dbc to base caps
SQL> Rem    andmerca    10/04/15 - Support for DBC in outgoing SQL
SQL> Rem    mbastawa    10/24/14 - bug17765342 add row archival
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    jahuesva    01/14/13 - XbranchMerge jahuesva_bug-16025907 from
SQL> Rem                           st_rdbms_12.1.0.1
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    traney      03/30/11 - 35209: long identifiers dictionary upgrade
SQL> Rem    psuvarna    12/24/09 - 8858714: add capability for WAIT clause
SQL> Rem    aamor       09/20/08 - add capability for recursive WITH and for column
SQL> Rem                           alias list for WITH clause
SQL> Rem    kchen       05/05/08 - fixed bug 6943575
SQL> Rem    sbellamk    07/31/06 - add capability for native full outer join
SQL> Rem    kchen       06/02/06 - includes dbmshsld, prvthsld.plb
SQL> Rem    jahuesva    05/15/06 - Added ODBC datetime datatypes 3066 to 3069
SQL> Rem    dtahara     08/02/04 - 3547585: added "new connect-by" capability
SQL> Rem    jahuesva    07/15/04 - Bug 3767742 - Addes missing entries to base caps
SQL> Rem    jahuesva    10/23/03 - Bug 3214442 - Fixed typo in cap # 169
SQL> Rem    jahuesva    10/08/03 - Added base capability for HOACdescParamAfterExec
SQL> Rem                           (#1963)
SQL> Rem    jahuesva    10/01/03 - Added missing base Capabilities
SQL> Rem    jahuesva    08/22/03 - Added base capability for HOACsupportSchema
SQL> Rem                           (#1964)
SQL> Rem    jahuesva    08/22/03 - Added base capability for HOACLtIsNull (#1965)
SQL> Rem    jahuesva    08/22/03 - Added base capability for HOACsupportSchema
SQL> Rem                           (#1966)
SQL> Rem    jahuesva    07/15/03 - Added base capability for HOACOPTCTX (#392)
SQL> Rem    jahuesva    03/13/03 - Added base capability for HOACOPTFSTLST (#531)
SQL> Rem    kchen       08/22/02 - Add base capability for OPTPLS
SQL> Rem    pravelin    10/23/01 - Fix merge errors.
SQL> Rem    pravelin    10/19/01 - Merge main branch and log branch versions
SQL> Rem    rgmani      10/01/01 - Add cap 1966
SQL> Rem    srajagop    08/20/01 - lob support
SQL> Rem    pravelin    07/31/01 - Use [create/]replace ops to populate base tables
SQL> Rem    pravelin    07/26/01 - Eliminate drops, for use from catproc.
SQL> Rem    gviswana    05/24/01 - CREATE OR REPLACE SYNONYM
SQL> Rem    rgmani      03/08/01 - Add new base caps
SQL> Rem    pravelin    12/13/00 - Use index instead of name in hs_fds_class_date
SQL> Rem    kpeyetti    11/29/00 - privileges & synonyms for hs_fds_class_date
SQL> Rem    rhungund    10/09/00 - changes to accomodate the migration path
SQL> Rem    delson      08/28/00 - remove refernces to no-longer-implemented methods
SQL> Rem    srajagop    06/26/00 - piecewise base cap added
SQL> Rem    rgmani      07/18/00 - Add new HS base caps
SQL> Rem    rgmani      06/12/00 - Add base result set capabilities
SQL> Rem    rgmani      11/29/99 - Add base cap for HOACpublicSchema
SQL> Rem    rgmani      07/06/99 - Add base cap for 1970
SQL> Rem    rgmani      06/29/99 - Add base cap 1996
SQL> Rem    pravelin    01/12/99 - Bug 780957:  sqlplus doesn't recognize '#' commen
SQL> Rem    rgmani      10/20/98 - Add 1971 base cap
SQL> Rem    rgmani      10/12/98 - Add 1972 base cap
SQL> Rem    evoss       09/09/98 - bug 725369 (Subquery list in update capability)
SQL> Rem    pravelin    09/03/98 - Bug 724831:  Eliminate 'set echo on'
SQL> Rem    ncramesh    08/06/98 - change for sqlplus
SQL> Rem    pravelin    07/20/98 - Eliminate comment referring to cathsAGT.sql scrip
SQL> Rem    pravelin    06/17/98 - Bug 679473:  Don't register TKHODDAU as base DD t
SQL> Rem    pravelin    02/04/98 - Bug 620715:  Add base_dd tables for test extensio
SQL> Rem    rgmani      08/13/97 - Add base cap for cap #1994
SQL> Rem    rgmani      07/24/97 - Add base cap for cap #1975
SQL> Rem    rgmani      07/23/97 - Add base caps for DB2-related capabilities
SQL> Rem    rgmani      07/10/97 - Add base caps for coercion capabilities
SQL> Rem    jdraaije    04/17/97 - remove ID columns from external objects view
SQL> Rem    jdraaije    03/26/97 - Name consistency: ho => hs
SQL> Rem    pravelin    03/20/97 - Eliminate 'use XA' capability, replaced by init p
SQL> Rem    pravelin    03/18/97 - Create pseudo-FDS class for BITE (Built-In Test E
SQL> Rem    ktarkhan    02/20/97 - add external grantees, change external objects
SQL> Rem    rgmani      02/13/97 - Add base caps for bundling and tcis call
SQL> Rem    pravelin    01/15/97 - Add setup for base dd translations
SQL> Rem    jdraaije    01/01/97 - external_procedures ==> external_objects
SQL> Rem    rgmani      11/06/96 - Add new base DD - TKHODDAU
SQL> Rem    celsbern    10/21/96 - Changed view names from hs to hs.
SQL> Rem    rgmani      10/25/96 - Add base caps for new HS datatypes
SQL> Rem    rgmani      10/14/96 - Add base caps for QuoteOwner and MapAlias
SQL> Rem    rgmani      09/18/96 - Add new capability 1992 (HOACdelimToFDS)
SQL> Rem    celsbern    09/06/96 - Removed dbms_hs.package and put in separate files
SQL> Rem    rgmani      08/21/96 - Add base cap 1993
SQL> Rem    asurpur     08/28/96 - Dictionary protection: granting execute on dbms_h
SQL> Rem    rgmani      07/16/96 - Fix bug
SQL> Rem    rgmani      07/15/96 - Switch to new HS data dictionary
SQL> Rem    asurpur     05/15/96 - Dictionary Protection: Granting privileges on vie
SQL> Rem    evoss       05/23/96 - add bind to parameter capability
SQL> Rem    jdraaije    04/03/96 - Add sys.hs_objects table for callouts
SQL> Rem    pravelin    03/13/96 - Create HS data dictionary tables and views
SQL> Rem    pravelin    03/13/96 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> 
SQL> --
SQL> --############################################################################
SQL> --
SQL> --############################################################################
SQL> --
SQL> -- Create the role that is being used to protect access to the HS data
SQL> -- dictionary tables and to the dbms_hs, dbms_hs_extproc, and
SQL> -- dbms_hs_passthrough packages.
SQL> -- The role is immediately granted to select_catalog_role, and
SQL> -- execute_catalog_role such that users with generic data dictionary access
SQL> -- now also can access the HS data dictionary.
SQL> 
SQL> create role hs_admin_select_role;

Role created.

SQL> create role hs_admin_execute_role;

Role created.

SQL> create role hs_admin_role;

Role created.

SQL> 
SQL> grant hs_admin_select_role to select_catalog_role;

Grant succeeded.

SQL> grant hs_admin_execute_role to execute_catalog_role;

Grant succeeded.

SQL> grant hs_admin_select_role to hs_admin_role;

Grant succeeded.

SQL> grant hs_admin_execute_role to hs_admin_role;

Grant succeeded.

SQL> 
SQL> --
SQL> --############################################################################
SQL> --
SQL> --############################################################################
SQL> --
SQL> -- The intention of the FDS class is that it contains all the information,
SQL> -- e.g. capabilities, data dictionary translations, etc. that are specific for
SQL> -- a whole group of FDSs. In general this group will be accessed by the same
SQL> -- HS driver.
SQL> --
SQL> -- HS$_FDS_CLASS
SQL> 
SQL> create table hs$_fds_class
  2  (
  3     fds_class_id number not null,
  4        constraint hs$_fds_class_pk primary key (fds_class_id),
  5     fds_class_name varchar2(30) not null,
  6        constraint hs$_fds_class_uk1 unique (fds_class_name),
  7     fds_class_comments varchar2(255)
  8   );

Table created.

SQL> 
SQL> create sequence hs$_fds_class_s;

Sequence created.

SQL> 
SQL> -- hs_fds_class view
SQL> create or replace view hs_fds_class
  2  (fds_class_name,fds_class_comments,fds_class_id) as
  3  select fds_class_name,fds_class_comments,fds_class_id
  4  from hs$_fds_class;

View created.

SQL> 
SQL> grant select on  hs_fds_class to hs_admin_select_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym hs_fds_class for hs_fds_class;

Synonym created.

SQL> 
SQL> --
SQL> --############################################################################
SQL> --
SQL> --############################################################################
SQL> --
SQL> -- Besides having FDS class specific information, users also need
SQL> -- to be able to set capabilities, DD translations and init parameters on
SQL> -- a per FDS basis. Every RDB database, for instance, requires the RDB$HANDLE
SQL> -- environment variable to be set to the name and location of the actual
SQL> -- database file. This type of information is set in the FDS table.
SQL> --
SQL> -- HS$_FDS_INST
SQL> 
SQL> create table hs$_fds_inst
  2  (
  3     fds_inst_id                  number not null,
  4        constraint hs$_fds_inst_pk primary key (fds_inst_id),
  5     fds_class_id                 number not null,
  6         constraint hs$_fds_inst_fk1 foreign key (fds_class_id)
  7         references hs$_fds_class on delete cascade,
  8     fds_inst_name                varchar2(30) not null, /*is this big enough?*/
  9        constraint hs$_fds_inst_uk1 unique (fds_inst_name,fds_class_id),
 10     fds_inst_comments varchar2(255)
 11  );

Table created.

SQL> 
SQL> create sequence hs$_fds_inst_s;

Sequence created.

SQL> 
SQL> -- hs_fds_inst view
SQL> create or replace view hs_fds_inst
  2  (fds_inst_name,fds_inst_comments,fds_class_name,fds_inst_id,fds_class_id) as
  3  select f.fds_inst_name,f.fds_inst_comments,fc.fds_class_name,f.fds_inst_id,
  4    f.fds_class_id
  5  from hs$_fds_class fc,
  6  hs$_fds_inst f
  7  where f.fds_class_id = fc.fds_class_id;

View created.

SQL> 
SQL> grant select on hs_fds_inst to hs_admin_select_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym hs_fds_inst for hs_fds_inst;

Synonym created.

SQL> 
SQL> --
SQL> --############################################################################
SQL> --
SQL> --############################################################################
SQL> --
SQL> -- This is the base capability table. Besides this table we'll also create
SQL> -- a table for the DRIVER (fds_class or agent) specific capabilities, and
SQL> -- one for the FDS specific capabilities.
SQL> --
SQL> -- HS$_BASE_CAPS
SQL> 
SQL> create table hs$_base_caps
  2  (
  3     cap_number               number not null,
  4        constraint hs$_base_caps_pk primary key (cap_number),
  5     cap_description          varchar2(255)
  6  );

Table created.

SQL> 
SQL> create or replace view hs_base_caps
  2  (cap_number,cap_description) as
  3  select cap_number, cap_description
  4  from hs$_base_caps;

View created.

SQL> 
SQL> grant select on  hs_base_caps to hs_admin_select_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym hs_base_caps for hs_base_caps;

Synonym created.

SQL> 
SQL> --
SQL> --############################################################################
SQL> --
SQL> --############################################################################
SQL> --
SQL> -- This is the FDS class (DRIVER) specific capability table.
SQL> --
SQL> -- HS$_CLASS_CAPS
SQL> 
SQL> create table hs$_class_caps
  2  (
  3     fds_class_cap_id        number not null,
  4        constraint hs$_class_caps_pk primary key (fds_class_cap_id),
  5     fds_class_id            number not null,
  6        constraint hs$_class_caps_fk1 foreign key (fds_class_id)
  7        references hs$_fds_class on delete cascade,
  8     cap_number              number not null,
  9        constraint hs$_class_caps_fk2 foreign key (cap_number)
 10        references hs$_base_caps on delete cascade,
 11        constraint hs$_class_caps_uk1 unique (fds_class_id,cap_number),
 12     context                 number,
 13     translation             varchar2(255),
 14     additional_info         number
 15  );

Table created.

SQL> 
SQL> create sequence hs$_class_caps_s;

Sequence created.

SQL> 
SQL> create or replace view hs_class_caps
  2  (cap_number, cap_description, context, translation, additional_info,
  3   fds_class_name,  fds_class_id) as
  4  select cc.cap_number, bc.cap_description, cc.context, cc.translation,
  5         cc.additional_info, fc.fds_class_name, fc.fds_class_id
  6  from   hs$_class_caps cc,
  7         hs$_base_caps bc,
  8         hs$_fds_class fc
  9  where  bc.cap_number = cc.cap_number
 10  and cc.fds_class_id = fc.fds_class_id;

View created.

SQL> 
SQL> grant select on  hs_class_caps to hs_admin_select_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym hs_class_caps for hs_class_caps;

Synonym created.

SQL> 
SQL> --
SQL> --############################################################################
SQL> --
SQL> --############################################################################
SQL> --
SQL> -- This is the FDS instance specific capability table.
SQL> --
SQL> -- HS$_INST_CAPS
SQL> 
SQL> create table hs$_inst_caps
  2  (
  3     fds_inst_cap_id         number not null,
  4        constraint hs$_inst_caps_pk primary key (fds_inst_cap_id),
  5     fds_inst_id             number not null,
  6        constraint hs$_inst_caps_fk1 foreign key (fds_inst_id)
  7        references hs$_fds_inst on delete cascade,
  8     cap_number              number not null,
  9        constraint hs$_inst_caps_fk2 foreign key (cap_number)
 10        references hs$_base_caps on delete cascade,
 11        constraint hs$_inst_caps_uk1 unique (fds_inst_id,cap_number),
 12     context                 number,
 13     translation             varchar2(255),
 14     additional_info         number
 15  );

Table created.

SQL> 
SQL> create sequence hs$_inst_caps_s;

Sequence created.

SQL> 
SQL> create or replace view hs_inst_caps
  2  (cap_number, cap_description, context, translation, additional_info,
  3   fds_class_name, fds_inst_name, fds_class_id, fds_inst_id) as
  4  select bc.cap_number, bc.cap_description, ic.context, ic.translation,
  5         ic.additional_info, fc.fds_class_name, f.fds_inst_name,
  6         fc.fds_class_id, f.fds_inst_id
  7  from   hs$_inst_caps ic,
  8         hs$_base_caps bc,
  9         hs$_fds_class fc,
 10         hs$_fds_inst f
 11  where  bc.cap_number = ic.cap_number
 12  and    ic.fds_inst_id = f.fds_inst_id
 13  and    f.fds_class_id = fc.fds_class_id;

View created.

SQL> 
SQL> grant select on  hs_inst_caps to hs_admin_select_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym hs_inst_caps for hs_inst_caps;

Synonym created.

SQL> 
SQL> --
SQL> --############################################################################
SQL> --
SQL> --############################################################################
SQL> --
SQL> -- This is the base DD translation table. Besides this table we'll also create
SQL> -- a table for the DRIVER (fds_class or agent) specific capabilities, and
SQL> -- one for the FDS specific capabilities.
SQL> --
SQL> -- HS$_BASE_DD
SQL> 
SQL> create table hs$_base_dd
  2  (
  3     dd_table_id              number not null,
  4        constraint hs$_base_dd_pk primary key (dd_table_id),
  5     dd_table_name            varchar2(128) not null,
  6        constraint hs$_base_dd_uk1 unique (dd_table_name),
  7     dd_table_desc            varchar2(255)
  8  );

Table created.

SQL> 
SQL> create sequence hs$_base_dd_s;

Sequence created.

SQL> 
SQL> create or replace view hs_base_dd
  2  (dd_table_name,dd_table_desc, dd_table_id) as
  3  select dd_table_name, dd_table_desc, dd_table_id
  4  from hs$_base_dd;

View created.

SQL> 
SQL> grant select on  hs_base_dd to hs_admin_select_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym hs_base_dd for hs_base_dd;

Synonym created.

SQL> 
SQL> --
SQL> --############################################################################
SQL> --
SQL> --############################################################################
SQL> --
SQL> -- This is the FDS class specific DD translation table
SQL> --
SQL> -- HS$_CLASS_DD
SQL> 
SQL> create table hs$_class_dd
  2  (
  3     fds_class_dd_id          number not null,
  4        constraint hs$_class_dd_pk primary key (fds_class_dd_id),
  5     fds_class_id             number not null,
  6        constraint hs$_class_dd_fk1 foreign key (fds_class_id)
  7        references hs$_fds_class on delete cascade,
  8     dd_table_id              number not null,
  9        constraint hs$_class_dd_fk2 foreign key (dd_table_id)
 10        references hs$_base_dd on delete cascade,
 11        constraint hs$_class_dd_uk1 unique (fds_class_id,dd_table_id),
 12     translation_type         char(1) not null,
 13        constraint hs$_class_dd_c1 check (translation_type in ('T','M','S')),
 14     translation_text         varchar2(4000),
 15        constraint hs$_class_dd_c2 check
 16        ((translation_type in('S','T') and translation_text is not NULL) or
 17         (translation_type = 'M'))
 18  );

Table created.

SQL> 
SQL> create sequence hs$_class_dd_s;

Sequence created.

SQL> 
SQL> create or replace view hs_class_dd
  2  (dd_table_name, dd_table_desc, translation_type, translation_text,
  3   fds_class_name, dd_table_id, fds_class_id) as
  4  select bd.dd_table_name, bd.dd_table_desc, cd.translation_type,
  5         cd.translation_text, fc.fds_class_name, bd.dd_table_id, fc.fds_class_id
  6  from   hs$_base_dd bd, hs$_class_dd cd, hs$_fds_class fc
  7  where  (bd.dd_table_id = cd.dd_table_id) and (cd.fds_class_id =
  8  fc.fds_class_id);

View created.

SQL> 
SQL> grant select on  hs_class_dd to hs_admin_select_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym hs_class_dd for hs_class_dd;

Synonym created.

SQL> 
SQL> --
SQL> --############################################################################
SQL> --
SQL> --############################################################################
SQL> --
SQL> -- This is the FDS instance specific DD translation table
SQL> --
SQL> -- HS$_INST_DD
SQL> 
SQL> create table hs$_inst_dd
  2  (
  3     fds_inst_dd_id          number not null,
  4        constraint hs$_inst_dd_pk primary key (fds_inst_dd_id),
  5     fds_inst_id             number not null,
  6        constraint hs$_inst_dd_fk1 foreign key (fds_inst_id)
  7        references hs$_fds_inst on delete cascade,
  8     dd_table_id              number not null,
  9        constraint hs$_inst_dd_fk2 foreign key (dd_table_id)
 10        references hs$_base_dd on delete cascade,
 11        constraint hs$_inst_dd_uk1 unique (fds_inst_id,dd_table_id),
 12     translation_type         char(1) not null,
 13        constraint hs$_inst_dd_c1 check (translation_type in ('T','M','S')),
 14     translation_text         varchar2(4000),
 15        constraint hs$_inst_dd_c2 check
 16        ((translation_type in ('T','S') and translation_text is not NULL) or
 17         (translation_type = 'M'))
 18  );

Table created.

SQL> 
SQL> create sequence hs$_inst_dd_s;

Sequence created.

SQL> 
SQL> create or replace view hs_inst_dd
  2  (dd_table_name, dd_table_desc, translation_type, translation_text,
  3   fds_class_name, fds_inst_name, dd_table_id, fds_class_id, fds_inst_id) as
  4  select bd.dd_table_name, bd.dd_table_desc, id.translation_type,
  5         id.translation_text, fc.fds_class_name, f.fds_inst_name,
  6  bd.dd_table_id,
  7         fc.fds_class_id, f.fds_inst_id
  8  from   hs$_base_dd bd, hs$_inst_dd id, hs$_fds_class fc, hs$_fds_inst f
  9  where  (bd.dd_table_id = id.dd_table_id) and (id.fds_inst_id = f.fds_inst_id)
 10         and (f.fds_class_id = fc.fds_class_id);

View created.

SQL> 
SQL> grant select on  hs_inst_dd to hs_admin_select_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym hs_inst_dd for hs_inst_dd;

Synonym created.

SQL> 
SQL> --
SQL> --############################################################################
SQL> --
SQL> --############################################################################
SQL> --
SQL> -- This is the FDS class specific init value table
SQL> --
SQL> -- HS$_CLASS_INIT
SQL> 
SQL> create table hs$_class_init
  2  (
  3     fds_class_init_id        number not null,
  4        constraint hs$_class_init_pk primary key (fds_class_init_id),
  5     fds_class_id             number not null,
  6        constraint hs$_class_init_fk1 foreign key (fds_class_id)
  7        references hs$_fds_class on delete cascade,
  8     init_value_name          varchar2(64) not null,
  9        constraint hs$_class_init_uk1 unique (fds_class_id,init_value_name),
 10     init_value               varchar2(255) not null,
 11     init_value_type          varchar2(1) not null,
 12        constraint hs$_class_init_c1 check (init_value_type in ('F','T'))
 13  );

Table created.

SQL> 
SQL> create sequence hs$_class_init_s;

Sequence created.

SQL> 
SQL> create or replace view hs_class_init
  2  (init_value_name, init_value, init_value_type, fds_class_name,
  3   fds_class_init_id, fds_class_id) as
  4  select ci.init_value_name, ci.init_value, ci.init_value_type,
  5         fc.fds_class_name, ci.fds_class_init_id, fc.fds_class_id
  6  from   hs$_class_init ci, hs$_fds_class fc
  7  where  (ci.fds_class_id = fc.fds_class_id);

View created.

SQL> 
SQL> grant select on  hs_class_init to hs_admin_select_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym hs_class_init for hs_class_init;

Synonym created.

SQL> 
SQL> --
SQL> --############################################################################
SQL> --
SQL> --############################################################################
SQL> --
SQL> -- This is the FDS class specific init value table
SQL> --
SQL> -- HS$_INST_INIT
SQL> 
SQL> create table hs$_inst_init
  2  (
  3     fds_inst_init_id         number not null,
  4        constraint hs$_inst_init_pk primary key (fds_inst_init_id),
  5     fds_inst_id              number not null,
  6        constraint hs$_inst_init_fk1 foreign key (fds_inst_id)
  7        references hs$_fds_inst on delete cascade,
  8     init_value_name          varchar2(64) not null,
  9        constraint hs$_inst_init_uk1 unique (fds_inst_id,init_value_name),
 10     init_value               varchar2(255) not null,
 11     init_value_type          varchar2(1) not null,
 12        constraint hs$_inst_init_c1 check (init_value_type in ('F','T'))
 13  );

Table created.

SQL> 
SQL> create sequence hs$_inst_init_s;

Sequence created.

SQL> create or replace view hs_inst_init
  2  (init_value_name, init_value, init_value_type, fds_class_name,
  3   fds_inst_name, fds_inst_init_id, fds_class_id, fds_inst_id) as
  4  select ii.init_value_name, ii.init_value, ii.init_value_type,
  5    fc.fds_class_name, f.fds_inst_name, ii.fds_inst_init_id,
  6    fc.fds_class_id, f.fds_inst_id
  7  from  hs$_inst_init ii,
  8    hs$_fds_class fc,
  9    hs$_fds_inst f
 10  where ii.fds_inst_id = f.fds_inst_id
 11  and f.fds_class_id = fc.fds_class_id;

View created.

SQL> 
SQL> grant select on  hs_inst_init to hs_admin_select_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym hs_inst_init for hs_inst_init;

Synonym created.

SQL> 
SQL> --
SQL> --#############################################################################
SQL> --
SQL> --#############################################################################
SQL> --
SQL> -- HS_ALL_CAPS view
SQL> -- This view shows all of the available capabilities for a given class
SQL> -- and inst.  Class level capabilities override base capabilities and
SQL> -- Inst level capabilities override class and base level capabilities.
SQL> 
SQL> create or replace view hs_all_caps
  2  (cap_number, context, translation, additional_info, fds_class_name,
  3  fds_inst_name) as
  4  /*clause for the fds_inst level*/
  5  select ic.cap_number, ic.context, ic.translation, ic.additional_info,
  6    fc.fds_class_name, fi.fds_inst_name
  7  from hs$_inst_caps ic, hs$_fds_inst fi, hs$_fds_class fc
  8  where ic.fds_inst_id = fi.fds_inst_id
  9  and fi.fds_class_id = fc.fds_class_id
 10  union
 11  /*clause for the fds_class level minus the fds_inst level*/
 12  select cc.cap_number, cc.context, cc.translation, cc.additional_info,
 13    fc2.fds_class_name, fi2.fds_inst_name
 14  from hs$_class_caps cc, hs$_fds_inst fi2, hs$_fds_class fc2
 15  where cc.fds_class_id = fi2.fds_class_id
 16  and fi2.fds_class_id = fc2.fds_class_id
 17  and not exists
 18    (select 1 from hs$_inst_caps ic2
 19     where ic2.cap_number = cc.cap_number
 20     and ic2.fds_inst_id = fi2.fds_inst_id)
 21  union
 22  /*clause for the base level minus fds_inst and fds_class level*/
 23  select bc.cap_number, 0, null, 0, fc.fds_class_name,
 24    fi.fds_inst_name
 25  from hs$_base_caps bc, hs$_fds_class fc, hs$_fds_inst fi
 26  where fc.fds_class_id = fi.fds_class_id
 27  and not exists
 28    (select 1 from hs$_inst_caps ic
 29     where ic.fds_inst_id = fi.fds_inst_id
 30     and ic.cap_number = bc.cap_number)
 31  and not exists
 32    (select 1 from hs$_class_caps cc
 33     where cc.fds_class_id = fc.fds_class_id
 34     and cc.cap_number = bc.cap_number);

View created.

SQL> 
SQL> grant select on hs_all_caps to hs_admin_select_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym hs_all_caps for hs_all_caps;

Synonym created.

SQL> 
SQL> --
SQL> --#############################################################################
SQL> --
SQL> --#############################################################################
SQL> --
SQL> -- HS_ALL_DD
SQL> -- This view shows all of the data dictionary translations for a
SQL> -- class and inst.  Class level translations override base translations
SQL> -- and inst level translations override class and base translations.
SQL> 
SQL> create or replace view hs_all_dd
  2  (dd_table_name, translation_type, translation_text, fds_class_name,
  3   fds_inst_name, dd_table_desc) as
  4  /*clause for the inst level*/
  5  select bd.dd_table_name, id.translation_type, id.translation_text,
  6    fc.fds_class_name, fi.fds_inst_name, bd.dd_table_desc
  7  from hs$_inst_dd id, hs$_base_dd bd, hs$_fds_inst fi, hs$_fds_class fc
  8  where id.fds_inst_id = fi.fds_inst_id
  9  and id.dd_table_id = bd.dd_table_id
 10  and fc.fds_class_id = fi.fds_class_id
 11  union
 12  /*clause for the class level minus the inst level*/
 13  select bd2.dd_table_name, cd.translation_type, cd.translation_text,
 14    fc2.fds_class_name, fi2.fds_inst_name, bd2.dd_table_desc
 15  from hs$_class_dd cd, hs$_base_dd bd2, hs$_fds_inst fi2, hs$_fds_class fc2
 16  where cd.fds_class_id = fi2.fds_class_id
 17  and cd.dd_table_id = bd2.dd_table_id
 18  and fc2.fds_class_id = fi2.fds_class_id
 19  and not exists
 20    (select 1 from hs$_inst_dd id2
 21     where id2.dd_table_id = cd.dd_table_id
 22     and id2.fds_inst_id = fi2.fds_inst_id)
 23  union
 24  /*clause for the base level minus the class and inst levels*/
 25  select bd.dd_table_name,NULL,NULL,fc.fds_class_name,fi.fds_inst_name,
 26    bd.dd_table_desc
 27  from hs$_base_dd bd, hs$_fds_class fc, hs$_fds_inst fi
 28  where fi.fds_class_id = fc.fds_class_id
 29  and not exists
 30    (select 1 from hs$_class_dd cd2
 31     where cd2.dd_table_id = bd.dd_table_id
 32     and cd2.fds_class_id = fc.fds_class_id)
 33  and not exists
 34    (select 1 from hs$_inst_dd id2
 35     where id2.dd_table_id = bd.dd_table_id
 36     and id2.fds_inst_id = fi.fds_inst_id);

View created.

SQL> 
SQL> grant select on  hs_all_dd to hs_admin_select_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym hs_all_dd for hs_all_dd;

Synonym created.

SQL> 
SQL> --
SQL> --#############################################################################
SQL> --
SQL> --#############################################################################
SQL> --
SQL> -- HS_ALL_INITS
SQL> -- This view shows all of the init values for a given class and inst.  Inst
SQL> -- level inits override inits defined at the class level.
SQL> 
SQL> create or replace view hs_all_inits
  2  (init_value_name,init_value,init_value_type,fds_class_name,
  3  fds_inst_name) as
  4  /*this clause for the inst level inits*/
  5  select i.init_value_name,i.init_value,i.init_value_type,fc.fds_class_name,
  6    fi.fds_inst_name
  7  from hs$_inst_init i, hs$_fds_class fc, hs$_fds_inst fi
  8  where i.fds_inst_id = fi.fds_inst_id
  9  and fi.fds_class_id = fc.fds_class_id
 10  union
 11  /*this clause for the class level inits*/
 12  select c.init_value_name,c.init_value,c.init_value_type,fc.fds_class_name,
 13    fi.fds_inst_name
 14  from hs$_class_init c, hs$_fds_class fc, hs$_fds_inst fi
 15  where fc.fds_class_id = fi.fds_class_id
 16  and fc.fds_class_id = c.fds_class_id
 17  and not exists
 18    (select 1 from hs$_inst_init i
 19     where i.fds_inst_id = fi.fds_inst_id
 20     and i.init_value_name = c.init_value_name);

View created.

SQL> 
SQL> grant select on  hs_all_inits to hs_admin_select_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym hs_all_inits for hs_all_inits;

Synonym created.

SQL> 
SQL> --  For future use:
SQL> --  Maintaining timestamps for date of last use of agents
SQL> --  with a particular FDS class and version will permit
SQL> --  use of a utility program to automatically purge data from the DD
SQL> --  for agents no longer in use.
SQL> 
SQL> create table hs$_fds_class_date(
  2     fds_class_id number not null,
  3             constraint hs$_fds_class_date_uk1 unique (fds_class_id),
  4     fds_class_date date);

Table created.

SQL> 
SQL> create or replace view hs_fds_class_date
  2     (fds_class_name, fds_class_date, fds_class_id)
  3     as select fc.fds_class_name, fd.fds_class_date, fc.fds_class_id
  4     from hs$_fds_class fc, hs$_fds_class_date fd
  5     where fc.fds_class_id = fd.fds_class_id;

View created.

SQL> 
SQL> grant select on hs_fds_class_date to hs_admin_select_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym hs_fds_class_date for hs_fds_class_date;

Synonym created.

SQL> 
SQL> -- Install the dbms_hs.package
SQL> @@dbmshs
SQL> Rem
SQL> Rem $Header: rdbms/admin/dbmshs.sql /main/6 2016/08/12 08:32:24 esmendoz Exp $
SQL> Rem
SQL> Rem dbmshs.sql
SQL> Rem
SQL> Rem Copyright (c) 2008, 2016, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmshs.sql - Hetrogeneous option packages
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      The following packages are located in this file:
SQL> rem      dbms_hs - Public procedures for createing and modifying objects in
SQL> rem                the hs dictionary.
SQL> Rem    NOTES
SQL> Rem
SQL> Rem      The procedural option is needed to use this facility.
SQL> Rem
SQL> Rem      This packages are installed by sys (connect internal).
SQL> Rem
SQL> Rem      The hs tables are created by caths.sql and are owned by the system.
SQL> Rem
SQL> Rem    DEPENDENCIES
SQL> Rem
SQL> Rem    USAGE
SQL> Rem
SQL> Rem    SECURITY
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/dbmshs.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/dbmshs.sql
SQL> Rem SQL_PHASE: DBMSHS
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/caths.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     surman     01/22/14  - 13922626: Update SQL metadata
SQL> Rem     kchen      05/05/08  - fixed bug 6943575
SQL> Rem     gviswana   05/24/01  - CREATE OR REPLACE SYNONYM
SQL> Rem     delson     08/28/00  - delete references to unused tables.
SQL> Rem     delson     08/17/00  - remove dcl for pkg dbms_hs_extproc.
SQL> Rem     jdraaije   04/18/97 -  Add 24279: insufficient privs to create lib
SQL> Rem     jdraaije   03/26/97 -  Name consistency: ho => hs
SQL> Rem     ktarkhan   02/24/97 -  add privilege exception
SQL> Rem     jdraaije   01/01/97 -  external_procedure ==> external_object
SQL> Rem     celsbern   10/21/96 -  Changing package names.
SQL> Rem     celsbern   09/18/96 -  fix up error messages and rename callout procedu
SQL> Rem     celsbern   09/09/96 -  created
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> REM  ***********************************************************************
SQL> REM  THESE PACKAGES AND PACKAGE BODIES MUST NOT BE MODIFIED BY THE CUSTOMER.
SQL> REM  DOING SO COULD CAUSE INTERNAL ERRORS AND CORRUPTIONS IN THE RDBMS.
SQL> REM  ***********************************************************************
SQL> 
SQL> REM  ************************************************************
SQL> REM  THESE PACKAGES AND PACKAGE BODIES MUST BE CREATED UNDER SYS.
SQL> REM  ************************************************************
SQL> create or replace package "DBMS_HS" as
  2  
  3    ----------------------------------------
  4    -- Exceptions
  5    --
  6    miss_base_caps exception;
  7    pragma exception_init(miss_base_caps, -24274);
  8    miss_base_caps_num constant number := -24274;
  9    miss_base_caps_msg constant varchar2(76) := 'HS$_BASE_CAPS';
 10  
 11    dupl_base_caps exception;
 12    pragma exception_init(dupl_base_caps, -24270);
 13    dupl_base_caps_num constant number := -24270;
 14    dupl_base_caps_msg constant varchar2(76) := 'HS$_BASE_CAPS';
 15  
 16    miss_base_dd exception;
 17    pragma exception_init(miss_base_dd, -24274);
 18    miss_base_dd_num constant number := -24274;
 19    miss_base_dd_msg constant varchar2(76) := 'HS$_BASE_DD';
 20  
 21    dupl_base_dd exception;
 22    pragma exception_init(dupl_base_dd, -24270);
 23    dupl_base_dd_num constant number := -24270;
 24    dupl_base_dd_msg constant varchar2(76) := 'HS$_BASE_DD';
 25  
 26    miss_class_caps exception;
 27    pragma exception_init(miss_class_caps, -24274);
 28    miss_class_caps_num constant number := -24274;
 29    miss_class_caps_msg constant varchar2(76) := 'HS$_CLASS_CAPS';
 30  
 31    dupl_class_caps exception;
 32    pragma exception_init(dupl_class_caps, -24270);
 33    dupl_class_caps_num constant number := -24270;
 34    dupl_class_caps_msg constant varchar2(76) := 'HS$_CLASS_CAPS';
 35  
 36    miss_class_dd exception;
 37    pragma exception_init(miss_class_dd, -24274);
 38    miss_class_dd_num constant number := -24274;
 39    miss_class_dd_msg constant varchar2(76) := 'HS$_CLASS_DD';
 40  
 41    dupl_class_dd exception;
 42    pragma exception_init(dupl_class_dd, -24270);
 43    dupl_class_dd_num constant number := -24270;
 44    dupl_class_dd_msg constant varchar2(76) := 'HS$_CLASS_DD';
 45  
 46    bad_TRANSLATION_TYPE exception;
 47    pragma exception_init(bad_TRANSLATION_TYPE, -24271);
 48    bad_TRANSLATION_TYPE_num constant number := -24271;
 49    bad_TRANSLATION_TYPE_msg constant varchar2(76) := 'NULL';
 50  
 51    bad_TRANSLATION_TEXT exception;
 52    pragma exception_init(bad_TRANSLATION_TEXT, -24273);
 53    bad_TRANSLATION_TEXT_num constant number := -24273;
 54    bad_TRANSLATION_TEXT_msg constant varchar2(76) := 'NULL';
 55  
 56    miss_class_init exception;
 57    pragma exception_init(miss_class_init, -24274);
 58    miss_class_init_num constant number := -24274;
 59    miss_class_init_msg constant varchar2(76) := 'HS$_CLASS_INIT';
 60  
 61    dupl_class_init exception;
 62    pragma exception_init(dupl_class_init, -24270);
 63    dupl_class_init_num constant number := -24270;
 64    dupl_class_init_msg constant varchar2(76) := 'HS$_CLASS_INIT';
 65  
 66    bad_INIT_VALUE_TYPE exception;
 67    pragma exception_init(bad_INIT_VALUE_TYPE, -24272);
 68    bad_INIT_VALUE_TYPE_num constant number := -24272;
 69    bad_INIT_VALUE_TYPE_msg constant varchar2(76) := 'NULL';
 70  
 71    miss_fds_class exception;
 72    pragma exception_init(miss_fds_class, -24274);
 73    miss_fds_class_num constant number := -24274;
 74    miss_fds_class_msg constant varchar2(76) := 'HS$_FDS_CLASS';
 75  
 76    dupl_fds_class exception;
 77    pragma exception_init(dupl_fds_class, -24270);
 78    dupl_fds_class_num constant number := -24270;
 79    dupl_fds_class_msg constant varchar2(76) := 'HS$_FDS_CLASS';
 80  
 81    miss_fds_inst exception;
 82    pragma exception_init(miss_fds_inst, -24274);
 83    miss_fds_inst_num constant number := -24274;
 84    miss_fds_inst_msg constant varchar2(76) := 'HS$_FDS_INST';
 85  
 86    dupl_fds_inst exception;
 87    pragma exception_init(dupl_fds_inst, -24270);
 88    dupl_fds_inst_num constant number := -24270;
 89    dupl_fds_inst_msg constant varchar2(76) := 'HS$_FDS_INST';
 90  
 91    miss_inst_caps exception;
 92    pragma exception_init(miss_inst_caps, -24274);
 93    miss_inst_caps_num constant number := -24274;
 94    miss_inst_caps_msg constant varchar2(76) := 'HS$_INST_CAPS';
 95  
 96    dupl_inst_caps exception;
 97    pragma exception_init(dupl_inst_caps, -24270);
 98    dupl_inst_caps_num constant number := -24270;
 99    dupl_inst_caps_msg constant varchar2(76) := 'HS$_INST_CAPS';
100  
101    miss_inst_dd exception;
102    pragma exception_init(miss_inst_dd, -24274);
103    miss_inst_dd_num constant number := -24274;
104    miss_inst_dd_msg constant varchar2(76) := 'HS$_INST_DD';
105  
106    dupl_inst_dd exception;
107    pragma exception_init(dupl_inst_dd, -24270);
108    dupl_inst_dd_num constant number := -24270;
109    dupl_inst_dd_msg constant varchar2(76) := 'HS$_INST_DD';
110  
111    miss_inst_init exception;
112    pragma exception_init(miss_inst_init, -24274);
113    miss_inst_init_num constant number := -24274;
114    miss_inst_init_msg constant varchar2(76) := 'HS$_INST_INIT';
115  
116    dupl_inst_init exception;
117    pragma exception_init(dupl_inst_init, -24270);
118    dupl_inst_init_num constant number := -24270;
119    dupl_inst_init_msg constant varchar2(76) := 'HS$_INST_INIT';
120   --------------------------------
121    -- Public procedures
122    --
123  
124    --------------------------------
125    -- create_base_caps procedure
126    --
127    -- This procedure creates a row in the HS$_BASE_CAPS table.
128    --
129  
130    procedure create_base_caps(
131      CAP_NUMBER in NUMBER,
132      CAP_DESCRIPTION in VARCHAR2 := null);
133  
134    --------------------------------
135    -- create_base_dd procedure
136    --
137    -- This procedure creates a row in the HS$_BASE_DD table.
138    --
139  
140    procedure create_base_dd(
141      DD_TABLE_NAME in VARCHAR2,
142      DD_TABLE_DESC in VARCHAR2 := null);
143  
144    --------------------------------
145    -- create_class_caps procedure
146    --
147    -- This procedure creates a row in the HS$_CLASS_CAPS table.
148    -- The FDS_CLASS_NAME must be exist in the HS$_FDS_CLASS table.
149    -- The CAP_NUMBER must be defined in the HS$_BASE_CAPS table.
150  
151    procedure create_class_caps(
152      FDS_CLASS_NAME in VARCHAR2,
153      CAP_NUMBER in NUMBER,
154      CONTEXT in NUMBER := null,
155      TRANSLATION in VARCHAR2 := null,
156      ADDITIONAL_INFO in NUMBER := null);
157  
158    --------------------------------
159    -- create_class_dd procedure
160    --
161    -- This procedure creates a row in the HS$_CLASS_DD table.
162    -- The FDS_CLASS_NAME must exist in the HS$_FDS_CLASS table.
163    -- The DD_TABLE_NAME must exist in the HS$_BASE_DD table.
164    -- TRANSLATION_TYPE must be either 'T' (translated) or 'M'
165    -- (mimicked).  If TRANSLATION_TYPE = 'T' then the TRANSLATION_TEXT
166    -- string must be supplied.
167  
168    procedure create_class_dd(
169      FDS_CLASS_NAME in VARCHAR2,
170      DD_TABLE_NAME in VARCHAR2,
171      TRANSLATION_TYPE in CHAR,
172      TRANSLATION_TEXT in VARCHAR2 := null);
173  
174    --------------------------------
175    -- create_class_init procedure
176    --
177    -- This procedure creates a row in the HS$_CLASS_INIT table.
178    -- The FDS_CLASS_NAME must exist in the HS$_FDS_CLASS table.
179    -- The INIT_VALUE_TYPE must either 'F' (environment variable) or
180    -- 'M' (not an environment variable).
181  
182    procedure create_class_init(
183      FDS_CLASS_NAME in VARCHAR2,
184      INIT_VALUE_NAME in VARCHAR2,
185      INIT_VALUE in VARCHAR2,
186      INIT_VALUE_TYPE in VARCHAR2);
187  
188    --------------------------------
189    -- create_fds_class procedure
190    --
191    -- This procedure creates a row in the HS$_FDS_CLASS table.
192  
193    procedure create_fds_class(
194      FDS_CLASS_NAME in VARCHAR2,
195      FDS_CLASS_COMMENTS in VARCHAR2 := null);
196  
197    --------------------------------
198    -- create_fds_inst procedure
199    --
200    -- This procedure creates a row in the HS$_FDS_INST table.
201    -- The FDS_CLASS_NAME must exist in the HS$_FDS_CLASS table.
202  
203    procedure create_fds_inst(
204      FDS_INST_NAME in VARCHAR2,
205      FDS_CLASS_NAME in VARCHAR2,
206      FDS_INST_COMMENTS in VARCHAR2 := null);
207  
208    --------------------------------
209    -- create_inst_caps procedure
210    --
211    -- This procedure creates a row in the HS$_INST_CAPS table.
212    -- The FDS_INST_NAME must exist in the HS$_FDS_INST table and
213    -- be defined for the row in HS$_FDS_CLASS specified by the FDS_CLASS_NAME
214    -- row.  The CAP_NUMBER must be defined in the HS$_BASE_CAPS table.
215  
216    procedure create_inst_caps(
217      FDS_INST_NAME in VARCHAR2,
218      FDS_CLASS_NAME in VARCHAR2,
219      CAP_NUMBER in NUMBER,
220      CONTEXT in NUMBER := null,
221      TRANSLATION in VARCHAR2 := null,
222      ADDITIONAL_INFO in NUMBER := null);
223  
224    --------------------------------
225    -- create_inst_dd procedure
226    --
227    -- This procedure creates a row in the HS$_INST_DD table.
228    -- The FDS_INST_NAME must be defined in the HS$_FDS_INST table and
229    -- must belong to the FDS_CLASS specified by the HS$_FDS_CLASS
230    -- parameter.  The DD_TABLE_NAME must be defined in the HS$_BASE_DD
231    -- table.  TRANSLATION_TYPE must be either 'T' (translated) or 'M'
232    -- (mimicked).  If TRANSLATION_TYPE is 'T', then TRANSLATION_TEXT
233    -- must be supplied.
234  
235    procedure create_inst_dd(
236      FDS_INST_NAME in VARCHAR2,
237      FDS_CLASS_NAME in VARCHAR2,
238      DD_TABLE_NAME in VARCHAR2,
239      TRANSLATION_TYPE in CHAR,
240      TRANSLATION_TEXT in VARCHAR2 := null);
241  
242    --------------------------------
243    -- create_inst_init procedure
244    --
245    -- This procedure creates a row in the HS$_INST_INIT table.
246    -- The FDS_INST_NAME must exist in the HS$_FDS_INST table and
247    -- must be exist in the HS$_FDS_CLASS table as specified by
248    -- the FDS_CLASS_NAME parameter. The INIT_VALUE_TYPE must
249    -- be defined either 'F' or 'T'.
250  
251    procedure create_inst_init(
252      FDS_INST_NAME in VARCHAR2,
253      FDS_CLASS_NAME in VARCHAR2,
254      INIT_VALUE_NAME in VARCHAR2,
255      INIT_VALUE in VARCHAR2,
256      INIT_VALUE_TYPE in VARCHAR2);
257  
258    --------------------------------
259    -- drop_base_caps procedure
260    --
261    -- This procedure drops a row from the HS$_BASE_CAPS table as specified
262    -- by the CAP_NUMBER parameter.
263  
264    procedure drop_base_caps(
265      CAP_NUMBER in NUMBER);
266  
267    --------------------------------
268    -- drop_base_dd procedure
269    --
270    -- drops a row from the HS$_BASE_DD table as specified by table_name.
271  
272    procedure drop_base_dd(
273      DD_TABLE_NAME in VARCHAR2);
274  
275    --------------------------------
276    -- drop_class_caps procedure
277    --
278    -- This procedure deletes a row from the HS$_CLASS_CAPS table
279    -- as specified by the FDS_CLASS_NAME and CAP_NUMBER.
280  
281    procedure drop_class_caps(
282      FDS_CLASS_NAME in VARCHAR2,
283      CAP_NUMBER in NUMBER);
284  
285    --------------------------------
286    -- drop_class_dd procedure
287    --
288    -- Deletes row in HS$_CLASS_DD specified by FDS_CLASS_NAME and DD_TABLE_NAME
289  
290    procedure drop_class_dd(
291      FDS_CLASS_NAME in VARCHAR2,
292      DD_TABLE_NAME in VARCHAR2);
293  
294    --------------------------------
295    -- drop_class_init procedure
296    --
297    -- Drops row in HS$_CLASS_INIT as specified by FDS_CLASS_NAME and
298    -- INIT_VALUE_NAME.
299  
300    procedure drop_class_init(
301      FDS_CLASS_NAME in VARCHAR2,
302      INIT_VALUE_NAME in VARCHAR2);
303  
304    --------------------------------
305    -- drop_fds_class procedure
306    --
307    -- Drops row in HS$_FDS_CLASS as specified by FDS_CLASS_NAME;
308  
309    procedure drop_fds_class(
310      FDS_CLASS_NAME in VARCHAR2);
311  
312    --------------------------------
313    -- drop_fds_inst procedure
314    --
315    -- Drops row in HS$_FDS_INST table as specified by FDS_INST_NAME
316    -- and FDS_CLASS_NAME.
317  
318    procedure drop_fds_inst(
319      FDS_INST_NAME in VARCHAR2,
320      FDS_CLASS_NAME in VARCHAR2);
321  
322    --------------------------------
323    -- drop_inst_caps
324    --
325    -- delete rows in HS$_INST_CAPS specified by FDS_INST_NAME, FDS_CLASS_NAME
326    -- and CAP_NUMBER
327  
328    procedure drop_inst_caps(
329      FDS_INST_NAME in VARCHAR2,
330      FDS_CLASS_NAME in VARCHAR2,
331      CAP_NUMBER in NUMBER);
332  
333    --------------------------------
334    -- drop_inst_dd
335    --
336    -- Drops rows from HS$_INST_DD specified by FDS_INST_NAME, FDS_CLASS_NAME
337    -- and DD_TABLE_NAME.
338  
339    procedure drop_inst_dd(
340      FDS_INST_NAME in VARCHAR2,
341      FDS_CLASS_NAME in VARCHAR2,
342      DD_TABLE_NAME in VARCHAR2);
343  
344    --------------------------------
345    -- drop_inst_init
346    --
347    -- Drops rows from HS$_INST_INIT table as specified by
348    -- FDS_INST_NAME, FDS_CLASS_NAME, and INIT_VALUE_NAME.
349  
350    procedure drop_inst_init(
351      FDS_INST_NAME in VARCHAR2,
352      FDS_CLASS_NAME in VARCHAR2,
353      INIT_VALUE_NAME in VARCHAR2);
354  
355    --------------------------------
356    -- alter_base_caps
357    --
358    -- This procedure alters a row in the HS$_BASE_CAPS table.
359  
360    procedure alter_base_caps(
361      CAP_NUMBER in NUMBER,
362      new_CAP_NUMBER in NUMBER := -1e-130,
363      new_CAP_DESCRIPTION in VARCHAR2 := '-');
364  
365    --------------------------------
366    -- alter_base_dd
367    --
368    -- This procedure alters a row in the HS$_BASE_DD table.
369  
370    procedure alter_base_dd(
371      DD_TABLE_NAME in VARCHAR2,
372      new_DD_TABLE_NAME in VARCHAR2 := '-',
373      new_DD_TABLE_DESC in VARCHAR2 := '-');
374  
375    --------------------------------
376    -- alter_class_caps
377    --
378    -- This procedure alters the contents of the HS$_CLASS_CAPS table.
379  
380    procedure alter_class_caps(
381      FDS_CLASS_NAME in VARCHAR2,
382      CAP_NUMBER in NUMBER,
383      new_FDS_CLASS_NAME in VARCHAR2 := '-',
384      new_CAP_NUMBER in NUMBER := -1e-130,
385      new_CONTEXT in NUMBER := -1e-130,
386      new_TRANSLATION in VARCHAR2 := '-',
387      new_ADDITIONAL_INFO in NUMBER := -1e-130);
388  
389    --------------------------------
390    -- alter_class_dd
391    --
392    -- This procedure modifies the contents of the HS$_CLASS_DD table.
393  
394    procedure alter_class_dd(
395      FDS_CLASS_NAME in VARCHAR2,
396      DD_TABLE_NAME in VARCHAR2,
397      new_FDS_CLASS_NAME in VARCHAR2 := '-',
398      new_DD_TABLE_NAME in VARCHAR2 := '-',
399      new_TRANSLATION_TYPE in CHAR := '-',
400      new_TRANSLATION_TEXT in VARCHAR2 := '-');
401  
402    --------------------------------
403    -- alter_class_init
404    --
405    -- This procedure alters the contents of the HS$_CLASS_INIT table.
406  
407    procedure alter_class_init(
408      FDS_CLASS_NAME in VARCHAR2,
409      INIT_VALUE_NAME in VARCHAR2,
410      new_FDS_CLASS_NAME in VARCHAR2 := '-',
411      new_INIT_VALUE_NAME in VARCHAR2 := '-',
412      new_INIT_VALUE in VARCHAR2 := '-',
413      new_INIT_VALUE_TYPE in VARCHAR2 := '-');
414  
415    --------------------------------
416    -- alter_fds_class
417    --
418    -- Alters the contents of the HS$_FDS_CLASS table.
419  
420    procedure alter_fds_class(
421      FDS_CLASS_NAME in VARCHAR2,
422      new_FDS_CLASS_NAME in VARCHAR2 := '-',
423      new_FDS_CLASS_COMMENTS in VARCHAR2 := '-');
424  
425    --------------------------------
426    -- alter_fds_inst
427    --
428    -- Modifies the contents of the HS$_FDS_INST table.
429  
430    procedure alter_fds_inst(
431      FDS_INST_NAME in VARCHAR2,
432      FDS_CLASS_NAME in VARCHAR2,
433      new_FDS_INST_NAME in VARCHAR2 := '-',
434      new_FDS_CLASS_NAME in VARCHAR2 := '-',
435      new_FDS_INST_COMMENTS in VARCHAR2 := '-');
436  
437    --------------------------------
438    -- alter_inst_caps procedures
439    --
440    -- Modifies the contents of the $HS_INST_CAPS table.
441  
442    procedure alter_inst_caps(
443      FDS_INST_NAME in VARCHAR2,
444      FDS_CLASS_NAME in VARCHAR2,
445      CAP_NUMBER in NUMBER,
446      new_FDS_INST_NAME in VARCHAR2 := '-',
447      new_FDS_CLASS_NAME in VARCHAR2 := '-',
448      new_CAP_NUMBER in NUMBER := -1e-130,
449      new_CONTEXT in NUMBER := -1e-130,
450      new_TRANSLATION in VARCHAR2 := '-',
451      new_ADDITIONAL_INFO in NUMBER := -1e-130);
452  
453    --------------------------------
454    -- alter_inst_dd
455    --
456    -- Alters the contents of the HS$_INST_DD table.
457  
458    procedure alter_inst_dd(
459      FDS_INST_NAME in VARCHAR2,
460      FDS_CLASS_NAME in VARCHAR2,
461      DD_TABLE_NAME in VARCHAR2,
462      new_FDS_INST_NAME in VARCHAR2 := '-',
463      new_FDS_CLASS_NAME in VARCHAR2 := '-',
464      new_DD_TABLE_NAME in VARCHAR2 := '-',
465      new_TRANSLATION_TYPE in CHAR := '-',
466      new_TRANSLATION_TEXT in VARCHAR2 := '-');
467  
468    --------------------------------
469    -- alter_inst_init
470    --
471    -- Alters the contents of the HS$_INST_INIT table.
472  
473    procedure alter_inst_init(
474      FDS_INST_NAME in VARCHAR2,
475      FDS_CLASS_NAME in VARCHAR2,
476      INIT_VALUE_NAME in VARCHAR2,
477      new_FDS_INST_NAME in VARCHAR2 := '-',
478      new_FDS_CLASS_NAME in VARCHAR2 := '-',
479      new_INIT_VALUE_NAME in VARCHAR2 := '-',
480      new_INIT_VALUE in VARCHAR2 := '-',
481      new_INIT_VALUE_TYPE in VARCHAR2 := '-');
482  
483    -------------------------------
484    -- copy_inst
485    --
486    -- copies everything for an HS$_FDS_INST to
487    -- a new inst in the same FDS_CLASS
488  
489    procedure copy_inst(FDS_INST_NAME in VARCHAR2,
490                        FDS_CLASS_NAME in VARCHAR2,
491                        new_FDS_INST_NAME in VARCHAR2,
492                        new_FDS_COMMENTS in VARCHAR2 default '-');
493  
494    -------------------------------
495    -- copy_class
496    --
497    -- Copies everything for a class to another class
498    procedure copy_class(old_fds_class_name varchar2,
499                         new_fds_class_name varchar2,
500                         new_fds_class_comments varchar2 default '-');
501  
502  
503    --------------------------------
504    -- replace_base_caps
505    --
506    -- This procedure creates  or replaces a row in the HS$_BASE_CAPS table.
507    -- It will first attempt to update the row in hs$_base_caps.  If the row
508    -- does not exist, it will attempt to insert the row.
509    -- The new_CAP_NUMBER parameter is ignored if the row specified by
510    -- CAP_NUMBER does not exist.
511  
512    procedure replace_base_caps(
513      CAP_NUMBER in NUMBER,
514      new_CAP_NUMBER in NUMBER := null,
515      new_CAP_DESCRIPTION in VARCHAR2 := null);
516  
517    --------------------------------
518    -- replace_base_dd
519    --
520    -- This procedure does a create or replace on a row in the HS$_BASE_DD
521    -- table.  First, this procedure will attempt to update the row.  If
522    -- the row does not exist, it is inserted.
523    -- The new_DD_TABLE_NAME parameter is ignored if the row does not
524    -- exist.
525  
526    procedure replace_base_dd(
527      DD_TABLE_NAME in VARCHAR2,
528      new_DD_TABLE_NAME in VARCHAR2 := null,
529      new_DD_TABLE_DESC in VARCHAR2 := null);
530  
531    --------------------------------
532    -- replace_class_caps
533    --
534    -- This procedure does a 'create or replace' on the HS$_CLASS_CAPS table.
535    -- If a row exists for the FDS_CLASS_NAME and CAP_NUMBER, it is updated.
536    -- If a row does not exist, it is inserted.
537    -- If a row does not exist, the new_FDS_CLASS_NAME and new_CAP_NUMBER
538    -- parameters are ignored.
539  
540    procedure replace_class_caps(
541      FDS_CLASS_NAME in VARCHAR2,
542      CAP_NUMBER in NUMBER,
543      new_FDS_CLASS_NAME in VARCHAR2 := NULL,
544      new_CAP_NUMBER in NUMBER := null,
545      new_CONTEXT in NUMBER := NULL,
546      new_TRANSLATION in VARCHAR2 := NULL,
547      new_ADDITIONAL_INFO in NUMBER := NULL);
548  
549    --------------------------------
550    -- replace_class_dd
551    --
552    -- This procedure performs a 'create or replace' on the HS$_CLASS_DD table.
553    -- If a row exists for the FDS_CLASS_NAME and DD_TABLE_NAME then the row
554    -- is updated.  If a row does not exist, it is inserted.
555    -- If a row does not exist, the new_FDS_CLASS_NAME and new_DD_TABLE_NAME
556    -- parameters are ignored.
557  
558    procedure replace_class_dd(
559      FDS_CLASS_NAME in VARCHAR2,
560      DD_TABLE_NAME in VARCHAR2,
561      new_FDS_CLASS_NAME in VARCHAR2 := NULL,
562      new_DD_TABLE_NAME in VARCHAR2 := NULL,
563      new_TRANSLATION_TYPE in CHAR := NULL,
564      new_TRANSLATION_TEXT in VARCHAR2 := NULL);
565  
566    --------------------------------
567    -- replace_class_init
568    --
569    -- This procedure will create or update a row in the HS$_CLASS_INIT table.
570    -- If a row exists with the specified FDS_CLASS_NAME and INIT_VALUE_NAME,
571    -- it will be updated.  If the row does not exist, it is inserted.  If
572    -- the row does not exist, new_FDS_CLASS_NAME and new_INIT_VALUE_NAME
573    -- parameters are ignored.
574  
575    procedure replace_class_init(
576      FDS_CLASS_NAME in VARCHAR2,
577      INIT_VALUE_NAME in VARCHAR2,
578      new_FDS_CLASS_NAME in VARCHAR2 := NULL,
579      new_INIT_VALUE_NAME in VARCHAR2 := NULL,
580      new_INIT_VALUE in VARCHAR2 := NULL,
581      new_INIT_VALUE_TYPE in VARCHAR2 := NULL);
582  
583    --------------------------------
584    -- replace_fds_class
585    --
586    -- This procedure does create or replace operations on the
587    -- HS$_FDS_CLASS table.  If a row exists for the FDS_CLASS_NAME,
588    -- it is updated.  If no row exists, it is created.  If no row exists,
589    -- the new_FDS_CLASS_NAME parameter is ignored.
590  
591    procedure replace_fds_class(
592      FDS_CLASS_NAME in VARCHAR2,
593      new_FDS_CLASS_NAME in VARCHAR2 := NULL,
594      new_FDS_CLASS_COMMENTS in VARCHAR2 := NULL);
595  
596    --------------------------------
597    -- replace_fds_inst
598    --
599    -- This procedure creates or replaces rows in the HS$_FDS_INST table.
600    -- If a row exists for the FDS_INST_NAME and FDS_CLASS_NAME, it is
601    -- updated.  If no row exists, it is created.
602    -- If no row exists, the new_FDS_INST_NAME and new_FDS_CLASS_NAME
603    -- parameters are ignored when performing the insert.
604  
605    procedure replace_fds_inst(
606      FDS_INST_NAME in VARCHAR2,
607      FDS_CLASS_NAME in VARCHAR2,
608      new_FDS_INST_NAME in VARCHAR2 := NULL,
609      new_FDS_CLASS_NAME in VARCHAR2 := NULL,
610      new_FDS_INST_COMMENTS in VARCHAR2 := NULL);
611  
612    --------------------------------
613    -- replace_inst_caps
614    --
615    -- This procedure does a create or replace on the HS$_INST_CAPS table.
616    -- If no row exists for the FDS_INST_NAME, FDS_CLASS_NAME and CAP_NUMBER,
617    -- the row is created.
618    -- If a row exists, it is updated.
619    -- In the case where an insert is performed, the new_FDS_INST_NAME,
620    -- new_FDS_CLASS_NAME and new_CLASS_NUMBER parameters are ignored.
621  
622    procedure replace_inst_caps(
623      FDS_INST_NAME in VARCHAR2,
624      FDS_CLASS_NAME in VARCHAR2,
625      CAP_NUMBER in NUMBER,
626      new_FDS_INST_NAME in VARCHAR2 := NULL,
627      new_FDS_CLASS_NAME in VARCHAR2 := NULL,
628      new_CAP_NUMBER in NUMBER := NULL,
629      new_CONTEXT in NUMBER := NULL,
630      new_TRANSLATION in VARCHAR2 := NULL,
631      new_ADDITIONAL_INFO in NUMBER := NULL);
632  
633    --------------------------------
634    -- replace_inst_dd
635    --
636    -- This procedure performs a create or replace operation on the
637    -- HS$_INST_DD table.  If a row exists for the FDS_INST_NAME,
638    -- FDS_CLASS_NAME and DD_TABLE_NAME, it is updated.  If no row
639    -- exists, it is created and the new_FDS_INST_NAME, new_FDS_CLASS_NAME,
640    -- and new_DD_TABLE_NAME values are ignored.
641  
642    procedure replace_inst_dd(
643      FDS_INST_NAME in VARCHAR2,
644      FDS_CLASS_NAME in VARCHAR2,
645      DD_TABLE_NAME in VARCHAR2,
646      new_FDS_INST_NAME in VARCHAR2 := NULL,
647      new_FDS_CLASS_NAME in VARCHAR2 := NULL,
648      new_DD_TABLE_NAME in VARCHAR2 := NULL,
649      new_TRANSLATION_TYPE in CHAR := NULL,
650      new_TRANSLATION_TEXT in VARCHAR2 := NULL);
651  
652    --------------------------------
653    -- replace_inst_init
654    --
655    -- This procedure performs a create or replace on the HS$_INST_INIT table.
656    -- If a row exists with the FDS_INST_NAME, FDS_CLASS_NAME and
657    -- and INIT_VALUE_NAME, it is updated.  If a row does not exist, it is
658    -- created.  In the creation case, the new_FDS_INST_NAME, new_FDS_CLASS_NAME
659    -- and new_INIT_VALUE_NAME are ignored.
660  
661    procedure replace_inst_init(
662      FDS_INST_NAME in VARCHAR2,
663      FDS_CLASS_NAME in VARCHAR2,
664      INIT_VALUE_NAME in VARCHAR2,
665      new_FDS_INST_NAME in VARCHAR2 := NULL,
666      new_FDS_CLASS_NAME in VARCHAR2 := NULL,
667      new_INIT_VALUE_NAME in VARCHAR2 := NULL,
668      new_INIT_VALUE in VARCHAR2 := NULL,
669      new_INIT_VALUE_TYPE in VARCHAR2 := NULL);
670  
671  end "DBMS_HS";
672  /

Package created.

SQL> grant execute on dbms_hs to hs_admin_execute_role;

Grant succeeded.

SQL> 
SQL> create or replace public synonym dbms_hs for dbms_hs;

Synonym created.

SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> @@prvths.plb
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> create or replace package "DBMS_HS_ALT" wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  be0 22f
 21  xPatr+hySKN6JZRUvpDPDTNGP2Ywg1Urr0gVfHRVWGTjU1Ch6asFeRFbeH/vo+wroZdhXvm1
 22  lmCeChZXpDjDhNn7XNtyQkI/DbodqtbqkV7MiTxkO1tD6HRW9rFGLYPDdukLyHm/UM7hViPL
 23  DddUxBvuF/hPsS6TDjgJA1Ve/8vq/egIVV5rijoC1x9XD3oAXRRnDkNgPNwrew7fcM6rRwvd
 24  14sD+EMvD6jCtmbmMFsC5mRr22pfsMaAhP4HwcxnyqQBDJtDntgA01PXmNOfnYjvbqNAMNT5
 25  7T/MxPLa5Lj3fdFHiFArNRqgOj7HL+ZAEWmH/FzpiyirgIHN/WbpmjYFFB4TigMd7jT42LpZ
 26  pnbVgB0zjWs0iJTcJynRgslnkrJNG8VVQxWyXbmo56aUDENzp/5ovOtVqJhHF8EeZ0ZO5VbM
 27  2gy2SkuNg3ubO+f9JLQACAmR1HX6t1VQkHxWHWNqy2BZxB78yLQaxo0eJPWBK6gnlw/ESPTX
 28  qmhFVdKgEWQZLG8LjhRSTV+6yCRP5k3ptYQ/Qv5ES6sNkA==
 29  
 30  /

Package created.

SQL> create or replace package "DBMS_HS_CHK" wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  634 19d
 21  BNs6Bu+7/nrBXcgvZ/fCrNktZKswgw2NLkhqyi8CmLk+YJOtCStVySpAofB+tm1PTUxStbrb
 22  qbd7Z3caa9h+cs4Su+41QciBzqFL7s1NTLCkHpKyDkBLGfsbMpHbO2ZwpC0ZiAIJKBHbzHtO
 23  AMy2BaYl4eetnawnmFswX2AP6FkTmUGf5kM3LJiYI5xKTZNQtgkEvxWvJT3PdwyerUfEpNiR
 24  hyA3DU36f271HSTVUIsH3IMtbEM1CCeZGF9cnAWB4olTbmQmmZzHF0ukhaF2IACLpW7ZOXd7
 25  KnZTW+KcJ54ZPW2URPFxcoWxWrudTizrZGBd6h2+5FwaQnoQQQpHlAkTm+KSl1XDKl3WZwh0
 26  NFYPUtKs0Ab05R6bDb2yIvH7cyicrrJloT/4x7SdkPsk35/Z
 27  
 28  /

Package created.

SQL> create or replace package "DBMS_HS_UTL" wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  ffa 35f
 21  jD8GxXDKfIBowFto1OOtOtEi/ogwg9fqLscTfC/NKvmU7HHmyYVrADzramZiovDIBKHbMpaS
 22  tbVm5gR0YGUNHkWzNwiPcyOYrq5R+5I5lPGAK3fU7auxowha3chL30Yho8yRO2DmKqzp6qk1
 23  gGt/iIg86BLO6txhMjfsuKGSD61Y4rNfa2vseKfVMTG81uhkDp33uyQ0Ty9yusLxQS2KIdEL
 24  /+aoUKFNUqsq0BMyKm4uHK6uRASCBywGp0d2+QxDnU2h8qPkAdDfhDLHfCvWIeEJEEcoyd0E
 25  u35nV9EMDV+SNC6EkA2S002qV8i9ORf+LkuKR8Dx39qgGypFIQTRvu0nSJCMEluzG+5uden7
 26  gFGyyFsFHUAERi13iuVCdtdN5faJPBoSdfJyYy1/e/W76ovPNY2ogyP3s8USmmN7VWGXckXw
 27  cvLqqSzM/wVhi8d5+Kn2YR61RIu15ctZChufFk9r/EYWKRHH6NgueD/JBxH37067vwWrRoXu
 28  Mu8cZGaQ680rovJKIsBW2BvwSFh/g/SXmifZGrdgovhIwu1gGuMnGep4cqViUUj+PMTvYhf8
 29  mSWZYbH2XORHrAyd6L3fKCgL1+1zL7oNM25YZ6FvTm2U3T7n+f27K91/7Tm5lHeK8JWDazzy
 30  F+6tOCz+6taXmqvPzqgiffwedSc8hi925avjYAsqsDzeVsyMGhHCAWFuihSCOtzfG1ecOxru
 31  I8xrMu5ZsoAMPDSt/xvqdbKh0a7/Q6UQrWE9xh9JmvPlMf7gUTbH3vIbwsvcvawbNBS50a4q
 32  xxgZeoinUJ4MQYdBz4CcfBJESok0pyNHEO1yVLhRo67ciX759J1zm/vPeYy/
 33  
 34  /

Package created.

SQL> create or replace package body "DBMS_HS" wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  91eb f49
 21  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
 75  
 76  /

Package body created.

SQL> create or replace package body "DBMS_HS_ALT" wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  492a 950
 21  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
 54  
 55  /

Package body created.

SQL> create or replace package body "DBMS_HS_CHK" wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  2904 635
 21  rKHkntshMLxWYtfPaaVhib88HQcwgz2jLiCMfC9VTvme9g0JZxjAtAtWy8tXssU357efEga1
 22  tW0NPrQw5FgaIX4aO0UI2TDJ5BlfWNLmm+qb5rNrPiJQZAa4yXP0gTopgR9mdHOifSXfrWLi
 23  Yuk69ItkELHx7Fwa1RNFuyLRITVa3S+smU3YOoBaE1EplThshK8fB6R9mbX1L9TNpNY8fj9s
 24  E0gDVW46JGGhMm16yLY7zBA7xYoxdStfYM4HUIkl9urNowllgwMoPLPHrgVh3rdSQr/KAveD
 25  vLxBxJfxoAFbTzEMGDIsHqxJ5/gQjsr4+gatRwwdksQD66mW4/Wd9yt87nI8oYm99yL3Fmpy
 26  2y4fNZQVAwFghWlV9R0BCXeg3AyIBokMswtkMku3B6Ry3Pv5o5/AbYefpzIxgSAaRQmTjGCr
 27  fZkbgUHbAG0P+ouFobHXvU6K4UQ0bgRwsKY2KHRTwV03qNivSrF7H24ELVsVc3L6Amx8afno
 28  pf5nuvdocpoJdyW5g9y17YzMUvz0zZLCdX6KgjAhxGkCsxiLVWiTcvqNMrFNc5BLCwVus/Rz
 29  K/otFRmuw32AzW6vbrl3ZitPdl5XOjfNsDp4sJzubuG9MCxTVdJEKVqqfuJRGRjEuWPNvpFZ
 30  6cqIbdigRHA7yVg0iWd+9NvU2VFaR6mZh1b6awbgZhdp0HTAGdQM3jE1/9owrXgpQxq2EUOR
 31  7sIz+qEA6VhBJZBhGPtJFz+PlMDxmEkEKahmgKar7HZWdlEddkfVFTusBld+EFa0U56hU3NB
 32  0+V2Sx9eHcmw0uFEMbSfJAiuvBMEgaJySU2ol7l9wSID35beLmMAlT9Cq971+uu9RpvDblLZ
 33  XgyuOU5jEGdxT/cZC1+8a5kEIxjq73CNqzsKtA16HVtFGOYGWunWYcBtUZz2Ipf7vAfpX8Q+
 34  ktW6MfEYQfi+cnC76nd1sACVzBj5WQtGUftQ4hGMhiLofUJoWIzNRfUAzm2zl/UAn8lG4PWk
 35  ESW254B43giFxxe3QQBiROkQZBoHAHqk34doruo7awM+YQ7/plDigvuS5pCvatd0PIqmNhIN
 36  eNSpsWPtrwq0QXup7vW9J66pFc13kQlUEsmMNLrDKPbbXcDuQlodf7vYigPHuuGMI+PUww1P
 37  y0thvZ1tMFxyxwO4FYI5RDz4QGBMvRh1lud+kwP/P7aO1f/iCKR0LHa4mlX5asl/6V2QrFc3
 38  3zW9cH0J6MtlHVud65wN4u55grQy2v2kDzG0ogKIUtq3j6mXNhuLwN+0wtycLCsxeMuj6Bbh
 39  0AHz7EzgUGV5mAd0riFjl5EgpDxB2gJYwVdxHMovp1v6mHWbfOtX2AAoLjjJQeJ93i7oG+jN
 40  xbhw5+83V8IWVID4D7qOp5A9X8xUQ8+6zFTgK07N6Tj3Nf9WxvPp++E76ail1/rX6e68NUqb
 41  H4yNjTm7eFa2FXg0iH/MmkvP6CtPVVbMnqeQCIUW5A/bNvKvRSpIaF3ud8ZCt1tnCsXwJnLW
 42  5fXwEF3JMybQTglkrhArUcML/Ib2Bjcm0Nt1c7qpoJ3H2yT5+07mxqw=
 43  
 44  /

Package body created.

SQL> create or replace package body "DBMS_HS_UTL" wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  5af9 e11
 21  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
 70  mFXcei0/vjL5ZJ373TtMKQ==
 71  
 72  /

Package body created.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_SQLTables_O FORCE
  2  AUTHID CURRENT_USER
  3  AS OBJECT (
  4    TABLE_CAT   VARCHAR2(510),
  5    TABLE_SCHEM VARCHAR2(256),
  6    TABLE_NAME  VARCHAR2(256),
  7    TABLE_TYPE  VARCHAR2(256),
  8    REMARKS     VARCHAR2(2000)
  9  )
 10  /

Type created.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_SQLTables_T FORCE
  2  AS TABLE OF
  3    SYS.HS$_DDTF_SQLTables_O
  4  /

Type created.

SQL> CREATE OR REPLACE FUNCTION SYS.HS$_DDTF_SQLTables wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  811 3e1
 21  +B2nPnaJjdo5uIvowJ2n7+1Sw8Iwg1VcLiCrfy/NQqoCKCZwPZRm94MdFgnXI2/YVt8IgB1J
 22  bRTVCfQaXMon1QiG2mF4VjFvDb5c6Z4wwdcwcxk0Up7VwGpjyrYQBgSCAuucY5OHZAqyKRsa
 23  +UvM+pXpc91Es2BSf/8zUz7J8ot5bnwWTWKyKdhhmtw5+PDaLjjcsmJDVFA+dpZx4rFbbHtP
 24  3YnUGJ1Wf/XD5kwI7NMDdXMtFKG2RNTFWZN9GZmUc2+DWEajgu5fXSs+L9STssVYCIgO6N3n
 25  sb29lmXLgm4VpszIDJXmHRXRyzIVx89RxU9pMjwQqoOuAwAEjt7dA/4sy91a+OcEvfnhxY5U
 26  TH3Koh0z+HMhqCl8qJdP0jo0zopPyO1eaY8JDCyEnsaO95G4P44enrqnMSC85G0o9WXUmZTl
 27  41ZKnRiZOcdlo8jzH8Nidh851C/cYtlzh/nMBGaK9TaXLGQkWWB8i+E9qa1dPKbu6z583FI9
 28  vuIrTyxaF8QLjCafwwuALijbY40bxRnwtveUoHfIuZ+Q0DtdDAwMh7hw+UstFMtYrrnLm0Of
 29  vvnC09n4xf19E5j8P4ixOKzLp4vG6nEZegDohAkAaMva2ycgd9avl+z0+jO3yM2yQWvhWk+J
 30  Cf+sc5l8OhTSjg3xLTFqqd1u/cAq++6zxObs5qOvZotDhFXkctrAqwt9N4eGD6Jqhy5NkJTw
 31  aJeZr5/JuDLVs8aDQq98O3os9ptB7byu5R0q1ZOf9wmrcIUQLzaZozoyh/KyGjzBTa7PEuQ5
 32  xLH+/b/EUtA9i97tMhMnBbpcuv5pEJoc24dDiSvrhjWeJuYspYN7zYHI4fmTOMsSirDrvwro
 33  H/qS2vQWQj3pIXle8JxofDdCy4K1LB0Lr57me0DJx+Gp7jLJfG+fhum4vbHAQJPB2xaZspIJ
 34  e5soJh/eTgYxZvefLitm+2O12vGJ9na9dLKa5DY7kxSl
 35  
 36  /

Function created.

SQL> GRANT EXECUTE ON SYS.HS$_DDTF_SQLTables TO PUBLIC;

Grant succeeded.

SQL> CREATE OR REPLACE  SYNONYM SYS.HS$_DDTF_OPTTables FOR SYS.HS$_DDTF_SQLTables;

Synonym created.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_SQLColumns_O FORCE
  2  AUTHID CURRENT_USER
  3  AS OBJECT (
  4    TABLE_CAT         VARCHAR2(510),
  5    TABLE_SCHEM       VARCHAR2(256),
  6    TABLE_NAME        VARCHAR2(256),
  7    COLUMN_NAME       VARCHAR2(256),
  8    DATA_TYPE         NUMBER,
  9    TYPE_NAME         VARCHAR2(128),
 10    COLUMN_SIZE       NUMBER,
 11    BUFFER_LENGTH     NUMBER,
 12    DECIMAL_DIGITS    NUMBER,
 13    NUM_PREC_RADIX    NUMBER,
 14    NULLABLE          NUMBER,
 15    REMARKS           VARCHAR2(2000),
 16    COLUMN_DEF        VARCHAR2(256),
 17    SQL_DATA_TYPE     NUMBER,
 18    SQL_DATETIME_SUB  NUMBER,
 19    CHAR_OCTET_LENGTH NUMBER,
 20    ORDINAL_POSITION  NUMBER,
 21    IS_NULLABLE       VARCHAR2(256)
 22  )
 23  /

Type created.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_SQLColumns_T FORCE
  2  AS TABLE OF
  3    SYS.HS$_DDTF_SQLColumns_O
  4  /

Type created.

SQL> CREATE OR REPLACE FUNCTION SYS.HS$_DDTF_SQLColumns wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  c41 519
 21  BON+td9pQ4V7zB5oGjLoO/fXyfQwg1UrmiAF3y8ZA/meIvVL8IhAtg5qL4zd0oaRto1aAhor
 22  F5ZG654ppklEJ1tVhPnOpKGTGn0jhRw5dIJwB5K52pu5MP7pAdnA6a3v/TpgHwLFDTQ7m5b4
 23  wcawHVgbGrWOk+kx+Pk3ZWaNDn4ALIrlfjZyC9o+DlkF8vf6aggFE/2dTtsSiyby1bzJ3rKc
 24  AL/4EI9mTrJ3Jk4wY23yA54j0OpFXTQn9jMYXvGTZmcN4T6/wH/ljFXmJ40aO4NQrF07L92J
 25  SGzjGmuycFxrysMbolUqZ4lgQG/nL/utHwLt4f001OaQ5u+dY2aaGgYjkjMnrRMojrp1dcBz
 26  M8GpwOWvvz7RGcjHYD6lRaDwgdI4eZA3S0nKenvdmA9MtdNByim7uItBDQG95oYAOz0bwpTI
 27  63s79TWxw/otsupFr8De92/1/QXll10uvLbi3RvTu2N4RDHRnNl8hzTSbelqEjyG5c7vI/0W
 28  o4bNoJMRgpgRQYwIicLE7tdeQCnfcQnakDfw8qQBKp4+qANc5kbeGl7a7gNCFbl34fJx8kh8
 29  VjGVSkNdi1UBhnc2fLV4P1mKrxQWAWCvn9HuQ5qiDJP7uvFV93QeG7khAZ48cILBPUtYQpHl
 30  ZGP6uL7yZVReQAECYl074eYeq54Yv2Ab/lVqLK6Rm5sJkQ13JttrXJlwxGLq4nKw3DOLAaOh
 31  de00WT/whcR5o7Px5jhRMtHcobJCI7e7SphznFthEoqLeJuGwblSwTwnv527aCU+6Lqqz/l7
 32  uve5Kesn5qPedxZpcr6clTrKv8dk4MfY+2+pw254K13yaTrUnzkrbZink5OZfiZmLN/dX4GA
 33  1Fz6uitX/Z/XFZnTPFCSQhbJrS4YMG9fWCutZlGvepZ3sDcEqUEpW8CPsmm4ucpU+bS29Z/l
 34  PdjOwx0ji1SvObnny+B29uwo9UYSPxrHHapfB+SHbOHohHrBGjcdY1v/wnieBEnQdcHwAbgO
 35  So+CYR/UtDhLNvduvegoFt9CZII+pG7gbf69bJ8OWw4Lqz41CjpOtr78f4cu83WTeIWy59hL
 36  ghc8QpVsyD//0cVKWMcDr7D4xtb5z1APmGpO+U0oVVIIUKSBXv7Bf93594ui/O7hPr5Lk48M
 37  /z0VcdE/uujmO3y11VniECPRk07hhDa1fOkeVtw97dM707SLUHWbZslsAlKxL3QO3b8sAnVV
 38  8KcreU1dssIZ82yjpTxSKYWqTSPReXtfrAyYrqcL4eb5u/FZJtuoZxGBag84voJp
 39  
 40  /

Function created.

SQL> GRANT EXECUTE ON SYS.HS$_DDTF_SQLColumns TO PUBLIC;

Grant succeeded.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_OPTColumns_O FORCE
  2  AUTHID CURRENT_USER
  3  AS OBJECT (
  4    TABLE_CAT         VARCHAR2(510),
  5    TABLE_SCHEM       VARCHAR2(256),
  6    TABLE_NAME        VARCHAR2(256),
  7    COLUMN_NAME       VARCHAR2(256),
  8    DATA_TYPE         NUMBER,
  9    COLUMN_SIZE       NUMBER,
 10    BUFFER_LENGTH     NUMBER,
 11    DECIMAL_DIGITS    NUMBER,
 12    REMARKS           VARCHAR2(2000),
 13    ORDINAL_POSITION  NUMBER,
 14    IS_NULLABLE       VARCHAR2(256)
 15  )
 16  /

Type created.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_OPTColumns_T FORCE
  2  AS TABLE OF
  3    SYS.HS$_DDTF_OPTColumns_O
  4  /

Type created.

SQL> CREATE OR REPLACE FUNCTION SYS.HS$_DDTF_OPTColumns wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  a12 47f
 21  K8GTpgN9+axB30qwvdIPHuwhx3Qwg1VcTK4FfI5Vxz8CLHWDJ8xcyLQdlCUlzugNWs2P0DX+
 22  4JTjcAn79G95KOTOTAXe8eh8rwWg8nmQx3IyubEtgmpe1zZJgjJwPj1YlALcLOpy/ij2JdBa
 23  gWu3bggD/DdSUaCRz6uxn5CUCRpM2mvIbBuxGr+YOjK4JYpo9nrrokm+dZuRyyAS0eoKp23y
 24  F3yurMbaTPVl+mubMLAMxcCCwbswDCHjFBHv98JpapB7kmKJPczg0l/M8as+N/b2joVNcERw
 25  XDfT6GZRH0Qvefc4bOGi5sUUgWKlr7pWd98hmwD3KVb3gHOGarPK4j68fEyXswixbwG61uo+
 26  qBnfF9DmLUw8xkVzuIJPqX6+1TMdM362twHKYt845Rek/QKJ17doCd8Bo82DFJ+jQT7mM8ck
 27  q/Dmm1RJ1LOdLxg6k0g6ggG++sec+PY+6ZF8SuP1AZpvLE9VtjMl8oW4JkZqSywgM+rIt+vE
 28  8BAfZ+TuLB9U9hagn17uE1qiM5xpBLC4oRuZZa9RhQIBcWqOz6NmZHjH0HHqAsDu0NSzNuhf
 29  C9eP0wmMN0s6dhYMuD2YxSCqIsgZ2ZmQR40ujv9kHOEkeOYHWPwHtsr/8XGvj0Nj/juEInih
 30  /2U5d+VOelNGhJX3+EkpwANxABmbQxCIT00emJs/iDwjQg3FamV2HDgQc+QhBLeb7slo72Ct
 31  OGHL8VOtqAajOlLvfQT2qUTKvi8CsRI5e5A6YQsNonUHLcTdbOtd4DlokyTHa4I4V7LfdvQ4
 32  jC7Ya/72DtHVhQNqTnCcKZS0qHvY7g1jo7a6cGp+jrpOJxEgJGRVuT/LfnWY8uK+2rgezZiD
 33  SOa0r/35K7sqLeGr1EGD9iexJc6grjfsGeEd673hO7m7ma3YfPf+8wQweFqk526S+lIeIR+e
 34  WipiIPzULgoFj4v8P3m7PDMmcSRk359MSEDEQ9QiiZ14YoqElykRyjbxvSkD3boeuH1F4w9q
 35  MhIGVVKLwDslmfpF/fRaUrOAHg4TJ1OG1PNx6GlTm2aLAq8CgR2V+xaHyat/nf3ZNMl100TC
 36  3PSnOaseSCmFJMPtyN/ZYYa2JeLxlHWpw7VM8b1eFuFG1E/5pr6RGjE=
 37  
 38  /

Function created.

SQL> GRANT EXECUTE ON SYS.HS$_DDTF_OPTColumns TO PUBLIC;

Grant succeeded.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_SQLPrimaryKeys_O FORCE
  2  AUTHID CURRENT_USER
  3  AS OBJECT (
  4    TABLE_CAT   VARCHAR2(510),
  5    TABLE_SCHEM VARCHAR2(256),
  6    TABLE_NAME  VARCHAR2(256),
  7    COLUMN_NAME VARCHAR2(256),
  8    KEY_SEQ     NUMBER,
  9    PK_NAME     VARCHAR2(256)
 10  )
 11  /

Type created.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_SQLPrimaryKeys_T FORCE
  2  AS TABLE OF
  3    SYS.HS$_DDTF_SQLPrimaryKeys_O
  4  /

Type created.

SQL> CREATE OR REPLACE FUNCTION SYS.HS$_DDTF_SQLPrimaryKeys wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  825 3f5
 21  dGPVbF6l1ABIij2ZbRF82IrnZ/Mwg1VcTCCDfI5Vxz8CLHv7o0aD8gUdTSXmwB0rttrOCwJJ
 22  bWHzOzaQNsO6bD/k4s1n5uWfBQUhFN2t/nGGx89+Cdfg6a3vtkLJ8aJjYNwD4E5Th36H4tmc
 23  Yik5GiNsjF/CHvw3ZWaNDn52HB7FYjbQBTLxZ6spWff/wP6Gfrh7ErC5Su+UAc9HUXYZuYfY
 24  K/BviK7K0M/GLGFNEYk1PQhIDFCZNhZiyGWcc7bHNtfvf51AviHF46DsUEbbo+dwlxG9ZhYR
 25  +xGUFEaXqU1C+6KIkQQ3pvMvx/dXD1UndMXGlc9tonr02wH+TpVClnpvkNRFMDo6DIx9AjTF
 26  1HrrrU496ulxxPd8Mkh8kNBnVKBT31vq3LrhJf05orRDLKKPAxDmD1+pjgfxunQy7R6USdYK
 27  /r1M6ANWzx5q4ozuYwk8WcEd7ikgP1jCNsmRIUnvly8qiT4E1l4VA4ZGM/cml5SYg044fKx/
 28  AREvR8o8nufXx1oRRoz/eb7Pz2aQcyKIQyWi08SHgTcuKuo/9kX5okbeiaF9zf6QZGKbw4CI
 29  Lj4Un5W8lSxlDLnLBpVILZK8kW0yiMtdVYS+h84to2ji8iQ0EhnSQBrPRSyf46ff2fDWjjxJ
 30  FHobJKItTYmRbh+5cRoOBvQFCaAC+O0cRZ5HTWZ4tnBhkvdSjcDX0w9qzbmxOukDcQ+yDZMi
 31  hWJBHQVZH9tvs+AqZIil7y37PEeEg9DYnk2IB10siJSPiN8oVC0PT4XpAgjYbWdyDWd+NXD0
 32  TutKhl8Myo0HINTUSG6Qj/mf7SoougM+xHIKkDGnmPnCaFiwm8HiN3NcuKNSpZmhvrjFpf+Y
 33  fbpkpTtYJ4vdHHAKDfHBlYOYX+c/65UnZGI9mshqpsl/jjMPNn8fH9QurH8hdMqv9mmoi8mM
 34  JgzTjTRnPJTM5oRMAA1K5IS5QjEhANvU2eLbwI7KXapJZVHTKPvmaiidpqiIVnA=
 35  
 36  /

Function created.

SQL> GRANT EXECUTE ON SYS.HS$_DDTF_SQLPrimaryKeys TO PUBLIC;

Grant succeeded.

SQL> CREATE OR REPLACE SYNONYM SYS.HS$_DDTF_OPTPrimaryKeys FOR SYS.HS$_DDTF_SQLPrimaryKeys;

Synonym created.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_SQLForeignKeys_O FORCE
  2  AUTHID CURRENT_USER
  3  AS OBJECT (
  4    PKTABLE_CAT   VARCHAR2(510),
  5    PKTABLE_SCHEM VARCHAR2(256),
  6    PKTABLE_NAME  VARCHAR2(256),
  7    PKCOLUMN_NAME VARCHAR2(256),
  8    FKTABLE_CAT   VARCHAR2(510),
  9    FKTABLE_SCHEM VARCHAR2(256),
 10    FKTABLE_NAME  VARCHAR2(256),
 11    FKCOLUMN_NAME VARCHAR2(256),
 12    KEY_SEQ       NUMBER,
 13    UPDATE_RULE   NUMBER,
 14    DELETE_RULE   NUMBER,
 15    FK_NAME       VARCHAR2(256),
 16    PK_NAME       VARCHAR2(256),
 17    DEFERRABILITY NUMBER
 18  )
 19  /

Type created.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_SQLForeignKeys_T FORCE
  2  AS TABLE OF
  3    SYS.HS$_DDTF_SQLForeignKeys_O
  4  /

Type created.

SQL> CREATE OR REPLACE FUNCTION SYS.HS$_DDTF_SQLForeignKeys wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  ba8 4a8
 21  U0PYpnd9Arr0CoNHKUIWrwosBrgwg1UrLiAFVy9VAz9EKGJ+jKyzjn0c4I4WYrJ5FSEmpYzw
 22  rkbrnkj7SUTgH1XhOgjaiZETGMN4eZZtssi0z05gz04mfEmC2Y0Ux05Hwb4BGXG9M0O85DS+
 23  uomav5F1yItJT57RHwe27vEECr5uY4BAAQIrk5w1wHB3vQw5E3PEF5zN/TlJteD3zAwC7KFF
 24  Riz4ZMQFp7f6i0saDXK3kFaQnhHPQX3bP4Ac+KRCiimb8cxRr3vwiY2IxOVNIaVYcd2XMBNp
 25  F8F6SVjrqxqB/6ncnoemPI7AFS7miuWm4ABlNGCpEYWJ/wo5ESVDfz+JTkr8ftyBCu4ebZyM
 26  IWXq90FHZIe1VWWx7tJ1gmxoCTwzSliQnROQnROQnROQnf3HwbJxKlz3SK1EpLjqXXessdxn
 27  mXI1Zyz/b/lpDCUTNwPJVnsRLrBxuJgnQezIsxSoe8MeaYJ6B7ZhN7HdpQrM+2plQXmy6dGa
 28  bkl0Y7Zmc+skNSB34DxAHAoYhI749ObRx1Mb65RYwKGBl8feODlc2/J2LARKJd+9nsztbhRe
 29  dVL0rUb2hW5EFZwMha1v0HRIl9fB2mUwMIWwDIYmr/RLC8jq3DFFD0CBIgyIlDlgKCjWxNCF
 30  6kqe/1ddNVLNCZb6ZxyH4Atk/h7NnPBxmqc+HNcHrkPNkrjCHhN5kyxUE/qjWW+CJM/tLC5a
 31  Qv5SZcr/Ro1Qo+zeNLLrEdljO0ON1Lo+8GEuGFjbIdNrw8x57znfE+oQAq3qMmouxZlxxwwZ
 32  cjU5HscmVl7ciw2yEkh2u3TY6UOI1kzJABWkSES/MT3b9YX78L4IMIBd5yItk0/gPLB1gdXJ
 33  cxiTZOA8CnWB1clzGCj4KYX2qbbvGcOAKzZBdQi5e2XvfDy0zLH6EkmG0ATNkG9VH68q2l8h
 34  g2rGmcCzcPJ08wRcSshEL5GHMnnOQb0BqSGQkmr6KAOOHKUIi5/BJM3kEL74RVX4TL4sIJft
 35  ndW1MYC0ltc/Eub9qFMl5RaleT9/HAvnzh4a8LBiivwv9raHpH4wDLY7GSizeyN2J3O5TxS4
 36  kDXz+feE2KvyJnpvWCO9yIaZGWYrAPADJ4e+zETCGS8KpG7YzXf3tWkz/Eut2qBppJ+22BWm
 37  oDqaRKG+r/c1EZuxnYGdtjk=
 38  
 39  /

Function created.

SQL> GRANT EXECUTE ON SYS.HS$_DDTF_SQLForeignKeys TO PUBLIC;

Grant succeeded.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_OPTForeignKeys_O FORCE
  2  AUTHID CURRENT_USER
  3  AS OBJECT (
  4    PKTABLE_CAT   VARCHAR2(510),
  5    PKTABLE_SCHEM VARCHAR2(256),
  6    FKTABLE_SCHEM VARCHAR2(256),
  7    FKTABLE_NAME  VARCHAR2(256),
  8    FKCOLUMN_NAME VARCHAR2(256),
  9    KEY_SEQ       NUMBER,
 10    DELETE_RULE   NUMBER,
 11    FK_NAME       VARCHAR2(256),
 12    PK_NAME       VARCHAR2(256)
 13  )
 14  /

Type created.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_OPTForeignKeys_T FORCE
  2  AS TABLE OF
  3    SYS.HS$_DDTF_OPTForeignKeys_O
  4  /

Type created.

SQL> CREATE OR REPLACE FUNCTION SYS.HS$_DDTF_OPTForeignKeys wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  a26 457
 21  d/lqpTpwvkmNQmSS3BJognFEhakwg1UrTK4FfI5Vxz8CLHWDJ8xEWoo3nt7ewFWjLs2P0LMi
 22  k0RRrMMYom1hoeTOTNo+MhZLSrDejRGGx3LwELmca0Cw7L3cQPzdyVjoK47sGSSJxE5DTeQN
 23  Zs3jd0/YT4Iig9jnhqLe+s7KP8kRo1r3uWVaOSF/vhs7OpLGr97HBzw8nQRj9NzAf4/6BBkz
 24  T2JvskmNyzhuwyIS2ikaT4TNA7C2c4UIfYBKgP4kh3f0FBHv92VcVWBvAjbfj+91xQqM232o
 25  2VonGjbiO8zKjKyUqa0CX3yU8wBiqRFtdNXzytMJqIIPpjJTVvzGhs+ukXtZXVL4XX1LtlvJ
 26  ZPX2IiI6/Nf1JMdjM5THxcCCi40Qxl+b2KxOe7hoX/jKpEE1y6vYIa0huHvCE0vx6p/VGd+A
 27  Gutt4/X7g0a9sUgC98TTFiLF7nxfaJgxL13SihDmExN60P7kwMae8bAN2UHQPvPSKFs4eta9
 28  Ka6hTwii3GKGqzmPAvTkOgJI+jKk6b/Oaod3B/uGBH91ZychL98chNTTzydMp04FbN4AAAFz
 29  LcL0FaPrTI/BYH3F180nCdsh+pT1QUGjmofIci7xgpfKA/x6ZHHlCIaFzV52jgOBflIkwQOY
 30  ZdRjRUU+u8kTjUFM0ZcnNRNZg3AlyEKBzlAp98BCVfbzjHEDKtTMdv9YV3UsUgtW2zidxjUs
 31  xgShdO/6AhbPT15QKVCcKNRxwzI9Tm91fC7RQN2QgYIfdWVqA5dAYz2ymPPH7gCEuJyTMhnL
 32  sWq63xCQLpoX+J8xqNohXUAAdsgdMNkZoNKCZDlhX0u+T5P7BLk0A8FtVRicX2aRU8KAbfg6
 33  5konWV15NnsZRAlb4XLPyVXH7JlEGv+LE1Xu/Nftj5KbSAEgKzNrcQDRPJ9c4phOwHmcQ3Iy
 34  qXNcqiEKUyLnYe3qN7/6zMRt06VyuKQrGv263PZiZNMeuedmlen9O5CcCQoTsB+vFAIVc/03
 35  dZZx0X5ALjitZ0CxbWBHnfDMD+tZ9OGTF6IMHbr2gvVdLBiHbBOzLjHDwvYt4URagZr0WXUV
 36  G2dN/il4mCtLag==
 37  
 38  /

Function created.

SQL> GRANT EXECUTE ON SYS.HS$_DDTF_OPTForeignKeys TO PUBLIC;

Grant succeeded.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_SQLProcedures_O FORCE
  2  AUTHID CURRENT_USER
  3  AS OBJECT (
  4    PROCEDURE_CAT     VARCHAR2(128),
  5    PROCEDURE_SCHEM   VARCHAR2(128),
  6    PROCEDURE_NAME    VARCHAR2(128),
  7    NUM_INPUT_PARAMS  NUMBER,
  8    NUM_OUTPUT_PARAMS NUMBER,
  9    NUM_RESULT_SETS   NUMBER,
 10    REMARKS           VARCHAR2(2000),
 11    PROCEDURE_TYPE    NUMBER
 12  )
 13  /

Type created.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_SQLProcedures_T FORCE
  2  AS TABLE OF
  3    SYS.HS$_DDTF_SQLProcedures_O
  4  /

Type created.

SQL> CREATE OR REPLACE FUNCTION SYS.HS$_DDTF_SQLProcedures wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  915 422
 21  RWasS/xBMnAoc8/tyQ4+phZWRDcwg1VcLiCrfy/NQqoCKCamlKjxXkQYwwNBRApt7QiAHUlt
 22  FNUJ9BQJyicoOgikBZmK0+YFulwU3UFYwZB4gnITk/er0URYfYLGdfpuvJdtwbAFm7lDvnG3
 23  n+blKP1Dcc8733EveY4fhrn/IMLm+tJQrgSRd4tAoKcTLBfW1O47AFdjQIvAVn2OGVuWKwqr
 24  orC2dSXjzoTjrkvhbkAUkKI3LZ6Ei0WxFrIc+0fFUP8Ud+y9FxQN8jd8/ydpoa+Z3eb773FJ
 25  20eZytQ4Rl4Ryp4JJlRN/LkUB12EYJpN8knDTKByliK/RfDIZzP1hae0Ey84sEptFavqaemw
 26  e1RgDmEi3i7XMdKorthf63AvK04+Vu2S5fr5AxKK6Z2aJFpiwzgHrloXdS9DbcJisrlzy23w
 27  rke4JmPEOA3cKmfxr0Ohqrq0erv5+cbBXh6Jf7xcQErAymXakPsfdMmRIUnv0U3sC2uyX6gv
 28  8Tq5ep2U6Aa7A7kot/Nfvt1lr3QJ9qmlKY4EsFMnVYnZu9AagZKXYF7NTdS+ZQAv6ivstMGf
 29  jrp4jL5A/x72Htk1pY1jrXJXfE+4RqJzko8zykx+bwqwY1R6iVU3vO2WLG9SzZWI6sSWcpCo
 30  Piy7QGLgDZyhLoxV7c5Fuswy98WbFL6J6WlxORuQRrzgzJF+znwwcNSyvkGppRnQ5uxZo69R
 31  KBIZ9vId2ZRLLk4tfU3x7wivUnTzosc2j834znieg6jLAC5ZXpOyaWo9oj0qsd13dhLbK/SY
 32  hZe4X3l1CO9+7QDU+D6VprX+9G7q31jEs1C9Wlrt8zaZEDMeIZyrWj0Fvwcxcrckj7mLOM25
 33  sctktZw91DvZLiCTSGgLOsdeA3M9VyxZ3lkUt8VL3br5NLGEns4NFXfB65rRQfbplvGBsXjM
 34  m0XwGf+oPc7cBBt8DGulIC6gAn9vJX/DB7amdCA/1mG4q3IVRsdimV9FFGCTtBITY++1aYFm
 35  eUF5BxYl4oXyFA7SqoDxwPBmZ+ulapZySCDp
 36  
 37  /

Function created.

SQL> GRANT EXECUTE ON SYS.HS$_DDTF_SQLProcedures TO PUBLIC;

Grant succeeded.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_OPTProcedures_O FORCE
  2  AUTHID CURRENT_USER
  3  AS OBJECT (
  4    PROCEDURE_CAT     VARCHAR2(128),
  5    PROCEDURE_SCHEM   VARCHAR2(128),
  6    PROCEDURE_NAME    VARCHAR2(128)
  7  )
  8  /

Type created.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_OPTProcedures_T FORCE
  2  AS TABLE OF
  3    SYS.HS$_DDTF_OPTProcedures_O
  4  /

Type created.

SQL> CREATE OR REPLACE FUNCTION SYS.HS$_DDTF_OPTProcedures wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  77a 3a8
 21  n+MrFUTenQNAt4aevLztA+Qro98wg1XDLiCrfy/NQqqVdgn7/J4qrVwOWioek0tFtP2qIbjC
 22  WsJmjVpmRFEz3dC7tBs2LzXNO8XTcHI0WJB4Tp/ySZnViUb3rU5uBSUKgzxyrsTXVdnHA0af
 23  ORMoLMPmPwVxRjYLDchqzx7EATtcUn1bSmzHjQI8z4FO2MScNIFvcXzZxSqJfl+7W3JvbZAv
 24  Xl+4RwnbLEBG4Xj7sITC3Oizey7IJim5DUAJyr+r8MSIx58UV47c9ok82tZ7CunwdxZdylk5
 25  n6PvVK7nZPqmq5ljQor837dJmy1Ru1kf7+iWg8EfD3s6HBTxALJCbGFb+g7rcmcH4YfZDhJT
 26  839kLRqMzK9gjZBmCg6/QiWap+Llm82uMIrLQvYdEtk5lKzFriRaWkq2BFk4yhTrXpYalajU
 27  RVwN1x/iJaz1hvv8aWjBP9/da8h3jm5w7lasBND3mWCwPC6CtQjnO4HsKNTUgoSMwkyJ6twx
 28  d0WfJSCHwpdwF+1IEACmD60r9AnK/ovl8qgpjeePn2R1O8ltsL5uACFCcmgZeCgD9csjrrAF
 29  nMHcLOzGmD+Zbr2XBfcQ+ejB5FywrcxsQWk+XIDznBFtzHYsKuljvjOMW0kVFYHnAaU/iZen
 30  l6FBzyGDubyDTUx/n5rPdJBGvzYspMZmUcvQNjYSFQe+88rkEKxO8C5ceWX14BRvr+PxgIvu
 31  ccOXyn60vNoZUO7Ij7mLOCm7nEGfR9ngQ5zX5dogK/ktOg2DLXM9qSiLp54+jUpWEY1uv5ii
 32  N7zcg1X0ArHFuFVQDJFqSqY74gVdzXYJLm2wT+4a3XvYycKVr/JDrSmVDKLcHpXxYsm2AW6+
 33  fOUbd2xUzaXXmJp7zgdFnBFtm1yi9DNA2Gbhg+S/FFh80tPIJrXueOgd4ZU=
 34  
 35  /

Function created.

SQL> GRANT EXECUTE ON SYS.HS$_DDTF_OPTProcedures TO PUBLIC;

Grant succeeded.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_SQLStatistics_O FORCE
  2  AUTHID CURRENT_USER
  3  AS OBJECT (
  4    TABLE_CAT        VARCHAR2(510),
  5    TABLE_SCHEM      VARCHAR2(256),
  6    TABLE_NAME       VARCHAR2(256),
  7    NON_UNIQUE       NUMBER,
  8    INDEX_QUALIFIER  VARCHAR2(256),
  9    INDEX_NAME       VARCHAR2(256),
 10    TYPE             NUMBER,
 11    ORDINAL_POSITION NUMBER,
 12    COLUMN_NAME      VARCHAR2(256),
 13    ASC_OR_DESC      VARCHAR2(1),
 14    CARDINALITY      NUMBER,
 15    PAGES            NUMBER,
 16    FILTER_CONDITION VARCHAR2(256)
 17  )
 18  /

Type created.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_SQLStatistics_T FORCE
  2  AS TABLE OF
  3    SYS.HS$_DDTF_SQLStatistics_O
  4  /

Type created.

SQL> CREATE OR REPLACE FUNCTION SYS.HS$_DDTF_SQLStatistics wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  aee 4cc
 21  gHih8NqFUqMSgRuSpZKmpqelkdAwg1VcLiAFVy9VAz9EKGJ+C0SMPlAAtBZp7Ksx25ca5gl5
 22  z2ZuolodVz7fK2EShdCaqD5twvFFTIpjTfsFXUcTs88iQ41wQAw1K5KN12W3uhCHfckFaLkT
 23  BQoAiEkac5FtrG0kBZkfov2VlWXN0huWjZGEAPrKsFw4hX3oOpInn13PjvCIKqDIDDWxpXmG
 24  zUixgrN+RParVj9Q21Dp+zuVKOzDrE/qytwXMn5RZ9aS5zG/LvGhUd3Dnqj9AAAnqWtA9mpY
 25  YRtrjZMIX0vyPi/UK30APkK9tMvP57G9fxPT4y3jS55EBPu3xU7tTj66VruoRdDDLZRcIMa7
 26  /xlZJcvuCq1nNBD+gChSTQUM56gCso0n81GjlmetlB+IcbROGG96wQ6HfMvjXrkQP3Ou9dBC
 27  wDWZuvLXc3aAlLfpDW8AxnLkCdfYw98d1znjgmQXITDByYLPSKGcDg/LPsEC+wFYjpPnKX2+
 28  vVhHtlFxA8tiapiY7i9URK0cDfVligYmr8iRM/kaP1blUVq1xtCZoHij1FMxm2pnkT97IZpe
 29  wrTIRDyueVYfOaePgo3pwXJMAt4MwSVCgq5vS13hCucf3cUdRmSxyFIYsLMBEMcSrmCurjHg
 30  O2I9U+fJngY08RtfwVe4aezr5mpdKd7SOKYiXziL4csbNzx2MHoLBcmY+MDvYb8ye+vqTx6Y
 31  eVcTzUPiy8b8+TNkxqMagly7HgedHh71n4HOfFi3kvkjImaNn5gZjAMhm8ODCK6DJfIjjxiO
 32  maw9ygKJY0nxdnS6Oi3dJfp8lsdkN5lIhbCUwNMYh5newJP0Vn24kehShi0OGdEYQE1LgR1u
 33  H8v3P205Z0ltUxxb9VMWbVOoqPWPN+ARUnY1iYFmMgOrC9u6dwCG9Mt4d6ITIjf1pUF8Zvii
 34  JagSFUFyHGOiT8wE9zc4e1+dYM2C8SmphC5LUhJAL/7+2q32AcIEjHAGea9bvWZOgn3/2Mir
 35  Wtq/mnGAeHP/r4FDVRk/GQUHI7VT9oq8SOh4Mgu7HqrsQYokYl1wsObKvsMimc8tQS5MeKW6
 36  veuapIBu0bHf7cjYEgvTbCTwzNqI6KuHak420QSJ4hEWTtUbGte4nDumhaUB9mmL7QhoICyx
 37  wqJ3EuCOShCwANGkOvTlHyWLOjjI5oN5wtO2aZKcDPHA8AoYUTogteGCp1XJ
 38  
 39  /

Function created.

SQL> GRANT EXECUTE ON SYS.HS$_DDTF_SQLStatistics TO PUBLIC;

Grant succeeded.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_OPTStatistics_O FORCE
  2  AUTHID CURRENT_USER
  3  AS OBJECT (
  4    TABLE_CAT        VARCHAR2(510),
  5    TABLE_SCHEM      VARCHAR2(256),
  6    TABLE_NAME       VARCHAR2(256),
  7    NON_UNIQUE       NUMBER,
  8    INDEX_NAME       VARCHAR2(256),
  9    TYPE             NUMBER,
 10    ORDINAL_POSITION NUMBER,
 11    COLUMN_NAME      VARCHAR2(256),
 12    ASC_OR_DESC      VARCHAR2(1),
 13    CARDINALITY      NUMBER
 14  )
 15  /

Type created.

SQL> CREATE OR REPLACE TYPE SYS.HS$_DDTF_OPTStatistics_T FORCE
  2  AS TABLE OF
  3    SYS.HS$_DDTF_OPTStatistics_O
  4  /

Type created.

SQL> CREATE OR REPLACE FUNCTION SYS.HS$_DDTF_OPTStatistics wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  9fc 48b
 21  FA2rGvyjh0SBa5pA1mb2bew2Fxwwg1VcLiAFVy/Nk52sB9F+C0SMPlAAtBZLISoY9I2hAix5
 22  z2ZuolodV5N+2PX+yCydhAmnBDIeeSDpsrQbmjSIUiIcXKOvdJys2IH26o7o9cLfRVUNvwcz
 23  uZJn6IgpIpXlBgbQSGpEs2BSUkH+n1488sItkI5pCbqIZb55tT/tMPPPZVeCJxFsckRV3bGQ
 24  v/gQBlExq98hI8+MbWsKnnvQIPUtrA9UL7ADIylRZ9aSppW1RZEDWTctnj66AKqzpoSysUCC
 25  zVlgO5NOrHwKjueGVmByJ4cdYR0sFTJgR2E54HZlbuamrt0axea75pfL2RJ6VVvltOzlxOu/
 26  FyDJQnLnPXZ/Gbz4Yjh2HjMPdKgCbY38BBVIKw409G3h0a57B+uwT6+IA4+sK+Kn7Ac+pFlZ
 27  K5/v8d0P22PsrSZx++zwBBev/xFf/9ffEEhgydlfFg/XCy5Su7+0bLAO22OnHGplT/xuFG3+
 28  Sc1eOArFtUEsqsIaMdTOSAczL5NBIgx9HZN5+p7HK7rGAjfH5yb65dDBxBX1jaXBqgNHK7j/
 29  RDyZ0TeTHUYg32m4GAr6XMcS/mcbcnKVJ4ykPVfsycsGFfK2W8mrIAI0Go1AMU5OXf7zOhXg
 30  HfLLAusfXPX0H/BJrh9+sbkzqhkYVRC3ltKBsIs/H7HJvw0gBiUiaHOBd+PPa+yETs6+vvof
 31  sa7QA2zeHEintuAN6g/Ar11q1/f+eOYZvQAk5XjGrHAqWmwBpBpMrDgefFtUe4hbkYhWuPqy
 32  OlPUuuFrD0YhY6BR499u9zoONVYRpf0Of9X8uNuZj3WIG6qi0rTdDMMxTjl+j2zTzUIdp3qx
 33  rhmlomiyYZaJg07Up69Jjbiurt03WPK+Fxtw04LzgS/Hpu/rclejc5pkXdhqkSrpcG9oykY2
 34  zEb5+CoKGjklgeQKCaW3wR1ocVUsaLDWEn7Lrvg8pOyfPwWguWs6sC5Lu9NqEUGGNfIm5m/O
 35  7K0T+IPusZ63/zudY8/iTCN/k7X5yvI/blEy39wqvImniHFlTRDZL5mGYhrVaYDcpo7O/H/j
 36  AhE0dLdyDdj3gUEEAu+xug+nSuRnPW3eTptXIn/N0ZP0vRZz62yhvmA4qKDPgZZqhQ5d
 37  
 38  /

Function created.

SQL> GRANT EXECUTE ON SYS.HS$_DDTF_OPTStatistics TO PUBLIC;

Grant succeeded.

SQL> CREATE OR REPLACE FUNCTION SYS.HS$_DDTF_SQLTabPriKeys wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  843 370
 21  Wsj+ORtMbj2ZAyX/qqPTlbhw8Wgwg9dcLiAFfHRVMZ3mB8tSpmu0nvUHqwBX36SZLWxcUbGL
 22  kZFnf3SF0c2pa7U/oF0old7rQ3xwrTYIEtDTOlp76e+CjvLCJYegQkrp9rvFaBDrriTf0JZy
 23  VkpUtfrqjcgT+TVaybPnvovv0ALfxeuCQUNpGi4Cfghzsbtt/Xtu3Pm+EiMp3A9Zs5MY3mM8
 24  ZTvuzX1VPyxGtNhGe4HzqoisKeWsIgZuL2j8x+Zuts7itpFO+QhC82LvHbQE00jNAbRbeaKQ
 25  7M05YWGVFnlLjq3Zqwtn4AVUfPdvq01iyII474sl26eOOzXmdTdZWGgqsz2z8deJ67F3kQEn
 26  4gYeck+nzxSQa7ZCMnNsyu32W5Hbp/ruY5KaD4P3WOXsoyMz4xTEo5m//88xd9V8pOV4zVD+
 27  sRh8TPlXI3jKI1ZfL7AObw05npJ5jQgOIuH6N7ftw4qLM6DKpy5cCMS8FoaU2AIaRYk5KYLV
 28  iThvxQ6v/XnBa/p6IQ185TNyCHrzB4O0u9os6FgH1ZfWQ4brKwjeuqeQCtgJ8pgNFqYDJcE+
 29  FOUZu9tSpcrIVZwQpCxjFeYqZf5daU8iZCIc/+csyazQC7hR5A4ogighu068dNNXZ5J6y0u5
 30  Irtgj4CP48t2s6FyHDBRF0FLSN3odkU4m7O2n1bSEt+ce9JUinrs9tp8iUC6V94dIY4ouq29
 31  EhSOslVYogBl40WxpIL8IhsyID6FaDH8T8Lyk3DWt6h4Zf/9tRUuZjCFZ7+1qkatmGMnx+xO
 32  K+Fd0ivpFWivUaWQLzwuXWKE692ictEz6m1mveAIc1R6SqTTzetejgGKqsgrxVYyAg5daizP
 33  eigF
 34  
 35  /

Function created.

SQL> GRANT EXECUTE ON SYS.HS$_DDTF_SQLTabPriKeys TO PUBLIC;

Grant succeeded.

SQL> CREATE OR REPLACE FUNCTION SYS.HS$_DDTF_OPTTabPriKeys wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  843 378
 21  mx9rgo7950sJYuL1N5VMNLy0Gb0wg9dcLiAFfHRVMZ3mB8uhpmu0nvUHOQBX36SZLWxcUbGL
 22  kZFnf3SF0c2pa7U/iV0old7rQ3xwrTYIEtDTOlp76e+CjvLCJYegQkrpCiEGuRM/ki1Cz0LJ
 23  TkYyT89cvb4pHEaRb/DI9iKlVBGMZQDuk8vpg8OFyZqqc7xTa2opXU+YsB+/kn5f/wlZ1Q2n
 24  3rIggLsz+BbbyWx33uPO2S9Z6pT188FGjytPtgaQ3b+QyhP+0HIDkfcE3dTIuPaWByK0mPL9
 25  zLDJmDc7eX+h/Vbp/8LUBMi0329ZUQI5J5ldWbRGOiEtbOn2yC/Jyl4b/i7SMqCRgkPSKiqT
 26  WOwKOoHBrpkiyBlQ9zRF+dP3rw0dZThtQ+5jkpoP/IVZXC5iHRKi8bo7AtogvH78lAQH/C4F
 27  /nMNZl/ZLFu7I6IoAvMGlHdRPGc1nTtl+3eAyq24wpwYVWhBb0cBXlzkO5aXMET2qCbRYzVA
 28  R54BdQKeEaU5BUJ+ZdAuYl/lak7kyvN4p8sNTku7NE/JHGQW0KfQ0LqVxnmTV+qTY4kz9sym
 29  yQGFXlrDkJoMcq/WZ58PnzLPiZ6ZPYV6yBAQkjSSMHrvNE+9Il+v9JuMIll6UDTZ+GXyj6Yp
 30  m1fdaBCv8IXQhfOkrVGcpBKP9EEwFWip8K1TOJ6z759WdBLfjSPSVIoA7CekBAyGYnYN86tt
 31  +Dt2AqTTbZK5X1HLKem5MsZfRU+3RQOOkbl5sq6TY1ZLGfp1/QS7LjDu0bYwhWeYtSQVNFUJ
 32  Da3XQtX7wCMKZjj5cMxG3OceSZuna95wGkkfBwrpLV/gCHNUekrNts0lXo4BiqrIK8VWMgIO
 33  QwckPLco/A==
 34  
 35  /

Function created.

SQL> GRANT EXECUTE ON SYS.HS$_DDTF_OPTTabPriKeys TO PUBLIC;

Grant succeeded.

SQL> CREATE OR REPLACE FUNCTION SYS.HS$_DDTF_SQLTabForKeys wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  c2a 447
 21  BPMUezcnt199LwWZSx31retWmPcwg9crLvYFZy/Nk53gKD4tOH95ygDbXcoM2jPgQuoxTCoI
 22  oRov5qigUI7ytRCAmPEA9hAhoZbXqFQgySEsu9fKTcOLGit+C3L8er9pBRMVVao3uyRhKJ1P
 23  MVY4zQ+8xRqDn65ZxcmQ9yfXKBzL8oyCfUJLcWejlEqQJPnkMp8CvaXNKA8snSqI/9AIQ98M
 24  TKN9DfK/4Hr5+Sk+nsIxYIolL04GypzinrPUNNGFzdnqNq+6I6zE0jYgKT5pi4dniCcGKe46
 25  elhJYFOXDoYZ0U0RZ/2osSfVM2GfoaO+8EeTK4jviQrV1VkJlwkOQKL/Gi51T4wKs4zfy/PJ
 26  ouguuZTB2iZSwFTrwXeRE3dxR9EkP3VO1rOufRE0U+SiXzjn9384TgFujtzxYeRKY81H7/Ta
 27  Tmf8cP/1zM3DS/5HfJD96Mdq9Uh1//BfPStooNNpPUhsWdbqAUF7zBPlL/NBmXGs+3ZhMkki
 28  31c3oYKe3AS34pGoVbwQ9o9HIfW+1sN7Nst6ZgYAafcN86mdO9/7RhzjRq7y6gMKHt4HWOUY
 29  rLUeJIp+bDwJOB5FjsX1qUJ1lQgGYBzS3SaPrZRXBO2ZcgPrrAAnF+7JTkjXQs/gQvV6re0Y
 30  boeYQmrh1aDRc1Wm7sIuTerFsLo/pxkbuRoLxBNhT/7y2lCNl9YtHrYRT5EeMDQLeoM+HGQv
 31  sNVqhkTus+alVLU069qw4cHDPTS3Zbui2a5drX9CZo23CB0ggA3KAoBauhBGpKMONDXb/b7k
 32  N8Xmb2uZ50xLfjvzOLjmBPZhATW7Zrlg47B9yMdTwxC/0ChEMOn+c/1Xn7DEX5K2bjndcIF8
 33  cQBfwygLPWq4gXwJAF/DKAs9v8Q6fYNmd/Qc/IzvNSaC7RmAF6zUgTPVpA4armByPhks7HWP
 34  TGdOa91fvJA4kdURa8CW/KWJlIOePCl1g8tvcvbOw5MbBtG2AU5YbXUfmCUq3Ek7jS+tP9BX
 35  2+RtbEYAyDwsCvaLWWxKi7fbqA1+qgdU/v5UsdDNnnnZ6wQBiqppK8ViJeNQm1Us6WyZKg==
 36  
 37  
 38  /

Function created.

SQL> GRANT EXECUTE ON SYS.HS$_DDTF_SQLTabForKeys TO PUBLIC;

Grant succeeded.

SQL> CREATE OR REPLACE FUNCTION SYS.HS$_DDTF_OPTTabForKeys wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  a53 3e1
 21  PqUJEjPbG/q2sGX/w2/nD7GKPeYwg9crrycFZy/Nkw8tB4m0S0bfUBzgwMhjiBItNAq54uxd
 22  FAnnay+jEZ5jqpqz4hRyo1IGXcMsX4HJQckz1+uFtH0V1YyVg5CgASktKg3+xJqlwWTXVZqA
 23  f9mitT6cjSUT7vIWYm7E8mRdde4tYejdoUAW+07omwbS+f5Pt5nFZ7+d+D+1jAq4RYaxE2b+
 24  QgEre5oVOPnNaoTmwJWrYUJddi6bOsKsQU578Z0mDzUVxG69msAbz9lYBoXk8+/vrnpoAEHJ
 25  TkesIFZsGVOCSKshb3fyII/UDSLZ/Z0rYxar9jX4YVJwA6M9ZxysCRac9A6MID6MDUEvOGt8
 26  YXRKmUneoa38KfZIbTJIchdPIj912X8EjoNEciQQya8W5tNH28/3b5XtUXPPKI2kFVuehlLu
 27  SXtt7hXD1yvGzhRZUWHLvNJeJdefvWFqDMok5vYTntN2eM2PHQiiDZK4V5eR2gLkV5D7r8x7
 28  5uY5WA4NqdIFiP01bqkaCANIfwYGmzpGWEjl8hw66VtUFfLee00mNcZgKZ8V96NdgVKX8bqh
 29  wB4OKgUwAAW71Q5Ib8RrdhzKWNGWWNhs+v7wXRKRGfRixQv8paJmzuCk+FyDEz90bS/W9kOV
 30  PUUkchJ5WmtgnH9XbrY6rVhPAfyHWEVcG7mJJohDcCL6VRtbbfqzWXIR1Mm+SXaX+cgX2LE2
 31  KdpZSy0u4lcbGAN5BOnJZYJr973wbSLsWvASCW3//xfP6shC70+MrmzGPXwuKFdJj/vhvKLn
 32  1nWLv7js/8SychdXSXT4F5yD73r0loxMZoTrb+iVSQEeoQmQGzIgjjjXPV/C+D7W0WoahlzM
 33  iFvgBNHQ8Pd85c7cupG4TGdVcyxmVldnE2EUnA2rDhofnElWaFQ4IQfA7jGYjhnfS5m7lEpj
 34  XLXawHPZcSRDy/AzzYjgk/4soI3VgF6oEQi5LKX0t2Y=
 35  
 36  /

Function created.

SQL> GRANT EXECUTE ON SYS.HS$_DDTF_OPTTabForKeys TO PUBLIC;

Grant succeeded.

SQL> CREATE OR REPLACE FUNCTION SYS.HS$_DDTF_SQLTabStats wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  b70 457
 21  llSyTacTaZPTsNvcceoNADio+hcwg5UrACAFfC/N2A+vqOl+qefxjvov7x0uzN/MWMOFXiIb
 22  ZmIYZmff/X2alumXBvTAkKuk5a+pue2/epscruKjlTUn6TwzR41sw/8id6WS17mHv7pl1Vq1
 23  idmj5WRzbcPbrPcn6Vt25dQRSIJuiVHgebJd5MG5sTGQrlVDEAW5Gbwgcrd1gnANhz5h86pv
 24  nbyd7/RD9i04zAic03DZo9IYXhSlJW7K3o3PEQJ7Py8L9PMrdYDMQcr0xrIsHMS7XfjQzUJ/
 25  ll+pPDAGbe3dO2HdZ6PIaHsWVJn2k9MZq++OUzycXCHC87yBvHvemdP/4W4XVx0iBvbBg4mv
 26  Fu5Lbrtjlin3iLzJiyOfxzKtsB0ERafdHhO6NtQ8X92sRx+G6c336WrH9UN/hlCbB4jy1R/9
 27  BYLDmJOe6zUJjQYxAKDYp42Oi6lXZUpjmtp+MAkjna4mVM2reQFTsL0GRUh4nmxBXQGn2nlx
 28  PlZyBOr7wVbJnKXxZAVLjUsHDOWRshVX4lyIDKvCP76K2slFya9wiRDby0zS992ln/Vgw6To
 29  LnSDoVDE+HUgKr6YJBhyw7qx0iw/5Ken4GxcsdDUms1pI2OyLVFv+W/LGxq0eY79CmUjtpoX
 30  QiaoJxdSFSVzPegwxQkhuxGrkSGyTUK/iho8Rb2CUdPdsS3cJmf+spM2WXoMyq4ePyxPjUDy
 31  xOVfjz+qM6BzzPXpET9JFkXhIXWQ3M8uLZA+n9GV32OzdfUnFe9bbjTIpMJytiiL4c24jil4
 32  exiVnvitrgcppNqpI6lFcMwfilGAgBBLkyxFZOGuATJv0PyOE9OGyNkmqHtsW7qLaNHjJhGl
 33  bCee4Cci57YkhOhR2ImOdlxVsqHDZKqVpZFpGyfLOIgcUaE3UXVfwd5mjH0WgqviFscY4MB2
 34  xPRvGX84Bv7b12vt2PjAtoxPyYeaEl5NZc6CvAijujUzp9u0qTa3lZ3LbeZ6x7P11c5UpTsl
 35  4tKElz6o8rVb+89WFKdcoKCgOG5otnwZZx1uYnacpz3h3u4LYlkN+Ob4m6DqMpputYdvtzz4
 36  hQdvTz8dQ4YxKg==
 37  
 38  /

Function created.

SQL> GRANT EXECUTE ON SYS.HS$_DDTF_SQLTabStats TO PUBLIC;

Grant succeeded.

SQL> CREATE OR REPLACE FUNCTION SYS.HS$_DDTF_OPTTabStats wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  a4c 3fe
 21  FVrWEcGx9vU4DEHHcpw8noMsu+cwg5VcLiBufC/NWA/uhOWK8it3ovIok0OPKhv2jQ0mAF2G
 22  RiXl5WZDYdWBu79L+yjIyLkmdsgwIEEAQUIcGINaUDxLkCT2m3YY1CumciTkCDowcApfMq68
 23  Yg06PBARanpXebnO3YTMrdVzRhe+xaJM4dq1EOTHn9YMxB68dkqWJCjBoVZE4yUZiC3qu21P
 24  Dw/029mQg21NzoC943kme5U+0zDl3Mh3YKpkjZPR21QGieq5h0NJWuC+7mrAC0kPqqT/AzKL
 25  jnfLHU/kRHkNW/uD1qe8N1l3S+uttw3Hl2deC6OTY9UCO8aKoHJUTUQhBLNXZzbHnDxDrxZr
 26  VLIz015FH9y5RpijTA8/k043dEwMXT2B6ubUPF+FXzt4hi5zFejuk2hCdgg8MyCABPbstLTR
 27  FXf4O8BiYy7iHB+V7apASfQIjoPjwibYse5vG/KDwhn9wqV+TO4BC0y31ZZJ85w3nGbi4u70
 28  uf32/IPAFVCXHAiEkPO98xF11CZRQ9htDk83tMhsF5Ofx5iFZFlMp+SJH0E4Crmg3m1U7jKZ
 29  vm88f2TyAh8LpUSwOY+gsQID+M7t7ItvaZ0YhND+xPDrNZX65wbeYaUhgjx5kJPeeZTieWtn
 30  ueBBg6nNe0u9biN33RyfVa0i/ZkCOy4c+vnP+aBOUgaj3H6X1qg6RxJuo0pevwj3jW+Xp6N7
 31  PpDBVVKWWhnvGgyqRpWiRTeXB3+IHvLFDCceoXlz6AuAPYG3/GGG6uigo7BgMhWLN1LsWYQd
 32  eyjLyRPUYcqybLYbAhvIQPH0t+a2V/IOpACR9uQa0n7kGlA+6QH1IWxENd58kAk+dQ6MjfRy
 33  hZe9zdYFndPHMzgC5f/Ll12v0wgMpzzVPJipwB22kquqbRNZAPJcDVvpVlSVtBvGBRkEY8Dk
 34  OvvgODhMoh/eLLlDYh0HAP19+tRS9kx+428iPBVxBUmDYxfMPdwetUGnUBz48FCL6w+oVtBr
 35  
 36  
 37  /

Function created.

SQL> GRANT EXECUTE ON SYS.HS$_DDTF_OPTTabStats TO PUBLIC;

Grant succeeded.

SQL> COMMIT;

Commit complete.

SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> -- Install the dbms_hs_bulk_load package
SQL> @@dbmshsld
SQL> Rem
SQL> Rem $Header: rdbms/admin/dbmshsld.sql /st_rdbms_19/1 2018/09/11 17:29:39 cvillad Exp $
SQL> Rem
SQL> Rem dbmshsld.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmshsld.sql - HS bulk load packages and  types
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem     This file includes HS bulk load packages and  types
SQL> Rem
SQL> Rem    NOTES
SQL> Rem     The script is run by sys (connect internal).
SQL> Rem     The tables , types and packages are created by sys.
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/dbmshsld.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/dbmshsld.sql
SQL> Rem SQL_PHASE: DBMSHSLD
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/caths.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    cvillad     08/30/18 - BUG 27692166 - Move procedure table_sampling to
SQL> Rem                           avoid realm violation.
SQL> Rem    raeburns    10/29/16 - Bug 23231303: remove OR REPLACE for evolved types
SQL> Rem    esmendoz    07/20/16 - Bug 24309242: DBMS_HS_PARALLER changing global
SQL> Rem                           varibles into constants.
SQL> Rem    raeburns    02/29/16 - Bug 22820096: revert ALTER TYPE to default
SQL> Rem                           CASCADE
SQL> Rem    andmerca    01/05/16 - bug-22350281: change 'grant select' with 'grant
SQL> Rem                           read'
SQL> Rem    raeburns    06/04/15 - Remove OR REPLACE for types with table dependents
SQL> Rem    cvillad     05/28/15 - BUG 20511457 - Alter type HSBLKNamLst to
SQL> Rem                           accommodate long identifiers
SQL> Rem    cvillad     01/12/15 - BUG 20296708 - Modify HSBLKNamLst to support long
SQL> Rem                           identifiers
SQL> Rem    skayoor     11/30/14 - Proj 58196: Change Select priv to Read Priv
SQL> Rem    surman      01/22/14 - 13922626: Update SQL metadata
SQL> Rem    traney      04/05/11 - 35209: long identifiers dictionary upgrade
SQL> Rem    kchen       11/07/07 - fixed bug 6612226
SQL> Rem    kchen       06/12/07 - fixed bug 6126126
SQL> Rem    kchen       03/19/07 - fixed lrg 2900123
SQL> Rem    kchen       02/14/07 - fixed bug 5883421, add cpu number check function
SQL> Rem    kchen       06/01/06 - create dbms_hs_bulk_load package
SQL> Rem    kchen       06/01/06 - create dbms_hs_bulk_load package
SQL> Rem    kchen       06/01/06 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> 
SQL> drop sequence hs_bulk_seq;
drop sequence hs_bulk_seq
              *
ERROR at line 1:
ORA-02289: sequence does not exist


SQL> 
SQL> create sequence hs_bulk_seq start with 1 nocache;

Sequence created.

SQL> grant select  on hs_bulk_seq to public;

Grant succeeded.

SQL> 
SQL> 
SQL> CREATE TABLE  HS_BULKLOAD_VIEW_OBJ
  2  (
  3  SCHEMA_NAME varchar2 (128),
  4  VIEW_NAME  varchar2 (128),
  5  TEMP_OBJ_ID  number
  6  );

Table created.

SQL> grant read on HS_BULKLOAD_VIEW_OBJ to public;

Grant succeeded.

SQL> 
SQL> 
SQL> CREATE OR REPLACE TYPE HS_PARTITION_OBJ authid current_user AS OBJECT
  2   (low_value number,
  3   high_value number,
  4   position  number);
  5  /

Type created.

SQL> grant execute  on HS_PARTITION_OBJ to public;

Grant succeeded.

SQL> 
SQL> 
SQL> CREATE TYPE  HSBLKValAry as  VARRAY(250)  of varchar2(4000);
  2  /

Type created.

SQL> grant execute on  HSBLKValAry  to public;

Grant succeeded.

SQL> 
SQL> 
SQL> CREATE type HSBLKNamLst  as table of varchar2(30);
  2  /

Type created.

SQL> grant execute on  HSBLKNamLst to public;

Grant succeeded.

SQL> 
SQL> CREATE TYPE HS_PART_OBJ  authid current_user AS OBJECT
  2   (low_value sys.HSBLKValAry,
  3   high_value sys.HSBLKValAry,
  4   col_name     sys.HSBLKNamLst,
  5   col_type     sys.HSBLKNamLst,
  6   position   number);
  7  /

Type created.

SQL> grant execute on HS_PART_OBJ  to public;

Grant succeeded.

SQL> 
SQL> ALTER TYPE HSBLKNamLst MODIFY ELEMENT TYPE VARCHAR(128) CASCADE;

Type altered.

SQL> 
SQL> CREATE OR REPLACE TYPE hs_sample_obj authid current_user AS OBJECT
  2   (low_value varchar2(4000),
  3   high_value varchar2(4000),
  4   position  number,
  5   data_type varchar2(106));
  6  /

Type created.

SQL> grant execute on  hs_sample_obj to public;

Grant succeeded.

SQL> 
SQL> create table hs$_parallel_metadata
  2  (dblink varchar2(128),     /* database link */
  3   remote_table_name varchar2(128), /* remote table name */
  4   remote_schema_name varchar2(128), /* remote schema name */
  5   parallel     varchar2(1) default 'Y' not null, /* Is parallel supported or not */
  6   parallel_degree integer default 4 not null,
  7   range_partitioned varchar2(1) default 'N' not null, /* remote table is range
  8                                                partitioned or not */
  9   sampled varchar2(1) default 'N' not null, /* is sample available */
 10   histogram varchar2(1) default 'N' not null, /* is histogram available */
 11   ind_available  varchar2(1) default 'Y' not null, /* is index available */
 12   sample_cap varchar2(1) default 'N' not null, /* is sample capability on */
 13   hist_column  varchar2(128),         /* histogram column */
 14   hist_column_type varchar2(128),    /* histogram column data type */
 15   sample_column  varchar2(128) default null,           /* sample  column name */
 16   sample_column_type varchar2(128),       /* sample column data type */
 17   num_partitions integer  default 0,      /* number of partitions */
 18   num_partition_columns integer  default 0,  /* number of partition columns */
 19   partition_col_names sys.HSBLKNamLst default null,   /* list of partition column or index column names */
 20   partition_col_types sys.HSBLKNamLst,  /* list of partition column or index column data types */
 21   ncol_min_val number default null,  /* numeric column min  value */
 22   ncol_avg_val number default null, /* numeric column avg  value */
 23   ncol_max_val number default null, /* numeric column max value */
 24   num_buckets integer default 0,  /* histogram number of buckets */
 25   constraint hs_parallel_metadata_pk  primary key (dblink, remote_table_name, remote_schema_name ))
 26   nested table partition_col_names store as hs_partition_col_name
 27   nested table partition_col_types store as hs_partition_col_type ;

Table created.

SQL> 
SQL> create or replace view  HS_PARALLEL_METADATA as select * from HS$_PARALLEL_METADATA;

View created.

SQL> 
SQL> grant read on  HS$_PARALLEL_METADATA to public;

Grant succeeded.

SQL> grant read on HS_PARALLEL_METADATA to public;

Grant succeeded.

SQL> 
SQL> create or replace public synonym HS_PARALLEL_METADATA for HS_PARALLEL_METADATA;

Synonym created.

SQL> 
SQL> 
SQL> create table hs$_parallel_partition_data (
  2   dblink varchar2(128) not null,   /* remote database link */
  3   remote_table_name varchar2 (128) not null, /* remote table name */
  4   remote_schema_name varchar2(128) not null, /* remote schema name */
  5   low_value sys.HSBLKValAry, /* list of partition bound values */
  6   high_value sys.HSBLKValAry, /* list of partition bound values */
  7   partition_position number, /* the partition position */
  8   constraint hs_parallel_partition_data_fk foreign key (dblink, remote_table_name, remote_schema_name)
  9   references hs$_parallel_metadata
 10   (dblink, remote_table_name, remote_schema_name)
 11   on delete cascade );

Table created.

SQL> 
SQL> 
SQL> create or replace view hs_parallel_partition_data (
  2  dblink, remote_table_name, remote_schema_name,low_value, high_value,
  3   partition_position,  partition_col_names , partition_col_types )
  4  as select hp.dblink, hp.remote_table_name, hp.remote_schema_name, hp.low_value,
  5    hp.high_value, hp.partition_position , hm.partition_col_names,
  6   hm.partition_col_types
  7  from hs$_parallel_partition_data hp, HS$_PARALLEL_METADATA hm
  8    where hp.dblink = hm.dblink and hp.remote_table_name = hm.remote_table_name
  9     and hp.remote_schema_name = hm.remote_schema_name ;

View created.

SQL> 
SQL> grant read on hs_parallel_partition_data to public;

Grant succeeded.

SQL> 
SQL> create or replace public synonym hs_parallel_partition_data for hs_parallel_partition_data;

Synonym created.

SQL> 
SQL> 
SQL> 
SQL> create table hs$_parallel_histogram_data (
  2   dblink varchar2(128) not null,   /* remote database link */
  3   remote_table_name varchar2 (128) not null, /* remote table name */
  4   remote_schema_name varchar2(128) not null, /* remote schema name */
  5   low_value number, /* histogram end point value */
  6   high_value number, /*  histogram end point value  */
  7   bucket_num number, /* bucket number */
  8    constraint hs_parallel_histogram_data_fk  foreign key (dblink, remote_table_name, remote_schema_name)
  9   references hs$_parallel_metadata
 10   (dblink, remote_table_name, remote_schema_name)
 11   on delete cascade );

Table created.

SQL> 
SQL> create or replace view hs_parallel_histogram_data (
  2  dblink, remote_table_name, remote_schema_name,low_value, high_value,
  3  bucket_num  ) as
  4  select dblink, remote_table_name, remote_schema_name, low_value,
  5    high_value, bucket_num
  6  from hs$_parallel_histogram_data ;

View created.

SQL> 
SQL> grant read  on  hs_parallel_histogram_data to public;

Grant succeeded.

SQL> create or replace public synonym hs_parallel_histogram_data for hs_parallel_histogram_data;

Synonym created.

SQL> 
SQL> 
SQL> 
SQL>  create table  hs$_parallel_sample_data(
  2   dblink varchar2(128) not null,   /* remote database link */
  3   remote_table_name varchar2 (128) not null, /* remote table name */
  4   remote_schema_name varchar2(128) not null, /* remote schema name */
  5   low_value varchar2(4000), /* sample data boundary value */
  6   high_value varchar2(4000), /* sample data boundary value  */
  7   position number ,
  8   constraint hs_parallel_sample_data_fk foreign key (dblink, remote_table_name, remote_schema_name)
  9   references hs$_parallel_metadata
 10   (dblink, remote_table_name, remote_schema_name)
 11   on delete cascade );

Table created.

SQL> 
SQL> create or replace view  hs_parallel_sample_data(
  2  dblink, remote_table_name, remote_schema_name,low_value, high_value,
  3  position,  sample_column  , sample_column_type  ) as
  4  select hs.dblink, hs.remote_table_name, hs.remote_schema_name, hs.low_value,
  5    hs.high_value, hs.position , hm.sample_column, hm.sample_column_type
  6  from hs$_parallel_sample_data hs, HS$_PARALLEL_METADATA hm
  7    where hs.dblink = hm.dblink and hs.remote_table_name = hm.remote_table_name  and
  8         hs.remote_schema_name = hm.remote_schema_name ;

View created.

SQL> 
SQL> grant read  on  hs_parallel_sample_data to public;

Grant succeeded.

SQL> create or replace public synonym hs_parallel_sample_data for hs_parallel_sample_data;

Synonym created.

SQL> 
SQL> CREATE or replace PACKAGE dbms_hs_parallel_metadata  as
  2    type HvList is table of varchar2(5000);
  3    type NumList is table of number;
  4    function check_cap(dblink in varchar2, cap_number in number) return boolean;
  5    function get_cpu_num return integer;
  6    function get_domain_name return varchar2;
  7    procedure  raise_system_error(error_number IN INTEGER, arg1  IN VARCHAR2);
  8    procedure  loadIndColinfo (remote_schema in varchar2,
  9    remote_table_name in varchar2, dblink in varchar2,
 10    ind_available in boolean, max_val in number , min_val in number,
 11     avg_val in number, part_column in varchar2 , part_col_type in varchar2 ,
 12     p_col_names in HSBLKNamLst, p_col_types in HSBLKNamLst ,
 13     col_names in HSBLKNamLst, col_types in HSBLKNamLst,
 14    parallel_degree in integer);
 15    procedure  loadHisinfo (remote_schema in varchar2,
 16    remote_table_name in varchar2, dblink in varchar2,
 17    ind_available in boolean, numBucket in number , part_column in varchar2 ,
 18      part_col_type in varchar2 , p_col_names in HSBLKNamLst,
 19      p_col_types in HSBLKNamLst , hisValues in NumList,
 20     col_names in HSBLKNamLst, col_types in HSBLKNamLst,
 21     parallel_degree in integer);
 22    procedure  loadPatitioninfo (remote_schema in varchar2,
 23     remote_table_name in varchar2, dblink in varchar2,
 24     p_cnt in number, p_key_cols in HSBLKNamLst, p_key_cnt in  number,
 25     typlst in HSBLKNamLst,hvalueList in HvList,
 26     hvalLen in  NumList, partPos  in NumList ,
 27     parallel_degree in integer);
 28    procedure  purgemetadata(remote_schema in varchar2, remote_table_name
 29    in varchar2, dblink in varchar2 );
 30  
 31    procedure update_samplemeta(remote_schema in varchar2, remote_table_name
 32    in varchar2, dblink in varchar2 ,parallel_degree in integer,
 33   sample_column in varchar2, sample_column_type in varchar2);
 34    procedure load_sampledata(remote_schema in varchar2, remote_table_name
 35    in varchar2, dblink in varchar2 , low_value in varchar2,
 36    high_value in varchar2, position in integer);
 37  
 38  
 39    procedure  insert_viewobj( ora_view_schema in varchar2, oraview_name
 40    in varchar2, hsbkseq in number);
 41  
 42    procedure  delete_viewobj( ora_view_schema in varchar2, ora_view_name
 43    in varchar2);
 44  
 45  
 46    procedure schedule_sampling (remote_schema in varchar2,
 47        remote_table_name in varchar2, database_link in varchar2,
 48         hs_remote_tab_typ in varchar2, p_degree in integer,
 49        row_count in number, ora_user in varchar2, oracle_table_name  in varchar2,
 50        pt_col_names in HSBLKNamLst , pt_col_types in  HSBLKNamLst ,
 51        col_names in  HSBLKNamLst , col_types in  HSBLKNamLst);
 52  
 53  
 54  end dbms_hs_parallel_metadata;
 55  /

Package created.

SQL> 
SQL> 
SQL> CREATE or replace PACKAGE DBMS_HS_PARALLEL  authid current_user  as
  2     no_dblink  exception;
  3     no_remote_table exception;
  4     no_view  exception;
  5     pragma exception_init(no_dblink, -24277);
  6     pragma exception_init(no_remote_table, -24278);
  7     pragma exception_init(no_view, -24279);
  8     no_dblink_num constant number := -24277;
  9     no_remote_table_num constant number := -24278;
 10     no_view_num constant number := -24279;
 11    type hs_part_rec is  record (t hs_partition_obj);
 12    type hs_partion_rec is  record (t hs_part_obj);
 13    type hs_sample_rec is  record (t hs_sample_obj);
 14    type hs_part_refcur_t is ref cursor return hs_part_rec;
 15    type hs_partion_refcur_t is ref cursor return hs_partion_rec;
 16    type hs_sample_refcur_t is ref cursor return hs_sample_rec;
 17  
 18    procedure LOAD_TABLE(remote_table in varchar2 ,
 19     database_link in varchar2 ,
 20     oracle_table in varchar2 := null,  truncate in boolean := true,
 21     parallel_degree in integer := null,  row_count out number) ;
 22    procedure CREATE_OR_REPLACE_VIEW(remote_table in varchar2 ,
 23     database_link in varchar2 ,
 24     oracle_view  in varchar2 :=  null, parallel_degree in integer := null ) ;
 25    procedure DROP_VIEW(oracle_view in varchar2);
 26    procedure CREATE_TABLE_TEMPLATE (remote_table in varchar2, database_link in varchar2,
 27     oracle_table in varchar2 := null, create_table_template_string out varchar2);
 28  
 29    procedure table_sampling( remote_schema in varchar2,
 30        remote_table_name in varchar2, database_link in varchar2,
 31         hs_remote_tab_typ in varchar2,  p_degree in number,
 32        row_count in number,  ora_user in varchar2, oracle_table_name  in varchar2,
 33         pt_col_names in HSBLKNamLst , pt_col_types in  HSBLKNamLst ,
 34         col_names in  HSBLKNamLst , col_types in  HSBLKNamLst) ;
 35  
 36  end DBMS_HS_PARALLEL;
 37  /

Package created.

SQL> 
SQL> 
SQL> grant execute on DBMS_HS_PARALLEL to public;

Grant succeeded.

SQL> 
SQL> create or replace public synonym DBMS_HS_PARALLEL for DBMS_HS_PARALLEL;

Synonym created.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> @@prvthsld.plb
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> CREATE OR REPLACE PACKAGE BODY dbms_hs_parallel_metadata wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  3969 1148
 21  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
 82  
 83  /

Package body created.

SQL> CREATE OR REPLACE PACKAGE BODY  DBMS_HS_PARALLEL wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  206ed 6642
 21  y0XsvX8/MOZw9/5A6PAesU/G7f4wg80Qk7/9eCV9ENRk3V1orRS3YeA+WEOCeU9rFoPohPer
 22  8Zeb24QMX0eW02PVCfpdbuTObRWjAmMfwt66QX2vyYz7Iafl5lxrpwPc/pj/HhwkHJDk265K
 23  rkkDeLcxkxdoiHQjHRlYfP+wJJCBzhO7W3P6if5Jz4OtHNLOfZS1vIK5vClf0OyqEpLS3gp5
 24  J8tyrtblUYpTeEiCn98cMhJJwYYcwWQSXsxopLKSaurvGXb+3IDrGX4lEOvazaX5UJ9P9Eo9
 25  T+JmEpCy2rAACS5fh/WBTDQmzl9+fzexIBvG1rvb63Bl1139BL+l1GEAE/R7wbDiAM3dNGGQ
 26  2xLu4Myw5eVNZXtPUfcT6sIokv9hJM3kV/i8gsggPcDJUUskiQIadyEpz7WDqvq62CQ4S7KQ
 27  7h5BVafi/rTEJFWWCBB9RyIzB87Mz5kkwvqdWwP60ncuGkIaqaLip4fyNGloNAnZWhn0+UoS
 28  ZPiE1PhkfUh29YDBaj6qr0+ejxLr/WWYD5K2codTO1vnQ87vkmPPL5YS1qGWPPs64Ni24ftQ
 29  s6WiX8Nf7NntUG1ixSKNO5WbGJoHm8QxXPglik3FaQA0q/BCLMqZsoqPXKpWK82PqY7Le1F+
 30  fKuQPsov2T2iC3kzumItK7INDLLRRXnAkhyHnatfe+s5IL6UQ2i5sATq1mQfsW1tsp2T4uwG
 31  KdAkdVF2kPoaeEEc0kC1Ilt6AqgqCG2htdJZcNHSbJpr92pQwuqkLR1izgYsqqVg1YZOD2Qz
 32  +Ps/grXQzhWHIlARCE+7ICBdzjqnc7ZRtMDbZxCA+UZYdk0q8aqYz8bMK1T95KgIlBnOnEHy
 33  KXLk+DSCfZ38/txonI7339WVBSN37SwSVU4myn2wsO23P4Dkwi+xLNyAcfcTX/Z7t1LpSllO
 34  4ul/LuhBfW/o4S/LXME6mV79N3gVzIEloF6Fg8TQ5w8p53wGJa66e1YZTe4FofZ7Nz9q/BWu
 35  3Tj0+c53fBpgHXHElihMIzC0e56MAaQbI461wurBarmgJKsVs/hgdrMsBo9VCHcdCTIZc+J4
 36  bEluBDRU1MdXSQ4wm+td3RdMybDt3sEags12ET82S8BoE0HQB6yxiLIjkGt6njikYGTGkOtK
 37  fS3rWz/pnUiwKH8Qdi0Rxy0d01MFi1Dyaa7iK+nisFSEf8O+L4hHwOgbAMyOouLU5JIjYVid
 38  E0xohyRo2DzLH/YVoulnq+TE/m34RMHEnTtv/gYhMJ+FwQoM0bzP7XU7i3iZzNRPpK+pon8g
 39  h/94TjGL/toWIHW3Y68gu60QjMuUNbYBgph+m1Wu7fQRZppobbsiaOMlakBRsulG+2rqYMrF
 40  alBqcklz7vbUvUsXqHBqeEQ7L5rOHtWvo27KZvOa/CnOcd/CFz+7xki7WeAxKFE+LPTL1LcV
 41  SCHbFqJc0sUrXhBygcmoVkSRUWoD91RNWNsfRNw58RmWsRMFCvg616u2M0XuJlZnNagV5006
 42  8KaMDLN9VbsZeqvsyeg4hs7PpaT1eH0yKg7K7Gs4+7dhFGeRBBWDQArlyywcDZam8WZXs3M+
 43  dH/IxhRdBGYfYb9bN79v0gdJ7SwsAo7ouh2zKAF8VTf+ZTX+lW4X4AGS1tyh8SDevKamJTxI
 44  ZU64aYyPmB10PG8dlkjqHtdzz76DppI+9Sa2gavPQTEos17WsTo+0Z2Vmt56Tyww4yIk42t7
 45  fgoKkty18RfWmgakP6AumIzukXu5pqFQXQZMaegi0PJsjPtJ/5OMqPsKzPXURvVG50tcFvQ2
 46  L+/dOQYK2xAC3ZVn215wwy6eFmiH7z5D1gntml4s2J6uJ8os81H/f6I9pmlsDvST+huyzCuI
 47  jhco0USZS3FMfuznRaOrRY7ZvnFM8aTEcz2iZ/WqwOs9SgqtSj8EM9RIsa17SIfdQXjYfVOZ
 48  4QvkYgdq6Mmvwoydj6BpF1dJjcAyKzdL4ypZK7jDd2xl5Zz1w0GbnqSN16c6aG+rSW9HYD8G
 49  Dv6Gw3QtQhH4p5CdAv/vTMEyWZxxPgpohgUrU9K8wAxZsVKrUengMq2nr2oXoM7sLcq6dHWI
 50  81M38IpqahyIYryZsJV/Cioa4f4xipgZrkunzBkMvOti4WIhcZ6pP7Eg/mDAhpvoDlRA6sQo
 51  yd4OKaa0yc6HPu4PUggXjMWeHUGPdoiuZfQ0JFihgbNHuZ+723+c4CbbyZdjBitcy/1mW8nR
 52  3G4jqJe9pW0FBz3oOgFttt65Iy0ojabqaJBmR79O+NfAAzRMYtH3tNEmxze4SfQyy/ffRjHi
 53  3Fy88vE566uz2gPIUuiXSCVZ85d07n32sghpSnKEVDY0GYHReNVkqfceSMSRvkXARW+9rOD2
 54  GFwWM6J206LiU/kYOvLjlVJu3fF/IkdNcXp21xqHdIGTUCan0CqN1L9/5l0SjREHDcVfbJSf
 55  u5zquxed/2Qsb3rHnRexbT09ixBADqEOA+SvkJL/fXGKQDj5QiSrekR/AiN6CuC9xpaPgLJL
 56  7FGV0zNHCScMqmt4vXFjBGgUi+A4Fuso7uW6z3MBCBIOeDvqPDxtuTvfoxd19EwnINsFhXSL
 57  ev+KOji4YXS8/IKt1PmoPHLPHcc/YVaXziY/HUEgSUpyzy2OarA5aRixhlaXMSkTH4CJdNAf
 58  a3bdMtUrcjEqbl+AF4IvsoDGIBOMUhczEJ3+hF9yttjjQh6Cv3G4e+ALvB4oSe2qapmVVqCp
 59  4y514KPomzS3YmL9wDDSrn+uCBl5e0ck2LjkkH0wBldKyIytw3ayZxWg/qNlxadi9LfG1waL
 60  SJ/4uaoX2QwCNx6asVu7sQO/KLGdcZr/lhed0R+dNUTw1R5t/m0TvmvpqwuRpF71oAIhecHo
 61  TXT+n8qMbRmnsKzeC0NsCtDu6eRDoSBQtpmypBU/H8/ibK4bbTgzmG+Ifr3URCHmporBlvN+
 62  VHTnqeFhizM/PxASf7YTcLRvoXNpIHnrtNYEEQAAABMmeGl7HHPKh9sFmPbn4Yic/sS//Nvu
 63  RaSkCwhDID55OqXPfA7FCJ4dUU5gogYd8KEo8rjAH51HZG9x71+RizyCqr6tmnLsQ2KrnB3k
 64  Ojgy+89tpA4VkrhGn732HKhe4M0p3qoYAqVXs/8eup9+58SNUPi21uulPySbQtm2Sb5RwfJo
 65  PJvKljQy35u+f4gY0wvVFKPy5MmbqoSSY1p/AOaWmkyW6p3KPQVzBoufA3XzPMyZyqBjJinM
 66  MyCe+lO35iExK/YfmEpOiHbRKg/yKkaRJP9oLnVvIV9CnNEqeN7LyY51zJnpErRthMmWfK8t
 67  GUT6jMwubRAs7SnAjHX1GkLQfQJ1XKAUU2xykkbtrEAW1b6mSWL+n5BCAvHJJjrYwXi/4aOO
 68  681Xm9OpVETkYTlXF9qPPNpUmnRk74YCDoj7WURep4XjbCzSlfUSNthR7DThVNWpgm/7SQ9V
 69  BxsfYS4pKEJtQsUtccjmioa6/k5Z+k65JVwAuhPr7r3o46VfLKT9J8Wr8k3V7ICT0ElIARAq
 70  g1s23OguTIsKCpVH6uWyDfLXqxfICVPwWLV7D4cMHGCdOEMOVdg8b8jYdWnr++2uha0/5YfF
 71  PUJjoMSZbJh1N1HYFUTxo9e4f2qG9IfcwwmNrRyXdRDn7A4Z7xNEQhddzJ6oiErowirC5WFi
 72  c/y3TobrTq+gJPvV7erj9Q7rlMsp9M3uaSl0NQvj42nOXLEGJswufgqAZyzFw2YwHUP3LlCr
 73  HbBMw2E85Ws8SWEwgHpZWTFr+AmFdbjUx1S3jyKhVqdrCbdOAwOzMIPaMShyxcnuXs/RWiLQ
 74  VawRUSilf7fEcbkuiDPmaUCVgYDulFQ+2oQqSenaY+Et4e8O9ZPoKH/NT6s+uFpqhCJnWs2O
 75  CdzN9EyV6L4JboAfAn+LqXbd+024ZuSO3YX87jk+UELeMehvfC1gGwjH+LBgjGh/fpw7m61+
 76  FJClp2w1rvHx3Ca6byV7XQH4tn44TeK8/rLAa6GtDRbQk22AiDx2yEdbNXDZIR7xUr3IuxzR
 77  P5N+PH3iwdaEFOBvvVant6nSCQY9x8QhlDDbJUuTghFgyl6lKyx0G7+Og3kkO+M7NataHvc9
 78  Q2CqacUnR81NygsOYRy+ENX7B925B1uHdO3hKBKGP/4d4Qgxihr+I2he3FejWXIl9adDUxqr
 79  eBZxyXYOwONlnOgqurcBagD/0R/q/m3pYIGuo7At4VOdWLVbuc2CgSG1gfIia/7ZlInPw8Ac
 80  gErxU2vEZYygVYqNVV902hNIhLsdyaLy2i4dtnIPgxm6LBwT5wvYop237QVoCHF+8vyR74r6
 81  K1bHMjTOpcKnAlIqSiXYgvt5QWsNaAl/+PdClMDXfAQy3IqswabeV4ImTtuPPntXuVkjA4Vi
 82  1kzt+VD7bNiHMl7MS1+K1pVmcgMCFEFPQUSswfiINOk8UBTLpn+H6PPhBAYPYkgRcVLUp4XI
 83  PW0iqdeacRB5Fobw4THip2VxPS7d0+VuzSaHqN6xXv9UlCLuemjyP0aTq3lJfn3EYnwHeKNe
 84  tNomxrinOw79MxjbuORmCkW/TOfgXJF2pPvP10UvMHIvFAu013qYyeDXXzscgpqRiAUW+GHG
 85  hVFTAUYseNWaroKqJKmmbjLAb8rBMJc0XE32Rff0ZqsVuuMig+1bVbjiJDj5on1IYFkxt5gY
 86  J3Dha0d5dsqXCEOtnSAqIubBz2QzdUkS1H/lYdhqZKSwKAABj8GyWu0NR4V+F2BAWeTYiJC+
 87  QcVV9OPEvZ9octMFJzhZZG2yl+BIDtPViSzcTZ45PftCJksk3qV89R9bgVLxt+ZXck6wjnHd
 88  Kl4Q9gZwavCxdLHwK7H/kL5byrPpXel8UaFkupTSnZG9z9H2GALelJDFL+NOdRYbsp6Y1lQL
 89  NUyPufLSqHDHtET5DbtZENLwuhuc6c1e3dBr0c4w0tYzIt0JA4myJVacyCNm5oRcSNjLn0du
 90  AlUIqMLKDQKATS8OOUof6mUEc4/O0HhzsSAvEglYD39rTMhqLmlQxlYPLBC6MQ3z+bO57IjN
 91  FAkrkVHZmlFer0c6+EqLgq84quS3QZgWbAJSIsRQi5wfgn5/vNEV26GbNaJpTHeE33bPI3Rn
 92  /EGuNBtJjOs4fNTHYg/4Q9bMxILd0vpmpDtrPhO1p+kWcVAdbEqvHikIdFOo20RJUmYobMjo
 93  V4FlPI69NPmDtPgUNvfln1PtpJ10Sp6qEoGwexd1UlsjotiOiK7XJGwO9JTcKswgUfCPlVgw
 94  lrQTs7jgkF1T+VCifhKWViJY/NclAksP7X9QAoTEqZqrJU0ZdpWa49zL8/kK8e905+1SHwAV
 95  wb0a2TjcxmtmgEecJ8CFMdOw/V8sqsFh5m0YZ5uFSQcAfND3/SnfzF/SdPv0Z2e7HlUDx3UT
 96  CmrOHn91ajPk4HwnJE/S1Pml22mHbdaRUFhZUWpbeqS8PBsXYXjXmN2g1jozG1WIAMgLKgZT
 97  Cie4CURieXxXkZMbMsPzrnwLmqBGDpnXFwfdsSGrW/Bg1ChCmVVjcSJHZP1jjBOt8fLPjOiX
 98  kFQxZLTFli1svYCg6l9QPSMGfuohPjkpxu21np2cGi40H7XtQbw+ZcQVjPYN25x+ZEXGNKmi
 99  Hge/4Ckwtnfj4LNlaYhhNDLVmH71BWpj7x/Gn5B0u260o3vdF4+wTooTK1MDlcm5kcjnpcBb
100  5d/V6xNRihmQdI4pLnS8lz8xNx4dMTlBRlH3nmXqyivnofYb5RjWapUqzJtYiqYFUlInTAH/
101  vwjwToI1eBOGKVOqg3aFqr3sxKOFOAoEW0/7x0EHN5X4kX1rg5DHjC6nXmY4LFmVwZYWZiNO
102  6yR5MGC5v+lVUDRwh/QS0cpF0V9QaiNSJJjPeB2V5KP92jnE80nGGEjylRCMbvAL05jS2KXl
103  b7qom9s22Vnzn9NWYMfJ3nTa/fADx39F4gih/hvcg8MT2q7XvPzh5+TN0kkAk9UljQiOUSjn
104  +B7790Vn4a/to0GbFkw4PSLFUIqmglPeQ4Em8+J8w2uaw9A29deYMOwwM536DVsvjJG/W3UY
105  dCgSBgbl3WSFXBo1wAVWP1rxRRZQO2XpG3GJ7tasSh3cPjyQZSZBbiwd6674hcsDhIjgOpmR
106  c4jc1RlvSld4R0nkWj7uzfymt0391LlnC09K0Ym1Qnf69+4MzrfvY1NgOVASg5BaxoaepNDr
107  pAwZl+cAQ7QcTAVGwILwTwvcpoEwfTGKCivD1gQGkw7NpVQ0Bo/Xb3PFhvbzYdMADAVlsNjb
108  S+9uPoe9Kn3QZkjuOFMvT09K3emn+rZTIonY6d8icWGu5neeyny/brwaATA7U+Sj4ULFBv+f
109  hRxRWXQO5Ie6ITZiCE/UsJQc4ORLZrdnF5TeiADlCReNJDzOzJS6SbuGrVuUIrDkiE2MW5xg
110  XP+HLrsW7mBCwy87QDaSK507n+toRT5j6L7Kt2wnut7bZFDWSPa1rRVAZnh7XaKcH4BayJT9
111  g2CynuCpWkc7jpgdPuOCUbb/X5Dx6zYXVHMTqGMg+qXmL6E3oeJ4SeOMQ+Um5tGgptZD0GB/
112  Wv7KiC8Kyz0pIn4RLyESwQZAmSa3E5VJYlQRzIyACaqgXYilYnZu4d/u67KXn1MtdgkjNwtd
113  FHlyYpO1JVMje7H/O/EJL4nb8+ALQpafzuH/IzedrA61Lw5miDJ2RGFw+t1vnyaNQzi/9eFK
114  sK75wQXvoL0GkFU5JHUWTIpt+JXPA2evWRwI5hPKavYorMWVsdVakOYGXNln7SfcMmMMqFgP
115  +T24OHlCbAb9QGqNDsZOdboo5C8M+ToVssl47oQuzdQpAmSVd1XvjPqlDTDtiiDO1B/y8G3s
116  hDT9OjkRkHgU8s8tx0K1jb+nrxKlHVsdkoUKTdqfs3C+8m6OKUoWDdJUd60nIjks09VaD6IL
117  /cHPnURJ4VwOqOnJzB5H8BmyrzMeCi6hfYddJB40nQwcSrVQB4y8q0aOk5HbXCgxo3uIvz8R
118  RgwPJ8FsDIlxRbhD5OHhoBB/daa/lx2RbfxeEBGFBwI0OLfPoWP0GrGyvaLlMQMwhdK/ePaU
119  zHntGTSdnRBTI6p8naPY3wNt9swUQgZV72rUV8AfsWZmFR+9TxmVz7qVhFxQgJqhs/b1wGiB
120  qUri1MBsFDhQR35Irf82pVqIL7ef3WXKiR0mjVsmv8m+NOP4R53FP+igdVSsPiujSAENUUv4
121  ZKU2Jac/KQZFUn6S55K6MUc097whFHuwDbPWSqrsdjRYR2dLbvRR1ji7xiZZxNTDlXmsdpcg
122  XWDU2W1JVJ8ynuDuqPfuljdHDqJZJMbI93wmomuUWCMiRG44fvovZA2yt5Xx9bzjmBjHw4FL
123  CQWCzNpLrkNXSSPyuYWWOIFP8/P5kUrkMhiHAG9OJAJf0FWX4NzGEB/Gq5dD3iFy4DMqa1G9
124  UnpKBsptgHet/FY4DUECuXTY+M7HxoftSUGzqM6XaxiDqERLRMT40Z4nZV5x5pURSqawOtFk
125  7IuFMDbe7B2GZtPeGUTAy+GQ/q7l1db3xQRjAmAIPGavEnl95tfeMOVMDcjUim8Xqt+7PTfe
126  c3jheO/CRhP4Bz0CB9wsQL3ijUSf4czc3YdukbhtaesU4KF/tumYtVp6ibydIU5cM/rjASEB
127  A2IblwHUJH465MxJ+pd2tp+yd617WzFkjdMi+rNdsxwZUHOaGU74lVWB5ODMZuQNAJzbWwHo
128  tk2Z26EiVrEjoMQkx8Y08ai1gfkzeE0Fi88tRV3NQKeZm6IXMoCOMH5C3/2F0xSFDWMTpi2z
129  XIN3O/d3rRR24+KOiK8MBQWcdiBSihJROTgkWmxkC0fPVImcr43NByi1SLyAOfm/We+ibeuz
130  oevUZvsD1sFLIRZuFBxGOmJ5FlGaELnoKTuc+OXHuC3uYi1JX9nL1nFxcahSobEBtMe0Nrhw
131  PBdgjouAsnIYkEiNW+/YnClcqvSG9XhC82bTNcIQZLiOAO9DtIPm5As1ih53gADrC/xBD6ho
132  wmWMttmoPFfzglgzTDBV/T8ZELKt7Kv4AMKUI0mb12r//8ZkEkP+FjY2QsuqU5Bg9B2z7kgE
133  FnwKyIA38xw7oKoRrDuXWojKE7hgw9uLpGbWTYD4/UwmRtMk46tKljWS5FSufUgbPLf32FEY
134  Dxra6NKMoqk9wn07Kf5W4V6Kx7HY7OL0j7ITi4kxYtXe8Z7yLB6gS4G9kPi3rQ2F3osrCrST
135  K7xok+uXjrx/ErW3Bhe9nBEEeK+R+o+aib/HmFVdv8T2iEAvURe8umgXcSFY+t9F21WOzZfL
136  +N6iji6oSRA4aGg7SnsejQUnujlI7HS5zBj+YOH3wxXC49ByZE74bf5OEs0NR+rESxqxsSGs
137  J1qg5SFeCglrVWfddV86a9ZfN9X45EXHtdomREG5CCegeISPTDvu5MlLGVB8ft+JNw9tFCYq
138  OgaOd7MAee7GPeDtkxETeCGs12JdsIfW+gUnQAHLwlxNjGAa1SpZd40vzMk+rXWNnRlWV15R
139  fAEHg3emjQIOLKw1yb9Xx5jjK4NWdQtnZZgzSFjNzcUwipE4uL5W017RhrGs9YVWX7kS0YIL
140  KyLLJ4ueskLCpAZxyd9BQQqqrZpHpKWzz3uDW1CjLkBNF4SL6VAeArLcQZ1DG/lMie/LTSsE
141  YR+QnvrkTiFPaWYT6vPX6PtLMhBW/zq7S/i+X/DgmmBKjDqBYG6kGYFcpl2pRt88emXre4TT
142  uL02t7W0uNVyhwTRSXd+iaFuRP4PNELGECnm1m5GA/iVch8o/gMuDNI0QlMPUisO1a3dkvMf
143  vcAt8dV3oC9Hu2de1YzseHg7b5i6GWI2057FDXFtn/5OChOtTyR+SOrEeMQoUa7MMgCcxydq
144  VNuF0TD8ZTXTZ7AjzHslOQcbOrftER0PcHU2CLjuPx2DtfxPtnn0OvcGbYF+7b4xtOvyxg+m
145  bPGqIuOX4PSvSa9kVudNmtmaXZk5d6o/tjP1xPOJ28tCA59iXIT5P/ke4J8QmEXhwjRT0w20
146  c9djeagoQAstnbeVMv7uHN+EqaZ0uGIOCtfRy7MF37c9xm1tr8Dt+0SNm9Gr7ZeYQ6gFZp9E
147  YQF5e94Dv20KY8rWSG7T16KEEmtWCKFCPIeaGRkpkU/t3v7wpsX0ikv3QKmBsBgM9hlzMlfs
148  l5jLhq/KeI7nqU2qS61LkUydK9rVGQqxStv9ZIftvWFAqP6LAIoqQiaON/xjgz74g3am4bOc
149  JIZ5rB5O1/iV8o+8Nz5U91Clkz6/Oowvk1AqkzHznMTq5snYslobaHDC28pYowCU5IEX+3cM
150  N70j1Sg/hxlkeFtbkikj0Q6rZ1/a/ZaB5b5+Jj+8EYWtUwnOiVaNjrp+Q1WLWYoDVekx9BZv
151  DqY9ayhC71Wm/PCeLnUvtH19/QgVMk2ScYNycLyO1xP4HUMvrmfkKKppZjWH7Xl9JJE2xFOH
152  lgakE0/lXinrdkwEtRJNeNLeHPjfXWuSkyS3N8j0SYuQBDlYwO22EPkVuyQqH/iPvKOyIvI3
153  gMBYj0Qv5j0ZSjxkjZjska6M2qF+F+1DPdYwU5i6aHguCypY6//Q8S3qA6BTGq1iR02hjurW
154  M0NdzlCBtA9R9xMByoYzI4QLlvtw8zRlY6basuCdLg5NiqU0sziF8o46Cg9Ite0pORHIZ780
155  nqCYYg4aBFrFZ6E6JgipK5Xn3n6wEbdXOAxHDXfIZqKw5MDBeQVItz4dRqHAvNVrxXuldExK
156  0/kQrExD97whBX7JTL0RURQ+8mvV+0KvyDNaqmGEvZiahxe5VIvaLC4F8ZDTgpurohvOZaqA
157  4IKDSKhPHzuRszhpVyUUpaWO7rg0tjpEetrkYOG3Or2GJV6nHVPttmjCyCc100uNRyYoBp0z
158  9z2jAV3CYxTcL+Md1WU+s8uSsOYziWu4VW4an/tAx30P9wQ4gXhwmhPCQc5ly//vpvN7ImnE
159  byVLNxWOaKfR7mHDKwNgs5u9R2CICdALmoIKrswlfaN+yxkCZ/D4zpAiYwSdYbbGAz0Sy7UQ
160  AoJSwGm3fR94xJxLLRkZaHHyEh6px7ztvpNIZhcsgallQf+9kWcYdPvavBtqHg7aBC4j4dTS
161  7+YdZzU0TzSPni4p0T3A8/UCpYgvAIyVpB1LznIGBjgDj9kTE5VD0yHxi9koHkP88iZ6ZVQ1
162  gnztIV+hxZWs7mYqgDAuCo0V0EPsp61PBGEHE6PrPswQfE8ZuteARFXGb+Uo8NN/VcYiRgUj
163  MiwsXjrMYPgtSYHGvIEsKSlTsHlcyrVse8h5OkdMMsqq5WcilJSFImP3O9LKAVyorZKscgz4
164  CLCSC9U7BU+X0Mbl5LScuYauPYCIPYDm/qiWLOqiyJJZ2zCL4Ls20zjZVqpNirMGnxZRgwEn
165  tpAoBC2r97SDTYaUVenxi+lR9VdZ+ClTFnls3ijR2BuKkp/tj78niH4BeXfrQCt5PBGwerfY
166  +vfAjp7CC6mkILt+UCkjwt45W5Ho//qnef1gPD15Jtrph7qWg9F50F9yESxrOm8x3VA3DNW5
167  WCD2qNft7ELoXFk3TcIT3uyFjDxuIIKYEP6dLheA481b8JShyVZgZQv94IqPVCWnCdn5ezat
168  qu5ZOgtaV32uEob/Doh+EQyIaaGsby7lCsiYTa7lcL34FBw0jUWi9TX/mD0nY2ucV0T8cApx
169  KzN2DfGhE4wpELYp+HEhqREJfrbhq88bs7ENEN+iuN2+yEsx3woxfhMUUT5lPNHiX3la3s2J
170  Ad8Nn4Y+2Yo0Jzzs7P2YP3LKBVNYjIfbyFpiwarcQFUGQ24eLldthcmjIBNm6hPPHUj2xlUh
171  EupuSKOcre8pSySg1P8heww6i9q9ESTf6+zbQr4V7YB5XCebBxP7QislRfQh9+Ix3+zvhn1z
172  tGDEHdl9EXpL06ez3/ny994hBjwFgyWyUYILGyLj74YxWiwjyxlhH10VbROPvEs+3+K2NtCL
173  0SoK+YIATXcYVyYvkerDQUUWXvbN4mOCjtHhbGNHU7vDl83AXdtzgU7xBmnTzVrgunbyZoVw
174  r+QOic7rMycvH2CsCYPzBaWAFqncXY09hZIIMiUy2cNc+gbTms8qBDLoASP7IBk5IvLrqIqU
175  n0zRsRND/ODrNtLm1QE0erpv+E05gm/QbY1yfVHTAvEbSyie1AIU5bb0krMHdtN1y6Wh57RQ
176  0AKCWUA4dIb9BpHiJaoZO1rEu916/PrM6sgfykfOVJx3RfIVYpYpVhiK0/C55jB4nFTKsUn4
177  5HRnLhfmRiXowRZBl+WnAjYbFTUjrfCBFYLQiiligilJONVB37gtR3z0oRuBDZ+hsX+hyJNJ
178  N16LD9qalJi/JZT4Ogyxp8oTCICgbbs4YbXc75/cxcrW4r9t+G2VJwNGhKq+vFDs+60rO2/O
179  eb5CnXEICvgFB9oZoDesepD/Yf4tde0ohCLVGXm8vI8Z3qSyg5woFatALntpBTbN0PLFni0W
180  YILKSy66pGsWy6UzVKeJOp7Og7HD4naoqePmkggPbbcO9p7KC8XOa2bAAw74w2fvLXMyiQgU
181  7VWHRXxFJosDaooxzDOKE4oxxDEDnQFy+UEA+IDUT3MDPRYfHmGr/h6C3fQ609N9wTKAhhWO
182  ciHGR/Nh8TXcKaNT6JKmlNcClQSHwVPB5sG4agCxi6ha+7xRAw6qhx5NjpQvctvCUHM6Sgfa
183  zqSDpXRSu4Rir0T/B96ahGFtTqhkXc9UfRAEx8AMvhyDWItCHBU7r+SSUCLZ9ltxDvY2+dZt
184  gZVHqjIUDynRUWKsv+W9/pCZqp2Gwzsli2sFjDPqdFXLOsbA2pF/qmoJywfU9rjqT4QtYUSH
185  B+Vgl7t8KXsEI6Ss06K+pPKdFeO6qGjfDi6cYmzReDLMyUhFzSiw8YCmQKvl8TSfJd+K0QH9
186  b+zkpVOTBHItM6grRjcKGuAJ/CH9GrGHEvKlLbARgxYk9C0c9VnmPR3WJMTJBBZKyBhwJA8d
187  x8BLVHOdW1Avh5aVs1edSGam2xur4Lc7fkzPwAi4FKxfhefehfId/ZaUZ4WGRMiStqZp6yUl
188  EvGmy7l0fzZDUJyKSwXa9XYF9sAKHMTS6sOkDqy6aoSE7Jt2Qlff3VbpAwYUbexgjkIw/aI7
189  H9ELxDMScp7dQnMxhgTzKKRsBazj7XQuMm0WdXszTSa6l01hMIwe3KavIpEzW6qc/tz3n7QL
190  rfLX2xR5ibdK5vn/P2fLi/eEhfm0iNS3gDwzF28Ng5bX17hvtF/AARZh2eNmd979m5Fr/YSl
191  T3D+PjeQKpBb/BqtY+zdxgQU00XB9+125YDktHpP38FXiE54oEG3NPG7kbxOXcZOQVb1DuRo
192  zxaM0Yn5socl0MJQnMLdT2X8Xr4NDwE3CwFQAsGjOq/P1cSl4qJgayWYZWOfNVZtvNADaL2J
193  JhJXl+xUshp1M4uf6O9Nq/D3HfltoESbjNT73sMfAySLvFjDFXk98zdFKCVVXp9dLFH8Njsh
194  kvwmOaTqcuXeDnEfcjLcBI7XIwo/ZiMCdZStlenWLEoE6deXOsawqK2iRkMp2SIKtmK5rnDR
195  JqM0fCvOC3cfo4d1u4QLWiF87o7yDk/uN/vwvRwg665Z2lTT9AGSOq6mbcTgNiHTDOiAVYbF
196  XLA9MsDlzduX3MFFlWoeWMJu4cTEnHVcUOqidQz5zyaZqHxf64nTbLfzuP0h4ChZakGTOWbH
197  u388wWHxSxR8QsxZeuQlpnMpT83pka/+yBQWzjFPu0ckaE7IIKojZChrM4MsOSew4qt8S2Xh
198  Zu/+gF+pVAeLyC0VNW2B0WzQg1POHPK7tQJZqmxRpVOT+YNC+aT/4GC+ECaPGaMDc4pN0yp/
199  hcgQvFv4F1/Unm3vEXRUbsnl7fjY7K6BKIzW+NJQU4cUSCFLhsOTev8igDPKMlXogdctfSgU
200  5B3wtcjnpqhzTZHhkjSmL4p/W6lwKaUoCEZqp7LO8YhRzHbkNckToTaqUDmaKaUo/7aDg7lI
201  iP7unWb81kCFbpGXaOkQfL77/HIQH231yNxCnF7apynRJF/mFKX7GEEOZIubjBswk31ZZttl
202  iJpxil94c/r10iNorc3PmikocCXagLMO0STKvZC/nR4u8EYGZYuSzGUiY1n1SL4ectoHhBY0
203  ElPOAS37ONH3ALlzwO2+7UVPmn1Q5xLZq+oKv1Qhx25PetHn33A4bKW3ywmdJiM+xCSaCG1h
204  cDXlcF/zUScgaLszB0lcaaxDonbjxonzVW6fPzbdtiSShIGMTnP2zjfkNnMmz9XcKrlCwlhj
205  fuDbJwhKVInoOudTzvxy4+pXY0uS1paZdf6Grc/X0Br3507zNCSKSmPFUSbGR091+bpRjbnL
206  +ClC8GOY9utfufSQe0iKs9wRa52zMz6wz7B7jM1NIA3k+O4uqlCG1xv1OpsC/d9WBJxjcg9T
207  CIUBisdeGznol+a/nRujWJ2pbF5t3N14Z2WGQJY/Aqc9gvcxFVyJW6Hn8T9RYiQE9pDcUX+u
208  zHVI6ItBCLz+Uu3ZpTwS6+rRiryTCQQIps1LVVmyiAZ6Srt2fqXH4TojmvNTQNqrMSVd6Bw6
209  sx37OAFM2kXI/PfLQ7VrXCtWxaJ50dTwxalepPXkM+n78Z6pSSjPJS+i15V9/fHhmKLS9wkt
210  EPJi6sWFKDlP5BEkuZbz/rDnrJfp4fJ2JThpDqX2VnR5FVUhLqEhQINB5AMMfHJ+ctyD+PJ0
211  uop11zP3lJ/GGksJxZYenDuwiE6XyzTiAMR+/kGSDElxjO+Ik0KNidg07Mf1raqBTdAhwQFu
212  GiQy/hGkUpP1CBWfG7uzuLGLwerkKa9egb8RRcR7YRokMoOdrZrEBlLVjPax6YAQPvz+rUNs
213  +GLBD24efO40WdWYWKfSdBD1S2r+F9ZUt6oO/D7SifoFKfLLXNAxUfZkn4wye66TuAUDtcMi
214  wxRmU7UpZYGTmFnNi5ZcEhm+JFWMUbnMlFfEctS3PinOUBFDk2cA+RZ7Eo94/MITqdaExwoN
215  NjUmj4ulVDts4GgyiJ05p2XIks9xlMdxE5tSdu8672rAbV1uzbb6xChWC18T8uBNfxEjXeer
216  Go3kZGC+cr2GHK8m5djzkypS0ElSn9pt24DQ3QhdHj6Zom7QX7bvomZPon4vtvNIJogGjGGE
217  Ry7plAPpwx9g8JdYTV8po2WUjcNKnHxa2/73X+oDhNgn431ou5lf8zrfi+N7ZhLioWaa1Baz
218  rada69sarTsgbn3iSVWu/va0HlhUBqY+8WUYQfhqtom+Jx/vjMW+LqYjXBS1/1Z8vAxxEWQs
219  SGedIV4jFLKARNvY1xjHralgDCkD22RYl7DhVE1tWGXp/OUl6ApOKvNbo+GcQRzk7c39WxOz
220  mPecdlfZ/TBN7YbGmjH0tHZ06Ec+PX70nLDpfkBCRPShoN7zWexxOxJnFP5HcYVYhTOFptSa
221  l9n4BdoQgLzr1PTiLrk3fUGh+K1bsWV50BZ9cxYMz93iL+ksXDKIn2VzGpspU3tXmSg3P+LL
222  pt4wI9PWtWhjYZnXyFXhBA8hUrY95gUfiAqoOqgSYm+uVujulAkKDhTVpXKjutJvqHdayoG+
223  yjDTH8BO/d3LbqY5+jXWrdzgIJ6/1GISMILwZQ59w5M5yWXaK96FhFhSnIc3SBT6s9tuLLzo
224  wEbUPnwBoVbj/YigkzX5NYA91nPrVU6YOpWWTgrp3EsSh1+RodOQ5Eg+asgVu5sVRIJ6Ljjq
225  dMHCwjy8Uc7GSLt0iiZYwwwogIJ5RX5KDnHdpL+S4aWikN679Tz90ESveTk5ymGuV8p6MI3d
226  OLxfawX3qSNgZ39b1DcMoyMC26oXhszqyoZTxpiGHJEcq/AX7LaQEJq7c2e0zFdxWY4JAiOO
227  /dax4XJFHT3zSSCNf9Jwyi73PXYN16dNbIWhuzIgdI0a5sKVkrZGWd/rUfJi3XYXu8B8Ij1k
228  S3pgXiEVDEaP4VpbmvRP1vp3vMzDBRKGWfaBfFLu88Uhp0fiNtjhjYBhMMhh1jP6daKY4Xlt
229  9PbOlIUD3O5DnkU1NU+MsCKrGGt0TduGcnNjHpkGRFVyfqM0Gb0kHPA57f9p4iygNiLhMiPo
230  mXetwfKdHnOOEE5ge4R0kqwLQk4A5LDZOeEQDqfRrPPde4ZmPcERj7tBFvFczFX6w8S/HhSF
231  6VR7rSRB3Zx5r7qqNFGQzWiJdNuFCM5cvSg4MCNmnN3flEubEAcK7m2tv9Qk3nXzY6ClfmiZ
232  9p5QjZpsAx+gUL7fymf14njW3CxQaHkaMD6/+5aWbXZhHM983c/dI0KXQCApUiymH27aSHTC
233  p0YvxIjC5xE0YuwcHUK4ckmHtykIX36a+n31BM86cU85P0J7sGJ4x8JeSu5tGjnnTDjVaeiH
234  RlcU95NQ2ViM8exNfFehdLJsyB9sfr3C1BQMxQFnsQdSTXxER0OAwh34PFCTt/vVkmDobQNe
235  vz6FWnJM0udqFJgX9ZBGFcSODuvswCxd9Lfhlh3sCPDTuDV7jpoi2pzCQWI4ojb1urNCYjPc
236  WlS3V9d0KtwtqzpN87EcOrdXue25KA0bXxhjYNFM4jwT+BsWeIIZEXYhq4gkRoWUPP4emzg/
237  O4EQ6V+daq4ButDGsWE+SnljnAYMWo9STXSjLroe9IILUHWyVtYSKMnLaCvITbL/y+3uHikT
238  Znl/OAKjBl5hupwaf+IYMEkrLieilcKhO03MWrRsA9bFdyTIEMvqShGTimZsOQQs7gPvqGF6
239  +OiUiieVf2ZaXoZf4xdYGehZu2AFQwUu+sDgXVzfl9xMXp9+uxT0vjbIcbk6MiB7tlzaEI2m
240  jkmxjQDSlUIk7MXotxIZRIsRLw+tJLZd5a1BSviw1zfknGU6Yn7ww1+q4RjAS2Ro3IjlYzOA
241  0CpeAycLmnpeCDqZGEAZdIGuEruMnASIHES8qxh9GuRe0jQ3pMgTu/V0o5qYM3HyEBfeKbqD
242  DqeuBY91QavckuXp5kjp5oV41S6Nzyi3YovnBa2dvDPooeh/kjgWdRRThXraH9Ye34k/vtQm
243  Tndd1f8spQQUaUlX+Ny4eW9C3YiE721TpBqiaMGbb9gGGPfoIwjlDhBjXHNNcA0dwy1VPBGq
244  S4BBFmPTIcj/4eMiL+Ruca83wHdQEcLPPW+WWkXcP1vEbcB/QgIF+FO04CPln5OW/xukpkSC
245  9kAFUZoyUaeGxhUF0T7ANAYJ5W9+7b/eI3Wkl9geD490/6/xdWGUVquPGjLHMBXQGtwZ97CP
246  /ZQjwWKt1cQH3YH8qNR68gu3X0hUjfTgHW3vam0ISRl6hk8mkvt7Va6UyYSoTecT2XH1cDoJ
247  RR6sJXb22hDlrI0dPQQP1nzJ/jRBGEXm1qzcVvW50R9IqKtRr2cfEvGZXuA4jWOblRWQQxXx
248  1Ysd6ktI+ImZkzo1e7LyGecdWMjzycjShjgC0I/nirr6pNSkl6N99YHqPPGUuwJ+wdBHPNtV
249  9uffIRm1qWwIidSA1GtFEW9ZT3QJab/AyCbuDikj78cDoShtR1NdDmgjkXYsVxkwXf/ZmFc7
250  WdVJ2B6DyeboCMdZxWnQBzDZOmGqM+GJcQwCcWbLgnA5OPr1Gm2cYTycrAgW/KF33oKrHOfq
251  TnvGtsRt0dS4e3veg/a4DvJyDwbOdBqATrrxVGj0EE5xX7rElWKoyB2DKRbwib2LGrO0I+1C
252  qqr4uIH5cD8NVHnJH7FRWoOucwqv8jp3RDfBX+q9Y2Hpw0deseW+xftAvPF+g31dUwVnOBWF
253  VmppvZ3RH52Ix8Q7VskdRsZ/AyisZyhckulXHjpYCDqj4f0NtsOeDoAXxnL+BhfFDZ5CYVvd
254  h65yxriDrRrdnCHyUj47yj3t1W6mrI6exec5h4LM9XyKc1c97mMV2d+pUykpMVntNyUIfVsI
255  4bq6hShX7eGV+uZejtePQ2Co9IW77zcchvTvlrg5cxJQpJDSyiezt7U6M+fZxwl1sXNU7HlC
256  iNoz0whv738+pvGEFj/1yxf/ahDQy7kHj+GDFsRD/6lgW1OXXAXd9zFgKhCmr3ukI3mRyqg4
257  sOhZe2kEWjI4GIkCL3+LBjOS7skNyyECJ4NuVLmXIeEC+zWEmUd1snU8QC1TAeysIMeVvYC8
258  KQZn+FQFnt28oUt4ZpwNCHo2A9zrWzPIOU7m+RW85gzwe6CdLqbKzdxmgPunDkW0Oujv4gA8
259  0B4bg9A2YUfe2XzQQLKAC+jufLUF+DqBzZVH2zzz/cSZO23papJUGkoHnhgE2swV4nJpALOQ
260  GIlGahtisSOySKr/bVJd5joWtW2fqEljn2Iny5HX161tBkttXOhQb3cxwMgeqo3HYfQ2ymEh
261  13tJVtFjnuSwGdt9nSCqumK5TNgJ5kRGflbMYhfUns33ArYVMiRZcWdVDYdQDWCKU7wNrk0K
262  ipcnmMFHb+Nk9hJJFrGfi84obzyP8KNV7VN45ceXfmezZQrtSwWgcUw+WgLX8Ut3S8Nk28n1
263  r+UfWPFcBbb6BcV0+fa442Nw/UfgAJSECDJgNU/UAISBg9T8XN4epHmAYvX+02ujk60IPc1A
264  ZBziZNlA5dHrVm8De8SQmYeyBkFlEhMPv7mqruktM+WzGUfeQyeywXjWgRuGP2L6cM4NUfct
265  jFItCIYnLRlWIfIO835IRBnnntG0pz1Wvl4wcPBaDyduTZY3KwgZ01Ff2s4wdEEhAMDch3rH
266  nRexbT09ixBAhY2ZBNE+tus2vUobbXP4GqHjFD6rw6J1274SPsU0+ABlvXxB7kQhPl3zkGz2
267  yWJUggtTl4pD3vRq7/ovcigvDEeC+BHqJIa7y34JppiUMxHOAQiYOJz+FFIW+RTHmNAkxE/w
268  HyzPF1NzOjfEu04dIwSh3aCNGSkPm4nAMpqkyrgt8KUlhKTkfjc+tPFgN8Wo4Vr/S62CYUdY
269  34EqSYeIy0b9DOCP3/fuuF7ePA3NUuRj33hKNEZKO88GZxlCa2tlwQfoVJ8LSDuJU0dgEOBs
270  2E1TvuInrzJchtAkfiCmwPzh1QH76k0Uw58xniRVzgIR1gnb47eTXG3bvGzUXQ59s52QMuEt
271  8L38CkpSaUlW2jFDs9QptBtKnVwKJsODXDx/tx59UclCjGUVduQw9sDIGy6xGG9Uutcf4kvi
272  H9F/7JjoO8owFYGQiHzfNuYN13JkZzfXhvg35R77jz9eOLXHSL0TcVWvJk7LOyaeCI8ZfSjV
273  neTSkm9iZAhXWtiWhIol/pDWGdBef5yLawMlzJbsILqjzKiSwrsUkOOg9xThnIYQIcYcfgkR
274  1haYX6rwSHTiFp1JPwf4NWCimI39uSdakUIKL/BE7tl2pWsuYFQnxc8Bure0ydjKyyPLuhwo
275  z/8BXccImiSPe/5PO9Ot6uWVR/507WXtj1j743T4tJGDVRSEEgofT+lR7Ma0nNM42ZmBIVpv
276  iZhnlsTSKiIK76x4FzVHuVGpVSxmoN9G4OdR9gPhjcxisw3Mzoqibn1UDn1opoMnZT90eYiy
277  lZx99dKKS1fj7Ds0YJHFw67x9oRfbYgEoc6NiOMLThNL+/BQ157meerjoEwBvUJmtDO596Bt
278  BhHB6bM8DMn24xf6ZRP+S/tdYyWtb0aPyQI3Xyw4NH/TuH5kOF83zXl8k+BwTDsLhBwsL/Wf
279  Pv/v7UJbJJa7sRPWHXP1AB9wnmcCmyRN6tcBDIFOAhgnHvIB22iWWRtgiHZOVudKJsKUhDJ9
280  HWh1fkXgXhFoEwmWq4dnIrNDJT9ECgxQoL4k3FhUBwoW2t/SZCMFUKrjCoGM975K1649Jo4s
281  jB4GqnJyS37VQJobN4mlZ4Xbtk7cdNZZvhn0Iqru/k/sbRC4D1UdMBSc+kb+6s3NEda0U0IK
282  oTMhRbfbZfquDQo5CLi/FwknbdQnZZea+DSwyd58oQNWpz01sz5zDHLOS4FTD1HME2zKCzMj
283  hIbR+3HzbmVjZaCr+tPpyk2KpTSzOjfj7+n5l5wFEiBF+54UaaRk4c1Imec+OcjxLwk/o3oO
284  zH/hqwVsi0lF9C+g23oMsj7mfpeWMhmnzd9YZaZ1FIaY001R1v9QhhavmtNdn9ZTtJvHRTON
285  3Wzy41EhvtMwH3Te0MMX2pFL2s0yi8vg+TfLjBjHODU/Vqonlk7+Zt+czaelQrOrb/O1Ffcb
286  r0Cw4wKGt4WWt0v9oaGLSV8MrpPLyvferEQpb3654/FY77z5ZXibJLWb9ivR7duwkA/hoCx8
287  N+jiMZfXX0sL4DbxH6j3WADT5yokNvwLKKyXUW+00LQ2BQRwggqxL1NGAO+l7DRp3pvFU/cI
288  p0Xz11pPg1CG6YxFvo0cCJwPTquG+otG8Sp7Gkd9bVGvAdWip1WEP/iS6wXqKBTZcS+Tyn06
289  PPxo28WRIWbzbvfUBKEPBFvMUW7tCRUrBbQ68wtV7jopWQIO7FfWyE0u3T/SOF9Om98nxdJ4
290  IHtqvY85w8rKlfhQeGQ5jP/DLxY9R+KIwmfDmGK8+Lgddj/6L9r0cTM8/ztf9LoVvGK8LTdS
291  ujc69iLPFl65+QrJ2OzXtsstdH90/IsbLs6q9zgTRV5aMQMmxHpIEtSGPBeX0nu18Z7Bao2h
292  a166AlaIjOeWe3v9vVM9hpXU7QP+2YGLM/w/PwMZD1CqAgZcimkm+3IDIG49y5AMJaFmcs7Z
293  AlAK4I3sOBrEOKB+F+xrEDfyGi6yvNzEk02h/cANrprZHEs7ofDqPHL5p6Q8Eq7NOw7ZhTt4
294  oZWPQ9t5FQ8kS/JR60nJgJcTBpazXNTha50l/OFuGku5BxKBXXzThhQt1T9FuIof7Ccxiqoy
295  Wjac3dHgmIqKbp59bIIDsUvBzgOtvTH4FOfzxjGY9wP0F8SEA1+Y72+7L2EWuFyDP+qHQcfD
296  zFK6uOsXTFG3b5B3X1DTs226fDzsbaRlp7f4ZZBuFzPW+IvZFFnthq1h7H/CkCAtoaMait8H
297  tylTHV2kMUglZYFCw8WWuQHDY0CXHaN977YDhvX7ewqS0BEPMHcCwP3H6FJW3smEOBiwa+Uz
298  AIs8xle9K/isCnH9j64v4v8eQAplZwFKJnpL5jPAUiyqrwVi6h8TG+HCpzJarC4P4tEAA7sQ
299  o3pNiOx8ESPZreDBD4XbWQFRMV2WMlwgjBVj1MZFbUfVOxIpa7s6jSwl2HaSd2rGIpJiQKkT
300  hhDUCHI3jLgtrI2UU0OwpXZWgAKZ7UbvVwOsiiJ8LALimuax90pORWOZ5dgMVYYFK0Y95mqp
301  ktRPXJTKxwmrCTbVFwAFYKTWVVQ4v/ifrmFUfEjk8hMZV0TU3rJG8VhqsfKyNeh26bQTQ+X6
302  YxLixPUleZzENmP5gfKxcD/cdAnQmke1HZTWQd3Pi5lIKvUbeOthxTFN8G+wYKP452yoc6X+
303  7lGR0UwYIWfF5KrJBuMXe/mdrPriAtqQlI/04mTaW2hpXEGdfI29D/YFCpxvm2w22p+DFGxL
304  LMAg9fnhMIyd2Jp1FgZyh30tXngRQCaNck8LDZxlBg0OPc2354RopaXJypaKcFWiEOD0th59
305  9brTms/ltAkx9ZsyXptyhuSdQw/T7zjEZoNIbpGnc6Pp5FL0RnHlvVo1AW+b9FgLDKBQEMwg
306  L27Q4aPsjTDg39agkbyOCpiAwhP3VjKAw6CVwUpK0lAs0jADvVXtz+5gmW2FASb/ggEMExBI
307  l9vIw5MEnSb0b12WuP20l5gVggtAuxACPCWYhQVM5GKW+7HeDg/mdIsQmn7Z5T6HnQjUbL8t
308  LBaI599gYf6+Ar2QwMXTMgx+ucfhKWLxbp6pd5rXhZ/oM06Fndyc8mXMKmCm4EXTCJ14HhH1
309  Hnk3lbW4hl5AbyDY3rg+OQQGUDxJH/jMKxpGHVpwrcx9mayp4tcAEHZr7czU2hrBB3rlLu9z
310  ZmzTSKQepAq3uFXbgKXegMB61Mti8JGVeNHuazwnUhMb4m8gWPLiZVZXMzKmWOUxEp1pn8GF
311  CEC7106L67iYJq8eG0PAgp1hcnt/LRKuc3DhTxOd+qJiEv5K9EeJzdd4YFmd3dpgPVo6xhRM
312  cUvMDn0GAs1ZRWWP4tdyZM7r1rD8csmiqDNgJbsG0aWYznYQ3mnFCBB7JYltCYguSRlQHief
313  rv2Ino4WhIYwtLDd74icjjHKSX742JMaOCUvcBYJSnLKY62BpBGeN2AFoTyZgjYRM4836WbN
314  zYBO175PX7x7zjSgSntAelfcqCBy9ANgoRqqw9pTrih7GP4FC+0IPzdM61qWLkAN1QjL3Y9q
315  5iIW24rjiJoxirFU+bl+/hMggf1/knPr/B+6c5uiJTDgOgpi75vDTMOxY5UCGlVy0adUFL9M
316  93NcUgF+Mun2sF87TZ14rpNMQ1yZ2GTkLwszlz2BZkCiJ77K6JG0YocbfAo6Tj2+b63NXDaG
317  Y2RPpbIfSgmDya+B9EKWLKxH318SK1cFaKsx84ZtyykZveB+zpcjAhixVsE8xlyyJ5tdlQzk
318  t/yDY6KW4GQSstMvS2eW4CArtr8qYiOv4IhKVHAXKyJVt76ypSF2Quq9vrG999UCTRyVme4s
319  5agMcXQUA1c9lGJX4Hgw2/0wN9mjgfyzj7pdVGiP4+kO0FUjMlnsK3WB6znRp1hUT+5X3yFR
320  S1yh84q3MZNjvLv2sPrudP3EAKopg9PdK/QvUHoAVpua3hSX+tQBaYZIUqotVHmn4Oo2P3Eh
321  Dei91OXWCXNhaDQP4s49c81qpCCjE9xAoC0FpYdOgUT+jo2zpSlj5pzscVNhvaP1jQkfRy2A
322  gg5pLrqkr1dKbdJ/sfS7qmtdwBpRSENb7oPyk09k4nJBc9Y2D+WTOLsp/LIJBQ+AiLsXQRem
323  rxt4VlkvWR42saHSgfOEwjsh3e5FI8XuBs6hgcUCrbKFGp8j9j186w7xaS9kwXi/4f7hlFKj
324  hEefzPPHUWbUewYGTZpEq+Datg+Az6ruP9VC0lCxHyw5ngHZmQrD7isiM9kARILby1HP9RNJ
325  oP8yOQHFhzSJRTrr6le3uFk8jPrpzfQR0LbsFBOh3RREZ+yvxrAEopJdg5SXN+a4v5XxsFni
326  GQveAcJ6iInRMYdluOUun24ash2PBBjC3U51gZfTMDNvWkLGCuOX/IRvmTmUVZUkxC2S3yuD
327  5kirsOepPFaxmR86qTch+lrN+p8r1R640yw1LeQmJo2tDIBbMSstboyTSkSJcEQYAZFfKT8t
328  pKxZfizg4P6mtq08CGNetQAY3bbfCE9rmjo4SeXpkHyTQiLNTbbxH/+9APM27GkD5S/2ZlJ8
329  Y2ouV8t/JAai9ErvNUmJNOz9MFHPxiEzNr/uSTDMeyo1LKAzGBBIvSoLKSG/1FbcHUV3X7qo
330  JwDcEkoAyS7D57xoNB9wrZ1dxAoemg21VIdgab/zYOLbm+ss/gd8370tjIbENZ/eQ5nwOJaC
331  XdxAgJ5KZITBoNx8OxYkh7NddU803J9UGzikZLQyjHx53vTL8CO3fkSeIBV+i+IL+uVNEuPk
332  O/Epc8lR/46bUtDGcCv9TXJ+nA6dck0cBJ9Hz5wOU7xEJsFOjhdwL10aK8SFex6LMTB3zZBu
333  0BLkkXp7t6mxoj4ZN7bfH9hiPE9LjxYUnLR5b+X/rJ7TFsrZMz5dsBGYISXi6HdbZVM77DOH
334  /tR5i8EJ/nsNZAuE4MWqexrqzP7MeYtl5RPTjd0cAJfSi4v3MYkQQkJcWaON1kDcYLfyi8z1
335  D3052LnTUEB1piRh1Azso2rXdNNPtKOuaGNrQSZH2UiaqgKacvVmjgiaHikTZp4YObEnNTyO
336  697amvRUY6HuLo0bQ3zWuj0rVu2/9EROr+9U3+A3OLFNpCxwz0ZySmX/TxC3hVAJMg7TaU5A
337  JmE+6wVrECNVssrNWnSYqcctuoloySUL1bwhIziPG6RVJmok9ocjA+RVJ4LscbOaWQQG9Wgk
338  O9vS+kI5bcNrLL6eJ4immv/QNfqUbv/TwCi6ZRv8H31l2mVbPekq/4EWx87kRiwNNCGJszcm
339  NLhEamWZCd7DGHMGgDkWOrYgoqg3d6YDk2hoN7Qquod70rN2aoHN5MA5WSTDUOaUjaqgskDY
340  CxhKCTfim+EhWIyA7kyF3vdYxT2p3oxisIfAHxLWlV4v9jpD645wyTc2Xma7IKiZEiX90ujt
341  IZn9FUHmVh87+tjCmTyR8uMT5G+tjFzj6HXvvaCQQUHXd/0WpNA/L5bgO1z/GVqjjGVxMiJk
342  o27AgxvqeICnvWpTpCTiaIFtVH0ljJf9iWD0ZbEewMMsyWnabR+UBzca834G6O8SlIzqhf6A
343  MT8Ccd25604c9GcnekrBu0oSpNU+4xlyOXzMq9xvoaZBIYSH3j6UvP2gXq8tOdZW+TVTJPFf
344  UDqJnv1rkbgaFB2B4IqXnbOWBChYEBzA+GgL/jr0sV2R9XvSQ+c/4unpnXp5vEftxUHS4A8o
345  YFX/ysQdXGoa3plAj9nV5EdY0lEO0Xlz5jGbI5ZpGQg3/svgvhUSSchsCa8s0GDWhxfnVb40
346  KUiTcvU3GCWP8nl7ILvwDAsWP8Xes4s9MuEa+mCAGHE8e3uUkC6UsQ29+Yq/oatZW4B7XIxi
347  MB7Q6hdbFGzIRi/QD8HedHCjF6YyLjKfK4nPlMlkm74l5pDljW/89S2RMzCcjFHCp8cNH5vG
348  959/ezHIEE/I3QyJPkHbbbLa/tGBCVHT0RmHAhnCQqGEBnXaUHW0bUMZfUwPjbID77EULNqu
349  WuWW7hT+ej9VE/+iPdyq49NiDBaNpNJE+gQujTfwCGQHd5qS0i9zT0+QgdTXLY5ghPegaQxV
350  J2ttC2g7+d4NuSNg6MLwGZCninKV53EE8j5VHpniDW/X4bauhprvQ6A5CKzly7wjnssd5xNE
351  5Vx8/P6EuoCw6smsplAv4tEXShvlcYxSn9HUPCqTojTet989yf+Gx2S8puHaqV718nmDlA68
352  tbYFibHhHDI31vawH0miiChJyAJCKSr4TcoDHduP6I2xsGBN5nyVs7MGk32ZFVrGKI7TTQtK
353  u4AO3iEXcst8lDIWZ7GERo18R6btaPXYYQsfFdWXYcBFoJetJ69RKseif8YdHh/rYWgxyZRA
354  BkcbxYTR8JFWp1tPJjyqCtdQBjiBCxRAx35Bs4aYBnEITHw86SUmYJ3Dc5mb8ZQ6JvStXj54
355  NkNnddVQ/8aPF7qJFubnZmBhzZDh1X+K0j3QONjOxu0c6+EdwU99spOjcLSdTWczAHENruYJ
356  56Z8v268DnALQ8dhpLnDopDNuADbBM8E922Oz6mPIMZyKGV79c/Ip7PrqBBjXa7R3CULDI8Q
357  HDLzL37kUqrTGPevY8Lpim1T5b/T79+WGBcbFp6af2kyl3TlwBQawIAs31yDXl95zZqwV2iE
358  fPBitoymgnVZgPFHQ2XNczmuXXbmVhEOdiXFM0YiJegbBlbyL3FX5vHtiyMtwUfD1CN3q2PR
359  0cy5Fj5ijhoD98YBLYI76xUrRyIOBnx1PJZM2+f2nrZMadjpQJnrR2/jZPaQVokSPq9H16Sj
360  ziOxTJ8xTfHFhc3XwDJDZaqhBLYSw25Q2UDQLBgLnilTCjn3rrDS8hXPyD0KX0fqULD607Aj
361  laymaLfGE1h9+mG104oDvgWhNm76aoVp5y14wSWhVYzOPEy+4VGcDRBVx86YGBSauzSipdqh
362  uWKJ2irMCDN+9vwM/0KrDdd4bBkpmfps8GeFuf3OWGdgdiHkRlq+sZjdjcWPNS0mMy7TYaNa
363  3OY6rbUShhCWMAvv3zD+3nG+HJVeN+S/cCWfmUkdP+siOxeo820GejRO7u5Y+ACYh9ji37uC
364  0n8fr9llyhsLa6TiDF7DmJZT8jYM4bKU6BsNOKMVk2fKV4etQsiYXHKKeSPJ0bNYXD6cWcyU
365  huHBFHPDySxqPcRHmpZtmv5Pf1pj2gxJ9ObZyx5w6iJ1qUWlJnWAhVQUkTznr0usAc5SdlzX
366  0kbW5THCfC10GhTS1VSbGIXIOj7tki4y/SNfeP1XhuCNYVh53pQmhS8Y7OGjj6LUqeJfNl+C
367  MW/tsUReakahZiNNxW8CEEpqIfrJe2fIyMw8z04/vAZ7FfH4vFiWIAgr3XvNIezNYDg8AEWK
368  Q3Ie0+SCqs8YtgYkYXJXJeMPnutWwZIdEGfQylCMuH79TcXZpQ4lo0UpVe5CYaqz1ZzxYdYz
369  IoIhJWw9fk33vH8Vwk8ccw6UmbmNoFdA2bqDvcnfasyDDn5ejo5ekxb9gsVX1bAWFOgwDA+C
370  Hyh3Mo+ByEjRYiz3Hl4fc8lldROB4PJYgINUx+jo8JnJ9j8eJ5dw9vmZ6Ava7BxF0vfufJRB
371  81gfzVB4fwsUv6hBQhPuWoz52gsTOcT6n8RPTu+U0yz0mekIj2GUH3RXDWVKd55bOKB9JQA5
372  j+JmlTn72UKiVjsLHCou790WH/NMEiXlMODXhIhdpwjTGwjur1hoUKTbBKo+BJTIYYcG0/0K
373  Mh7MEISQ6yaEg21+uBS1t/hqCKUI+SQAzhOyx3El94Ps/wqmw4dN4FljBVZ0XF8poDk0ysnC
374  bXVHIlndkavRQvhU+oE28v/w8UeTEKjxTozvAydr98RKSWcLxfai7qIgsyc6hVRJUr3nWTuO
375  1AaHOva/ljPHLj4U9L1UpWkiTu/lUc69uqE18Rjh154QwXJy3BoR74xVhN7rtkVeen6LgMAq
376  WRa9+vzpkXneikrGZZVje1Qmh3QkQYKZBt8s+aSAQRUI7Ci1uWXL2XzXUcUZU3sGgrtvn7T1
377  hgcsSKK39zZ1beB1OBmF0ABHMO3P8yVEIB5QWNnLio6Ee6t6q5VKy4SA6lXmQPQre0b19Slt
378  FQXp3y+q4kjLnOsZHou5Rz88BB7sIkNeVzfiSey8r04z0mJvqkWUma2uZlm3tMffzvI3wQHN
379  hUWWcZWwJ7xdBgb/FEyiDSoMBX1xj521TrX7AcWZlg==
380  
381  /

Package body created.

SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> 
SQL> -- Install base capability and DD translation definitions.
SQL> -- These are required at all times for reference by the kernel
SQL> -- and by dbms_hs functions.
SQL> 
SQL> begin
  2  /*-------------------------------*/
  3  /*  Base capability definitions  */
  4  /*-------------------------------*/
  5  
  6    dbms_hs.replace_base_caps(1, 1, 'op1 > op2');
  7    dbms_hs.replace_base_caps(2, 2, 'op1 < op2');
  8    dbms_hs.replace_base_caps(3, 3, 'op1 >= op2');
  9    dbms_hs.replace_base_caps(4, 4, 'op1 <= op2');
 10    dbms_hs.replace_base_caps(5, 5, 'op1 = op2');
 11    dbms_hs.replace_base_caps(6, 6, 'op1 <> op2');
 12    dbms_hs.replace_base_caps(7, 7, 'INTERSECT');
 13    dbms_hs.replace_base_caps(8, 8, 'UNION');
 14    dbms_hs.replace_base_caps(9, 9, 'MINUS');
 15    dbms_hs.replace_base_caps(10, 10, 'op1 + op2 (arithmetic)');
 16    dbms_hs.replace_base_caps(11, 11, 'op1 - op2 (arithmetic)');
 17    dbms_hs.replace_base_caps(12, 12, 'op1 * op2 (arithmetic)');
 18    dbms_hs.replace_base_caps(13, 13, 'op1 / op2 (arithmetic)');
 19    dbms_hs.replace_base_caps(14, 14, '-op1 (arithmetic)');
 20    dbms_hs.replace_base_caps(15, 15, 'AVG(op1)');
 21    dbms_hs.replace_base_caps(16, 16, 'AVG(op1, op2)');
 22    dbms_hs.replace_base_caps(17, 17, 'SUM(op1)');
 23    dbms_hs.replace_base_caps(18, 18, 'SUM(op1, op2)');
 24    dbms_hs.replace_base_caps(19, 19, 'COUNT(op1)');
 25    dbms_hs.replace_base_caps(20, 20, 'COUNT(op1, op2)');
 26    dbms_hs.replace_base_caps(21, 21, 'MIN(op1)');
 27    dbms_hs.replace_base_caps(22, 22, 'MIN(op1, op2)');
 28    dbms_hs.replace_base_caps(23, 23, 'MAX(op1)');
 29    dbms_hs.replace_base_caps(24, 24, 'MAX(op1, op2)');
 30    dbms_hs.replace_base_caps(25, 25, 'DESC (descending)');
 31    dbms_hs.replace_base_caps(26, 26, 'TO_NUMBER(op1)');
 32    dbms_hs.replace_base_caps(27, 27, 'TO_NUMBER(op1, op2)');
 33    dbms_hs.replace_base_caps(28, 28, 'TO_NUMBER(op1, op2, op3)');
 34    dbms_hs.replace_base_caps(29, 29, 'TO_CHAR(op1)');
 35    dbms_hs.replace_base_caps(30, 30, 'TO_CHAR(op1, op2)');
 36    dbms_hs.replace_base_caps(31, 31, 'TO_CHAR(op1, op2, op3)');
 37    dbms_hs.replace_base_caps(32, 32, 'NVL(op1, op2)');
 38    dbms_hs.replace_base_caps(33, 33, 'CHARTOROWID(op1)');
 39    dbms_hs.replace_base_caps(34, 34, 'ROWIDTOCHAR(op1)');
 40    dbms_hs.replace_base_caps(35, 35, 'op1 LIKE op2');
 41    dbms_hs.replace_base_caps(36, 36, 'op1 NOT LIKE op2');
 42    dbms_hs.replace_base_caps(37, 37, 'op1 || op2');
 43    dbms_hs.replace_base_caps(38, 38, 'SUBSTR(op1, op2)');
 44    dbms_hs.replace_base_caps(39, 39, 'SUBSTR(op1, op2, op3)');
 45    dbms_hs.replace_base_caps(40, 40, 'LENGTH(op1)');
 46    dbms_hs.replace_base_caps(41, 41, 'INSTR(op1, op2)');
 47    dbms_hs.replace_base_caps(42, 42, 'INSTR(op1, op2, op3)');
 48    dbms_hs.replace_base_caps(43, 43, 'INSTR(op1, op2, op3, op4)');
 49    dbms_hs.replace_base_caps(44, 44, 'LOWER(op1)');
 50    dbms_hs.replace_base_caps(45, 45, 'UPPER(op1)');
 51    dbms_hs.replace_base_caps(46, 46, 'ASCII(op1)');
 52    dbms_hs.replace_base_caps(47, 47, 'CHR(op1)');
 53    dbms_hs.replace_base_caps(48, 48, 'SOUNDEX(op1)');
 54    dbms_hs.replace_base_caps(49, 49, 'ROUND(op1)');
 55    dbms_hs.replace_base_caps(50, 50, 'ROUND(op1, op2)');
 56    dbms_hs.replace_base_caps(51, 51, 'TRUNC(op1)');
 57    dbms_hs.replace_base_caps(52, 52, 'TRUNC(op1, op2)');
 58    dbms_hs.replace_base_caps(53, 53, 'MOD(op1, op2)');
 59    dbms_hs.replace_base_caps(54, 54, 'ABS(op1)');
 60    dbms_hs.replace_base_caps(55, 55, 'SIGN(op1)');
 61    dbms_hs.replace_base_caps(56, 56, 'VSIZE(op1)');
 62    dbms_hs.replace_base_caps(57, 57, 'op1 IS NULL');
 63    dbms_hs.replace_base_caps(58, 58, 'op1 IS NOT NULL');
 64    dbms_hs.replace_base_caps(59, 59, 'op1 + op2 (date + number)');
 65    dbms_hs.replace_base_caps(60, 60, 'op1 - op2 (date - number)');
 66    dbms_hs.replace_base_caps(61, 61, 'op1 - op2 (date - date)');
 67    dbms_hs.replace_base_caps(62, 62, 'ADD_MONTHS(op1, op2)');
 68    dbms_hs.replace_base_caps(63, 63, 'MONTHS_BETWEEN(op1, op2)');
 69    dbms_hs.replace_base_caps(64, 64, 'TO_DATE(op1)');
 70    dbms_hs.replace_base_caps(65, 65, 'TO_DATE(op1, op2)');
 71    dbms_hs.replace_base_caps(66, 66, 'TO_DATE(op1, op2, op3)');
 72    dbms_hs.replace_base_caps(67, 67, 'SYSDATE');
 73    dbms_hs.replace_base_caps(68, 68, 'LAST_DAY(op1)');
 74    dbms_hs.replace_base_caps(69, 69, 'NEW_TIME(op1, op2, op3)');
 75    dbms_hs.replace_base_caps(70, 70, 'NEXT_DAY(op1, op2)');
 76    dbms_hs.replace_base_caps(71, 71, 'Internal date-related conversion');
 77    dbms_hs.replace_base_caps(72, 72, 'Internal date-related conversion');
 78    dbms_hs.replace_base_caps(73, 73, 'Internal date-related conversion');
 79    dbms_hs.replace_base_caps(74, 74, 'TO_CHAR(op1) (date to string');
 80    dbms_hs.replace_base_caps(75, 75, 'TO_CHAR(op1, op2) (date to string)');
 81    dbms_hs.replace_base_caps(76, 76, 'TO_CHAR(op1, op2, op3) date to str');
 82    dbms_hs.replace_base_caps(77, 77, '');
 83    dbms_hs.replace_base_caps(78, 78, '');
 84    dbms_hs.replace_base_caps(79, 79, '');
 85    dbms_hs.replace_base_caps(80, 80, '');
 86    dbms_hs.replace_base_caps(81, 81, '');
 87    dbms_hs.replace_base_caps(82, 82, '');
 88    dbms_hs.replace_base_caps(83, 83, '');
 89    dbms_hs.replace_base_caps(84, 84, '');
 90    dbms_hs.replace_base_caps(85, 85, '');
 91    dbms_hs.replace_base_caps(86, 86, '');
 92    dbms_hs.replace_base_caps(87, 87, '');
 93    dbms_hs.replace_base_caps(88, 88, '');
 94    dbms_hs.replace_base_caps(89, 89, '');
 95    dbms_hs.replace_base_caps(90, 90, '');
 96    dbms_hs.replace_base_caps(91, 91, '');
 97    dbms_hs.replace_base_caps(92, 92, 'DUMP(op1)');
 98    dbms_hs.replace_base_caps(93, 93, 'DUMP(op1, op2)');
 99    dbms_hs.replace_base_caps(94, 94, 'DUMP(op1, op2, op3)');
100    dbms_hs.replace_base_caps(95, 95, 'DUMP(op1, op2, op3, op4)');
101    dbms_hs.replace_base_caps(96, 96, '');
102    dbms_hs.replace_base_caps(97, 97, 'ROUND(op1) (date)');
103    dbms_hs.replace_base_caps(98, 98, 'ROUND(op1, op2) (date)');
104    dbms_hs.replace_base_caps(99, 99, 'TRUNC(op1) (date)');
105    dbms_hs.replace_base_caps(100, 100, 'TRUNC(op1, op2) (date)');
106    dbms_hs.replace_base_caps(101, 101, 'FLOOR(op1)');
107    dbms_hs.replace_base_caps(102, 102, 'CEIL(op1)');
108    dbms_hs.replace_base_caps(103, 103, 'DECODE(op1, op2, op3)');
109    dbms_hs.replace_base_caps(104, 104, 'DECODE(op1, op2, op3, op4)');
110    dbms_hs.replace_base_caps(105, 105, 'DECODE');
111    dbms_hs.replace_base_caps(106, 106, 'LPAD(op1, op2)');
112    dbms_hs.replace_base_caps(107, 107, 'LPAD(op1, op2, op3)');
113    dbms_hs.replace_base_caps(108, 108, 'RPAD(op1, op2)');
114    dbms_hs.replace_base_caps(109, 109, 'RPAD(op1, op2, op3)');
115    dbms_hs.replace_base_caps(110, 110, '');
116    dbms_hs.replace_base_caps(111, 111, 'POWER(op1, op2)');
117    dbms_hs.replace_base_caps(112, 112, '');
118    dbms_hs.replace_base_caps(113, 113, '');
119    dbms_hs.replace_base_caps(114, 114, '');
120    dbms_hs.replace_base_caps(115, 115, '');
121    dbms_hs.replace_base_caps(116, 116, '');
122    dbms_hs.replace_base_caps(117, 117, '');
123    dbms_hs.replace_base_caps(118, 118, 'INITCAP(op1)');
124    dbms_hs.replace_base_caps(119, 119, 'TRANSLATE(op1, op2, op3)');
125    dbms_hs.replace_base_caps(120, 120, 'LTRIM(op1)');
126    dbms_hs.replace_base_caps(121, 121, 'LTRIM(op1, op2)');
127    dbms_hs.replace_base_caps(122, 122, 'RTRIM(op1)');
128    dbms_hs.replace_base_caps(123, 123, 'RTRIM(op1, op2)');
129    dbms_hs.replace_base_caps(124, 124, 'GREATEST(op1, op2)');
130    dbms_hs.replace_base_caps(125, 125, 'GREATEST');
131    dbms_hs.replace_base_caps(126, 126, 'LEAST(op1, op2)');
132    dbms_hs.replace_base_caps(127, 127, 'LEAST');
133    dbms_hs.replace_base_caps(128, 128, 'SQRT(op1)');
134    dbms_hs.replace_base_caps(129, 129, 'VARIANCE(op1)');
135    dbms_hs.replace_base_caps(130, 130, 'VARIANCE(op1, op2)');
136    dbms_hs.replace_base_caps(131, 131, 'STDDEV(op1)');
137    dbms_hs.replace_base_caps(132, 132, 'STDDEV(op1, op2)');
138    dbms_hs.replace_base_caps(133, 133, 'op1 LIKE op2 (indexed column)');
139    dbms_hs.replace_base_caps(134, 134, 'RAWTOHEX(op1)');
140    dbms_hs.replace_base_caps(135, 135, 'HEXTORAW(op1)');
141    dbms_hs.replace_base_caps(136, 136, '');
142    dbms_hs.replace_base_caps(137, 137, 'NOT NVL(op1, op2)');
143    dbms_hs.replace_base_caps(138, 138, 'USERENV(op1)');
144    dbms_hs.replace_base_caps(139, 139, 'MERGE$ACTIONS');
145    dbms_hs.replace_base_caps(140, 140, '');
146    dbms_hs.replace_base_caps(141, 141, 'TO_CHAR(op1), (special case)');
147    dbms_hs.replace_base_caps(142, 142, '');
148    dbms_hs.replace_base_caps(143, 143, 'BITAND(op1, op2)');
149    dbms_hs.replace_base_caps(144, 144, 'CONVERT(op1, op2)');
150    dbms_hs.replace_base_caps(145, 145, 'CONVERT(op1, op2, op3)');
151    dbms_hs.replace_base_caps(146, 146, 'REPLACE(op1, op2)');
152    dbms_hs.replace_base_caps(147, 147, 'REPLACE(op1, op2, op3)');
153    dbms_hs.replace_base_caps(148, 148, 'NLSSORT(op1)');
154    dbms_hs.replace_base_caps(149, 149, 'NLSSORT(op1, op2)');
155    dbms_hs.replace_base_caps(150, 150, '');
156    dbms_hs.replace_base_caps(151, 151, '');
157    dbms_hs.replace_base_caps(152, 152, '');
158    dbms_hs.replace_base_caps(153, 153, 'op1 LIKE op2 ESCAPE op3');
159    dbms_hs.replace_base_caps(154, 154, 'op1 NOT LIKE op2 ESCAPE op3');
160    dbms_hs.replace_base_caps(155, 155, 'UNION ALL');
161    dbms_hs.replace_base_caps(156, 156, 'COS(op1)');
162    dbms_hs.replace_base_caps(157, 157, 'SIN(op1)');
163    dbms_hs.replace_base_caps(158, 158, 'TAN(op1)');
164    dbms_hs.replace_base_caps(159, 159, 'COSH(op1)');
165    dbms_hs.replace_base_caps(160, 160, 'SINH(op1)');
166    dbms_hs.replace_base_caps(161, 161, 'TANH(op1)');
167    dbms_hs.replace_base_caps(162, 162, 'EXP(op1)');
168    dbms_hs.replace_base_caps(163, 163, 'LN(op1)');
169    dbms_hs.replace_base_caps(164, 164, 'LOG(op1)');
170    dbms_hs.replace_base_caps(165, 165, '');
171    dbms_hs.replace_base_caps(166, 166, 'op1 > op2');
172    dbms_hs.replace_base_caps(167, 167, 'op1 < op2');
173    dbms_hs.replace_base_caps(168, 168, 'op1 >= op2');
174    dbms_hs.replace_base_caps(169, 169, 'op1 <= op2');
175    dbms_hs.replace_base_caps(170, 170, 'op1 = op2');
176    dbms_hs.replace_base_caps(171, 171, 'op1 <> op2');
177    dbms_hs.replace_base_caps(172, 172, '');
178    dbms_hs.replace_base_caps(173, 173, '');
179    dbms_hs.replace_base_caps(174, 174, 'TO_SINGLE_BYTE(op1');
180    dbms_hs.replace_base_caps(175, 175, 'TO_MULTI_BYTE(op1)');
181    dbms_hs.replace_base_caps(176, 176, 'NLS_LOWER(op1)');
182    dbms_hs.replace_base_caps(177, 177, 'NLS_UPPER(op1)');
183    dbms_hs.replace_base_caps(178, 178, 'NLS_INITCAP(op1)');
184    dbms_hs.replace_base_caps(179, 179, 'INSTRB(op1, op2)');
185    dbms_hs.replace_base_caps(180, 180, 'INSTRB(op1, op2, op3)');
186    dbms_hs.replace_base_caps(181, 181, 'INSTRB(op1, op2, op3, op4)');
187    dbms_hs.replace_base_caps(182, 182, 'LENGTHB(op1)');
188    dbms_hs.replace_base_caps(183, 183, 'SUBSTRB(op1, op2)');
189    dbms_hs.replace_base_caps(184, 184, 'SUBSTRB(op1, op2, op3)');
190    dbms_hs.replace_base_caps(185, 185, '');
191    dbms_hs.replace_base_caps(186, 186, '');
192    dbms_hs.replace_base_caps(187, 187, 'XMLPARSE(..)');
193    dbms_hs.replace_base_caps(188, 188, '');
194    dbms_hs.replace_base_caps(189, 189, '');
195    dbms_hs.replace_base_caps(190, 190, '');
196    dbms_hs.replace_base_caps(191, 191, '');
197    dbms_hs.replace_base_caps(192, 192, '');
198    dbms_hs.replace_base_caps(193, 193, '');
199    dbms_hs.replace_base_caps(194, 194, 'LUB(op1)');
200    dbms_hs.replace_base_caps(195, 195, 'GLB(op1)');
201    dbms_hs.replace_base_caps(196, 196, 'LEAST_UB(op1, op2)');
202    dbms_hs.replace_base_caps(197, 197, 'LEAST_UB');
203    dbms_hs.replace_base_caps(198, 198, 'GREATEST_LB(op1, op2)');
204    dbms_hs.replace_base_caps(199, 199, 'GREATEST_LB');
205    dbms_hs.replace_base_caps(200, 200, '');
206    dbms_hs.replace_base_caps(201, 201, '');
207    dbms_hs.replace_base_caps(202, 202, '');
208    dbms_hs.replace_base_caps(203, 203, '');
209    dbms_hs.replace_base_caps(204, 204, '');
210    dbms_hs.replace_base_caps(205, 205, '');
211    dbms_hs.replace_base_caps(206, 206, '');
212    dbms_hs.replace_base_caps(207, 207, 'NVL2(op1, op2, op3)');
213    dbms_hs.replace_base_caps(208, 208, 'REVERSE(op1)');
214    dbms_hs.replace_base_caps(209, 209, 'NLS_LOWER(op1, op2)');
215    dbms_hs.replace_base_caps(210, 210, 'NLS_UPPER(op1, op2)');
216    dbms_hs.replace_base_caps(211, 211, 'NLS_INITCAP(op1, op2)');
217    dbms_hs.replace_base_caps(212, 212, '');
218    dbms_hs.replace_base_caps(213, 213, '');
219    dbms_hs.replace_base_caps(214, 214, '');
220    dbms_hs.replace_base_caps(215, 215, '');
221    dbms_hs.replace_base_caps(216, 216, '');
222    dbms_hs.replace_base_caps(217, 217, 'op1 > op2');
223    dbms_hs.replace_base_caps(218, 218, 'op1 < op2');
224    dbms_hs.replace_base_caps(219, 219, 'op1 >= op2');
225    dbms_hs.replace_base_caps(220, 220, 'op1 <= op2');
226    dbms_hs.replace_base_caps(221, 221, 'op1 = op2');
227    dbms_hs.replace_base_caps(222, 222, 'op1 <> op2');
228    dbms_hs.replace_base_caps(223, 223, '');
229    dbms_hs.replace_base_caps(224, 224, '');
230    dbms_hs.replace_base_caps(225, 225, '');
231    dbms_hs.replace_base_caps(226, 226, '');
232    dbms_hs.replace_base_caps(227, 227, '');
233    dbms_hs.replace_base_caps(228, 228, '');
234    dbms_hs.replace_base_caps(229, 229, '');
235    dbms_hs.replace_base_caps(230, 230, '');
236    dbms_hs.replace_base_caps(231, 231, '');
237    dbms_hs.replace_base_caps(232, 232, 'OPTPLS');
238    dbms_hs.replace_base_caps(233, 233, 'ASIN(op1)');
239    dbms_hs.replace_base_caps(234, 234, 'ACOS(op1)');
240    dbms_hs.replace_base_caps(235, 235, 'ATAN(op1)');
241    dbms_hs.replace_base_caps(236, 236, 'ATAN2(op1, op2)');
242    dbms_hs.replace_base_caps(237, 237, '');
243    dbms_hs.replace_base_caps(238, 238, 'SYS_OP_ATG(op1, op2, op3, op4)');
244    dbms_hs.replace_base_caps(239, 239, '');
245    dbms_hs.replace_base_caps(240, 240, '');
246    dbms_hs.replace_base_caps(241, 241, '');
247    dbms_hs.replace_base_caps(242, 242, '');
248    dbms_hs.replace_base_caps(243, 243, 'CURSOR(op1)');
249    dbms_hs.replace_base_caps(244, 244, '');
250    dbms_hs.replace_base_caps(245, 245, 'DEREF(op1)');
251    dbms_hs.replace_base_caps(246, 246, 'BLOB()');
252    dbms_hs.replace_base_caps(247, 247, 'CLOB()');
253    dbms_hs.replace_base_caps(248, 248, '');
254    dbms_hs.replace_base_caps(249, 249, '');
255    dbms_hs.replace_base_caps(250, 250, '');
256    dbms_hs.replace_base_caps(251, 251, '');
257    dbms_hs.replace_base_caps(252, 252, 'SYS_OP_MOID(op1)');
258    dbms_hs.replace_base_caps(253, 253, 'MAKE_REF(op1)');
259    dbms_hs.replace_base_caps(254, 254, 'SYS_OP_NIX(op1, op2)');
260    dbms_hs.replace_base_caps(255, 255, 'SYS_OP_DUMP(op1)');
261    dbms_hs.replace_base_caps(256, 256, '');
262    dbms_hs.replace_base_caps(257, 257, 'REFTOHEX(op1)');
263    dbms_hs.replace_base_caps(258, 258, '');
264    dbms_hs.replace_base_caps(259, 259, '');
265    dbms_hs.replace_base_caps(260, 260, 'SYS_OP_TOSETID(op1)');
266    dbms_hs.replace_base_caps(261, 261, '');
267    dbms_hs.replace_base_caps(262, 262, '');
268    dbms_hs.replace_base_caps(263, 263, '');
269    dbms_hs.replace_base_caps(264, 264, '');
270    dbms_hs.replace_base_caps(265, 265, '');
271    dbms_hs.replace_base_caps(266, 266, '');
272    dbms_hs.replace_base_caps(267, 267, '');
273    dbms_hs.replace_base_caps(268, 268, 'op1 IS DANGLING');
274    dbms_hs.replace_base_caps(269, 269, 'op1 IS NOT DANGLING');
275    dbms_hs.replace_base_caps(270, 270, 'SYS_OP_R20(op1)');
276    dbms_hs.replace_base_caps(271, 271, 'EMPTY_BLOB()');
277    dbms_hs.replace_base_caps(272, 272, 'EMPTY_CLOB()');
278    dbms_hs.replace_base_caps(273, 273, '');
279    dbms_hs.replace_base_caps(274, 274, '');
280    dbms_hs.replace_base_caps(275, 275, '');
281    dbms_hs.replace_base_caps(276, 276, '');
282    dbms_hs.replace_base_caps(277, 277, '');
283    dbms_hs.replace_base_caps(278, 278, 'SYS_OP_RMTD(op1, op2, op3)');
284    dbms_hs.replace_base_caps(279, 279, '');
285    dbms_hs.replace_base_caps(280, 280, 'SYS_OP_OIDVALUE(op1, op2, op3)');
286    dbms_hs.replace_base_caps(281, 281, '');
287    dbms_hs.replace_base_caps(282, 282, 'BFILENAME(op1, op2)');
288    dbms_hs.replace_base_caps(283, 283, 'CSCONVERT(op1, op2)');
289    dbms_hs.replace_base_caps(284, 284, 'NLS_CHARSET_NAME(op1)');
290    dbms_hs.replace_base_caps(285, 285, 'NLS_CHARSET_ID(op1)');
291    dbms_hs.replace_base_caps(286, 286, '');
292    dbms_hs.replace_base_caps(287, 287, 'SYS_OP_LSVI(op1, op2, op3)');
293    dbms_hs.replace_base_caps(288, 288, '');
294    dbms_hs.replace_base_caps(289, 289, '');
295    dbms_hs.replace_base_caps(290, 290, '');
296    dbms_hs.replace_base_caps(291, 291, '');
297    dbms_hs.replace_base_caps(292, 292, 'SYS_OP_MSR(op1)');
298    dbms_hs.replace_base_caps(293, 293, 'SYS_OP_CSR(op1)');
299    dbms_hs.replace_base_caps(294, 294, '');
300    dbms_hs.replace_base_caps(295, 295, '');
301    dbms_hs.replace_base_caps(296, 296, 'TRIM(op1)');
302    dbms_hs.replace_base_caps(297, 297, 'TRIM(op1 FROM op2)');
303    dbms_hs.replace_base_caps(298, 298, 'TRIM(LEADING op1)');
304    dbms_hs.replace_base_caps(299, 299, 'TRIM(LEADING op1 FROM op2)');
305    dbms_hs.replace_base_caps(300, 300, 'TRIM(TRAILING op1)');
306    dbms_hs.replace_base_caps(301, 301, 'TRIM(TRAILING op1 FROM op2)');
307    dbms_hs.replace_base_caps(302, 302, 'SYS_OP_RPB(op1)');
308    dbms_hs.replace_base_caps(303, 303, '');
309    dbms_hs.replace_base_caps(304, 304, 'SYS_OP_DESCEND(op1)');
310    dbms_hs.replace_base_caps(305, 305, '');
311    dbms_hs.replace_base_caps(306, 306, '');
312    dbms_hs.replace_base_caps(307, 307, '');
313    dbms_hs.replace_base_caps(308, 308, '');
314    dbms_hs.replace_base_caps(309, 309, '');
315    dbms_hs.replace_base_caps(310, 310, '');
316    dbms_hs.replace_base_caps(311, 311, '');
317    dbms_hs.replace_base_caps(312, 312, '');
318    dbms_hs.replace_base_caps(313, 313, '');
319    dbms_hs.replace_base_caps(314, 314, '');
320    dbms_hs.replace_base_caps(315, 315, '');
321    dbms_hs.replace_base_caps(316, 316, '');
322    dbms_hs.replace_base_caps(317, 317, '');
323    dbms_hs.replace_base_caps(318, 318, '');
324    dbms_hs.replace_base_caps(319, 319, 'SYS_GUID()');
325    dbms_hs.replace_base_caps(320, 320, 'EXTRACT(YEAR FROM op2)');
326    dbms_hs.replace_base_caps(321, 321, 'EXTRACT(MONTH FROM op2)');
327    dbms_hs.replace_base_caps(322, 322, 'EXTRACT(DAY FROM op2)');
328    dbms_hs.replace_base_caps(323, 323, 'EXTRACT(HOUR FROM op2)');
329    dbms_hs.replace_base_caps(324, 324, 'EXTRACT(MINUTE FROM op2)');
330    dbms_hs.replace_base_caps(325, 325, 'EXTRACT(SECOND FROM op2)');
331    dbms_hs.replace_base_caps(326, 326, 'EXTRACT(TIMEZONE_HOUR FROM op2)');
332    dbms_hs.replace_base_caps(327, 327, 'EXTRACT(TIMEZONE_MINUTE FROM op2)');
333    dbms_hs.replace_base_caps(328, 328, '');
334    dbms_hs.replace_base_caps(329, 329, '');
335    dbms_hs.replace_base_caps(330, 330, '');
336    dbms_hs.replace_base_caps(331, 331, '');
337    dbms_hs.replace_base_caps(332, 332, '');
338    dbms_hs.replace_base_caps(333, 333, '');
339    dbms_hs.replace_base_caps(334, 334, '');
340    dbms_hs.replace_base_caps(335, 335, '');
341    dbms_hs.replace_base_caps(336, 336, '');
342    dbms_hs.replace_base_caps(337, 337, '');
343    dbms_hs.replace_base_caps(338, 338, '');
344    dbms_hs.replace_base_caps(339, 339, '');
345    dbms_hs.replace_base_caps(340, 340, '');
346    dbms_hs.replace_base_caps(341, 341, '');
347    dbms_hs.replace_base_caps(342, 342, '');
348    dbms_hs.replace_base_caps(343, 343, '');
349    dbms_hs.replace_base_caps(344, 344, '');
350    dbms_hs.replace_base_caps(345, 345, '');
351    dbms_hs.replace_base_caps(346, 346, '');
352    dbms_hs.replace_base_caps(347, 347, '');
353    dbms_hs.replace_base_caps(348, 348, '');
354    dbms_hs.replace_base_caps(349, 349, '');
355    dbms_hs.replace_base_caps(350, 350, '');
356    dbms_hs.replace_base_caps(351, 351, '');
357    dbms_hs.replace_base_caps(352, 352, 'TO_TIME(op1)');
358    dbms_hs.replace_base_caps(353, 353, 'TO_TIME(op1, op2)');
359    dbms_hs.replace_base_caps(354, 354, 'TO_TIME(op1, op2, op3)');
360    dbms_hs.replace_base_caps(355, 355, 'TO_TIME_TZ(op1)');
361    dbms_hs.replace_base_caps(356, 356, 'TO_TIME_TZ(op1, op2)');
362    dbms_hs.replace_base_caps(357, 357, 'TO_TIME_TZ(op1, op2, op3)');
363    dbms_hs.replace_base_caps(358, 358, 'TO_TIMESTAMP(op1)');
364    dbms_hs.replace_base_caps(359, 359, 'TO_TIMESTAMP(op1, op2)');
365    dbms_hs.replace_base_caps(360, 360, 'TO_TIMESTAMP(op1, op2, op3)');
366    dbms_hs.replace_base_caps(361, 361, 'TO_TIMESTAMP_TZ(op1)');
367    dbms_hs.replace_base_caps(362, 362, 'TO_TIMESTAMP_TZ(op1, op2)');
368    dbms_hs.replace_base_caps(363, 363, 'TO_TIMESTAMP_TZ(op1, op2, op3)');
369    dbms_hs.replace_base_caps(364, 364, 'TO_YMINTERVAL(op1)');
370    dbms_hs.replace_base_caps(365, 365, 'TO_DSINTERVAL(op1)');
371    dbms_hs.replace_base_caps(366, 366, 'TO_DSINTERVAL(op1, op2)');
372    dbms_hs.replace_base_caps(367, 367, 'NUMTOYMINTERVAL(op1, op2)');
373    dbms_hs.replace_base_caps(368, 368, 'NUMTODSINTERVAL(op1, op2)');
374    dbms_hs.replace_base_caps(369, 369, 'op1 + op2');
375    dbms_hs.replace_base_caps(370, 370, 'op1 - op2');
376    dbms_hs.replace_base_caps(371, 371, 'op1 - op2');
377    dbms_hs.replace_base_caps(372, 372, 'op1 + op2');
378    dbms_hs.replace_base_caps(373, 373, 'op1 - op2');
379    dbms_hs.replace_base_caps(374, 374, 'op1 * op2');
380    dbms_hs.replace_base_caps(375, 375, 'op1 / op2');
381    dbms_hs.replace_base_caps(376, 376, 'op1 AT TIME ZONE op2');
382    dbms_hs.replace_base_caps(377, 377, '(op1, op2) OVERLAPS (op3, op4)');
383    dbms_hs.replace_base_caps(378, 378, 'NOT((op1, op2) OVERLAPS (op3, op4))');
384    dbms_hs.replace_base_caps(379, 379, 'CURRENT_DATE');
385    dbms_hs.replace_base_caps(380, 380, 'CURRENT_TIME(op1)');
386    dbms_hs.replace_base_caps(381, 381, 'CURRENT_TIMESTAMP(op1)');
387    dbms_hs.replace_base_caps(382, 382, 'LOCALTIME(op1)');
388    dbms_hs.replace_base_caps(383, 383, 'LOCALTIMESTAMP(op1)');
389    dbms_hs.replace_base_caps(384, 384, 'SYSTIMESTAMP(op1)');
390    dbms_hs.replace_base_caps(385, 385, '');
391    dbms_hs.replace_base_caps(386, 386, '');
392    dbms_hs.replace_base_caps(387, 387, '');
393    dbms_hs.replace_base_caps(388, 388, '');
394    dbms_hs.replace_base_caps(389, 389, '');
395    dbms_hs.replace_base_caps(390, 390, '');
396    dbms_hs.replace_base_caps(391, 391, 'CAST(op1 AS op2)');
397    dbms_hs.replace_base_caps(392, 392, 'SYS_CONTEXT(op1, op2)');
398    dbms_hs.replace_base_caps(393, 393, 'SYS_EXTRACT_UTC(op1)');
399    dbms_hs.replace_base_caps(394, 394, '');
400    dbms_hs.replace_base_caps(395, 395, '');
401    dbms_hs.replace_base_caps(396, 396, 'GROUPING(op1)');
402    dbms_hs.replace_base_caps(397, 397, '');
403    dbms_hs.replace_base_caps(398, 398, '');
404    dbms_hs.replace_base_caps(399, 399, '');
405    dbms_hs.replace_base_caps(400, 400, '');
406    dbms_hs.replace_base_caps(401, 401, 'SYS_OP_MAP_NONNULL(op1)');
407    dbms_hs.replace_base_caps(402, 402, '');
408    dbms_hs.replace_base_caps(403, 403, '');
409    dbms_hs.replace_base_caps(404, 404, '');
410    dbms_hs.replace_base_caps(405, 405, '');
411    dbms_hs.replace_base_caps(406, 406, '');
412    dbms_hs.replace_base_caps(407, 407, '');
413    dbms_hs.replace_base_caps(408, 408, '');
414    dbms_hs.replace_base_caps(409, 409, '');
415    dbms_hs.replace_base_caps(410, 410, '');
416    dbms_hs.replace_base_caps(411, 411, 'SUM(op1)');
417    dbms_hs.replace_base_caps(412, 412, 'AVG(op1)');
418    dbms_hs.replace_base_caps(413, 413, 'COUNT(op1)');
419    dbms_hs.replace_base_caps(414, 414, 'COUNT(op1, op2)');
420    dbms_hs.replace_base_caps(415, 415, 'VARIANCE(op1)');
421    dbms_hs.replace_base_caps(416, 416, 'VARIANCE(op1, op2)');
422    dbms_hs.replace_base_caps(417, 417, 'STDDEV(op1)');
423    dbms_hs.replace_base_caps(418, 418, 'STDDEV(op1, op2)');
424    dbms_hs.replace_base_caps(419, 419, 'MIN(op1)');
425    dbms_hs.replace_base_caps(420, 420, 'MAX(op1)');
426    dbms_hs.replace_base_caps(421, 421, 'FIRST_VALUE(op1)');
427    dbms_hs.replace_base_caps(422, 422, 'LAST_VALUE(op1)');
428    dbms_hs.replace_base_caps(423, 423, 'LAG(op1)');
429    dbms_hs.replace_base_caps(424, 424, 'LAG(op1, op2)');
430    dbms_hs.replace_base_caps(425, 425, 'LAG(op1, op2, op3)');
431    dbms_hs.replace_base_caps(426, 426, 'LEAD(op1)');
432    dbms_hs.replace_base_caps(427, 427, 'LEAD(op1, op2)');
433    dbms_hs.replace_base_caps(428, 428, 'LEAD(op1, op2, op3)');
434    dbms_hs.replace_base_caps(429, 429, 'RANK()');
435    dbms_hs.replace_base_caps(430, 430, 'DENSE_RANK()');
436    dbms_hs.replace_base_caps(431, 431, '');
437    dbms_hs.replace_base_caps(432, 432, 'NTILE()');
438    dbms_hs.replace_base_caps(433, 433, 'RATIO_TO_REPORT()');
439    dbms_hs.replace_base_caps(434, 434, 'ROW_NUMBER()');
440    dbms_hs.replace_base_caps(435, 435, '');
441    dbms_hs.replace_base_caps(436, 436, '');
442    dbms_hs.replace_base_caps(437, 437, 'op1 DESC');
443    dbms_hs.replace_base_caps(438, 438, 'op1 DESC NULLS LAST');
444    dbms_hs.replace_base_caps(439, 439, 'op1 ASC NULLS FIRST');
445    dbms_hs.replace_base_caps(440, 440, '');
446    dbms_hs.replace_base_caps(441, 441, '');
447    dbms_hs.replace_base_caps(442, 442, '');
448    dbms_hs.replace_base_caps(443, 443, '');
449    dbms_hs.replace_base_caps(444, 444, '');
450    dbms_hs.replace_base_caps(445, 445, '');
451    dbms_hs.replace_base_caps(446, 446, '');
452    dbms_hs.replace_base_caps(447, 447, '');
453    dbms_hs.replace_base_caps(448, 448, '');
454    dbms_hs.replace_base_caps(449, 449, '');
455    dbms_hs.replace_base_caps(450, 450, '');
456    dbms_hs.replace_base_caps(451, 451, '');
457    dbms_hs.replace_base_caps(452, 452, '');
458    dbms_hs.replace_base_caps(453, 453, '');
459    dbms_hs.replace_base_caps(454, 454, '');
460    dbms_hs.replace_base_caps(455, 455, '');
461    dbms_hs.replace_base_caps(456, 456, '');
462    dbms_hs.replace_base_caps(457, 457, '');
463    dbms_hs.replace_base_caps(458, 458, '');
464    dbms_hs.replace_base_caps(459, 459, '');
465    dbms_hs.replace_base_caps(460, 460, 'SESSIONTIMEZONE()');
466    dbms_hs.replace_base_caps(461, 461, '');
467    dbms_hs.replace_base_caps(462, 462, '');
468    dbms_hs.replace_base_caps(463, 463, '');
469    dbms_hs.replace_base_caps(464, 464, '');
470    dbms_hs.replace_base_caps(465, 465, '');
471    dbms_hs.replace_base_caps(466, 466, '');
472    dbms_hs.replace_base_caps(467, 467, '');
473    dbms_hs.replace_base_caps(468, 468, '');
474    dbms_hs.replace_base_caps(469, 469, '');
475    dbms_hs.replace_base_caps(470, 470, '');
476    dbms_hs.replace_base_caps(471, 471, '');
477    dbms_hs.replace_base_caps(472, 472, '');
478    dbms_hs.replace_base_caps(473, 473, '');
479    dbms_hs.replace_base_caps(474, 474, '');
480    dbms_hs.replace_base_caps(475, 475, '');
481    dbms_hs.replace_base_caps(476, 476, 'FROM_TZ(op1, op2)');
482    dbms_hs.replace_base_caps(477, 477, 'PATH(op1, op2)');
483    dbms_hs.replace_base_caps(478, 478, '');
484    dbms_hs.replace_base_caps(479, 479, '');
485    dbms_hs.replace_base_caps(480, 480, '');
486    dbms_hs.replace_base_caps(481, 481, '');
487    dbms_hs.replace_base_caps(482, 482, '');
488    dbms_hs.replace_base_caps(483, 483, '');
489    dbms_hs.replace_base_caps(484, 484, '');
490    dbms_hs.replace_base_caps(485, 485, '');
491    dbms_hs.replace_base_caps(486, 486, '');
492    dbms_hs.replace_base_caps(487, 487, '');
493    dbms_hs.replace_base_caps(488, 488, 'NULLIF(op1, op2)');
494    dbms_hs.replace_base_caps(489, 489, 'COALESCE(op1, op2)');
495    dbms_hs.replace_base_caps(490, 490, 'LENGTH(op1)');
496    dbms_hs.replace_base_caps(491, 491, 'LENGTHB(op1)');
497    dbms_hs.replace_base_caps(492, 492, 'SUBSTR(op1, op2)');
498    dbms_hs.replace_base_caps(493, 493, 'SUBSTR(op1, op2, op3)');
499    dbms_hs.replace_base_caps(494, 494, 'SUBSTRB(op1, op2)');
500    dbms_hs.replace_base_caps(495, 495, 'SUBSTRB(op1, op2, op3)');
501    dbms_hs.replace_base_caps(496, 496, 'INSTR(op1, op2)');
502    dbms_hs.replace_base_caps(497, 497, 'INSTR(op1, op2, op3)');
503    dbms_hs.replace_base_caps(498, 498, 'INSTR(op1, op2, op3, op4)');
504    dbms_hs.replace_base_caps(499, 499, 'INSTRB(op1, op2)');
505    dbms_hs.replace_base_caps(500, 500, 'INSTRB(op1, op2, op3)');
506    dbms_hs.replace_base_caps(501, 501, 'INSTRB(op1, op2, op3, op4)');
507    dbms_hs.replace_base_caps(502, 502, 'op1 || op2');
508    dbms_hs.replace_base_caps(503, 503, 'LPAD(op1, op2)');
509    dbms_hs.replace_base_caps(504, 504, 'LPAD(op1, op2, op3)');
510    dbms_hs.replace_base_caps(505, 505, 'RPAD(op1, op2)');
511    dbms_hs.replace_base_caps(506, 506, 'RPAD(op1, op2, op3)');
512    dbms_hs.replace_base_caps(507, 507, 'LTRIM(op1)');
513    dbms_hs.replace_base_caps(508, 508, 'LTRIM(op1, op2)');
514    dbms_hs.replace_base_caps(509, 509, 'RTRIM(op1)');
515    dbms_hs.replace_base_caps(510, 510, 'RTRIM(op1, op2)');
516    dbms_hs.replace_base_caps(511, 511, 'TRIM(op1)');
517    dbms_hs.replace_base_caps(512, 512, 'TRIM(op1 FROM op2)');
518    dbms_hs.replace_base_caps(513, 513, 'LOWER(op1)');
519    dbms_hs.replace_base_caps(514, 514, 'UPPER(op1)');
520    dbms_hs.replace_base_caps(515, 515, 'NLS_LOWER(op1)');
521    dbms_hs.replace_base_caps(516, 516, 'NLS_LOWER(op1, op2)');
522    dbms_hs.replace_base_caps(517, 517, 'NLS_UPPER(op1)');
523    dbms_hs.replace_base_caps(518, 518, 'NLS_UPPER(op1, op2)');
524    dbms_hs.replace_base_caps(519, 519, 'NVL(op1, op2)');
525    dbms_hs.replace_base_caps(520, 520, 'op1 LIKE op2');
526    dbms_hs.replace_base_caps(521, 521, 'op1 NOT LIKE op2');
527    dbms_hs.replace_base_caps(522, 522, 'REPLACE(op1, op2)');
528    dbms_hs.replace_base_caps(523, 523, 'REPLACE(op1, op2, op3)');
529    dbms_hs.replace_base_caps(524, 524, 'CLOB_TO_CHAR(op1)');
530    dbms_hs.replace_base_caps(525, 525, 'PERCENTILE_CONT(op1)');
531    dbms_hs.replace_base_caps(526, 526, 'PERCENTILE_DISC(op1)');
532    dbms_hs.replace_base_caps(527, 527, 'RANK(op1)');
533    dbms_hs.replace_base_caps(528, 528, 'DENSE_RANK(op1)');
534    dbms_hs.replace_base_caps(529, 529, 'PERCENT_RANK(op1)');
535    dbms_hs.replace_base_caps(530, 530, 'CUME_DIST(op1)');
536    dbms_hs.replace_base_caps(531, 531, 'First/Last function');
537    dbms_hs.replace_base_caps(532, 532, '');
538    dbms_hs.replace_base_caps(533, 533, 'WIDTH_BUCKETop1, op2, op3, op4)');
539    dbms_hs.replace_base_caps(534, 534, 'RANKM(op1)');
540    dbms_hs.replace_base_caps(535, 535, 'DENSE_RANKM(op1)');
541    dbms_hs.replace_base_caps(536, 536, 'PERCENT_RANKM(op1)');
542    dbms_hs.replace_base_caps(537, 537, 'CUME_DISTM(op1)');
543    dbms_hs.replace_base_caps(538, 538, 'FIRSTM(op1)');
544    dbms_hs.replace_base_caps(539, 539, 'PERCENTILE_CONT(op1)');
545    dbms_hs.replace_base_caps(540, 540, 'PERCENTILE_DISC(op1)');
546    dbms_hs.replace_base_caps(541, 541, '');
547    dbms_hs.replace_base_caps(542, 542, 'VECOR(op1, op2)');
548    dbms_hs.replace_base_caps(543, 543, 'VECXOR(op1, op2)');
549    dbms_hs.replace_base_caps(544, 544, 'VECAND(op1,op2)');
550    dbms_hs.replace_base_caps(545, 545, 'GROUPING_ID(...)');
551    dbms_hs.replace_base_caps(546, 546, 'GROUP_ID()');
552    dbms_hs.replace_base_caps(547, 547, 'BIN_TO_NUM(...)');
553    dbms_hs.replace_base_caps(548, 548, '');
554    dbms_hs.replace_base_caps(549, 549, '');
555    dbms_hs.replace_base_caps(550, 550, '');
556    dbms_hs.replace_base_caps(551, 551, '');
557    dbms_hs.replace_base_caps(552, 552, '');
558    dbms_hs.replace_base_caps(553, 553, '');
559    dbms_hs.replace_base_caps(554, 554, '');
560    dbms_hs.replace_base_caps(555, 555, '');
561    dbms_hs.replace_base_caps(556, 556, '');
562    dbms_hs.replace_base_caps(557, 557, '');
563    dbms_hs.replace_base_caps(558, 558, 'TZ_OFFSET(op1');
564    dbms_hs.replace_base_caps(559, 559, 'ADJ_DATE(?)');
565    dbms_hs.replace_base_caps(560, 560, 'SESSIONTZNAME');
566    dbms_hs.replace_base_caps(561, 561, '');
567    dbms_hs.replace_base_caps(562, 562, '');
568    dbms_hs.replace_base_caps(563, 563, 'ROWIDTONCHAR(op1)');
569    dbms_hs.replace_base_caps(564, 564, 'TO_NCHAR(op1)');
570    dbms_hs.replace_base_caps(565, 565, 'TO_NCHAR(op1,op2)');
571    dbms_hs.replace_base_caps(566, 566, 'TO_NCHAR(op1,op2,op3)');
572    dbms_hs.replace_base_caps(567, 567, 'RAWTONHEX(op1)');
573    dbms_hs.replace_base_caps(568, 568, 'NCHR(op1)');
574    dbms_hs.replace_base_caps(569, 569, '');
575    dbms_hs.replace_base_caps(570, 570, '');
576    dbms_hs.replace_base_caps(571, 571, '');
577    dbms_hs.replace_base_caps(572, 572, '');
578    dbms_hs.replace_base_caps(573, 573, 'COMPOSE(op1)');
579    dbms_hs.replace_base_caps(574, 574, 'DECOMPOSE(op1)');
580    dbms_hs.replace_base_caps(575, 575, 'ASCIISTR(op1)');
581    dbms_hs.replace_base_caps(576, 576, 'UNISTR(op1)');
582    dbms_hs.replace_base_caps(577, 577, 'LENGTH2(op1)');
583    dbms_hs.replace_base_caps(578, 578, 'LENGTH4(op1)');
584    dbms_hs.replace_base_caps(579, 579, 'LENGTHC(op1)');
585    dbms_hs.replace_base_caps(580, 580, 'INSTR2(op1,op2)');
586    dbms_hs.replace_base_caps(581, 581, 'INSTR2(op1,op2,op3)');
587    dbms_hs.replace_base_caps(582, 582, 'INSTR2(op1,op2,op3,op4)');
588    dbms_hs.replace_base_caps(583, 583, 'INSTR4(op1,op2)');
589    dbms_hs.replace_base_caps(584, 584, 'INSTR4(op1,op2,op3)');
590    dbms_hs.replace_base_caps(585, 585, 'INSTR4(op1,op2,op3,op4)');
591    dbms_hs.replace_base_caps(586, 586, 'INSTRC(op1,op2)');
592    dbms_hs.replace_base_caps(587, 587, 'INSTRC(op1,op2,op3)');
593    dbms_hs.replace_base_caps(588, 588, 'INSTRC(op1,op2,op3,op4)');
594    dbms_hs.replace_base_caps(589, 589, 'SUBSTR2(op1,op2)');
595    dbms_hs.replace_base_caps(590, 590, 'SUBSTR2(op1,op2,op3)');
596    dbms_hs.replace_base_caps(591, 591, 'SUBSTR4(op1,op2)');
597    dbms_hs.replace_base_caps(592, 592, 'SUBSTR4(op1,op2,op3)');
598    dbms_hs.replace_base_caps(593, 593, 'SUBSTRC(op1,op2)');
599    dbms_hs.replace_base_caps(594, 594, 'SUBSTRC(op1,op2,op3)');
600    dbms_hs.replace_base_caps(595, 595, 'op1 LIKE2 op2');
601    dbms_hs.replace_base_caps(596, 596, 'op1 NOT LIKE2 op2');
602    dbms_hs.replace_base_caps(597, 597, 'op1 LIKE2 op2 ESCAPE op3');
603    dbms_hs.replace_base_caps(598, 598, 'op1 NOT LIKE2 op2 ESCAPE op3');
604    dbms_hs.replace_base_caps(599, 599, 'op1 LIKE4 op2');
605    dbms_hs.replace_base_caps(600, 600, 'op1 NOT LIKE4 op2');
606    dbms_hs.replace_base_caps(601, 601, 'op1 LIKE4 op2 ESCAPE op3');
607    dbms_hs.replace_base_caps(602, 602, 'op1 NOT LIKE4 op2 ESCAPE op3');
608    dbms_hs.replace_base_caps(603, 603, 'op1 LIKEC op2');
609    dbms_hs.replace_base_caps(604, 604, 'op1 NOT LIKEC op2');
610    dbms_hs.replace_base_caps(605, 605, 'op1 LIKEC op2 ESCAPE op3');
611    dbms_hs.replace_base_caps(606, 606, 'op1 NOT LIKEC op2 ESCAPE op3');
612    dbms_hs.replace_base_caps(607, 607, '');
613    dbms_hs.replace_base_caps(608, 608, '');
614    dbms_hs.replace_base_caps(609, 609, '');
615    dbms_hs.replace_base_caps(610, 610, '');
616    dbms_hs.replace_base_caps(611, 611, 'CONVERT(op1, op2)');
617    dbms_hs.replace_base_caps(612, 612, 'CONVERT(op1, op2, op3)');
618    dbms_hs.replace_base_caps(613, 613, '');
619    dbms_hs.replace_base_caps(614, 614, '');
620    dbms_hs.replace_base_caps(615, 615, '');
621    dbms_hs.replace_base_caps(616, 616, '');
622    dbms_hs.replace_base_caps(5000, 5000, 'multicolumn: (a,b,c)=');
623    dbms_hs.replace_base_caps(5001, 5001, 'join');
624    dbms_hs.replace_base_caps(5002, 5002, 'outer join');
625    dbms_hs.replace_base_caps(5003, 5003, 'delimited IDs: "id"');
626    dbms_hs.replace_base_caps(5004, 5004, 'SELECT DISTINCT');
627    dbms_hs.replace_base_caps(5005, 5005, 'DISTINCT in aggregate functions');
628    dbms_hs.replace_base_caps(5006, 5006, 'ROWNUM');
629    dbms_hs.replace_base_caps(5007, 5007, 'subquery');
630    dbms_hs.replace_base_caps(5008, 5008, 'GROUP BY');
631    dbms_hs.replace_base_caps(5009, 5009, 'HAVING');
632    dbms_hs.replace_base_caps(5010, 5010, 'ORDER BY');
633    dbms_hs.replace_base_caps(5011, 5011, 'CONNECT BY');
634    dbms_hs.replace_base_caps(5012, 5012, 'START WITH');
635    dbms_hs.replace_base_caps(5013, 5013, 'WHERE');
636    dbms_hs.replace_base_caps(5014, 5014, 'callback');
637    dbms_hs.replace_base_caps(5015, 5015, 'add redundant local filters');
638    dbms_hs.replace_base_caps(5016, 5016, 'ROWID');
639    dbms_hs.replace_base_caps(5017, 5017, 'ANY');
640    dbms_hs.replace_base_caps(5018, 5018, 'ALL');
641    dbms_hs.replace_base_caps(5019, 5019, 'EXISTS');
642    dbms_hs.replace_base_caps(5020, 5020, 'NOT EXISTS');
643    dbms_hs.replace_base_caps(5021, 5021, 'nls parameters');
644    dbms_hs.replace_base_caps(5022, 5022, 'describe index');
645    dbms_hs.replace_base_caps(5023, 5023, 'distributed read consistency');
646    dbms_hs.replace_base_caps(5024, 5024, 'bundled calls');
647    dbms_hs.replace_base_caps(5025, 5025, 'evaluate USER, UID, SYDATE local');
648    dbms_hs.replace_base_caps(5026, 5026, 'KGL operation for PL/SQL RPC');
649    dbms_hs.replace_base_caps(5027, 5027, 'NVL: change ANSI to ORA compare');
650    dbms_hs.replace_base_caps(5028, 5028, 'remote mapping of queries');
651    dbms_hs.replace_base_caps(5029, 5029, '2PC type (RO-SS-CC-PREP/2P-2PCC)');
652    dbms_hs.replace_base_caps(5030, 5030, 'streamed protocol version number');
653    dbms_hs.replace_base_caps(5031, 5031, 'special non-optdef functions');
654    dbms_hs.replace_base_caps(5032, 5032, 'CURRVAL and NEXTVAL');
655    dbms_hs.replace_base_caps(5033, 5033, 'hints (inline comments and aliases');
656    dbms_hs.replace_base_caps(5034, 5034, 'remote sort by index access');
657    dbms_hs.replace_base_caps(5035, 5035, 'use universal rowid for rowids');
658    dbms_hs.replace_base_caps(5036, 5036, 'wait option in select for update');
659    dbms_hs.replace_base_caps(5037, 5037, 'connect by order siblings by');
660    dbms_hs.replace_base_caps(5038, 5038, 'On clause');
661    dbms_hs.replace_base_caps(5039, 5039, 'no supprt for rem extended partn');
662    dbms_hs.replace_base_caps(5040, 5040, 'SPREADSHEET clause');
663    dbms_hs.replace_base_caps(5041, 5041, 'Merge optional WHERE clauses');
664    dbms_hs.replace_base_caps(5042, 5042, 'connect by nocycle');
665    dbms_hs.replace_base_caps(5043, 5043, 'connect by enhancements: connect_by_iscycle, connect_by_isleaf');
666    dbms_hs.replace_base_caps(5044, 5044, 'Group Outer-Join');
667    dbms_hs.replace_base_caps(5045, 5045, ' u''xxx\ffff''');
668    dbms_hs.replace_base_caps(5046, 5046, '"with check option" in from-clause subqueries');
669    dbms_hs.replace_base_caps(5047, 5047, 'new connect-by');
670    dbms_hs.replace_base_caps(5048, 5048, 'native full outer join');
671    dbms_hs.replace_base_caps(5049, 5049, 'recursive WITH');
672    dbms_hs.replace_base_caps(5050, 5050, 'column alias list for WITH clause');
673    dbms_hs.replace_base_caps(5051, 5051, 'WAIT option in LOCK TABLE');
674    dbms_hs.replace_base_caps(5052, 5052, 'SQL with match recognize');
675    dbms_hs.replace_base_caps(5053, 5053, 'Data bound collation support');
676    dbms_hs.replace_base_caps(5054, 5054, 'Polymorphic Table Function');
677    dbms_hs.replace_base_caps(5963, 5963, 'FDS can not DescribeParam after Exec in Transact SQL');
678    dbms_hs.replace_base_caps(5964, 5964, 'FDS can handle schema in queries');
679    dbms_hs.replace_base_caps(5965, 5965, 'Null is Null');
680    dbms_hs.replace_base_caps(5966, 5966, 'ANSI Decode (CASE) support');
681    dbms_hs.replace_base_caps(5967, 5967, 'Result set support');
682    dbms_hs.replace_base_caps(5968, 5968, 'Piecewise fetch and exec');
683    dbms_hs.replace_base_caps(5969, 5969, 'How to handle PUBLIC schema');
684    dbms_hs.replace_base_caps(5970, 5970, 'Subquery in having clause is supported');
685    dbms_hs.replace_base_caps(5971, 5971, 'Do not close and re-parse on re-exec of SELECTs');
686    dbms_hs.replace_base_caps(5972, 5972, 'Informix related cap: Add space before negative numeric literals');
687    dbms_hs.replace_base_caps(5973, 5973, 'Informix related cap: Add extra parenthesis for update sub-queries to make it a list');
688    dbms_hs.replace_base_caps(5974, 5974, 'DB2-related cap: Change empty str assigns to null assigns');
689    dbms_hs.replace_base_caps(5975, 5975, 'DB2-related cap: Zero length bind not same as null bind');
690    dbms_hs.replace_base_caps(5976, 5976, 'DB2-related cap: Add space after comma');
691    dbms_hs.replace_base_caps(5977, 5977, 'DB2-related cap: Order-by clause contains only numbers');
692    dbms_hs.replace_base_caps(5978, 5978, 'DB2-related cap: Change empty string comparisons to is null');
693    dbms_hs.replace_base_caps(5979, 5979, 'Implicit Coercion cap: Comparison of two objrefs');
694    dbms_hs.replace_base_caps(5980, 5980, 'Implicit Coercion cap: Comparison of objref and bindvar');
695    dbms_hs.replace_base_caps(5981, 5981, 'Implicit Coercion cap: Comparison of objref and literal');
696    dbms_hs.replace_base_caps(5982, 5982, 'Implicit Coercion cap: Comparison of two bindvars');
697    dbms_hs.replace_base_caps(5983, 5983, 'Implicit Coercion cap: Comparison of bindvar and literal');
698    dbms_hs.replace_base_caps(5984, 5984, 'Implicit Coercion cap: Comparison of two literals');
699    dbms_hs.replace_base_caps(5985, 5985, 'Implicit Coercion cap: Assignment of objref to column');
700    dbms_hs.replace_base_caps(5986, 5986, 'Implicit Coercion cap: Assignment of bindvar to column');
701    dbms_hs.replace_base_caps(5987, 5987, 'Implicit Coercion cap: Assignment of literal to column');
702    dbms_hs.replace_base_caps(5988, 5988, 'RPC Bundling Capability');
703    dbms_hs.replace_base_caps(5989, 5989, 'hoatcis() call capability');
704    dbms_hs.replace_base_caps(5990, 5990, 'Quote Owner names in SQL statements');
705    dbms_hs.replace_base_caps(5991, 5991, 'Map Alias to table names in non-select statements');
706    dbms_hs.replace_base_caps(5992, 5992, 'Send Delimited IDs to FDS');
707    dbms_hs.replace_base_caps(5993, 5993, 'HOA Describe Table Call Capability');
708    dbms_hs.replace_base_caps(5994, 5994, 'Raw literal format');
709    dbms_hs.replace_base_caps(5995, 5995, 'FOR UPDATE syntax mapping');
710    dbms_hs.replace_base_caps(5996, 5996, 'Replace NULLs in select list with other constant');
711    dbms_hs.replace_base_caps(5997, 5997, 'flush describe table cache');
712    dbms_hs.replace_base_caps(5998, 5998, 'length of physical part of rowid');
713    dbms_hs.replace_base_caps(5999, 5999, 'Bind to parameter mapping');
714    dbms_hs.replace_base_caps(6000, 6000, 'SELECT ... FOR UPDATE');
715    dbms_hs.replace_base_caps(6001, 6001, 'SELECT');
716    dbms_hs.replace_base_caps(6002, 6002, 'UPDATE');
717    dbms_hs.replace_base_caps(6003, 6003, 'DELETE');
718    dbms_hs.replace_base_caps(6004, 6004, 'INSERT ... VALUES (...)');
719    dbms_hs.replace_base_caps(6005, 6005, 'INSERT ... SELECT ...');
720    dbms_hs.replace_base_caps(6006, 6006, 'LOCK TABLE');
721    dbms_hs.replace_base_caps(6007, 6007, 'ROLLBACK TO SAVEPOINT ...');
722    dbms_hs.replace_base_caps(6008, 6008, 'SAVEPOINT ...');
723    dbms_hs.replace_base_caps(6009, 6009, 'SET TRANSACTION READ ONLY');
724    dbms_hs.replace_base_caps(6010, 6010, 'alter session set nls_* = ...');
725    dbms_hs.replace_base_caps(6011, 6011, 'alter session set GLOBAL_NAMES, OPTIMIZER_GOAL = ..');
726    dbms_hs.replace_base_caps(6012, 6012, 'alter session set REMOTE_DEPENDENCIES_MODE = ..');
727    dbms_hs.replace_base_caps(6013, 6013, 'set transaction isolation level serializable');
728    dbms_hs.replace_base_caps(6014, 6014, 'set constraints all immediate');
729    dbms_hs.replace_base_caps(6015, 6015, 'alter session set SKIP_UNUSABLE_INDEXES = ..');
730    dbms_hs.replace_base_caps(6016, 6016, 'alter session set time_zone - its absolete now');
731    dbms_hs.replace_base_caps(6017, 6017, 'alter session set ERROR_ON_OVERLAP_TIME');
732    dbms_hs.replace_base_caps(6018, 6018, 'Upsert');
733    dbms_hs.replace_base_caps(6019, 6019, 'alter session set archival row visibility = ...');
734    dbms_hs.replace_base_caps(7000, 7000, 'VARCHAR2');
735    dbms_hs.replace_base_caps(7001, 7001, 'INTEGER');
736    dbms_hs.replace_base_caps(7002, 7002, 'DECIMAL');
737    dbms_hs.replace_base_caps(7003, 7003, 'FLOAT');
738    dbms_hs.replace_base_caps(7004, 7004, 'DATE');
739    dbms_hs.replace_base_caps(7005, 7005, 'VARCHAR');
740    dbms_hs.replace_base_caps(7006, 7006, 'SMALL INTEGER');
741    dbms_hs.replace_base_caps(7007, 7007, 'RAW');
742    dbms_hs.replace_base_caps(7008, 7008, 'VAR RAW');
743    dbms_hs.replace_base_caps(7009, 7009, '? RAW');
744    dbms_hs.replace_base_caps(7010, 7010, 'SMALL FLOAT');
745    dbms_hs.replace_base_caps(7011, 7011, 'LONG INT QUADWORD');
746    dbms_hs.replace_base_caps(7012, 7012, 'LEFT OVERPUNCH');
747    dbms_hs.replace_base_caps(7013, 7013, 'RIGHT OVERPUNCH');
748    dbms_hs.replace_base_caps(7014, 7014, 'ROWID');
749    dbms_hs.replace_base_caps(7015, 7015, 'LEFT SEPARATE');
750    dbms_hs.replace_base_caps(7016, 7016, 'RIGHT SEPARATE');
751    dbms_hs.replace_base_caps(7017, 7017, 'OS DATE');
752    dbms_hs.replace_base_caps(7018, 7018, 'OS FULL ==> DATE + TIME');
753    dbms_hs.replace_base_caps(7019, 7019, 'OS TIME');
754    dbms_hs.replace_base_caps(7020, 7020, 'UNSIGNED SMALL INTEGER');
755    dbms_hs.replace_base_caps(7021, 7021, 'BYTE');
756    dbms_hs.replace_base_caps(7022, 7022, 'UNSIGNED BYTE');
757    dbms_hs.replace_base_caps(7023, 7023, 'UNSIGNED INTEGER');
758    dbms_hs.replace_base_caps(7024, 7024, 'CHAR INTEGER');
759    dbms_hs.replace_base_caps(7025, 7025, 'CHAR FLOAT');
760    dbms_hs.replace_base_caps(7026, 7026, 'CHAR DECIMAL');
761    dbms_hs.replace_base_caps(7027, 7027, 'LONG');
762    dbms_hs.replace_base_caps(7028, 7028, 'VARLONG');
763    dbms_hs.replace_base_caps(7029, 7029, 'OS RDATE');
764    dbms_hs.replace_base_caps(7030, 7030, '(RELATIVE) RECORD ADDRESS');
765    dbms_hs.replace_base_caps(7031, 7031, '(RELATIVE) RECORD NUMBER');
766    dbms_hs.replace_base_caps(7032, 7032, 'VARGRAPHIC');
767    dbms_hs.replace_base_caps(7033, 7033, 'VARNUM');
768    dbms_hs.replace_base_caps(7034, 7034, 'NUMBER');
769    dbms_hs.replace_base_caps(7035, 7035, 'ANSI FIXED CHAR');
770    dbms_hs.replace_base_caps(7036, 7036, 'LONG RAW');
771    dbms_hs.replace_base_caps(7037, 7037, 'LONG VARRAW');
772    dbms_hs.replace_base_caps(7038, 7038, 'MLSLABEL');
773    dbms_hs.replace_base_caps(7039, 7039, 'RAW MLSLABEL');
774    dbms_hs.replace_base_caps(7040, 7040, 'CHARZ');
775    dbms_hs.replace_base_caps(7041, 7041, 'BINARY INTEGER');
776    dbms_hs.replace_base_caps(7042, 7042, 'ORACLE DATE');
777    dbms_hs.replace_base_caps(7043, 7043, 'BOOLEAN');
778    dbms_hs.replace_base_caps(7044, 7044, 'CHAR ROWID');
779    dbms_hs.replace_base_caps(7045, 7045, 'UNSIGNED LONG INTEGER');
780    dbms_hs.replace_base_caps(7046, 7046, 'ODBC CHAR DECIMAL');
781    dbms_hs.replace_base_caps(7047, 7047, 'TIMESTAMP');
782    dbms_hs.replace_base_caps(7048, 7048, 'TIMESTAMP WITH TIME ZONE');
783    dbms_hs.replace_base_caps(7049, 7049, 'INTERVAL - YEAR TO MONTH');
784    dbms_hs.replace_base_caps(7050, 7050, 'INTERVAL - DAY TO SECOND');
785    dbms_hs.replace_base_caps(7051, 7051, 'TIMESTAMP WITH IMPLICIT TIME ZONE');
786    dbms_hs.replace_base_caps(7052, 7052, 'CHAR TIMESTAMP');
787    dbms_hs.replace_base_caps(7053, 7053, 'CHAR TIMESTAMP WITH TIMEZONE');
788    dbms_hs.replace_base_caps(7054, 7054, 'CHAR INTERVAL - YEAR TO MONTH');
789    dbms_hs.replace_base_caps(7055, 7055, 'CHAR INTERVAL - DAY TO SECOND');
790    dbms_hs.replace_base_caps(7056, 7056, 'CHAR TIMESTAMP WITH IMPLICIT TIME ZONE');
791    dbms_hs.replace_base_caps(7057, 7057, 'STRUCT TIMESTAMP');
792    dbms_hs.replace_base_caps(7058, 7058, 'STRUCT TIMESTAMP WITH TIMEZONE');
793    dbms_hs.replace_base_caps(7059, 7059, 'STRUCT INTERVAL - YEAR TO MONTH');
794    dbms_hs.replace_base_caps(7060, 7060, 'STRUCT INTERVAL - DAY TO SECOND');
795    dbms_hs.replace_base_caps(7061, 7061, 'STRUCT TIMESTAMP WITH IMPLICIT TIME ZONE');
796    dbms_hs.replace_base_caps(7062, 7062, 'RESULT SET HANDLE');
797    dbms_hs.replace_base_caps(7063, 7063, 'CLOB');
798    dbms_hs.replace_base_caps(7064, 7064, 'BLOB');
799    dbms_hs.replace_base_caps(7065, 7065, 'BINARY FILE');
800    dbms_hs.replace_base_caps(7066, 7066, 'ODBC DATE');
801    dbms_hs.replace_base_caps(7067, 7067, 'ODBC TIMESTAMP STRUCT');
802    dbms_hs.replace_base_caps(7068, 7068, 'ODBC INVERVAL YEAR TO MONTH');
803    dbms_hs.replace_base_caps(7069, 7069, 'ODBC INTERVAL DATE TO SECOND');
804    dbms_hs.replace_base_caps(7500, 7500, '');
805    dbms_hs.replace_base_caps(7501, 7501, '');
806    dbms_hs.replace_base_caps(7502, 7502, '');
807    dbms_hs.replace_base_caps(7503, 7503, '');
808    dbms_hs.replace_base_caps(7504, 7504, '');
809    dbms_hs.replace_base_caps(7505, 7505, '');
810    dbms_hs.replace_base_caps(7506, 7506, '');
811    dbms_hs.replace_base_caps(7507, 7507, '');
812    dbms_hs.replace_base_caps(7508, 7508, '');
813    dbms_hs.replace_base_caps(7509, 7509, '');
814    dbms_hs.replace_base_caps(7510, 7510, '');
815    dbms_hs.replace_base_caps(7511, 7511, '');
816    dbms_hs.replace_base_caps(7512, 7512, '');
817    dbms_hs.replace_base_caps(7513, 7513, '');
818    dbms_hs.replace_base_caps(7514, 7514, '');
819    dbms_hs.replace_base_caps(7515, 7515, '');
820    dbms_hs.replace_base_caps(7516, 7516, '');
821    dbms_hs.replace_base_caps(7517, 7517, '');
822    dbms_hs.replace_base_caps(7518, 7518, '');
823    dbms_hs.replace_base_caps(7519, 7519, '');
824    dbms_hs.replace_base_caps(8000, 8000, '');
825  
826  
827  
828  /*------------------------------------------------*/
829  /*  DD translations used to test HS installation  */
830  /*------------------------------------------------*/
831  
832    dbms_hs.replace_base_dd('DD_TKHODDTR1', 'DD_TKHODDTR1', NULL);
833    dbms_hs.replace_base_dd('DD_TKHODDTR3', 'DD_TKHODDTR3', NULL);
834    dbms_hs.replace_base_dd('DD_TKHODDTR5', 'DD_TKHODDTR5', NULL);
835    dbms_hs.replace_base_dd('DD_TKHODDTR6', 'DD_TKHODDTR6', NULL);
836    dbms_hs.replace_base_dd('DD_TKHODDTR7', 'DD_TKHODDTR7', NULL);
837    dbms_hs.replace_base_dd('DD_TKHODDTR8', 'DD_TKHODDTR8', NULL);
838    dbms_hs.replace_base_dd('DD_TKHODDTR9', 'DD_TKHODDTR9', NULL);
839    dbms_hs.replace_base_dd('DD_TKHODDTR10', 'DD_TKHODDTR10', NULL);
840  /*
841      Registered elsewhere as a standard table name:
842    dbms_hs.replace_base_dd('USER_SYNONYMS', USER_SYNONYMS', NULL);
843      Self-registered:
844    dbms_hs.replace_base_dd('TKHODDAU', TKHODDAU', NULL);
845  */
846  
847  /*--------------------------------------------*/
848  /*  DD translations accessible to all agents  */
849  /*--------------------------------------------*/
850  
851    dbms_hs.replace_base_dd('ALL_CATALOG', 'ALL_CATALOG', NULL);
852    dbms_hs.replace_base_dd('ALL_COL_COMMENTS', 'ALL_COL_COMMENTS', NULL);
853    dbms_hs.replace_base_dd('ALL_COL_PRIVS', 'ALL_COL_PRIVS', NULL);
854    dbms_hs.replace_base_dd('ALL_COL_PRIVS_MADE', 'ALL_COL_PRIVS_MADE', NULL);
855    dbms_hs.replace_base_dd('ALL_COL_PRIVS_RECD', 'ALL_COL_PRIVS_RECD', NULL);
856    dbms_hs.replace_base_dd('ALL_CONSTRAINTS', 'ALL_CONSTRAINTS', NULL);
857    dbms_hs.replace_base_dd('ALL_CONS_COLUMNS', 'ALL_CONS_COLUMNS', NULL);
858    dbms_hs.replace_base_dd('ALL_DB_LINKS', 'ALL_DB_LINKS', NULL);
859    dbms_hs.replace_base_dd('ALL_DEF_AUDIT_OPTS', 'ALL_DEF_AUDIT_OPTS', NULL);
860    dbms_hs.replace_base_dd('ALL_DEPENDENCIES', 'ALL_DEPENDENCIES', NULL);
861    dbms_hs.replace_base_dd('ALL_ERRORS', 'ALL_ERRORS', NULL);
862    dbms_hs.replace_base_dd('ALL_INDEXES', 'ALL_INDEXES', NULL);
863    dbms_hs.replace_base_dd('ALL_IND_COLUMNS', 'ALL_IND_COLUMNS', NULL);
864    dbms_hs.replace_base_dd('ALL_OBJECTS', 'ALL_OBJECTS', NULL);
865    dbms_hs.replace_base_dd('ALL_SEQUENCES', 'ALL_SEQUENCES', NULL);
866    dbms_hs.replace_base_dd('ALL_SNAPSHOTS', 'ALL_SNAPSHOTS', NULL);
867    dbms_hs.replace_base_dd('ALL_SOURCE', 'ALL_SOURCE', NULL);
868    dbms_hs.replace_base_dd('ALL_SYNONYMS', 'ALL_SYNONYMS', NULL);
869    dbms_hs.replace_base_dd('ALL_TABLES', 'ALL_TABLES', NULL);
870    dbms_hs.replace_base_dd('ALL_TAB_COLUMNS', 'ALL_TAB_COLUMNS', NULL);
871    dbms_hs.replace_base_dd('ALL_TAB_COMMENTS', 'ALL_TAB_COMMENTS', NULL);
872    dbms_hs.replace_base_dd('ALL_TAB_PRIVS', 'ALL_TAB_PRIVS', NULL);
873    dbms_hs.replace_base_dd('ALL_TAB_PRIVS_MADE', 'ALL_TAB_PRIVS_MADE', NULL);
874    dbms_hs.replace_base_dd('ALL_TAB_PRIVS_RECD', 'ALL_TAB_PRIVS_RECD', NULL);
875    dbms_hs.replace_base_dd('ALL_TRIGGERS', 'ALL_TRIGGERS', NULL);
876    dbms_hs.replace_base_dd('ALL_USERS', 'ALL_USERS', NULL);
877    dbms_hs.replace_base_dd('ALL_VIEWS', 'ALL_VIEWS', NULL);
878    dbms_hs.replace_base_dd('AUDIT_ACTIONS', 'AUDIT_ACTIONS', NULL);
879    dbms_hs.replace_base_dd('COLUMN_PRIVILEGES', 'COLUMN_PRIVILEGES', NULL);
880    dbms_hs.replace_base_dd('DBA_CATALOG', 'DBA_CATALOG', NULL);
881    dbms_hs.replace_base_dd('DBA_COL_COMMENTS', 'DBA_COL_COMMENTS', NULL);
882    dbms_hs.replace_base_dd('DBA_COL_PRIVS', 'DBA_COL_PRIVS', NULL);
883    dbms_hs.replace_base_dd('DBA_OBJECTS', 'DBA_OBJECTS', NULL);
884    dbms_hs.replace_base_dd('DBA_ROLES', 'DBA_ROLES', NULL);
885    dbms_hs.replace_base_dd('DBA_ROLE_PRIVS', 'DBA_ROLE_PRIVS', NULL);
886    dbms_hs.replace_base_dd('DBA_SYS_PRIVS', 'DBA_SYS_PRIVS', NULL);
887    dbms_hs.replace_base_dd('DBA_TABLES', 'DBA_TABLES', NULL);
888    dbms_hs.replace_base_dd('DBA_TAB_COLUMNS', 'DBA_TAB_COLUMNS', NULL);
889    dbms_hs.replace_base_dd('DBA_TAB_COMMENTS', 'DBA_TAB_COMMENTS', NULL);
890    dbms_hs.replace_base_dd('DBA_TAB_PRIVS', 'DBA_TAB_PRIVS', NULL);
891    dbms_hs.replace_base_dd('DBA_USERS', 'DBA_USERS', NULL);
892    dbms_hs.replace_base_dd('DICTIONARY', 'DICTIONARY', NULL);
893    dbms_hs.replace_base_dd('DICT_COLUMNS', 'DICT_COLUMNS', NULL);
894    dbms_hs.replace_base_dd('DUAL', 'DUAL', NULL);
895    dbms_hs.replace_base_dd('INDEX_STATS', 'INDEX_STATS', NULL);
896    dbms_hs.replace_base_dd('PRODUCT_USER_PROFILE', 'PRODUCT_USER_PROFILE', NULL);
897    dbms_hs.replace_base_dd('RESOURCE_COST', 'RESOURCE_COST', NULL);
898    dbms_hs.replace_base_dd('ROLE_ROLE_PRIVS', 'ROLE_ROLE_PRIVS', NULL);
899    dbms_hs.replace_base_dd('ROLE_SYS_PRIVS', 'ROLE_SYS_PRIVS', NULL);
900    dbms_hs.replace_base_dd('ROLE_TAB_PRIVS', 'ROLE_TAB_PRIVS', NULL);
901    dbms_hs.replace_base_dd('SESSION_PRIVS', 'SESSION_PRIVS', NULL);
902    dbms_hs.replace_base_dd('SESSION_ROLES', 'SESSION_ROLES', NULL);
903    dbms_hs.replace_base_dd('TABLE_PRIVILEGES', 'TABLE_PRIVILEGES', NULL);
904    dbms_hs.replace_base_dd('USER_AUDIT_OBJECT', 'USER_AUDIT_OBJECT', NULL);
905    dbms_hs.replace_base_dd('USER_AUDIT_SESSION', 'USER_AUDIT_SESSION', NULL);
906    dbms_hs.replace_base_dd('USER_AUDIT_STATEMENT', 'USER_AUDIT_STATEMENT', NULL);
907    dbms_hs.replace_base_dd('USER_AUDIT_TRAIL', 'USER_AUDIT_TRAIL', NULL);
908    dbms_hs.replace_base_dd('USER_CATALOG', 'USER_CATALOG', NULL);
909    dbms_hs.replace_base_dd('USER_CLUSTERS', 'USER_CLUSTERS', NULL);
910    dbms_hs.replace_base_dd('USER_CLU_COLUMNS', 'USER_CLU_COLUMNS', NULL);
911    dbms_hs.replace_base_dd('USER_COL_COMMENTS', 'USER_COL_COMMENTS', NULL);
912    dbms_hs.replace_base_dd('USER_COL_PRIVS', 'USER_COL_PRIVS', NULL);
913    dbms_hs.replace_base_dd('USER_COL_PRIVS_MADE', 'USER_COL_PRIVS_MADE', NULL);
914    dbms_hs.replace_base_dd('USER_COL_PRIVS_RECD', 'USER_COL_PRIVS_RECD', NULL);
915    dbms_hs.replace_base_dd('USER_CONSTRAINTS', 'USER_CONSTRAINTS', NULL);
916    dbms_hs.replace_base_dd('USER_CONS_COLUMNS', 'USER_CONS_COLUMNS', NULL);
917    dbms_hs.replace_base_dd('USER_DB_LINKS', 'USER_DB_LINKS', NULL);
918    dbms_hs.replace_base_dd('USER_DEPENDENCIES', 'USER_DEPENDENCIES', NULL);
919    dbms_hs.replace_base_dd('USER_ERRORS', 'USER_ERRORS', NULL);
920    dbms_hs.replace_base_dd('USER_EXTENTS', 'USER_EXTENTS', NULL);
921    dbms_hs.replace_base_dd('USER_FREE_SPACE', 'USER_FREE_SPACE', NULL);
922    dbms_hs.replace_base_dd('USER_INDEXES', 'USER_INDEXES', NULL);
923    dbms_hs.replace_base_dd('USER_IND_COLUMNS', 'USER_IND_COLUMNS', NULL);
924    dbms_hs.replace_base_dd('USER_OBJECTS', 'USER_OBJECTS', NULL);
925    dbms_hs.replace_base_dd('USER_OBJ_AUDIT_OPTS', 'USER_OBJ_AUDIT_OPTS', NULL);
926    dbms_hs.replace_base_dd('USER_RESOURCE_LIMITS', 'USER_RESOURCE_LIMITS', NULL);
927    dbms_hs.replace_base_dd('USER_ROLE_PRIVS', 'USER_ROLE_PRIVS', NULL);
928    dbms_hs.replace_base_dd('USER_SEGMENTS', 'USER_SEGMENTS', NULL);
929    dbms_hs.replace_base_dd('USER_SEQUENCES', 'USER_SEQUENCES', NULL);
930    dbms_hs.replace_base_dd('USER_SNAPSHOT_LOGS', 'USER_SNAPSHOT_LOGS', NULL);
931    dbms_hs.replace_base_dd('USER_SOURCE', 'USER_SOURCE', NULL);
932    dbms_hs.replace_base_dd('USER_SYNONYMS', 'USER_SYNONYMS', NULL);
933    dbms_hs.replace_base_dd('USER_SYS_PRIVS', 'USER_SYS_PRIVS', NULL);
934    dbms_hs.replace_base_dd('USER_TABLES', 'USER_TABLES', NULL);
935    dbms_hs.replace_base_dd('USER_TABLESPACES', 'USER_TABLESPACES', NULL);
936    dbms_hs.replace_base_dd('USER_TAB_COLUMNS', 'USER_TAB_COLUMNS', NULL);
937    dbms_hs.replace_base_dd('USER_TAB_COMMENTS', 'USER_TAB_COMMENTS', NULL);
938    dbms_hs.replace_base_dd('USER_TAB_PRIVS', 'USER_TAB_PRIVS', NULL);
939    dbms_hs.replace_base_dd('USER_TAB_PRIVS_MADE', 'USER_TAB_PRIVS_MADE', NULL);
940    dbms_hs.replace_base_dd('USER_TAB_PRIVS_RECD', 'USER_TAB_PRIVS_RECD', NULL);
941    dbms_hs.replace_base_dd('USER_TRIGGERS', 'USER_TRIGGERS', NULL);
942    dbms_hs.replace_base_dd('USER_TS_QUOTAS', 'USER_TS_QUOTAS', NULL);
943    dbms_hs.replace_base_dd('USER_USERS', 'USER_USERS', NULL);
944    dbms_hs.replace_base_dd('USER_VIEWS', 'USER_VIEWS', NULL);
945  
946  
947  /*--------------------------------------------------------*/
948  /*  Pseudo-FDS class for BITE (Built-In Test Environment  */
949  /*--------------------------------------------------------*/
950  
951    dbms_hs.replace_fds_class('BITE', 'BITE', 'Built-In Test Environment');
952  end;
953  /

PL/SQL procedure successfully completed.

SQL> 
SQL> commit;

Commit complete.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem emon based failure detection queues
SQL> Rem
SQL> @@catemini.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catemini.sql /main/4 2014/02/20 12:45:41 surman Exp $
SQL> Rem
SQL> Rem catemini.sql
SQL> Rem
SQL> Rem Copyright (c) 2003, 2014, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catemini.sql - emon notify initialization script
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      creates queue used by emnotify, should be run as sys at db init time.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catemini.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catemini.sql
SQL> Rem SQL_PHASE: CATEMINI
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    sgollapu    06/28/03 - Change agent from TAF to TAFTSM
SQL> Rem    abegueli    06/11/03 - abegueli_emnotify
SQL> Rem    abegueli    05/09/03 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> REM  create a multiple consumer queue table and queue
SQL> 
SQL> DECLARE
  2    multiple_found        EXCEPTION;
  3    PRAGMA                EXCEPTION_INIT(multiple_found, -24006);
  4  
  5  BEGIN
  6  
  7     DBMS_AQADM.CREATE_NP_QUEUE(
  8             QUEUE_NAME      => 'srvqueue',
  9             MULTIPLE_CONSUMERS => TRUE);
 10  EXCEPTION
 11    WHEN multiple_found THEN
 12      NULL;
 13  
 14  END;
 15  /

PL/SQL procedure successfully completed.

SQL> 
SQL> execute dbms_aqadm.start_queue ( queue_name              => 'SRVQUEUE');

PL/SQL procedure successfully completed.

SQL> 
SQL> REM Add subscribers to the multi-consumer queues
SQL> 
SQL> DECLARE
  2    subscriber_exists     EXCEPTION;
  3    PRAGMA                EXCEPTION_INIT(subscriber_exists, -24034);
  4    subs                  SYS.AQ$_AGENT;
  5  
  6  BEGIN
  7  
  8     subs := SYS.AQ$_AGENT('TAFTSM', NULL, NULL);
  9     DBMS_AQADM.ADD_SUBSCRIBER('srvqueue', subs);
 10  
 11  EXCEPTION
 12    WHEN subscriber_exists THEN
 13      NULL;
 14  
 15  END;
 16  /

PL/SQL procedure successfully completed.

SQL> 
SQL> REM set the permissions for the queue
SQL> 
SQL> execute dbms_aqadm.grant_queue_privilege('DEQUEUE','SRVQUEUE','PUBLIC',TRUE);

PL/SQL procedure successfully completed.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem AQ grants and queue creations
SQL> Rem
SQL> @@execaq.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/execaq.sql /main/20 2018/07/25 17:14:00 hcdoshi Exp $
SQL> Rem
SQL> Rem execaq.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      execaq.sql - Execute AQ packages to create required queues
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/execaq.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/execaq.sql
SQL> Rem SQL_PHASE: EXECAQ
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    raeburns    02/29/16 - Bug 22820096: remove ALTER TABLE UPGRADE
SQL> Rem    raeburns    11/11/15 - RTI 18745976: move ALTER TABLE for
SQL> Rem                           sys.aq_event_table
SQL> Rem    devghosh    03/27/14 - bug17709018: grant on unflushed_dequeues
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    gravipat    11/06/13 - 17709031: Use create_cdbview procedure to create
SQL> Rem                           cdb views
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    gravipat    12/05/11 - Create cdbview using CDB$VIEW function
SQL> Rem    gagarg      09/11/11 - create cdb view
SQL> Rem    maba        06/13/11 - added recreate DBMS_AQJMS synonym
SQL> Rem    shbose      05/05/09 - Bug 7530052: Delete entries for
SQL> Rem                           AQ$_<queue table>_F from ku_noexp_tab table
SQL> Rem    gagarg      08/28/08 - Create AQ_SRVNTFN_TABLE dynamically in emon
SQL> Rem                           coordinator
SQL> Rem    jhan        05/21/07 - add trace_level and dequeue_timeout parameters
SQL> Rem    jawilson    04/03/07 - add propagation job class
SQL> Rem    jawilson    11/10/06 - event-based job changes to propagation program
SQL> Rem    jawilson    09/28/06 - remove instance-bound job classes
SQL> Rem    jhan        08/09/06 - Add exception handle for Queue Creation
SQL> Rem    jawilson    06/02/06 - propagation using new dbms scheduler
SQL> Rem    absaxena    06/02/06 - grant select on DBA_SUBSCR_REGISTRATIONS
SQL> Rem    rburns      05/19/06 - execute queue packages
SQL> Rem    rburns      05/19/06 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> -- This synonym becomes invalid for some reason, so recreate here
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_aqjms_internal
  2  FOR sys.dbms_aqjms_internal;

Synonym created.

SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_aqjms
  2  FOR sys.dbms_aqjms;

Synonym created.

SQL> 
SQL> --
SQL> -- Create and grant privileges to all the AQ system-defined roles
SQL> -- Notes:  The upgrade script should have revoked all privileges from
SQL> --         the role and have the privileges granted here.
SQL> --
SQL> 
SQL> BEGIN
  2  dbms_aqadm.grant_system_privilege(privilege => 'MANAGE_ANY', grantee => 'AQ_ADMINISTRATOR_ROLE', admin_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2  dbms_aqadm.grant_system_privilege(privilege => 'ENQUEUE_ANY', grantee => 'AQ_ADMINISTRATOR_ROLE', admin_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2  dbms_aqadm.grant_system_privilege(privilege => 'DEQUEUE_ANY',grantee => 'AQ_ADMINISTRATOR_ROLE', admin_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2    dbms_rule_adm.grant_system_privilege(privilege => dbms_rule_adm.CREATE_EVALUATION_CONTEXT_OBJ, grantee => 'AQ_ADMINISTRATOR_ROLE', grant_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2    dbms_rule_adm.grant_system_privilege(privilege => dbms_rule_adm.CREATE_RULE_SET_OBJ, grantee => 'AQ_ADMINISTRATOR_ROLE', grant_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2    dbms_rule_adm.grant_system_privilege(privilege => dbms_rule_adm.CREATE_RULE_OBJ, grantee => 'AQ_ADMINISTRATOR_ROLE', grant_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> GRANT SELECT ON DBA_QUEUE_TABLES TO aq_administrator_role
  2  /

Grant succeeded.

SQL> GRANT SELECT ON DBA_QUEUES TO aq_administrator_role
  2  /

Grant succeeded.

SQL> GRANT SELECT ON DBA_QUEUE_SCHEDULES TO aq_administrator_role
  2  /

Grant succeeded.

SQL> GRANT SELECT ON sys.v_$aq TO aq_administrator_role
  2  /

Grant succeeded.

SQL> GRANT SELECT ON sys.gv_$aq TO aq_administrator_role
  2  /

Grant succeeded.

SQL> GRANT SELECT ON sys.aq$_propagation_status TO aq_administrator_role
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_aqadm TO aq_administrator_role
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_aq TO aq_administrator_role
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_aq_import_internal TO aq_administrator_role
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_rule_eximp TO aq_administrator_role
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_aqin TO aq_administrator_role
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_aqjms_internal TO aq_administrator_role
  2  /

Grant succeeded.

SQL> GRANT SELECT ON SYS.AQ$Internet_Users TO aq_administrator_role
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_transform TO aq_administrator_role
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_aqelm TO aq_administrator_role
  2  /

Grant succeeded.

SQL> GRANT select ON DBA_AQ_AGENTS to aq_administrator_role
  2  /

Grant succeeded.

SQL> GRANT select ON DBA_AQ_AGENT_PRIVS to aq_administrator_role
  2  /

Grant succeeded.

SQL> GRANT select ON DBA_QUEUE_SUBSCRIBERS TO aq_administrator_role
  2  /

Grant succeeded.

SQL> GRANT select ON DBA_SUBSCR_REGISTRATIONS TO aq_administrator_role
  2  /

Grant succeeded.

SQL> GRANT SELECT ON SYS.AQ$_UNFLUSHED_DEQUEUES TO aq_administrator_role
  2  /

Grant succeeded.

SQL> 
SQL> GRANT EXECUTE ON sys.dbms_aq TO aq_user_role
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_aqin TO aq_user_role
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_aqjms_internal TO aq_user_role
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_transform TO aq_user_role
  2  /

Grant succeeded.

SQL> GRANT SELECT ON SYS.AQ$_UNFLUSHED_DEQUEUES TO aq_user_role
  2  /

Grant succeeded.

SQL> 
SQL> --
SQL> -- Create the global AQ user role
SQL> --
SQL> DECLARE
  2  ent_sec_enabled VARCHAR2(64);
  3  BEGIN
  4    SELECT value INTO ent_sec_enabled FROM v$option
  5           WHERE lower(parameter) LIKE '%enterprise user security%';
  6    IF (instr(lower(ent_sec_enabled), 'true') > 0) THEN
  7      execute immediate 'CREATE ROLE global_aq_user_role identified globally';
  8    END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> 
SQL> GRANT EXECUTE ON sys.dbms_aqadm TO system WITH GRANT OPTION
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_aq TO system WITH GRANT OPTION
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_aqelm TO system WITH GRANT OPTION
  2  /

Grant succeeded.

SQL> 
SQL> --
SQL> -- Grant dbms_aq_import_internal
SQL> --
SQL> GRANT EXECUTE ON sys.dbms_aq_import_internal TO SYSTEM WITH GRANT OPTION
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_aq_import_internal TO imp_full_database
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_aq_import_internal TO exp_full_database
  2  /

Grant succeeded.

SQL> 
SQL> --
SQL> -- Grant execute right to EXECUTE_CATALOG_ROLE
SQL> --
SQL> GRANT EXECUTE ON sys.dbms_aqadm TO execute_catalog_role
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_aq_import_internal TO execute_catalog_role
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_aq TO execute_catalog_role
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_rule_eximp TO execute_catalog_role
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_aqin TO execute_catalog_role
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_aqjms_internal TO execute_catalog_role
  2  /

Grant succeeded.

SQL> GRANT EXECUTE ON sys.dbms_aqelm TO execute_catalog_role
  2  /

Grant succeeded.

SQL> 
SQL> -- permissions for types created for pl/sql notification
SQL> GRANT EXECUTE ON msg_prop_t TO PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> GRANT EXECUTE ON aq$_descriptor TO PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> GRANT EXECUTE ON aq$_ntfn_descriptor TO PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> GRANT EXECUTE ON aq$_reg_info TO PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> GRANT EXECUTE ON aq$_reg_info_list TO PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> GRANT EXECUTE ON aq$_post_info TO PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> GRANT EXECUTE ON aq$_post_info_list TO PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> GRANT EXECUTE ON aq$_ntfn_msgid_array TO PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> GRANT EXECUTE ON dbms_aq_inv TO PUBLIC
  2  /

Grant succeeded.

SQL> --
SQL> -- Grant 'MANAGE_ANY' to imp_full_database
SQL> -- Note: 'select any table' privilege is needed for full database export
SQL> --       'manage any queue' privilege is needed for full database import
SQL> --
SQL> GRANT EXECUTE ON sys.dbms_aqadm TO imp_full_database
  2  /

Grant succeeded.

SQL> BEGIN
  2  dbms_aqadm.grant_system_privilege(privilege => 'MANAGE_ANY', grantee => 'IMP_FULL_DATABASE', admin_option => FALSE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Grant Enqueue, Dequeue and Manage ANY privilege to SYS
SQL> BEGIN
  2  dbms_aqadm.grant_system_privilege(privilege => 'MANAGE_ANY', grantee => 'SYS', admin_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2  dbms_aqadm.grant_system_privilege(privilege => 'ENQUEUE_ANY', grantee => 'SYS', admin_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2  dbms_aqadm.grant_system_privilege(privilege => 'DEQUEUE_ANY',grantee => 'SYS', admin_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Grant rule privileges to SYS
SQL> BEGIN
  2    dbms_rule_adm.grant_system_privilege(privilege => dbms_rule_adm.CREATE_ANY_EVALUATION_CONTEXT, grantee => 'SYS', grant_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2    dbms_rule_adm.grant_system_privilege(privilege => dbms_rule_adm.ALTER_ANY_EVALUATION_CONTEXT, grantee => 'SYS', grant_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2    dbms_rule_adm.grant_system_privilege(privilege => dbms_rule_adm.DROP_ANY_EVALUATION_CONTEXT, grantee => 'SYS', grant_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2    dbms_rule_adm.grant_system_privilege(privilege => dbms_rule_adm.EXECUTE_ANY_EVALUATION_CONTEXT, grantee => 'SYS', grant_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2    dbms_rule_adm.grant_system_privilege(privilege => dbms_rule_adm.CREATE_ANY_RULE_SET, grantee => 'SYS', grant_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2    dbms_rule_adm.grant_system_privilege(privilege => dbms_rule_adm.ALTER_ANY_RULE_SET, grantee => 'SYS', grant_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2    dbms_rule_adm.grant_system_privilege(privilege => dbms_rule_adm.DROP_ANY_RULE_SET, grantee => 'SYS', grant_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2    dbms_rule_adm.grant_system_privilege(privilege => dbms_rule_adm.EXECUTE_ANY_RULE_SET, grantee => 'SYS', grant_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2    dbms_rule_adm.grant_system_privilege(privilege => dbms_rule_adm.CREATE_ANY_RULE, grantee => 'SYS', grant_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2    dbms_rule_adm.grant_system_privilege(privilege => dbms_rule_adm.ALTER_ANY_RULE, grantee => 'SYS', grant_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2    dbms_rule_adm.grant_system_privilege(privilege => dbms_rule_adm.DROP_ANY_RULE, grantee => 'SYS', grant_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2    dbms_rule_adm.grant_system_privilege(privilege => dbms_rule_adm.EXECUTE_ANY_RULE, grantee => 'SYS', grant_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2    dbms_rule_adm.grant_system_privilege(privilege => dbms_rule_adm.CREATE_EVALUATION_CONTEXT_OBJ, grantee => 'SYS', grant_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2    dbms_rule_adm.grant_system_privilege(privilege => dbms_rule_adm.CREATE_RULE_SET_OBJ, grantee => 'SYS', grant_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> BEGIN
  2    dbms_rule_adm.grant_system_privilege(privilege => dbms_rule_adm.CREATE_RULE_OBJ, grantee => 'SYS', grant_option => TRUE);
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- queue table for storing events incase ksr channel memory consumption
SQL> -- above high watermark
SQL> -- (Design Specification for Publish/Subscribe notification framework
SQL> -- enhancement, RDBMS, Version 8.2)
SQL> 
SQL> -- create aq_event_table queue table
SQL> BEGIN
  2  dbms_aqadm.create_queue_table(queue_table => 'SYS.AQ_EVENT_TABLE', queue_payload_type =>'SYS.AQ$_EVENT_MESSAGE', sort_list =>'ENQ_TIME', comment => 'CREATING AQ_EVENT_TABLE QUEUE TABLE', compatible=>'8.0.0');
  3  EXCEPTION
  4     WHEN OTHERS THEN
  5        IF SQLCODE = -24001 THEN NULL;
  6        ELSE RAISE;
  7        END IF;
  8  END;
  9  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- create the aq_event_table_q queue
SQL> BEGIN
  2  dbms_aqadm.create_queue(queue_name => 'AQ_EVENT_TABLE_Q', queue_table => 'SYS.AQ_EVENT_TABLE', comment => 'CREATING AQ_EVENT_TABLE_Q QUEUE');
  3  EXCEPTION
  4     WHEN OTHERS THEN
  5        IF SQLCODE = -24006 THEN NULL;
  6        ELSE RAISE;
  7        END IF;
  8  END;
  9  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- start the queue aq_event_table_q
SQL> BEGIN
  2  dbms_aqadm.start_queue(queue_name => 'SYS.AQ_EVENT_TABLE_Q');
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create aq$_<QT>_P and aq$_<QT>_D for buffered queue tables
SQL> BEGIN
  2     DBMS_AQADM_SYS.create_spilled_tables_iots;
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create the propagation notification table and queue
SQL> BEGIN
  2    BEGIN
  3    dbms_aqadm.create_queue_table(
  4      QUEUE_TABLE => 'SYS.AQ_PROP_TABLE',
  5      QUEUE_PAYLOAD_TYPE => 'SYS.AQ$_NOTIFY_MSG',
  6      MULTIPLE_CONSUMERS => TRUE,
  7      COMMENT => 'Queue Table for Notification in AQ Prop. Scheduling');
  8    dbms_aqadm_sys.create_queue(
  9      QUEUE_NAME => 'SYS.AQ_PROP_NOTIFY',
 10      QUEUE_TABLE => 'SYS.AQ_PROP_TABLE',
 11      COMMENT => 'Queue for Notifying events in AQ Prop. Scheduling');
 12    dbms_aqadm.start_queue(
 13      QUEUE_NAME => 'SYS.AQ_PROP_NOTIFY',
 14      ENQUEUE => TRUE, DEQUEUE => TRUE);
 15    EXCEPTION
 16     WHEN OTHERS THEN
 17        IF SQLCODE = -24001 THEN NULL;
 18        ELSE RAISE;
 19        END IF;
 20    END;
 21  
 22  END;
 23  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create AQ Propagation program
SQL> BEGIN
  2    BEGIN
  3    DBMS_SCHEDULER.CREATE_PROGRAM(
  4      program_name => 'AQ$_PROPAGATION_PROGRAM',
  5      program_type => 'STORED_PROCEDURE',
  6      program_action => 'SYS.DBMS_AQADM_SYS.aq$_propagation_procedure',
  7      number_of_arguments => 10,
  8      enabled => FALSE,
  9      comments => 'AQ propagation program');
 10    EXCEPTION
 11     WHEN OTHERS THEN
 12        IF SQLCODE = -27477 THEN NULL;
 13        ELSE RAISE;
 14        END IF;
 15    END;
 16  
 17    DBMS_SCHEDULER.DEFINE_METADATA_ARGUMENT(
 18      program_name => 'AQ$_PROPAGATION_PROGRAM',
 19      metadata_attribute => 'job_owner',
 20      argument_position => 1);
 21    DBMS_SCHEDULER.DEFINE_METADATA_ARGUMENT(
 22      program_name => 'AQ$_PROPAGATION_PROGRAM',
 23      metadata_attribute => 'job_name',
 24      argument_position => 2);
 25    DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT(
 26      program_name => 'AQ$_PROPAGATION_PROGRAM',
 27      argument_position => 3,
 28      argument_name => 'source_queue',
 29      argument_type => 'VARCHAR2');
 30    DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT(
 31      program_name => 'AQ$_PROPAGATION_PROGRAM',
 32      argument_position => 4,
 33      argument_name => 'destination',
 34      argument_type => 'VARCHAR2');
 35    DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT(
 36      program_name => 'AQ$_PROPAGATION_PROGRAM',
 37      argument_position => 5,
 38      argument_name => 'duration',
 39      argument_type => 'NUMBER');
 40    DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT(
 41      program_name => 'AQ$_PROPAGATION_PROGRAM',
 42      argument_position => 6,
 43      argument_name => 'latency',
 44      argument_type => 'NUMBER');
 45    DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT(
 46      program_name => 'AQ$_PROPAGATION_PROGRAM',
 47      argument_position => 7,
 48      argument_name => 'http_batch_size',
 49      argument_type => 'NUMBER');
 50    DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT(
 51      program_name => 'AQ$_PROPAGATION_PROGRAM',
 52      argument_position => 8,
 53      argument_name => 'idle_timeout',
 54      argument_type => 'NUMBER',
 55      default_value => dbms_prvtaqip.DEFAULT_IDLE_TIMEOUT);
 56    DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT(
 57      program_name => 'AQ$_PROPAGATION_PROGRAM',
 58      argument_position => 9,
 59      argument_name => 'dequeue_timeout',
 60      argument_type => 'NUMBER',
 61      default_value => dbms_prvtaqip.DEFAULT_DEQUEUE_TIMEOUT);
 62    DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT(
 63      program_name => 'AQ$_PROPAGATION_PROGRAM',
 64      argument_position => 10,
 65      argument_name => 'trace_level',
 66      argument_type => 'NUMBER',
 67      default_value => dbms_prvtaqip.DEFAULT_TRACE_LEVEL);
 68    DBMS_SCHEDULER.ENABLE('AQ$_PROPAGATION_PROGRAM');
 69  END;
 70  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create job class for propagation jobs
SQL> BEGIN
  2    BEGIN
  3      DBMS_SCHEDULER.CREATE_JOB_CLASS(
  4        job_class_name => 'AQ$_PROPAGATION_JOB_CLASS',
  5        comments => 'Default job class for AQ propagation jobs');
  6    EXCEPTION
  7     WHEN OTHERS THEN
  8        IF SQLCODE = -27477 THEN NULL;
  9        ELSE RAISE;
 10        END IF;
 11    END;
 12  END;
 13  /

PL/SQL procedure successfully completed.

SQL> INSERT INTO noexp$(owner, name, obj_type)
  2  VALUES ('SYS', 'AQ$_PROPAGATION_JOB_CLASS', 68)
  3  /

1 row created.

SQL> 
SQL> -- Bug 7530052: Insert entries for AQ$_<queue table>_F from
SQL> -- ku_noexp_tab table. This is valid only during downgrade to this release
SQL> -- from a release  greated than 11.2
SQL> DECLARE
  2    CURSOR qt_cur IS
  3    SELECT qt.schema, qt.name
  4    FROM system.aq$_queue_tables qt;
  5    ins_stmt    VARCHAR2(500);
  6    BASE_TABLE_DOES_NOT_EXIST exception;
  7    PRAGMA EXCEPTION_INIT(BASE_TABLE_DOES_NOT_EXIST, -942);
  8  BEGIN
  9    FOR qt_rec IN qt_cur LOOP
 10  
 11      BEGIN
 12        -- Add _F view into ku_noexp_tab table only if entry not already there
 13        ins_stmt := 'INSERT INTO sys.ku_noexp_tab ( obj_type, schema, name )' ||
 14                     ' SELECT ''VIEW'', :1, :2 FROM dual ' ||
 15                  ' WHERE NOT EXISTS ' ||
 16                  '   (SELECT 1 FROM sys.ku_noexp_tab ' ||
 17                  ' WHERE schema = :3 AND name = :4 AND obj_type = ''VIEW'')';
 18  
 19        EXECUTE IMMEDIATE ins_stmt USING
 20         qt_rec.schema, 'AQ$_'||qt_rec.name||'_F', qt_rec.schema,
 21         'AQ$_'||qt_rec.name||'_F';
 22  
 23      EXCEPTION
 24        WHEN BASE_TABLE_DOES_NOT_EXIST THEN
 25          NULL;
 26        WHEN OTHERS THEN
 27         RAISE;
 28      END;
 29    END LOOP;
 30  
 31  END;
 32  /

PL/SQL procedure successfully completed.

SQL> 
SQL> COMMIT
  2  /

Commit complete.

SQL> 
SQL> 
SQL> --
SQL> -- _CDB view support for V$AQ1
SQL> --
SQL> 
SQL> create or replace view "_DBA_QUEUE_STATS1" as
  2    select q.name QUEUE_NAME, q.EVENTID, q.USAGE, t.SCHEMA, t.name TABLE_NAME,
  3           t.FLAGS, t.TIMEZONE
  4      from system.aq$_queues q, system.aq$_queue_tables t
  5      where q.table_objno = t.objno
  6  /

View created.

SQL> 
SQL> 
SQL> execute CDBView.create_cdbview(false, 'SYS', '_DBA_QUEUE_STATS1', '_CDB_QUEUE_STATS1')

PL/SQL procedure successfully completed.

SQL> /

View created.

SQL> 
SQL> --
SQL> -- _CDB view support for V$RULE
SQL> --
SQL> 
SQL> create or replace view "_DBA_RULES1" as
  2    select u.name rule_owner, o.name rule_name, r.condition, o.obj#
  3      from sys.rule$ r, sys.obj$ o, sys.user$ u
  4      where o.obj# = r.obj# and u.user# = o.owner#
  5  /

View created.

SQL> 
SQL> execute CDBView.create_cdbview(false, 'SYS', '_DBA_RULES1', '_CDB_RULES1')

PL/SQL procedure successfully completed.

SQL> /

View created.

SQL> 
SQL> -- create cqn_event_table queue table for reliable ntfn messages for secure CQN
SQL> BEGIN
  2  dbms_aqadm.create_queue_table(queue_table => 'SYS.CQN_EVENT_TABLE', queue_payload_type =>'SYS.AQ$_EVENT_MESSAGE', sort_list =>'ENQ_TIME', comment => 'CREATING CQN_EVENT_TABLE QUEUE TABLE', compatible=>'8.0.0');
  3  EXCEPTION
  4     WHEN OTHERS THEN
  5        IF SQLCODE = -24001 THEN NULL;
  6        ELSE RAISE;
  7        END IF;
  8  END;
  9  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- create the cqn_event_table_q queue
SQL> BEGIN
  2  dbms_aqadm.create_queue(queue_name => 'CQN_EVENT_TABLE_Q', queue_table => 'SYS.CQN_EVENT_TABLE', comment => 'CREATING CQN_EVENT_TABLE_Q QUEUE');
  3  EXCEPTION
  4     WHEN OTHERS THEN
  5        IF SQLCODE = -24006 THEN NULL;
  6        ELSE RAISE;
  7        END IF;
  8  END;
  9  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- start the queue cqn_event_table_q
SQL> BEGIN
  2  dbms_aqadm.start_queue(queue_name => 'SYS.CQN_EVENT_TABLE_Q');
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem Server Manageablity
SQL> Rem
SQL> @@execsvrm.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/execsvrm.sql /main/25 2018/08/20 11:55:08 yujwang Exp $
SQL> Rem
SQL> Rem execsvrm.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      execsvrm.sql - EXECute SerVeR Manageablity PL/SQL blocks
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script is invoked during CATPROC to perform operations
SQL> Rem      with dependencies to external tables, views or PL/SQL packages.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      CATPROC will invoke this script during database create, upgrade
SQL> Rem      and downgrade. The version of this script will correspond to the
SQL> Rem      target Oracle release. (upgrade = newest, downgrade = oldest)
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/execsvrm.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/execsvrm.sql
SQL> Rem SQL_PHASE: EXECSVRM
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    yujwang     08/11/18 - bug 27593501: disabled maintenance jobs should
SQL> Rem                           not be enabled during upgrade
SQL> Rem    schakkap    06/19/18 - proj 74122: Add initializaton for auto indexing
SQL> Rem    osuro       05/02/18 - bug 27461939: consolidate PDB upgrade/registration
SQL> Rem    osuro       04/02/18 - bug27759226: create AWR staging schema before
SQL> Rem                           registration
SQL> Rem    osuro       07/04/17 - bug 26373814: create first partn during upgrade
SQL> Rem    quotran     02/16/16 - Make umf$_registration_xml schema identical to
SQL> Rem                           umf$_registration
SQL> Rem    quotran     02/06/16 - bug 22626346
SQL> Rem    osuro       01/14/16 - Bug 22161760: recreate staging schema
SQL> Rem    yingzhen    10/30/15 - Add callback to filer x$kewrtb
SQL> Rem    yingzhen    10/06/15 - Bug 21575534: change dba_hist view location
SQL> Rem    rmorant     07/15/15 - Bug 21143682 longid
SQL> Rem    spapadom    02/12/15 - UMF Milestone 2: Added UMF XML views.
SQL> Rem    spapadom    08/18/14 - Removed SYSAWR, added SYSUMF_ROLE grants.
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    gravipat    11/06/13 - 17709031: Use create_cdbview procedure to create
SQL> Rem                           cdb views
SQL> Rem    jerrede     12/18/12 - Catch and ignore ORA-65040 during CDB upgrades
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    shjoshi     02/27/12 - Insert row in wrp$_reports_control table
SQL> Rem    gravipat    12/05/11 - Create cdbview using CDB$VIEW function
SQL> Rem    gngai       09/19/11 - added create_staging_schema
SQL> Rem    ilistvin    07/13/11 - create CDB views for dictionary tables
SQL> Rem    ilistvin    03/15/11 - set LAST_CHANGE to NULL for Autotask
SQL> Rem    ilistvin    11/10/08 - set default thresholds for temp and undo
SQL> Rem                           tablespaces
SQL> Rem    ilistvin    01/05/07 - move procedure invocations from prvtawr.sql
SQL> Rem    ilistvin    11/15/06 - register feature usage here
SQL> Rem    ilistvin    11/08/06 - merge in catmwin.sql
SQL> Rem    ilistvin    11/08/06 - merge in AUTOTASK init code
SQL> Rem    mlfeng      10/31/06 - merge in Alert initialization
SQL> Rem    rburns      09/16/06 - execute SVRM packages
SQL> Rem    rburns      09/16/06 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> -- Set the default database thresholds
SQL> BEGIN
  2  dbms_server_alert.set_threshold(9000,null,null,null,null,1,1,'',5,'');
  3  EXCEPTION
  4    when others then
  5      if sqlcode = -00001 then NULL;         -- unique constraint error
  6      else raise;
  7      end if;
  8  END;
  9  /

PL/SQL procedure successfully completed.

SQL> Rem
SQL> Rem For all UNDO and TEMPORARY tablespaces for which there is no
SQL> Rem explicit threshold set, create an explicit "Do Not Check" threshold
SQL> Rem
SQL> DECLARE
  2    tbsname dbms_id;
  3    CURSOR tbs IS
  4      SELECT tablespace_name
  5        FROM dba_tablespaces
  6       WHERE extent_management = 'LOCAL'
  7         AND contents IN ('TEMPORARY','UNDO')
  8         AND tablespace_name NOT IN
  9                    (SELECT object_name
 10                       FROM table(dbms_server_alert.view_thresholds)
 11                      WHERE object_type = 5
 12                        AND object_name IS NOT NULL
 13                        AND metrics_id IN (9000, 9001));
 14  BEGIN
 15    OPEN tbs;
 16    LOOP
 17      FETCH tbs INTO tbsname;
 18      EXIT WHEN tbs%NOTFOUND;
 19      BEGIN
 20        dbms_server_alert.set_threshold(dbms_server_alert.TABLESPACE_PCT_FULL
 21                                      , dbms_server_alert.OPERATOR_DO_NOT_CHECK
 22                                      , '<SYSTEM-GENERATED THRESHOLD>'
 23                                      , dbms_server_alert.OPERATOR_DO_NOT_CHECK
 24                                      , '0'  -- critical value
 25                                      , 0    -- observation period
 26                                      , 0    -- consecutive occurrences
 27                                      , NULL -- instance name
 28                                      , dbms_server_alert.OBJECT_TYPE_TABLESPACE
 29                                      , tbsname);
 30      EXCEPTION WHEN OTHERS THEN
 31        RAISE;
 32      END;
 33    END LOOP;
 34    CLOSE tbs;
 35  EXCEPTION WHEN OTHERS THEN RAISE;
 36  END;
 37  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Register export package as a sysstem export action
SQL> DELETE FROM exppkgact$ WHERE package = 'DBMS_SERVER_ALERT_EXPORT'
  2  /

0 rows deleted.

SQL> INSERT INTO exppkgact$ (package, schema, class, level#)
  2    VALUES ('DBMS_SERVER_ALERT_EXPORT', 'SYS', 1, 1000)
  3  /

1 row created.

SQL> commit
  2  /

Commit complete.

SQL> 
SQL> 
SQL> DECLARE
  2    DUPLICATE_KEY exception;
  3    pragma EXCEPTION_INIT(DUPLICATE_KEY, -1);
  4  BEGIN
  5  --
  6  -- Initialize AUTOTASK status
  7  -- (dummy_key prevents > 1 row from being inserted)
  8  --
  9   INSERT INTO KET$_AUTOTASK_STATUS(DUMMY_KEY, AUTOTASK_STATUS,ABA_STATE)
 10   VALUES (99999, 2, 99);
 11  EXCEPTION
 12    WHEN DUPLICATE_KEY THEN NULL;
 13    WHEN OTHERS THEN RAISE;
 14  END;
 15  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem  Refresh KET$_CLIENT_CONFIG
SQL> Rem    . keep existing configuration unchanged
SQL> Rem    . add new configuration (for db creation or upgrade)
SQL> Rem    . remove invalid configuration (for downgrade)
SQL> EXEC DBMS_AUTOTASK_PRVT.REFRESH_CLIENT_CONFIG;

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem
SQL> Rem Setup the advisor repository
SQL> Rem
SQL> 
SQL> execute dbms_advisor.setup_repository;

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> Rem SQL Tuning Advisor initialization of Automatic Task
SQL> @@execsqlt.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/execsqlt.sql /st_rdbms_19/1 2018/12/17 17:47:08 yuyzhang Exp $
SQL> Rem
SQL> Rem execsqlt.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      execsqlt.sql - EXECutable code for SQL Tuning to run during catproc
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script contains some procedural logic we run during catproc.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This must be called AFTER prvtsqlt is loaded.
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/execsqlt.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/execsqlt.sql
SQL> Rem SQL_PHASE: EXECSQLT
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/execsvrm.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    yuyzhang    12/05/18 - #(29018307) create dedicated Auto Index task
SQL> Rem    shjoshi     09/09/15 - bug20540751: drop auto sqltune program before
SQL> Rem                           create
SQL> Rem    surman      01/23/14 - 13922626: Update SQL metadata
SQL> Rem    kyagoub     06/04/13 - bug#16654392: upgrad/downgrade auto_sql_tuning_prog
SQL> Rem    msabesan    11/06/12 - lrg 8469208 non CDB check added with schedular
SQL> Rem                           program
SQL> Rem    ddas        05/30/12 - #(13790095) add separate checks for auto sqltune
SQL> Rem                           and auto SPM evolve
SQL> Rem    arbalakr    05/23/12 - lrg 7000350: Ignore 65040 errors while creating
SQL> Rem                           sqltune tasks during db creation(for cdb)
SQL> Rem    ddas        09/02/11 - Proj 28394: add SPM evolve advisor
SQL> Rem    pbelknap    05/26/06 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> Rem Create the automatic SQL Tuning and automatic SPM evolve tasks
SQL> Rem   If the tasks already exist (catproc is being re-run), do not error.
SQL> begin
  2    sys.dbms_sqltune_internal.i_create_auto_tuning_task;
  3  exception
  4    when others then
  5      if (sqlcode = -13607 OR    -- task already exists
  6          sqlcode = -65040) -- operation not allowed inside PDB(lrg 7000350)
  7      then
  8        null;
  9      else
 10        raise;
 11      end if;
 12  end;
 13  /

PL/SQL procedure successfully completed.

SQL> 
SQL> begin
  2    sys.dbms_spm_internal.i_create_auto_evolve_task;
  3  exception
  4    when others then
  5      if (sqlcode = -13607)     -- task already exists
  6      then
  7        null;
  8      else
  9        raise;
 10      end if;
 11  end;
 12  /

PL/SQL procedure successfully completed.

SQL> 
SQL> /* #(29018307) special spm evolve task used by Auto index to fix regressions */
SQL> begin
  2    sys.dbms_spm_internal.i_create_ai_evolve_task;
  3  exception
  4    when others then
  5      if (sqlcode = -13607)     -- task already exists
  6      then
  7        null;
  8      else
  9        raise;
 10      end if;
 11  end;
 12  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem bug 20540751
SQL> Rem First drop the program if it exists. This is because whenever the
SQL> Rem action for the program changes (e.g. it changed in 12.1), the only way
SQL> Rem to apply that change during an upgrade is to drop and re-create it.
SQL> Rem This drop used to be in a1201000.sql but is now moved here because
SQL> Rem a1201000.sql runs after catproc and dropping stuff in that script means
SQL> Rem it wont get re-created automatically.
SQL> begin
  2    dbms_scheduler.drop_program('AUTO_SQL_TUNING_PROG', TRUE);
  3  exception
  4  when others then
  5    if (sqlcode = -27476)     -- program does not exist
  6    then
  7      null;                   -- ignore it
  8    else
  9      raise;                  -- non expected errors
 10    end if;
 11  end;
 12  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Create our scheduler program
SQL> Rem   If the prog already exists (catproc is being re-run), do not error.
SQL> begin
  2    dbms_scheduler.create_program(
  3      program_name => 'AUTO_SQL_TUNING_PROG',
  4      program_type => 'PLSQL_BLOCK',
  5      program_action =>
  6        q'{DECLARE
  7           ename             VARCHAR2(30);
  8           exec_task         BOOLEAN;
  9         BEGIN
 10           -- check if tuning pack is enabled
 11           exec_task := prvt_advisor.is_pack_enabled(
 12                          dbms_management_packs.TUNING_PACK);
 13  
 14           -- check if we are in a pdb,
 15           -- since auto sqltune is not run in a pdb
 16           IF (exec_task AND -- tuning pack enabled
 17           sys_context('userenv', 'con_id') <> 0 AND -- not in non-cdb
 18           sys_context('userenv', 'con_id') <> 1  ) THEN -- not in root
 19             exec_task := FALSE;
 20           END IF;
 21  
 22           -- execute auto sql tuning task
 23           IF (exec_task) THEN
 24             ename := dbms_sqltune.execute_tuning_task(
 25                        'SYS_AUTO_SQL_TUNING_TASK');
 26           END IF;
 27  
 28           -- check whether we are in non-CDB or a PDB
 29           -- auto SPM evolve only runs in a non-CDB or a PDB, not the root.
 30           IF (sys_context('userenv', 'con_id') = 0 OR
 31               sys_context('userenv', 'con_id') > 2) THEN
 32             exec_task := TRUE;
 33           ELSE
 34             exec_task := FALSE;
 35           END IF;
 36  
 37           -- execute auto SPM evolve task
 38           IF (exec_task) THEN
 39             ename := dbms_spm.execute_evolve_task('SYS_AUTO_SPM_EVOLVE_TASK');
 40           END IF;
 41         END;}',
 42      number_of_arguments => 0,
 43      enabled => TRUE,
 44      comments => 'Program to run automatic sql tuning and SPM evolve tasks, see dbmssqlt.sql and dbmsspm.sql');
 45  exception
 46    when others then
 47      if (sqlcode = -27477) then   -- program already exists
 48        null;
 49      else
 50        raise;
 51      end if;
 52  end;
 53  /

PL/SQL procedure successfully completed.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem Auto indexing initialization
SQL> begin
  2    DBMS_AUTO_INDEX_INTERNAL.AI_INIT;
  3  end;
  4  /

PL/SQL procedure successfully completed.

SQL> 
SQL> /* register all the features and high water marks */
SQL> begin
  2    DBMS_FEATURE_REGISTER_ALLFEAT;
  3    DBMS_FEATURE_REGISTER_ALLHWM;
  4  end;
  5  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> -- *************************************************************
SQL> -- Begin AWR operations
SQL> -- *************************************************************
SQL> BEGIN
  2    /* Perform the required AWR catalog operations for this release */
  3    dbms_swrf_internal.refresh_catalog;
  4  END;
  5  /

PL/SQL procedure successfully completed.

SQL> 
SQL> /* AWR Snapshots require CDB view over ts$ */
SQL> execute CDBView.create_cdbview(false, 'SYS', 'TS$', 'AWRI$_CDB_TS$');

PL/SQL procedure successfully completed.

SQL> grant select on awri$_cdb_ts$ to SELECT_CATALOG_ROLE;

Grant succeeded.

SQL> 
SQL> -- *************************************************************
SQL> -- End AWR operations
SQL> -- *************************************************************
SQL> 
SQL> 
SQL> -- insert the row in the wrp reports control table
SQL> -- This row indicates the mode of execution of the report capture
SQL> -- service, where 0 => Regular and 1 => Full capture
SQL> BEGIN
  2    insert into wrp$_reports_control
  3      select dbid, 0 from v$database;
  4  EXCEPTION
  5    when others then
  6      if sqlcode = -00001 then
  7        NULL;             -- unique constraint error
  8      else
  9        raise;
 10      end if;
 11  END;
 12  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> /* Grant privileges on UMF Tables to the sysumf_role role. */
SQL> DECLARE
  2    table_name VARCHAR2(2048);
  3    CURSOR c_table_name IS SELECT table_name_keumtb FROM x$keumtb ;
  4  BEGIN
  5    OPEN c_table_name;
  6    LOOP
  7          FETCH c_table_name INTO table_name;
  8          EXIT WHEN c_table_name%notfound;
  9          EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, DELETE, UPDATE ON '
 10                          || table_name ||
 11                          ' TO sysumf_role';
 12    END LOOP;
 13  END;
 14  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> /******************************************************************************
SQL>  *        UMF XML TABLE Views.
SQL>  *        These views are built on an XML object provided by
SQL>  *        the dbms_umf_internal.topology_load_xml PL/SQL so they have
SQL>  *        to be created after the UMF PL/SQL packages, hence their placement
SQL>  *        in execsvrm.
SQL>  *****************************************************************************/
SQL> 
SQL> /******************************************************************************
SQL>  *        UMF$_TOPOLOGY_XML
SQL>  *
SQL>  *        Presents a relational view of the "topology" section of the UMF
SQL>  *        metadata. The view corresponds to the umf$_topology table on the
SQL>  *        target and contains identical information.
SQL>  *****************************************************************************/
SQL> CREATE OR REPLACE VIEW umf$_topology_xml AS
  2            SELECT * FROM XMLTable('/UMF_SCHEMA/TOPOLOGY/TOPOLOGY_INST'
  3            PASSING dbms_umf_internal.topology_load_xml
  4            COLUMNS topology_name varchar2(128) PATH 'TOPOLOGY_NAME',
  5                    target_id NUMBER PATH 'TARGET_ID',
  6                    topology_version NUMBER PATH 'TOPOLOGY_VERSION',
  7                    topology_state NUMBER PATH 'TOPOLOGY_STATE');

View created.

SQL> 
SQL> /******************************************************************************
SQL>  *        UMF$_REGISTRATION_XML
SQL>  *
SQL>  *        Presents a relational view of the "registration" section of the UMF
SQL>  *        metadata. The view corresponds to the umf$_registration table on the
SQL>  *        target and contains identical information.
SQL>  *****************************************************************************/
SQL> CREATE OR REPLACE VIEW umf$_registration_xml AS
  2            SELECT * FROM XMLTable('/UMF_SCHEMA/REGISTRATION/REGISTRATION_INST'
  3            PASSING dbms_umf_internal.topology_load_xml
  4            COLUMNS topology_name varchar2(128) PATH 'TOPOLOGY_NAME',
  5                    node_name varchar2(128) PATH 'NODE_NAME',
  6                    node_id NUMBER PATH 'NODE_ID',
  7                    node_type NUMBER PATH 'NODE_TYPE',
  8                    as_source NUMBER PATH 'AS_SOURCE',
  9                    as_candidate_target NUMBER PATH 'AS_CANDIDATE_TARGET',
 10                    state NUMBER PATH 'STATE');

View created.

SQL> 
SQL> /******************************************************************************
SQL>  *        UMF$_LINK_XML
SQL>  *
SQL>  *        Presents a relational view of the "link" section of the UMF
SQL>  *        metadata. The view corresponds to the umf$_link table on the
SQL>  *        target and contains identical information.
SQL>  *****************************************************************************/
SQL> CREATE OR REPLACE VIEW umf$_link_xml AS
  2           SELECT * FROM XMLTable('/UMF_SCHEMA/LINK/LINK_INST'
  3           PASSING dbms_umf_internal.topology_load_xml
  4           COLUMNS topology_name varchar2(128) PATH 'TOPOLOGY_NAME',
  5                    from_node_id NUMBER PATH 'FROM_NODE_ID',
  6                    to_node_id NUMBER PATH 'TO_NODE_ID',
  7                    link_name varchar2(128) PATH 'LINK_NAME');

View created.

SQL> 
SQL> /******************************************************************************
SQL>  *        UMF$_SERVICE_XML
SQL>  *
SQL>  *        Presents a relational view of the "service" section of the UMF
SQL>  *        metadata. The view corresponds to the umf$_service table on the
SQL>  *        target and contains identical information.
SQL>  *****************************************************************************/
SQL> CREATE OR REPLACE VIEW umf$_service_xml AS
  2          SELECT * FROM XMLTable('/UMF_SCHEMA/SERVICE/SERVICE_INST'
  3          PASSING dbms_umf_internal.topology_load_xml
  4          COLUMNS topology_name varchar2(128) PATH 'TOPOLOGY_NAME',
  5                  node_id NUMBER PATH 'NODE_ID',
  6                  service_id NUMBER PATH 'SERVICE_ID');

View created.

SQL> 
SQL> 
SQL> GRANT SELECT, INSERT, DELETE, UPDATE ON umf$_topology_xml TO sys$umf;

Grant succeeded.

SQL> GRANT SELECT, INSERT, DELETE, UPDATE ON umf$_registration_xml TO sys$umf;

Grant succeeded.

SQL> GRANT SELECT, INSERT, DELETE, UPDATE ON umf$_link_xml TO sys$umf;

Grant succeeded.

SQL> GRANT SELECT, INSERT, DELETE, UPDATE ON umf$_service_xml TO sys$umf;

Grant succeeded.

SQL> 
SQL> GRANT SELECT ON UMF$_TOPOLOGY_XML TO SELECT_CATALOG_ROLE
  2  /

Grant succeeded.

SQL> GRANT SELECT ON UMF$_REGISTRATION_XML TO SELECT_CATALOG_ROLE
  2  /

Grant succeeded.

SQL> GRANT SELECT ON UMF$_LINK_XML TO SELECT_CATALOG_ROLE
  2  /

Grant succeeded.

SQL> GRANT SELECT ON UMF$_SERVICE_XML TO SELECT_CATALOG_ROLE
  2  /

Grant succeeded.

SQL> GRANT SELECT ON UMF_SCHEMA_XMLTYPE TO SELECT_CATALOG_ROLE
  2  /

Grant succeeded.

SQL> GRANT SELECT, INSERT, DELETE, UPDATE ON umf_schema_xmltype TO sys$umf;

Grant succeeded.

SQL> /

Grant succeeded.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem HA Events (FAN alerts)
SQL> Rem
SQL> @@exechae.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/exechae.sql /main/3 2014/02/20 12:45:37 surman Exp $
SQL> Rem
SQL> Rem exechae.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2014, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      exechae.sql - EXECute HA Event setup
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      pl/sql blocks for HA events (FAN alerts)
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/exechae.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/exechae.sql
SQL> Rem SQL_PHASE: EXECHAE
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    kneel       06/06/06 - removing auto-inserted SET commands
SQL> Rem    kneel       06/01/06 - subscriber creation for HA Events (FAN alerts)
SQL> Rem    kneel       06/01/06 - subscriber creation for HA Events (FAN alerts)
SQL> Rem    kneel       06/01/06 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem Define a transformation to be used for the notification subscriber
SQL> begin
  2    sys.dbms_transform.create_transformation(
  3          schema => 'SYS', name => 'haen_txfm_obj',
  4          from_schema => 'SYS', from_type => 'ALERT_TYPE',
  5          to_SCHEMA => 'SYS', to_type => 'VARCHAR2',
  6          transformation => 'SYS.haen_txfm_text(source.user_data)');
  7  EXCEPTION
  8    when others then
  9      if sqlcode = -24184 then NULL;
 10      else raise;
 11      end if;
 12  end;
 13  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> Rem Define the HAE_SUB subscriber for the alert_que
SQL> 
SQL> declare
  2  subscriber sys.aq$_agent;
  3  begin
  4  subscriber := sys.aq$_agent('HAE_SUB',null,null);
  5  dbms_aqadm_sys.add_subscriber(queue_name => 'SYS.ALERT_QUE',
  6                                subscriber => subscriber,
  7                                rule => 'tab.user_data.MESSAGE_LEVEL <> '
  8                                        || sys.dbms_server_alert.level_clear ||
  9                                        ' AND tab.user_data.MESSAGE_GROUP = ' ||
 10                                        '''High Availability''',
 11                                transformation => 'SYS.haen_txfm_obj',
 12                                properties =>
 13                                  dbms_aqadm_sys.NOTIFICATION_SUBSCRIBER
 14                                  + dbms_aqadm_sys.PUBLIC_SUBSCRIBER);
 15  EXCEPTION
 16    when others then
 17      if sqlcode = -24034 then NULL;
 18      else raise;
 19      end if;
 20  end;
 21  /

PL/SQL procedure successfully completed.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem Secure configuration settings
SQL> Rem
SQL> @@execsec.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/execsec.sql /main/4 2014/02/20 12:45:54 surman Exp $
SQL> Rem
SQL> Rem execsec.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2014, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      execsec.sql - secure configuration settings
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Secure configuration settings for the database include a reasonable
SQL> Rem      default password profile, password complexity checks, audit settings
SQL> Rem      (enabled, with admin actions audited), and as many revokes from PUBLIC
SQL> Rem      as possible. In the first phase, only the default password profile is
SQL> Rem      included.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/execsec.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/execsec.sql
SQL> Rem SQL_PHASE: EXECSEC
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    nkgopal     09/09/11 - Bug 12794116: call secconf_file with
SQL> Rem                           UNIAUD_CHOICE
SQL> Rem    rburns      06/12/06 - add conditional
SQL> Rem    nlewis      06/06/06 - change filename
SQL> Rem    nlewis      06/05/06 - Secure configuration scripts
SQL> Rem    nlewis      06/05/06 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> Rem  Only run the secconf.sql script for new database creations, not
SQL> Rem  for upgrades or any other reruns of catproc.sql.  The version column
SQL> Rem  in registry$ is NULL while catproc.sql is running the first time
SQL> Rem  on a new database.
SQL> 
SQL> VARIABLE secconf_name VARCHAR2(256)
SQL> COLUMN :secconf_name NEW_VALUE secconf_file NOPRINT
SQL> 
SQL> DECLARE
  2     p_version          varchar2(30);
  3     p_disable_unified  varchar2(30);
  4  BEGIN
  5     :secconf_name := '@nothing.sql';
  6     SELECT version INTO p_version FROM registry$
  7     WHERE cid='CATPROC';
  8  
  9     IF p_version IS NULL THEN
 10  
 11        BEGIN
 12          SELECT value into p_disable_unified FROM v$parameter
 13          WHERE name = '_unified_audit_policy_disabled';
 14        EXCEPTION
 15          WHEN NO_DATA_FOUND THEN
 16            p_disable_unified := 'FALSE';
 17          WHEN OTHERS THEN
 18            p_disable_unified := 'TRUE';
 19            RAISE;
 20        END;
 21  
 22        IF p_disable_unified = 'FALSE' THEN
 23          :secconf_name := '@secconf.sql RDBMS_UNIAUD';
 24        ELSE
 25          :secconf_name := '@secconf.sql RDBMS_11G';
 26        END IF;
 27     END IF;
 28  END;
 29  /

PL/SQL procedure successfully completed.

SQL> 
SQL> SELECT :secconf_name FROM DUAL;




1 row selected.

SQL> @&secconf_file
SQL> Rem
SQL> Rem $Header: rdbms/admin/secconf.sql /main/20 2018/03/03 23:00:36 rthatte Exp $
SQL> Rem
SQL> Rem secconf.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      secconf.sql - SECure CONFiguration script
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Secure configuration settings for the database include a reasonable
SQL> Rem      default password profile, password complexity checks, audit settings
SQL> Rem      (enabled, with admin actions audited), and as many revokes from PUBLIC
SQL> Rem      as possible. In the first phase, only the default password profile is
SQL> Rem      included.
SQL> Rem
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      Only invoked for newly created databases, not for upgraded databases
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/secconf.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/secconf.sql
SQL> Rem SQL_PHASE: SECCONF
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/execsec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    rthatte     12/15/17 - Bug 27071161: tag oracle defined policies
SQL> Rem    amunnoli    06/23/17 - Bug 26040105: Update ORA_CIS_RECOMMENDATIONS per
SQL> Rem                           V2.0.0 (12-28-2016) FOR CIS BENCHMARK
SQL> Rem    anupkk      01/10/17 - Proj# 67576: Enable audit on ALTER DATABASE
SQL> Rem                           DICTIONARY by default
SQL> Rem    anupkk      10/29/15 - Bug-22122810 : Removing repeated privileges in
SQL> Rem                           ORA_SECURECONFIG definition
SQL> Rem    ssonawan    02/04/14 - Bug 20383779: audit BECOME USER by default
SQL> Rem    sumkumar    12/26/14 - Project 46885: inactive account time defaulted
SQL> Rem                           to UNLIMITED for DEFAULT profile
SQL> Rem    amunnoli    09/02/14 - Bug 19499532: Add comments to OOB audit policies
SQL> Rem    risgupta    02/17/14 - Bug 18174384: Remove Logon/Logoff actions from
SQL> Rem                           ORA_SECURECONFIG audit policy
SQL> Rem    surman      01/22/14 - 13922626: Update SQL metadata
SQL> Rem    vpriyans    09/21/13 - Bug 17299076: Added ORA_CIS_RECOMMENDATIONS audit
SQL> Rem                           policy
SQL> Rem    jkati       02/04/13 - bug#16080525: Enable audit on DBMS_RLS by default
SQL> Rem    amunnoli    02/18/13 - Bug #16310544: add CREATE/DROP/ALTER PLUGGABLE
SQL> Rem                           DB actions to default audit configuration
SQL> Rem    vpriyans    06/05/12 - Bug 12904308: Audit CREATE DIRECTORY by default
SQL> Rem    vpriyans    03/22/12 - Bug 13413683: Rename predefined audit policies
SQL> Rem                           and add few more actions and privileges
SQL> Rem    nkgopal     09/08/11 - Bug 12794116: Configure Audit based on input
SQL> Rem                           argument
SQL> Rem    apsrivas    09/30/08 - bug 7428539: Add missing audit settings
SQL> Rem    asurpur     06/16/06 - audit changes for sec config
SQL> Rem    rburns      06/12/06 - secure configuration script
SQL> Rem    rburns      06/12/06 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> Rem Secure configuration settings. Currently, only the default password
SQL> Rem profile is included, without the password complexity check and has
SQL> Rem the recommended audit settings. We will add the revokes from PUBLIC, and
SQL> Rem the password complexity checks.
SQL> 
SQL> -- Create password profile without a password complexity routine, for backward
SQL> -- compatibility. Add the routine if possible without breaking tests
SQL> ALTER PROFILE DEFAULT LIMIT
  2  PASSWORD_LIFE_TIME 180
  3  PASSWORD_GRACE_TIME 7
  4  PASSWORD_REUSE_TIME UNLIMITED
  5  PASSWORD_REUSE_MAX UNLIMITED
  6  FAILED_LOGIN_ATTEMPTS 10
  7  PASSWORD_LOCK_TIME 1
  8  INACTIVE_ACCOUNT_TIME UNLIMITED;

Profile altered.

SQL> 
SQL> -- Turn on auditing options
SQL> 
SQL> PROMPT Do you wish to configure 11g style Audit Configuration OR
Do you wish to configure 11g style Audit Configuration OR
SQL> PROMPT Do you wish to configure 12c Unified Audit Policies?
Do you wish to configure 12c Unified Audit Policies?
SQL> PROMPT Enter RDBMS_11G for former or RDBMS_UNIAUD for latter
Enter RDBMS_11G for former or RDBMS_UNIAUD for latter
SQL> 
SQL> DECLARE
  2    USER_CHOICE               VARCHAR2(100);
  3    RDBMS11_CHOICE  CONSTANT  VARCHAR2(20) := 'RDBMS_11G';
  4    UNIAUD_CHOICE   CONSTANT  VARCHAR2(20) := 'RDBMS_UNIAUD';
  5  BEGIN
  6  
  7    USER_CHOICE := '&1';
  8    -- Audit policy to audit user account and privilege management
  9    EXECUTE IMMEDIATE
 10      'CREATE AUDIT POLICY ORA_ACCOUNT_MGMT ' ||
 11                   'ACTIONS CREATE USER, ALTER USER, DROP USER, ' ||
 12                           'CREATE ROLE, DROP ROLE, ALTER ROLE, ' ||
 13                           'SET ROLE, GRANT, REVOKE';
 14    EXECUTE IMMEDIATE
 15      'COMMENT ON AUDIT POLICY ORA_ACCOUNT_MGMT IS '||
 16        '''Audit policy containing audit options for auditing account ' ||
 17          'management actions ''';
 18  
 19  
 20    -- Audit policy to audit Database parameter settings
 21    EXECUTE IMMEDIATE
 22      'CREATE AUDIT POLICY ORA_DATABASE_PARAMETER '||
 23                   'ACTIONS ALTER DATABASE, ALTER SYSTEM, CREATE SPFILE';
 24    EXECUTE IMMEDIATE
 25      'COMMENT ON AUDIT POLICY ORA_DATABASE_PARAMETER IS '||
 26       ''' Audit policy containing audit options to audit changes '||
 27         ' in database parameters''';
 28  
 29    -- Audit Logon by failures
 30    EXECUTE IMMEDIATE
 31      'CREATE AUDIT POLICY ORA_LOGON_FAILURES ACTIONS LOGON';
 32    EXECUTE IMMEDIATE
 33      'COMMENT ON AUDIT POLICY ORA_LOGON_FAILURES IS '||
 34       '''Audit policy containing audit options to capture logon failures''';
 35  
 36    -- Audit policy containing all Secure Configuration audit-options
 37    -- Bug 20383779: audit BECOME USER by default in Unified Audit
 38    EXECUTE IMMEDIATE
 39      'CREATE AUDIT POLICY ORA_SECURECONFIG ' ||
 40                   'PRIVILEGES ALTER ANY TABLE, CREATE ANY TABLE, ' ||
 41                              'DROP ANY TABLE, CREATE ANY PROCEDURE, ' ||
 42                              'DROP ANY PROCEDURE, ALTER ANY PROCEDURE, '||
 43                              'GRANT ANY PRIVILEGE, ' ||
 44                              'GRANT ANY OBJECT PRIVILEGE, GRANT ANY ROLE, '||
 45                              'AUDIT SYSTEM, CREATE EXTERNAL JOB, ' ||
 46                              'CREATE ANY JOB, CREATE ANY LIBRARY, ' ||
 47                              'EXEMPT ACCESS POLICY, CREATE USER, ' ||
 48                              'DROP USER, ALTER DATABASE, ALTER SYSTEM, '||
 49                              'CREATE PUBLIC SYNONYM, DROP PUBLIC SYNONYM, ' ||
 50                              'CREATE SQL TRANSLATION PROFILE, ' ||
 51                              'CREATE ANY SQL TRANSLATION PROFILE, ' ||
 52                              'DROP ANY SQL TRANSLATION PROFILE, ' ||
 53                              'ALTER ANY SQL TRANSLATION PROFILE, ' ||
 54                              'TRANSLATE ANY SQL, EXEMPT REDACTION POLICY, ' ||
 55                              'PURGE DBA_RECYCLEBIN, LOGMINING, ' ||
 56                              'ADMINISTER KEY MANAGEMENT, BECOME USER ' ||
 57                   'ACTIONS ALTER USER, CREATE ROLE, ALTER ROLE, DROP ROLE, '||
 58                           'SET ROLE, CREATE PROFILE, ALTER PROFILE, ' ||
 59                           'DROP PROFILE, CREATE DATABASE LINK, ' ||
 60                           'ALTER DATABASE LINK, DROP DATABASE LINK, '||
 61                           'CREATE DIRECTORY, DROP DIRECTORY, '||
 62                           'CREATE PLUGGABLE DATABASE, ' ||
 63                           'DROP PLUGGABLE DATABASE, '||
 64                           'ALTER PLUGGABLE DATABASE, '||
 65                           'EXECUTE ON DBMS_RLS, '||
 66                           'ALTER DATABASE DICTIONARY';
 67    EXECUTE IMMEDIATE
 68      'COMMENT ON AUDIT POLICY ORA_SECURECONFIG IS '||
 69        '''Audit policy containing audit options as per database '||
 70          'security best practices''';
 71  
 72    -- Bug 17299076: audit policy with CIS recommended audit options
 73    -- Bug 26040105: Update ORA_CIS_RECOMMENDATIONS policy per V2.0.0
 74    -- (12-28-2016) FOR CIS BENCHMARK
 75    EXECUTE IMMEDIATE
 76      'CREATE AUDIT POLICY ORA_CIS_RECOMMENDATIONS '||
 77                'PRIVILEGES SELECT ANY DICTIONARY, ALTER SYSTEM '||
 78                   'ACTIONS CREATE USER, ALTER USER, DROP USER, ' ||
 79                           'CREATE ROLE, DROP ROLE, ALTER ROLE, ' ||
 80                           'GRANT, REVOKE, CREATE DATABASE LINK, '||
 81                           'ALTER DATABASE LINK, DROP DATABASE LINK, '||
 82                           'CREATE PROFILE, ALTER PROFILE, DROP PROFILE, '||
 83                           'CREATE SYNONYM, DROP SYNONYM, '||
 84                           'CREATE PROCEDURE, DROP PROCEDURE, '||
 85                           'ALTER PROCEDURE, ALTER SYNONYM, CREATE FUNCTION, '||
 86                           'CREATE PACKAGE, CREATE PACKAGE BODY, '||
 87                           'ALTER FUNCTION, ALTER PACKAGE, ALTER SYSTEM, '||
 88                           'ALTER PACKAGE BODY, DROP FUNCTION, '||
 89                           'DROP PACKAGE, DROP PACKAGE BODY, '||
 90                           'CREATE TRIGGER, ALTER TRIGGER, '||
 91                           'DROP TRIGGER';
 92    EXECUTE IMMEDIATE
 93      'COMMENT ON AUDIT POLICY ORA_CIS_RECOMMENDATIONS IS '||
 94        '''Audit policy containing audit options as per CIS recommendations''';
 95  
 96    IF USER_CHOICE = RDBMS11_CHOICE THEN
 97      -- 11g Secure Audit Configuration
 98      -- Bug 20383779: audit BECOME USER by default in Traditional Audit
 99  
100      EXECUTE IMMEDIATE 'AUDIT ALTER ANY TABLE BY ACCESS';
101      EXECUTE IMMEDIATE 'AUDIT CREATE ANY TABLE BY ACCESS';
102      EXECUTE IMMEDIATE 'AUDIT DROP ANY TABLE BY ACCESS';
103      EXECUTE IMMEDIATE 'AUDIT CREATE ANY PROCEDURE BY ACCESS';
104      EXECUTE IMMEDIATE 'AUDIT DROP ANY PROCEDURE BY ACCESS';
105      EXECUTE IMMEDIATE 'AUDIT ALTER ANY PROCEDURE BY ACCESS';
106      EXECUTE IMMEDIATE 'AUDIT GRANT ANY PRIVILEGE BY ACCESS';
107      EXECUTE IMMEDIATE 'AUDIT GRANT ANY OBJECT PRIVILEGE BY ACCESS';
108      EXECUTE IMMEDIATE 'AUDIT GRANT ANY ROLE BY ACCESS';
109      EXECUTE IMMEDIATE 'AUDIT AUDIT SYSTEM BY ACCESS';
110      EXECUTE IMMEDIATE 'AUDIT CREATE EXTERNAL JOB BY ACCESS';
111      EXECUTE IMMEDIATE 'AUDIT CREATE ANY JOB BY ACCESS';
112      EXECUTE IMMEDIATE 'AUDIT CREATE ANY LIBRARY BY ACCESS';
113      EXECUTE IMMEDIATE 'AUDIT CREATE PUBLIC DATABASE LINK BY ACCESS';
114      EXECUTE IMMEDIATE 'AUDIT EXEMPT ACCESS POLICY BY ACCESS';
115      EXECUTE IMMEDIATE 'AUDIT ALTER USER BY ACCESS';
116      EXECUTE IMMEDIATE 'AUDIT CREATE USER BY ACCESS';
117      EXECUTE IMMEDIATE 'AUDIT ROLE BY ACCESS';
118      EXECUTE IMMEDIATE 'AUDIT CREATE SESSION BY ACCESS';
119      EXECUTE IMMEDIATE 'AUDIT DROP USER BY ACCESS';
120      EXECUTE IMMEDIATE 'AUDIT ALTER DATABASE BY ACCESS';
121      EXECUTE IMMEDIATE 'AUDIT ALTER SYSTEM BY ACCESS';
122      EXECUTE IMMEDIATE 'AUDIT ALTER PROFILE BY ACCESS';
123      EXECUTE IMMEDIATE 'AUDIT DROP PROFILE BY ACCESS';
124      EXECUTE IMMEDIATE 'AUDIT DATABASE LINK BY ACCESS';
125      EXECUTE IMMEDIATE 'AUDIT SYSTEM AUDIT BY ACCESS';
126      EXECUTE IMMEDIATE 'AUDIT PROFILE BY ACCESS';
127      EXECUTE IMMEDIATE 'AUDIT PUBLIC SYNONYM BY ACCESS';
128      EXECUTE IMMEDIATE 'AUDIT SYSTEM GRANT BY ACCESS';
129      EXECUTE IMMEDIATE 'AUDIT CREATE SQL TRANSLATION PROFILE BY ACCESS';
130      EXECUTE IMMEDIATE 'AUDIT CREATE ANY SQL TRANSLATION PROFILE BY ACCESS';
131      EXECUTE IMMEDIATE 'AUDIT DROP ANY SQL TRANSLATION PROFILE BY ACCESS';
132      EXECUTE IMMEDIATE 'AUDIT ALTER ANY SQL TRANSLATION PROFILE BY ACCESS';
133      EXECUTE IMMEDIATE 'AUDIT TRANSLATE ANY SQL BY ACCESS';
134      EXECUTE IMMEDIATE 'AUDIT PURGE DBA_RECYCLEBIN BY ACCESS';
135      EXECUTE IMMEDIATE 'AUDIT LOGMINING BY ACCESS';
136      EXECUTE IMMEDIATE 'AUDIT EXEMPT REDACTION POLICY BY ACCESS';
137      EXECUTE IMMEDIATE 'AUDIT ADMINISTER KEY MANAGEMENT BY ACCESS';
138      EXECUTE IMMEDIATE 'AUDIT DIRECTORY BY ACCESS';
139      EXECUTE IMMEDIATE 'AUDIT PLUGGABLE DATABASE BY ACCESS';
140      EXECUTE IMMEDIATE 'AUDIT BECOME USER BY ACCESS';
141  
142      -- Audit configurarion on Common object in PDB is not supported.
143      -- Hence execute AUDIT on DBMS_RLS in non-CDB and CDB$ROOT.
144      IF (SYS_CONTEXT('USERENV', 'CON_ID') in (0,1)) THEN
145        EXECUTE IMMEDIATE 'AUDIT EXECUTE ON DBMS_RLS BY ACCESS';
146      END IF;
147  
148    ELSIF USER_CHOICE = UNIAUD_CHOICE THEN
149      -- 12c Secure Audit Configuration
150  
151       -- Enable ORA_SECURECONFIG for all users
152       EXECUTE IMMEDIATE 'AUDIT POLICY ORA_SECURECONFIG';
153       -- Also enable Logon failures. Bug 18174384
154       EXECUTE IMMEDIATE 'AUDIT POLICY ORA_LOGON_FAILURES WHENEVER NOT SUCCESSFUL';
155  
156  
157    ELSE
158      DBMS_OUTPUT.PUT_LINE('Invalid Input "' || USER_CHOICE ||
159                           '". Please try again');
160    END IF;
161  
162  END;
163  /

PL/SQL procedure successfully completed.

SQL> 
SQL> --Bug 27071161: Set a bit in the audit policy dictionary table to indicate the
SQL> --predefined audit policies
SQL> 
SQL> update sys.aud_policy$ set type= type + 512
  2  where (bitand(type, 512) = 0) and policy# in
  3  (select distinct obj# from sys.obj$ where namespace=93 and type#=115 and
  4  name in (
  5  'ORA_CIS_RECOMMENDATIONS',
  6  'ORA_DATABASE_PARAMETER',
  7  'ORA_ACCOUNT_MGMT',
  8  'ORA_LOGON_FAILURES',
  9  'ORA_SECURECONFIG',
 10  'COMMON_USER_LOGONS',
 11  'SYS_USER_ACTIONS'));

5 rows updated.

SQL> COMMIT;

Commit complete.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem BSLN automatic stats maintenance job
SQL> Rem
SQL> @@execbsln.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/execbsln.sql /main/4 2014/02/20 12:45:42 surman Exp $
SQL> Rem
SQL> Rem catbslnj.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2014, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catbslnj.sql - BaSeLiNe Jobs for database
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Define and schedule the task(s) for BSLN management.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/execbsln.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/execbsln.sql
SQL> Rem SQL_PHASE: EXECBSLN
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    jsoule      05/08/07 - do not execute when no diagnostics pack
SQL> Rem    jsoule      06/14/06 - created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> ------------------------------------------------------------------------------
SQL> --  PROGRAM:
SQL> --    BSLN_MAINTAIN_STATS_PROG
SQL> --
SQL> --  DESCRIPTION:
SQL> --    Create BSLN compute statistics program.  This program will keep the
SQL> --    default baseline's statistics up-to-date.
SQL> ------------------------------------------------------------------------------
SQL> declare
  2    l_block constant varchar2(512) :=
  3     'begin '||
  4       'if prvt_advisor.is_pack_enabled('''||
  5           dbms_management_packs.DIAGNOSTIC_PACK||
  6                                        ''') then '||
  7         'dbsnmp.bsln_internal.maintain_statistics; '||
  8       'end if; '||
  9     'end;';
 10  begin
 11    dbms_scheduler.create_program
 12      (program_name        => 'BSLN_MAINTAIN_STATS_PROG'
 13      ,program_type        => 'PLSQL_BLOCK'
 14      ,program_action      => l_block
 15      ,number_of_arguments => 0
 16      ,enabled             => TRUE
 17      ,comments            => 'Moving window baseline statistics maintenance program');
 18  exception
 19  when others then
 20    if sqlcode = -27477 then
 21      NULL;
 22    else
 23      raise;
 24    end if;
 25  end;
 26  /

PL/SQL procedure successfully completed.

SQL> 
SQL> ------------------------------------------------------------------------------
SQL> --  SCHEDULE:
SQL> --    BSLN_MAINTAIN_STATS_SCHED
SQL> --
SQL> --  DESCRIPTION:
SQL> --    Create BSLN weekly schedule.  This is the schedule for the (re)compu-
SQL> --    tation of baseline statistics for the default baseline.
SQL> --    The window opens weekly on Saturday night (Sunday morning) at midnight.
SQL> ------------------------------------------------------------------------------
SQL> begin
  2    dbms_scheduler.create_schedule
  3      (schedule_name   => 'BSLN_MAINTAIN_STATS_SCHED'
  4      ,start_date      => TRUNC(sysdate,'D')+7
  5      ,repeat_interval => 'FREQ=WEEKLY'
  6      ,comments        => 'Pre-defined schedule for computing moving window baseline statistics');
  7  exception
  8  when others then
  9    if sqlcode = -27477 then
 10      NULL;
 11    else
 12      raise;
 13    end if;
 14  end;
 15  /

PL/SQL procedure successfully completed.

SQL> 
SQL> ------------------------------------------------------------------------------
SQL> --  JOB:
SQL> --    BSLN_MAINTAIN_STATS_JOB
SQL> --
SQL> --  DESCRIPTION:
SQL> --    Create compute statistics job.  This job runs the
SQL> --    BSLN_MAINTAIN_STATS_PROG program on the BSLN_MAINTAIN_STATS_SCHED
SQL> --    schedule.
SQL> ------------------------------------------------------------------------------
SQL> begin
  2    dbms_scheduler.create_job
  3      (job_name      => 'BSLN_MAINTAIN_STATS_JOB'
  4      ,program_name  => 'BSLN_MAINTAIN_STATS_PROG'
  5      ,schedule_name => 'BSLN_MAINTAIN_STATS_SCHED'
  6      ,enabled       => TRUE
  7      ,auto_drop     => FALSE
  8      ,comments      => 'Oracle defined automatic moving window baseline statistics computation job');
  9  exception
 10  when others then
 11    if sqlcode = -27477 then
 12      NULL;
 13    else
 14      raise;
 15    end if;
 16  end;
 17  /

PL/SQL procedure successfully completed.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem oracle_loader and oracle_datapump for external tables
SQL> Rem
SQL> @@dbmspump.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/dbmspump.sql /main/16 2017/04/19 10:54:35 bwright Exp $
SQL> Rem
SQL> Rem dbmspump.sql
SQL> Rem
SQL> Rem Copyright (c) 2000, 2017, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmspump.sql - DBMS procedures for dataPUMP
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      objects used by datapump
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      none
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/dbmspump.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/dbmspump.sql
SQL> Rem SQL_PHASE: DBMSPUMP
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    bwright     04/03/17 - Bug 25808867: Add FORCE, NOT PERSISTABLE to type
SQL> Rem                           definitions
SQL> Rem    dvekaria    06/21/16 - 23604553 Fix ORA-22308 in upgrade from pre-12.1
SQL> Rem    abrumm      04/01/14 - rename ORACLE_BIGSQL to ORACLE_BIGDATA
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    abrumm      12/18/13 - exadoop: add raw attribute to
SQL> Rem                           qxxq[Open,Fetch,Populate,Close]
SQL> Rem    jstenois    12/05/13 - add infrastructure for exadoop
SQL> Rem    achaudhr    11/22/13 - 17793123: Make oracle_loader deterministic
SQL> Rem                           to enable RC
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    jstenois    03/08/12 - 13725431: use different duration for self context
SQL> Rem    jstenois    04/20/11 - 5560282: fix memory leak and use NOCOPY
SQL> Rem    msakayed    05/29/08 - Remove exec grants on sys.oracle_loader/datapump
SQL> Rem    msakayed    04/25/07 - Bug #5119713: Memleak - use "LANGUAGE C" callspec
SQL> Rem    hsbedi      07/30/02 -
> Rem    hsbedi      06/29/02 - External table populate
SQL> Rem    abrumm      02/05/01 - add 'AUTHID CURRENT_USER' clause
SQL> Rem    rphillip    02/08/01 - support DPAPI stream versions
SQL> Rem    abrumm      10/11/00 - use ODCIColInfoList2
SQL> Rem    jstenois    08/30/00 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> rem create type for external tables
SQL> 
SQL> -- CREATE EXTERNAL TABLE IMPLEMENTATION TYPE   (SYS.ORACLE_LOADER)
SQL> CREATE OR REPLACE TYPE sys.oracle_loader FORCE AUTHID CURRENT_USER AS OBJECT
  2  (
  3    xtctx  RAW(4),
  4    STATIC FUNCTION ODCIGetInterfaces(ifclist OUT NOCOPY SYS.ODCIObjectList)
  5           RETURN NUMBER DETERMINISTIC,
  6  
  7    STATIC FUNCTION ODCIExtTableOpen(lctx   IN OUT NOCOPY oracle_loader,
  8                                     xti    IN            SYS.ODCIExtTableInfo,
  9                                     xri       OUT NOCOPY SYS.ODCIExtTableQCInfo,
 10                                     pcl       OUT NOCOPY SYS.ODCIColInfoList2,
 11                                     flag   IN OUT        number,
 12                                     strv   IN OUT        number,
 13                                     env    IN            SYS.ODCIEnv,
 14                                     xtArgs IN OUT        raw)
 15           RETURN number DETERMINISTIC,
 16  
 17  -- Fetch data for the given granule.  Note that cnverr is the number
 18  -- of conversion errors that occurred while fetching and converting rows
 19  -- for the current granule, gnum is the current granule number.
 20  
 21    MEMBER FUNCTION ODCIExtTableFetch(gnum   IN     number,
 22                                      cnverr IN OUT number,
 23                                      flag   IN OUT number,
 24                                      env    IN     SYS.ODCIEnv,
 25                                      xtArgs IN OUT raw)
 26           RETURN number DETERMINISTIC,
 27  
 28    MEMBER FUNCTION ODCIExtTablePopulate(flag   IN OUT number,
 29                                         env    IN     SYS.ODCIEnv,
 30                                         xtArgs IN OUT raw)
 31           RETURN number DETERMINISTIC,
 32  
 33    MEMBER FUNCTION ODCIExtTableClose(flag   IN OUT number,
 34                                      env    IN     SYS.ODCIEnv,
 35                                      xtArgs IN OUT raw)
 36           RETURN number DETERMINISTIC
 37  ) NOT PERSISTABLE;
 38  /

Type created.

SQL> 
SQL> -- CREATE EXTERNAL TABLE IMPLEMENTATION TYPE   (SYS.ORACLE_DATAPUMP)
SQL> CREATE OR REPLACE TYPE sys.oracle_datapump FORCE AUTHID CURRENT_USER AS OBJECT
  2  (
  3    xtctx  RAW(4),
  4    STATIC FUNCTION ODCIGetInterfaces(ifclist OUT NOCOPY SYS.ODCIObjectList)
  5           RETURN NUMBER,
  6  
  7    STATIC FUNCTION ODCIExtTableOpen(lctx   IN OUT NOCOPY oracle_datapump,
  8                                     xti    IN            SYS.ODCIExtTableInfo,
  9                                     xri       OUT NOCOPY SYS.ODCIExtTableQCInfo,
 10                                     pcl       OUT NOCOPY SYS.ODCIColInfoList2,
 11                                     flag   IN OUT        number,
 12                                     strv   IN OUT        number,
 13                                     env    IN            SYS.ODCIEnv,
 14                                     xtArgs IN OUT        raw)
 15           RETURN number,
 16  
 17  -- Fetch data for the given granule.  Note that cnverr is the number
 18  -- of conversion errors that occurred while fetching and converting rows
 19  -- for the current granule, gnum is the current granule number.
 20  
 21    MEMBER FUNCTION ODCIExtTableFetch(gnum   IN     number,
 22                                      cnverr IN OUT number,
 23                                      flag   IN OUT number,
 24                                      env    IN     SYS.ODCIEnv,
 25                                      xtArgs IN OUT raw)
 26           RETURN number,
 27    MEMBER FUNCTION ODCIExtTablePopulate(flag   IN OUT number,
 28                                         env    IN     SYS.ODCIEnv,
 29                                         xtArgs IN OUT raw)
 30           RETURN number,
 31  
 32    MEMBER FUNCTION ODCIExtTableClose(flag   IN OUT number,
 33                                      env    IN     SYS.ODCIEnv,
 34                                      xtArgs IN OUT raw)
 35           RETURN number
 36  ) NOT PERSISTABLE;
 37  /

Type created.

SQL> 
SQL> -- CREATE EXTERNAL TABLE IMPLEMENTATION TYPE   (SYS.ORACLE_HIVE)
SQL> CREATE OR REPLACE TYPE sys.oracle_hive FORCE AUTHID CURRENT_USER AS OBJECT
  2  (
  3    xtctx  RAW(4),
  4    STATIC FUNCTION ODCIGetInterfaces(ifclist OUT NOCOPY SYS.ODCIObjectList)
  5           RETURN NUMBER DETERMINISTIC,
  6  
  7    STATIC FUNCTION ODCIExtTableOpen(lctx   IN OUT NOCOPY oracle_hive,
  8                                     xti    IN            SYS.ODCIExtTableInfo,
  9                                     xri       OUT NOCOPY SYS.ODCIExtTableQCInfo,
 10                                     pcl       OUT NOCOPY SYS.ODCIColInfoList2,
 11                                     flag   IN OUT        number,
 12                                     strv   IN OUT        number,
 13                                     env    IN            SYS.ODCIEnv,
 14                                     xtArgs IN OUT        raw)
 15           RETURN number DETERMINISTIC,
 16  
 17  -- Fetch data for the given granule.  Note that cnverr is the number
 18  -- of conversion errors that occurred while fetching and converting rows
 19  -- for the current granule, gnum is the current granule number.
 20  
 21    MEMBER FUNCTION ODCIExtTableFetch(gnum   IN     number,
 22                                      cnverr IN OUT number,
 23                                      flag   IN OUT number,
 24                                      env    IN     SYS.ODCIEnv,
 25                                      xtArgs IN OUT raw)
 26           RETURN number DETERMINISTIC,
 27  
 28    MEMBER FUNCTION ODCIExtTablePopulate(flag   IN OUT number,
 29                                         env    IN     SYS.ODCIEnv,
 30                                         xtArgs IN OUT raw)
 31           RETURN number DETERMINISTIC,
 32  
 33    MEMBER FUNCTION ODCIExtTableClose(flag   IN OUT number,
 34                                      env    IN     SYS.ODCIEnv,
 35                                      xtArgs IN OUT raw)
 36           RETURN number DETERMINISTIC
 37  ) NOT PERSISTABLE;
 38  /

Type created.

SQL> 
SQL> 
SQL> -- CREATE EXTERNAL TABLE IMPLEMENTATION TYPE   (SYS.ORACLE_HDFS)
SQL> CREATE OR REPLACE TYPE sys.oracle_hdfs FORCE AUTHID CURRENT_USER AS OBJECT
  2  (
  3    xtctx  RAW(4),
  4    STATIC FUNCTION ODCIGetInterfaces(ifclist OUT NOCOPY SYS.ODCIObjectList)
  5           RETURN NUMBER DETERMINISTIC,
  6  
  7    STATIC FUNCTION ODCIExtTableOpen(lctx   IN OUT NOCOPY oracle_hdfs,
  8                                     xti    IN            SYS.ODCIExtTableInfo,
  9                                     xri       OUT NOCOPY SYS.ODCIExtTableQCInfo,
 10                                     pcl       OUT NOCOPY SYS.ODCIColInfoList2,
 11                                     flag   IN OUT        number,
 12                                     strv   IN OUT        number,
 13                                     env    IN            SYS.ODCIEnv,
 14                                     xtArgs IN OUT       raw)
 15           RETURN number DETERMINISTIC,
 16  
 17  -- Fetch data for the given granule.  Note that cnverr is the number
 18  -- of conversion errors that occurred while fetching and converting rows
 19  -- for the current granule, gnum is the current granule number.
 20  
 21    MEMBER FUNCTION ODCIExtTableFetch(gnum   IN     number,
 22                                      cnverr IN OUT number,
 23                                      flag   IN OUT number,
 24                                      env    IN     SYS.ODCIEnv,
 25                                      xtArgs IN OUT raw)
 26           RETURN number DETERMINISTIC,
 27  
 28    MEMBER FUNCTION ODCIExtTablePopulate(flag   IN OUT number,
 29                                         env    IN     SYS.ODCIEnv,
 30                                         xtArgs IN OUT raw)
 31           RETURN number DETERMINISTIC,
 32  
 33    MEMBER FUNCTION ODCIExtTableClose(flag IN OUT number,
 34                                      env    IN     SYS.ODCIEnv,
 35                                      xtArgs IN OUT raw)
 36           RETURN number DETERMINISTIC
 37  ) NOT PERSISTABLE;
 38  /

Type created.

SQL> 
SQL> 
SQL> -- CREATE EXTERNAL TABLE IMPLEMENTATION TYPE   (SYS.ORACLE_BIGDATA)
SQL> CREATE OR REPLACE TYPE sys.oracle_bigdata FORCE AUTHID CURRENT_USER AS OBJECT
  2  (
  3    xtctx  RAW(4),
  4    STATIC FUNCTION ODCIGetInterfaces(ifclist OUT NOCOPY SYS.ODCIObjectList)
  5           RETURN NUMBER DETERMINISTIC,
  6  
  7    STATIC FUNCTION ODCIExtTableOpen(lctx   IN OUT NOCOPY oracle_bigdata,
  8                                     xti    IN            SYS.ODCIExtTableInfo,
  9                                     xri       OUT NOCOPY SYS.ODCIExtTableQCInfo,
 10                                     pcl       OUT NOCOPY SYS.ODCIColInfoList2,
 11                                     flag   IN OUT        number,
 12                                     strv   IN OUT        number,
 13                                     env    IN            SYS.ODCIEnv,
 14                                     xtArgs IN OUT        raw)
 15           RETURN number DETERMINISTIC,
 16  
 17  -- Fetch data for the given granule.  Note that cnverr is the number
 18  -- of conversion errors that occurred while fetching and converting rows
 19  -- for the current granule, gnum is the current granule number.
 20  
 21    MEMBER FUNCTION ODCIExtTableFetch(gnum   IN     number,
 22                                      cnverr IN OUT number,
 23                                      flag   IN OUT number,
 24                                      env    IN     SYS.ODCIEnv,
 25                                      xtArgs IN OUT raw)
 26           RETURN number DETERMINISTIC,
 27  
 28    MEMBER FUNCTION ODCIExtTablePopulate(flag   IN OUT number,
 29                                         env    IN     SYS.ODCIEnv,
 30                                         xtArgs IN OUT raw)
 31           RETURN number DETERMINISTIC,
 32  
 33    MEMBER FUNCTION ODCIExtTableClose(flag   IN OUT number,
 34                                      env    IN     SYS.ODCIEnv,
 35                                      xtArgs IN OUT raw)
 36           RETURN number DETERMINISTIC
 37  ) NOT PERSISTABLE;
 38  /

Type created.

SQL> 
SQL> 
SQL> ---------------------------------
SQL> --  CREATE IMPLEMENTATION UNIT --
SQL> ---------------------------------
SQL> -- CREATE LIBRARY
SQL> CREATE OR REPLACE LIBRARY QXXQLIB TRUSTED AS STATIC;
  2  /

Library created.

SQL> 
SQL> -- CREATE TYPE BODY
SQL> CREATE OR REPLACE TYPE BODY sys.oracle_loader
  2  IS
  3  --
  4  -- ODCIGetInterfaces - returns supported interface and stream version.
  5  --
  6    STATIC FUNCTION ODCIGETINTERFACES(ifclist OUT NOCOPY SYS.ODCIOBJECTLIST)
  7         RETURN NUMBER DETERMINISTIC IS
  8    BEGIN
  9        ifclist := SYS.ODCIOBJECTLIST
 10                          (
 11                            SYS.ODCIOBJECT('SYS','ODCIEXTTABLE1'),
 12                            SYS.ODCIOBJECT('SYS','ODCIEXTTABLE_STREAM1')
 13                          );
 14        RETURN ODCICONST.SUCCESS;
 15    END ODCIGETINTERFACES;
 16  --
 17  -- ODCIExtTableOpen
 18  --
 19    STATIC FUNCTION ODCIEXTTABLEOPEN(LCTX IN OUT NOCOPY oracle_loader,
 20                                     xti    IN            SYS.ODCIEXTTABLEINFO,
 21                                     xri       OUT NOCOPY SYS.ODCIEXTTABLEQCINFO,
 22                                     pcl       OUT NOCOPY SYS.ODCICOLINFOLIST2,
 23                                     flag   IN OUT        NUMBER,
 24                                     strv   IN OUT        NUMBER,
 25                                     env    IN            SYS.ODCIENV,
 26                                     xtArgs IN OUT        RAW)
 27      RETURN NUMBER DETERMINISTIC AS LANGUAGE C
 28      NAME "QXXQ_OPEN"
 29      LIBRARY QXXQLIB
 30      WITH CONTEXT
 31      PARAMETERS
 32      (
 33        CONTEXT,
 34        lctx,
 35        lctx   INDICATOR STRUCT,
 36        lctx   duration,
 37        xti,
 38        xti    INDICATOR STRUCT,
 39        xri,
 40        xri    INDICATOR STRUCT,
 41        pcl,
 42        pcl    INDICATOR,
 43        flag,
 44        flag   INDICATOR,
 45        strv,
 46        strv   INDICATOR,
 47        env,
 48        env    INDICATOR STRUCT,
 49        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
 50        RETURN OCINUMBER
 51      );
 52  --
 53  -- ODCIExtTableFetch
 54  --
 55    MEMBER FUNCTION ODCIEXTTABLEFETCH(gnum     IN     NUMBER,
 56                                      cnverr   IN OUT NUMBER,
 57                                      flag     IN OUT NUMBER,
 58                                      env      IN     SYS.ODCIENV,
 59                                      xtArgs   IN OUT RAW)
 60      RETURN NUMBER DETERMINISTIC AS LANGUAGE C
 61      NAME "QXXQ_FETCH"
 62      LIBRARY QXXQLIB
 63      WITH CONTEXT
 64      PARAMETERS
 65      (
 66        CONTEXT,
 67        SELF,
 68        SELF   INDICATOR STRUCT,
 69        gnum,
 70        gnum   INDICATOR,
 71        cnverr,
 72        cnverr INDICATOR,
 73        flag,
 74        flag   INDICATOR,
 75        env,
 76        env    INDICATOR STRUCT,
 77        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
 78        RETURN OCINUMBER
 79      );
 80  --
 81  -- ODCIExtTablePopulate
 82  --
 83    MEMBER FUNCTION ODCIEXTTABLEPOPULATE(flag   IN OUT NUMBER,
 84                                         env    IN     SYS.ODCIENV,
 85                                         xtArgs IN OUT RAW)
 86      RETURN NUMBER DETERMINISTIC AS LANGUAGE C
 87      NAME "QXXQ_POPULATE"
 88      LIBRARY QXXQLIB
 89      WITH CONTEXT
 90      PARAMETERS
 91      (
 92        CONTEXT,
 93        SELF,
 94        SELF   INDICATOR STRUCT,
 95        flag,
 96        flag   INDICATOR,
 97        env,
 98        env    INDICATOR STRUCT,
 99        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
100        RETURN OCINUMBER
101      );
102  --
103  -- ODCIExtTableClose
104  --
105    MEMBER FUNCTION ODCIEXTTABLECLOSE(flag   IN OUT NUMBER,
106                                      env    IN     SYS.ODCIENV,
107                                      xtArgs IN OUT RAW)
108      RETURN NUMBER DETERMINISTIC AS LANGUAGE C
109      NAME "QXXQ_CLOSE"
110      LIBRARY QXXQLIB
111      WITH CONTEXT
112      PARAMETERS
113      (
114        CONTEXT,
115        SELF,
116        SELF   INDICATOR STRUCT,
117        flag,
118        flag   INDICATOR,
119        env,
120        env    INDICATOR STRUCT,
121        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
122        RETURN OCINUMBER
123      );
124  END;
125  /

Type body created.

SQL> 
SQL> -- CREATE TYPE BODY
SQL> CREATE OR REPLACE TYPE BODY sys.oracle_datapump
  2  IS
  3  --
  4  -- ODCIGetInterfaces - returns supported interface and stream version.
  5  --
  6    STATIC FUNCTION ODCIGETINTERFACES(ifclist OUT NOCOPY SYS.ODCIOBJECTLIST)
  7         RETURN NUMBER IS
  8    BEGIN
  9        ifclist := SYS.ODCIOBJECTLIST
 10                          (
 11                            SYS.ODCIOBJECT('SYS','ODCIEXTTABLE1'),
 12                            SYS.ODCIOBJECT('SYS','ODCIEXTTABLE_STREAM1')
 13                          );
 14        RETURN ODCICONST.SUCCESS;
 15    END ODCIGETINTERFACES;
 16  --
 17  -- ODCIExtTableOpen
 18  --
 19    STATIC FUNCTION ODCIEXTTABLEOPEN(LCTX IN OUT NOCOPY oracle_datapump,
 20                                     xti    IN            SYS.ODCIEXTTABLEINFO,
 21                                     xri       OUT NOCOPY SYS.ODCIEXTTABLEQCINFO,
 22                                     pcl       OUT NOCOPY SYS.ODCICOLINFOLIST2,
 23                                     flag   IN OUT NUMBER,
 24                                     strv   IN OUT NUMBER,
 25                                     env    IN     SYS.ODCIENV,
 26                                     xtArgs IN OUT RAW)
 27      RETURN NUMBER AS LANGUAGE C
 28      NAME "QXXQ_OPEN"
 29      LIBRARY QXXQLIB
 30      WITH CONTEXT
 31      PARAMETERS
 32      (
 33        CONTEXT,
 34        lctx,
 35        lctx   INDICATOR STRUCT,
 36        lctx   duration,
 37        xti,
 38        xti    INDICATOR STRUCT,
 39        xri,
 40        xri    INDICATOR STRUCT,
 41        pcl,
 42        pcl    INDICATOR,
 43        flag,
 44        flag   INDICATOR,
 45        strv,
 46        strv   INDICATOR,
 47        env,
 48        env    INDICATOR STRUCT,
 49        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
 50        RETURN OCINUMBER
 51      );
 52  --
 53  -- ODCIExtTableFetch
 54  --
 55    MEMBER FUNCTION ODCIEXTTABLEFETCH(gnum   IN     NUMBER,
 56                                      cnverr IN OUT NUMBER,
 57                                      flag   IN OUT NUMBER,
 58                                      env    IN     SYS.ODCIENV,
 59                                      xtArgs IN OUT RAW)
 60      RETURN NUMBER AS LANGUAGE C
 61      NAME "QXXQ_FETCH"
 62      LIBRARY QXXQLIB
 63      WITH CONTEXT
 64      PARAMETERS
 65      (
 66        CONTEXT,
 67        SELF,
 68        SELF   INDICATOR STRUCT,
 69        gnum,
 70        gnum   INDICATOR,
 71        cnverr,
 72        cnverr INDICATOR,
 73        flag,
 74        flag   INDICATOR,
 75        env,
 76        env    INDICATOR STRUCT,
 77        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
 78        RETURN OCINUMBER
 79      );
 80  --
 81  -- ODCIExtTablePopulate
 82  --
 83    MEMBER FUNCTION ODCIEXTTABLEPOPULATE(flag   IN OUT NUMBER,
 84                                         env    IN     SYS.ODCIENV,
 85                                         xtArgs IN OUT RAW)
 86      RETURN NUMBER AS LANGUAGE C
 87      NAME "QXXQ_POPULATE"
 88      LIBRARY QXXQLIB
 89      WITH CONTEXT
 90      PARAMETERS
 91      (
 92        CONTEXT,
 93        SELF,
 94        SELF   INDICATOR STRUCT,
 95        flag,
 96        flag   INDICATOR,
 97        env,
 98        env    INDICATOR STRUCT,
 99        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
100        RETURN OCINUMBER
101      );
102  
103  --
104  -- ODCIExtTableClose
105  --
106    MEMBER FUNCTION ODCIEXTTABLECLOSE(flag   IN OUT NUMBER,
107                                      env    IN     SYS.ODCIENV,
108                                      xtArgs IN OUT RAW)
109      RETURN NUMBER AS LANGUAGE C
110      NAME "QXXQ_CLOSE"
111      LIBRARY QXXQLIB
112      WITH CONTEXT
113      PARAMETERS
114      (
115        CONTEXT,
116        SELF,
117        SELF   INDICATOR STRUCT,
118        flag,
119        flag   INDICATOR,
120        env,
121        env    INDICATOR STRUCT,
122        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
123        RETURN OCINUMBER
124      );
125  END;
126  /

Type body created.

SQL> 
SQL> -- CREATE TYPE BODY
SQL> CREATE OR REPLACE TYPE BODY sys.oracle_hive
  2  IS
  3  --
  4  -- ODCIGetInterfaces - returns supported interface and stream version.
  5  --
  6    STATIC FUNCTION ODCIGETINTERFACES(ifclist OUT NOCOPY SYS.ODCIOBJECTLIST)
  7         RETURN NUMBER DETERMINISTIC IS
  8    BEGIN
  9        ifclist := SYS.ODCIOBJECTLIST
 10                          (
 11                            SYS.ODCIOBJECT('SYS','ODCIEXTTABLE1'),
 12                            SYS.ODCIOBJECT('SYS','ODCIEXTTABLE_STREAM1')
 13                          );
 14        RETURN ODCICONST.SUCCESS;
 15    END ODCIGETINTERFACES;
 16  --
 17  -- ODCIExtTableOpen
 18  --
 19    STATIC FUNCTION ODCIEXTTABLEOPEN(LCTX   IN OUT NOCOPY oracle_hive,
 20                                     xti    IN            SYS.ODCIEXTTABLEINFO,
 21                                     xri       OUT NOCOPY SYS.ODCIEXTTABLEQCINFO,
 22                                     pcl       OUT NOCOPY SYS.ODCICOLINFOLIST2,
 23                                     flag   IN OUT        NUMBER,
 24                                     strv   IN OUT        NUMBER,
 25                                     env    IN            SYS.ODCIENV,
 26                                     xtArgs IN OUT        RAW)
 27      RETURN NUMBER DETERMINISTIC AS LANGUAGE C
 28      NAME "QXXQ_OPEN"
 29      LIBRARY QXXQLIB
 30      WITH CONTEXT
 31      PARAMETERS
 32      (
 33        CONTEXT,
 34        lctx,
 35        lctx   INDICATOR STRUCT,
 36        lctx   duration,
 37        xti,
 38        xti    INDICATOR STRUCT,
 39        xri,
 40        xri    INDICATOR STRUCT,
 41        pcl,
 42        pcl    INDICATOR,
 43        flag,
 44        flag   INDICATOR,
 45        strv,
 46        strv   INDICATOR,
 47        env,
 48        env    INDICATOR STRUCT,
 49        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
 50        RETURN OCINUMBER
 51      );
 52  --
 53  -- ODCIExtTableFetch
 54  --
 55    MEMBER FUNCTION ODCIEXTTABLEFETCH(gnum     IN     NUMBER,
 56                                      cnverr   IN OUT NUMBER,
 57                                      flag     IN OUT NUMBER,
 58                                      env      IN     SYS.ODCIENV,
 59                                      xtArgs   IN OUT RAW)
 60      RETURN NUMBER DETERMINISTIC AS LANGUAGE C
 61      NAME "QXXQ_FETCH"
 62      LIBRARY QXXQLIB
 63      WITH CONTEXT
 64      PARAMETERS
 65      (
 66        CONTEXT,
 67        SELF,
 68        SELF   INDICATOR STRUCT,
 69        gnum,
 70        gnum   INDICATOR,
 71        cnverr,
 72        cnverr INDICATOR,
 73        flag,
 74        flag   INDICATOR,
 75        env,
 76        env    INDICATOR STRUCT,
 77        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
 78        RETURN OCINUMBER
 79      );
 80  --
 81  -- ODCIExtTablePopulate
 82  --
 83    MEMBER FUNCTION ODCIEXTTABLEPOPULATE(flag   IN OUT NUMBER,
 84                                         env    IN     SYS.ODCIENV,
 85                                         xtArgs IN OUT        RAW)
 86      RETURN NUMBER DETERMINISTIC AS LANGUAGE C
 87      NAME "QXXQ_POPULATE"
 88      LIBRARY QXXQLIB
 89      WITH CONTEXT
 90      PARAMETERS
 91      (
 92        CONTEXT,
 93        SELF,
 94        SELF   INDICATOR STRUCT,
 95        flag,
 96        flag   INDICATOR,
 97        env,
 98        env    INDICATOR STRUCT,
 99        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
100        RETURN OCINUMBER
101      );
102  --
103  -- ODCIExtTableClose
104  --
105    MEMBER FUNCTION ODCIEXTTABLECLOSE(flag   IN OUT NUMBER,
106                                      env    IN     SYS.ODCIENV,
107                                      xtArgs IN OUT        RAW)
108      RETURN NUMBER DETERMINISTIC AS LANGUAGE C
109      NAME "QXXQ_CLOSE"
110      LIBRARY QXXQLIB
111      WITH CONTEXT
112      PARAMETERS
113      (
114        CONTEXT,
115        SELF,
116        SELF   INDICATOR STRUCT,
117        flag,
118        flag   INDICATOR,
119        env,
120        env    INDICATOR STRUCT,
121        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
122        RETURN OCINUMBER
123      );
124  END;
125  /

Type body created.

SQL> 
SQL> -- CREATE TYPE BODY
SQL> CREATE OR REPLACE TYPE BODY sys.oracle_hdfs
  2  IS
  3  --
  4  -- ODCIGetInterfaces - returns supported interface and stream version.
  5  --
  6    STATIC FUNCTION ODCIGETINTERFACES(ifclist OUT NOCOPY SYS.ODCIOBJECTLIST)
  7         RETURN NUMBER DETERMINISTIC IS
  8    BEGIN
  9        ifclist := SYS.ODCIOBJECTLIST
 10                          (
 11                            SYS.ODCIOBJECT('SYS','ODCIEXTTABLE1'),
 12                            SYS.ODCIOBJECT('SYS','ODCIEXTTABLE_STREAM1')
 13                          );
 14        RETURN ODCICONST.SUCCESS;
 15    END ODCIGETINTERFACES;
 16  --
 17  -- ODCIExtTableOpen
 18  --
 19    STATIC FUNCTION ODCIEXTTABLEOPEN(LCTX IN OUT NOCOPY oracle_hdfs,
 20                                     xti    IN          SYS.ODCIEXTTABLEINFO,
 21                                     xri    OUT NOCOPY  SYS.ODCIEXTTABLEQCINFO,
 22                                     pcl    OUT NOCOPY  SYS.ODCICOLINFOLIST2,
 23                                     flag   IN  OUT     NUMBER,
 24                                     strv   IN  OUT     NUMBER,
 25                                     env    IN          SYS.ODCIENV,
 26                                     xtArgs IN  OUT     RAW)
 27      RETURN NUMBER DETERMINISTIC AS LANGUAGE C
 28      NAME "QXXQ_OPEN"
 29      LIBRARY QXXQLIB
 30      WITH CONTEXT
 31      PARAMETERS
 32      (
 33        CONTEXT,
 34        lctx,
 35        lctx   INDICATOR STRUCT,
 36        lctx   duration,
 37        xti,
 38        xti    INDICATOR STRUCT,
 39        xri,
 40        xri    INDICATOR STRUCT,
 41        pcl,
 42        pcl    INDICATOR,
 43        flag,
 44        flag   INDICATOR,
 45        strv,
 46        strv   INDICATOR,
 47        env,
 48        env    INDICATOR STRUCT,
 49        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
 50        RETURN OCINUMBER
 51      );
 52  --
 53  -- ODCIExtTableFetch
 54  --
 55    MEMBER FUNCTION ODCIEXTTABLEFETCH(gnum     IN     NUMBER,
 56                                      cnverr   IN OUT NUMBER,
 57                                      flag     IN OUT NUMBER,
 58                                      env      IN     SYS.ODCIENV,
 59                                      xtArgs   IN OUT RAW)
 60      RETURN NUMBER DETERMINISTIC AS LANGUAGE C
 61      NAME "QXXQ_FETCH"
 62      LIBRARY QXXQLIB
 63      WITH CONTEXT
 64      PARAMETERS
 65      (
 66        CONTEXT,
 67        SELF,
 68        SELF   INDICATOR STRUCT,
 69        gnum,
 70        gnum   INDICATOR,
 71        cnverr,
 72        cnverr INDICATOR,
 73        flag,
 74        flag   INDICATOR,
 75        env,
 76        env    INDICATOR STRUCT,
 77        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
 78        RETURN OCINUMBER
 79      );
 80  --
 81  -- ODCIExtTablePopulate
 82  --
 83    MEMBER FUNCTION ODCIEXTTABLEPOPULATE(flag   IN OUT NUMBER,
 84                                         env    IN     SYS.ODCIENV,
 85                                         xtArgs IN OUT        RAW)
 86      RETURN NUMBER DETERMINISTIC AS LANGUAGE C
 87      NAME "QXXQ_POPULATE"
 88      LIBRARY QXXQLIB
 89      WITH CONTEXT
 90      PARAMETERS
 91      (
 92        CONTEXT,
 93        SELF,
 94        SELF   INDICATOR STRUCT,
 95        flag,
 96        flag   INDICATOR,
 97        env,
 98        env    INDICATOR STRUCT,
 99        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
100        RETURN OCINUMBER
101      );
102  --
103  -- ODCIExtTableClose
104  --
105    MEMBER FUNCTION ODCIEXTTABLECLOSE(flag   IN OUT NUMBER,
106                                      env    IN     SYS.ODCIENV,
107                                      xtArgs IN OUT        RAW)
108      RETURN NUMBER DETERMINISTIC AS LANGUAGE C
109      NAME "QXXQ_CLOSE"
110      LIBRARY QXXQLIB
111      WITH CONTEXT
112      PARAMETERS
113      (
114        CONTEXT,
115        SELF,
116        SELF   INDICATOR STRUCT,
117        flag,
118        flag   INDICATOR,
119        env,
120        env    INDICATOR STRUCT,
121        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
122        RETURN OCINUMBER
123      );
124  END;
125  /

Type body created.

SQL> 
SQL> -- CREATE TYPE BODY
SQL> CREATE OR REPLACE TYPE BODY sys.oracle_bigdata
  2  IS
  3  --
  4  -- ODCIGetInterfaces - returns supported interface and stream version.
  5  --
  6    STATIC FUNCTION ODCIGETINTERFACES(ifclist OUT NOCOPY SYS.ODCIOBJECTLIST)
  7         RETURN NUMBER DETERMINISTIC IS
  8    BEGIN
  9        ifclist := SYS.ODCIOBJECTLIST
 10                          (
 11                            SYS.ODCIOBJECT('SYS','ODCIEXTTABLE1'),
 12                            SYS.ODCIOBJECT('SYS','ODCIEXTTABLE_STREAM1')
 13                          );
 14        RETURN ODCICONST.SUCCESS;
 15    END ODCIGETINTERFACES;
 16  --
 17  -- ODCIExtTableOpen
 18  --
 19    STATIC FUNCTION ODCIEXTTABLEOPEN(LCTX IN OUT NOCOPY oracle_bigdata,
 20                                     xti    IN            SYS.ODCIEXTTABLEINFO,
 21                                     xri       OUT NOCOPY SYS.ODCIEXTTABLEQCINFO,
 22                                     pcl       OUT NOCOPY SYS.ODCICOLINFOLIST2,
 23                                     flag   IN OUT        NUMBER,
 24                                     strv   IN OUT        NUMBER,
 25                                     env    IN            SYS.ODCIENV,
 26                                     xtArgs IN OUT        RAW)
 27      RETURN NUMBER DETERMINISTIC AS LANGUAGE C
 28      NAME "QXXQ_OPEN"
 29      LIBRARY QXXQLIB
 30      WITH CONTEXT
 31      PARAMETERS
 32      (
 33        CONTEXT,
 34        lctx,
 35        lctx   INDICATOR STRUCT,
 36        lctx   duration,
 37        xti,
 38        xti    INDICATOR STRUCT,
 39        xri,
 40        xri    INDICATOR STRUCT,
 41        pcl,
 42        pcl    INDICATOR,
 43        flag,
 44        flag   INDICATOR,
 45        strv,
 46        strv   INDICATOR,
 47        env,
 48        env    INDICATOR STRUCT,
 49        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
 50        RETURN OCINUMBER
 51      );
 52  --
 53  -- ODCIExtTableFetch
 54  --
 55    MEMBER FUNCTION ODCIEXTTABLEFETCH(gnum     IN     NUMBER,
 56                                      cnverr   IN OUT NUMBER,
 57                                      flag     IN OUT NUMBER,
 58                                      env      IN     SYS.ODCIENV,
 59                                      xtArgs   IN OUT RAW)
 60      RETURN NUMBER DETERMINISTIC AS LANGUAGE C
 61      NAME "QXXQ_FETCH"
 62      LIBRARY QXXQLIB
 63      WITH CONTEXT
 64      PARAMETERS
 65      (
 66        CONTEXT,
 67        SELF,
 68        SELF   INDICATOR STRUCT,
 69        gnum,
 70        gnum   INDICATOR,
 71        cnverr,
 72        cnverr INDICATOR,
 73        flag,
 74        flag   INDICATOR,
 75        env,
 76        env    INDICATOR STRUCT,
 77        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
 78        RETURN OCINUMBER
 79      );
 80  --
 81  -- ODCIExtTablePopulate
 82  --
 83    MEMBER FUNCTION ODCIEXTTABLEPOPULATE(flag   IN OUT NUMBER,
 84                                         env    IN     SYS.ODCIENV,
 85                                         xtArgs IN OUT        RAW)
 86      RETURN NUMBER DETERMINISTIC AS LANGUAGE C
 87      NAME "QXXQ_POPULATE"
 88      LIBRARY QXXQLIB
 89      WITH CONTEXT
 90      PARAMETERS
 91      (
 92        CONTEXT,
 93        SELF,
 94        SELF   INDICATOR STRUCT,
 95        flag,
 96        flag   INDICATOR,
 97        env,
 98        env    INDICATOR STRUCT,
 99        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
100        RETURN OCINUMBER
101      );
102  --
103  -- ODCIExtTableClose
104  --
105    MEMBER FUNCTION ODCIEXTTABLECLOSE(flag   IN OUT NUMBER,
106                                      env    IN     SYS.ODCIENV,
107                                      xtArgs IN OUT        RAW)
108      RETURN NUMBER DETERMINISTIC AS LANGUAGE C
109      NAME "QXXQ_CLOSE"
110      LIBRARY QXXQLIB
111      WITH CONTEXT
112      PARAMETERS
113      (
114        CONTEXT,
115        SELF,
116        SELF   INDICATOR STRUCT,
117        flag,
118        flag   INDICATOR,
119        env,
120        env    INDICATOR STRUCT,
121        xtArgs, xtArgs INDICATOR, xtArgs LENGTH,
122        RETURN OCINUMBER
123      );
124  END;
125  /

Type body created.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem OLAP Services
SQL> Rem
SQL> @@olappl.sql
SQL> rem
SQL> rem $Header: oraolap/admin/olappl.sql /main/10 2018/01/16 11:02:53 jcarey Exp $
SQL> rem
SQL> Rem Copyright (c) 2004, 2017, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem    NAME
SQL> Rem      olappl.sql
SQL> Rem    DESCRIPTION
SQL> Rem      Install OLAP-related PL/SQL packages
SQL> Rem    RETURNS
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This script must be run while connected AS SYSDBA.
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: oraolap/admin/olappl.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/olappl.sql
SQL> Rem SQL_PHASE: OLAPPL
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     jcarey     11/15/17 - Bug 25687751- AW lockdown
SQL> Rem     surman     01/13/14 - 13922626: Update SQL metadata
SQL> Rem     cchiappa   03/14/13 - Backport cchiappa_set_oracle_script_121010
SQL> Rem     surman     03/28/12 - 13615447: Add SQL patching tags
SQL> Rem     cchiappa   06/04/08 - Add dbmscbl and prvtcbl
SQL> Rem     ckearney   06/05/06 - add dbmsawst.sql & prvtawst.plb
SQL> Rem     cchiappa   01/18/05 - Run olaptf.plb
SQL> Rem     cchiappa   01/11/05 - Move DBMS_AW_XML to catawxml
SQL> Rem     cchiappa   12/13/04 - Add dbmsawx, unwrap dbmsaw.sql
SQL> Rem     cchiappa   04/06/04 - created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> Rem These two must be first.
SQL> @@dbmsawi.sql
SQL> --
SQL> -- dbmsawi.sql
SQL> --
SQL> -- Copyright (c) 2006, 2017, Oracle and/or its affiliates. All rights reserved.
SQL> --
SQL> --    NAME
SQL> --      dbmsawi.sql - RDBMS AW Internal interfaces
SQL> --
SQL> --    DESCRIPTION
SQL> --      Defines the interfaces for the OLAP script procedures
SQL> --
SQL> --    NOTES
SQL> --      None
SQL> --
SQL> -- BEGIN SQL_FILE_METADATA
SQL> -- SQL_SOURCE_FILE: oraolap/src/sql/dbmsawi.sql
SQL> -- SQL_SHIPPED_FILE: rdbms/admin/dbmsawi.sql
SQL> -- SQL_PHASE: DBMSAWI
SQL> -- SQL_STARTUP_MODE: NORMAL
SQL> -- SQL_IGNORABLE_ERRORS: NONE
SQL> -- END SQL_FILE_METADATA
SQL> --
SQL> --    MODIFIED  (MM/DD/YY)
SQL> --    jcarey     09/22/17 - Bug 25687751- AW lockdown
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> CREATE OR REPLACE PACKAGE dbms_aw_internal AUTHID CURRENT_USER AS
  2    PROCEDURE OLAP_SCRIPT_START;
  3    PROCEDURE OLAP_SCRIPT_END;
  4  
  5  end dbms_aw_internal;
  6  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> @@?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> @@prvtawi.plb
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> CREATE or REPLACE LIBRARY DBMS_AW_LIB wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  16
 20  26 59
 21  yvMsVqz/Zq/tcfDh70mO0uASzhMwg04I9Z7AdBjDuFKbskq/dND+CPUJ572esstSMsy4dCvn
 22  y1J0CPXJpqYl7p64
 23  
 24  /

Library created.

SQL> CREATE OR REPLACE PACKAGE BODY dbms_aw_internal wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  147 128
 21  NjX3JNkOXtZQ78DKaEPbhyR1gokwgxDQAJkVZ3RAkHOUr/pInkiQwO1pyx6BhZCg3IDpB+aU
 22  zDWqvK3zlTWcRs80rhlXVqdU002jIHDEAHHgv21zCEUkLJj7UNDGpkoerNLsvaPQLkxrXhtZ
 23  EN1ncFYWC/d4s7RnbFI51G1Ag2d+LeFt1az6c2YVa9om+XuhopHe2UCqODwn96GdZRgCRKM7
 24  z9sb8pCq2lqxjJa0Uy/plzXoctYY8gtsapz6QqdJgiuw0rYUTrV1MVvv7nmW7W5BR4AoCq/D
 25  ZA==
 26  
 27  /

Package body created.

SQL> show errors;
No errors.
SQL> @@?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> @@dbmsaw.sql
SQL> --
SQL> -- dbmsaw.sql
SQL> --
SQL> -- Copyright (c) 2006, 2017, Oracle and/or its affiliates. All rights reserved.
SQL> --
SQL> --    NAME
SQL> --      dbmsaw.sql - RDBMS OLAP option package
SQL> --
SQL> --    DESCRIPTION
SQL> --      Defines the interfaces for the OLAP option
SQL> --
SQL> --    NOTES
SQL> --      None
SQL> --
SQL> -- BEGIN SQL_FILE_METADATA
SQL> -- SQL_SOURCE_FILE: oraolap/src/sql/dbmsaw.sql
SQL> -- SQL_SHIPPED_FILE: rdbms/admin/dbmsaw.sql
SQL> -- SQL_PHASE: DBMSAW
SQL> -- SQL_STARTUP_MODE: NORMAL
SQL> -- SQL_IGNORABLE_ERRORS: NONE
SQL> -- END SQL_FILE_METADATA
SQL> --
SQL> --    MODIFIED  (MM/DD/YY)
SQL> --    jcarey     07/21/17 - Bug 26430699 - clean up metadata
SQL> --    ghicks     03/18/17 - Bug 25372717: deal with exotic schemas
SQL> --    ghicks     01/13/17 - delete bad_compat_error
SQL> --    cchiappa   07/18/16 - Bug#24309417
SQL> --    jcarey     03/09/15 - bug 20596234 - add dbms_aw.validate_aw_name
SQL> --    cchiappa   08/12/14 - Long identifiers for sparsity advisor
SQL> --    cchiappa   03/14/13 - Set _ORACLE_SCRIPT
SQL> --    cchiappa   07/25/12 - Add dbms_aw.aw_is_system
SQL> --    surman     03/28/12 - 13615447: Add SQL patching tags
SQL> --    cchiappa   04/13/11 - Tweak partnum default
SQL> --    cchiappa   03/01/11 - Add in_aw_cleanup
SQL> --    cchiappa   06/29/09 - Move set_obj_protect to DBMS_AW_EXP
SQL> --    cchiappa   10/30/08 - Add ADVICE_NOSAMPLE
SQL> --    almurphy   08/18/08 - eif import/export default to include api metadata
SQL> --    glyon      11/06/07 - bug 6596816 - change 'grant all' to 'grant execute'
SQL> --    hyechung   10/11/07 - add {set,get}_obj_protect
SQL> --    hyechung   07/02/07 - eif_out has new argument "dfns"
SQL> --    hyechung   05/31/07 - snowflake
SQL> --    cchiappa   02/14/07 - Fix partby member of dim_source_t
SQL> --    jcarey     10/23/06 - add split param copy
SQL> --    jcarey     06/23/06 - cannot convert aw to same name with schema
SQL> --    jcarey     05/25/06 - add DBMS_AW.OLAP_ACTIVE
SQL> --    cchiappa   12/21/05 - Add access tracking hooks
SQL> --    cchiappa   09/13/05 - Add ADVISE_PARTITIONING_LEVEL
SQL> --    jcarey     07/27/05 - back out maint job
SQL> --    jcarey     07/08/05 - add gather stats
SQL> --    zqiu       03/02/05 - define awname_null_error
SQL> --    cchiappa   02/28/05 - Add compress param to agg advisor
SQL> --    cchiappa   01/19/05 - Move types out of package into objects
SQL> --    cchiappa   01/03/05 - Add CLOB advise_dimensionality
SQL> --    cchiappa   12/13/04 - Move private defs to prvtaw
SQL> --    cchiappa   11/29/04 - Sparsity advisor
SQL> --    ckearney   08/11/04 - add extra limitmap parameters
SQL> --    cchiappa   07/13/04 - Move DBMS_AW_EXP to dbmsawex.sql (again)
SQL> --    cchiappa   07/02/04 - Backout split
SQL> --    cchiappa   06/30/04 - Move DBMS_AW_EXP to dbmsawex.sql
SQL> --    dpeltier   05/14/04 - aw_upgrade -> polymorphic convert
SQL> --    cchiappa   05/12/04 - Add DBMS_AW.OLAP_RUNNING
SQL> --    cchiappa   04/07/04 - Fix comments
SQL> --    dpeltier   03/31/04 - aw_upgrade
SQL> --    cchiappa   03/18/04 - DBMS_AW_EXP in exppkgact$ for instances as well
SQL> --    ghicks     03/04/04 - more property functions
SQL> --    cchiappa   02/20/04 - DBMS_AW.RUN
SQL> --    cchiappa   02/16/04 - xsCmdExc, take 2
SQL> --    cchiappa   12/15/03 - Add vectored lob import
SQL> --    zqiu       10/14/03 - give partnum to the good aw_create
SQL> --    zqiu       09/26/03 - add prop_val function
SQL> --    ilyubash   08/25/03 - Add OLAPRanCurImpl_t and OLAPRC_TABLE
SQL> --    zqiu       09/08/03 - add partnum to aw_create
SQL> --    zqiu       09/03/03 - parameter for partitions in aw_copy
SQL> --    install    08/06/03 - Dropping body
SQL> --    ilyubash   07/10/03 - No more dummy functions
SQL> --    esoyleme   07/25/03 - add aw_copy
SQL> --    cwelton    02/05/03 - Table functions
SQL> --    esoyleme   01/02/03 - convert support
SQL> --    cchiappa   12/20/02 - Add more eif synonyms
SQL> --    zqiu       12/20/02 - change aw_rename interface
SQL> --    cchiappa   12/16/02 - Enhanced eif lob entry points
SQL> --    cwelton    12/03/02 - xstfPrepare gets qkn rather than rws
SQL> --    cchiappa   10/16/02 - BASE64 for import/export
SQL> --    ahopeman   10/10/02 - Add IN/OUT Parms to trusted callouts
SQL> --    zqiu       10/09/02 - move procedures for AW_*$
SQL> --    cchiappa   10/04/02 - Remove spurious slashes
SQL> --    ckearney   10/01/02 - Remove xsmdmgr objects
SQL> --    esoyleme   09/26/02 - cube precompute advisor
SQL> --    cwelton    10/04/02 - Add Table function Prepare method
SQL> --    ckearney   09/16/02 - Add OLAP_EXPRESSION_BOOL.
SQL> --    esoyleme   09/06/02 - add simple aggregate advisors
SQL> --    ckearney   08/30/02 - Move single row functions operators to C.
SQL> --    esoyleme   08/28/02 - grants for OLAP_TEXT_EXPR, etc
SQL> --    ilyubash   09/04/02 - add Describe method
SQL> --    ckearney   08/13/02 - Add text and date single row function support
SQL> --    cwelton    08/23/02 - Remove useless DROP commands
SQL> --    ckearney   08/06/02 - Removed dependency of SYS.OLAPROW2CELL object
SQL> --    cchiappa   08/01/02 - Tweak aw_update
SQL> --    ckearney   08/01/02 - more single row function support
SQL> --    cchiappa   07/29/02 - Allow shutdown of OLAP, rename startup
SQL> --    cwelton    07/11/02 - add dbms_aw.eval_*
SQL> --    jcarey     06/03/02 - support for r2c
SQL> --    cchiappa   03/27/02 - New utility functions
SQL> --    cchiappa   01/24/01 - Add IMPORT/EXPORT functionality
SQL> --    ahopeman   11/07/01 - Add printlog procedure
SQL> --    cwelton    10/29/01 - Move table function body to prvtaw.sql
SQL> --    esoyleme   10/09/01 - second enabling transaction
SQL> --    jcarey     09/12/01 - More interface work
SQL> --    esoyleme   09/10/01 - official tables.
SQL> --    ahopeman   09/26/01 - change dbms_xs to dbms_aw
SQL> --    jcarey     07/05/01 - interfaces
SQL> --    esoyleme   05/11/01 - new function to peek at filter
SQL> --    jcarey     06/09/00 - Created
SQL> --
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> DROP PUBLIC SYNONYM dbms_aw$_dimension_sources_t
  2  /
DROP PUBLIC SYNONYM dbms_aw$_dimension_sources_t
                    *
ERROR at line 1:
ORA-01432: public synonym to be dropped does not exist


SQL> DROP PUBLIC SYNONYM dbms_aw$_dimension_source_t
  2  /
DROP PUBLIC SYNONYM dbms_aw$_dimension_source_t
                    *
ERROR at line 1:
ORA-01432: public synonym to be dropped does not exist


SQL> DROP PUBLIC SYNONYM dbms_aw$_columnlist_t
  2  /
DROP PUBLIC SYNONYM dbms_aw$_columnlist_t
                    *
ERROR at line 1:
ORA-01432: public synonym to be dropped does not exist


SQL> DROP TYPE sys.dbms_aw$_dimension_sources_t
  2  /
DROP TYPE sys.dbms_aw$_dimension_sources_t
*
ERROR at line 1:
ORA-04043: object DBMS_AW$_DIMENSION_SOURCES_T does not exist


SQL> DROP TYPE sys.dbms_aw$_dimension_source_t
  2  /
DROP TYPE sys.dbms_aw$_dimension_source_t
*
ERROR at line 1:
ORA-04043: object DBMS_AW$_DIMENSION_SOURCE_T does not exist


SQL> DROP TYPE sys.dbms_aw$_columnlist_t
  2  /
DROP TYPE sys.dbms_aw$_columnlist_t
*
ERROR at line 1:
ORA-04043: object DBMS_AW$_COLUMNLIST_T does not exist


SQL> 
SQL> CREATE OR REPLACE TYPE sys.dbms_aw$_columnlist_t AS TABLE OF VARCHAR2(300)
  2  /

Type created.

SQL> SHOW ERRORS;
No errors.
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_aw$_columnlist_t
  2                           FOR sys.dbms_aw$_columnlist_t
  3  /

Synonym created.

SQL> GRANT EXECUTE ON dbms_aw$_columnlist_t TO PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE TYPE sys.dbms_aw$_dimension_source_t AS OBJECT
  2     (dimname     VARCHAR2(300),
  3      columnname  VARCHAR2(300),
  4      sourcevalue VARCHAR2(32767),
  5      dimtype     NUMBER(3,0),
  6      hiercols    dbms_aw$_columnlist_t,
  7      partby      NUMBER(10,0))
  8  /

Type created.

SQL> SHOW ERRORS;
No errors.
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_aw$_dimension_source_t
  2                           FOR sys.dbms_aw$_dimension_source_t
  3  /

Synonym created.

SQL> GRANT EXECUTE ON dbms_aw$_dimension_source_t TO PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE TYPE dbms_aw$_dimension_sources_t
  2     AS TABLE OF dbms_aw$_dimension_source_t
  3  /

Type created.

SQL> SHOW ERRORS;
No errors.
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_aw$_dimension_sources_t
  2                           FOR sys.dbms_aw$_dimension_sources_t
  3  /

Synonym created.

SQL> GRANT EXECUTE ON dbms_aw$_dimension_sources_t TO PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> CREATE OR REPLACE PACKAGE dbms_aw AUTHID CURRENT_USER AS
  2  
  3    ---------------------
  4    --  OVERVIEW
  5    --
  6    --  This package is the interface to the Express server routines.
  7    --    interp     - This function interprets an OLAP DML command and
  8    --                 returns the output as a character LOB.
  9    --    execute    - This procedure executes an OLAP DML command and uses
 10    --                 dbms_output to print the results.
 11    --
 12    ---------------------
 13    --  Visibility
 14    --   All users
 15    --
 16    ---------------------
 17    --  PROCEDURES
 18  
 19    PROCEDURE initdriver;
 20    PROCEDURE startup;
 21    PROCEDURE shutdown(force IN BOOLEAN DEFAULT FALSE);
 22    PROCEDURE toggleDBCreate;
 23    FUNCTION  interpclob(cmd_clob IN CLOB) RETURN CLOB;
 24    FUNCTION  getlog return clob;
 25    PROCEDURE printlog(log_clob IN CLOB);
 26  
 27    -- Routines which handle output for the user
 28    PROCEDURE run(cmd IN STRING, silent IN            BOOLEAN DEFAULT FALSE);
 29    PROCEDURE run(cmd IN CLOB,   silent IN            BOOLEAN DEFAULT FALSE);
 30  
 31    -- Routines which pass data back
 32    PROCEDURE run(cmd IN STRING, output    OUT        STRING);
 33    PROCEDURE run(cmd IN STRING, output IN OUT NOCOPY CLOB);
 34    PROCEDURE run(cmd IN CLOB,   output    OUT        STRING);
 35    PROCEDURE run(cmd IN CLOB,   output IN OUT NOCOPY CLOB);
 36  
 37    PROCEDURE execute(cmd IN STRING);
 38    FUNCTION  interp(cmd IN string) RETURN clob;
 39    PROCEDURE interp_silent(cmd IN STRING);
 40    PROCEDURE infile(ifilename IN STRING);
 41  
 42    FUNCTION  eval_number(cmd IN STRING) RETURN NUMBER;
 43    FUNCTION  eval_text(cmd IN STRING) RETURN VARCHAR2;
 44  
 45    FUNCTION  olap_on RETURN BOOLEAN;
 46    FUNCTION  olap_running RETURN BOOLEAN;
 47    FUNCTION  olap_active RETURN BOOLEAN;
 48  
 49    PROCEDURE advise_rel(  relname    IN VARCHAR2,
 50                           valueset   IN VARCHAR2,
 51                           pct        IN BINARY_INTEGER DEFAULT 20,
 52                           compressed IN BOOLEAN        DEFAULT FALSE);
 53    PROCEDURE advise_cube( aggmap     IN VARCHAR2,
 54                           pct        IN BINARY_INTEGER DEFAULT 20,
 55                           compressed IN BOOLEAN        DEFAULT FALSE);
 56  
 57    PROCEDURE enable_access_tracking(objname IN VARCHAR2);
 58    PROCEDURE disable_access_tracking(objname IN VARCHAR2);
 59    PROCEDURE clean_access_tracking(objname IN VARCHAR2);
 60  
 61    NO_HIER                 CONSTANT BINARY_INTEGER := 0;
 62    MEASURE                 CONSTANT BINARY_INTEGER := 1;
 63    HIER_PARENTCHILD        CONSTANT BINARY_INTEGER := 2;
 64    HIER_LEVELS             CONSTANT BINARY_INTEGER := 3;
 65    HIER_SNOWFLAKE          CONSTANT BINARY_INTEGER := 4;
 66  
 67    PARTBY_DEFAULT          CONSTANT BINARY_INTEGER := 0;
 68    PARTBY_NONE             CONSTANT BINARY_INTEGER := 1;
 69    PARTBY_FORCE            CONSTANT BINARY_INTEGER := 2147483647;
 70  
 71    ADVICE_DEFAULT          CONSTANT BINARY_INTEGER := 0;
 72    ADVICE_FAST             CONSTANT BINARY_INTEGER := 1;
 73    ADVICE_FULL             CONSTANT BINARY_INTEGER := 2;
 74    ADVICE_NOSAMPLE         CONSTANT BINARY_INTEGER := 3;
 75  
 76    PROCEDURE sparsity_advice_table(tblname IN     VARCHAR2 DEFAULT NULL);
 77  
 78    PROCEDURE add_dimension_source(dimname  IN      VARCHAR2,
 79                                   colname  IN      VARCHAR2,
 80                                   sources  IN OUT  dbms_aw$_dimension_sources_t,
 81                                   srcval   IN      VARCHAR2 DEFAULT NULL,
 82                                   dimtype  IN      NUMBER DEFAULT NO_HIER,
 83                                   hiercols IN      dbms_aw$_columnlist_t
 84                                            DEFAULT NULL,
 85                                   partby   IN      NUMBER
 86                                            DEFAULT PARTBY_DEFAULT);
 87  
 88    PROCEDURE advise_sparsity(fact       IN      VARCHAR2,
 89                              cubename   IN      VARCHAR2,
 90                              dimsources IN      dbms_aw$_dimension_sources_t,
 91                              advmode    IN      BINARY_INTEGER
 92                                         DEFAULT ADVICE_DEFAULT,
 93                              partby     IN      BINARY_INTEGER
 94                                         DEFAULT PARTBY_DEFAULT,
 95                              advtable   IN      VARCHAR2 DEFAULT NULL);
 96  
 97    FUNCTION advise_dimensionality(cubename   IN     VARCHAR2,
 98                                   sparsedfn     OUT VARCHAR2,
 99                                   sparsename IN     VARCHAR2 DEFAULT NULL,
100                                   partnum    IN     NUMBER DEFAULT 1,
101                                   advtable   IN     VARCHAR2 DEFAULT NULL)
102      RETURN VARCHAR2;
103    PROCEDURE advise_dimensionality(output        OUT NOCOPY CLOB,
104                                    cubename   IN     VARCHAR2,
105                                    sparsename IN     VARCHAR2 DEFAULT NULL,
106                                    dtype      IN     VARCHAR2 DEFAULT 'NUMBER',
107                                    advtable   IN     VARCHAR2 DEFAULT NULL);
108    FUNCTION advise_partitioning_dimension(cubename IN VARCHAR2,
109                                      dimsources IN dbms_aw$_dimension_sources_t,
110                                      advtable   IN VARCHAR2 DEFAULT NULL)
111      RETURN VARCHAR2;
112    FUNCTION advise_partitioning_level(cubename  IN VARCHAR2,
113                                      dimsources IN dbms_aw$_dimension_sources_t,
114                                      advtable   IN VARCHAR2 DEFAULT NULL)
115      RETURN VARCHAR2;
116  
117    PROCEDURE aw_update(name     IN VARCHAR2 DEFAULT NULL);
118    PROCEDURE aw_update(schema   IN VARCHAR2,
119                        name     IN VARCHAR2);
120  
121    PROCEDURE aw_attach(name     IN VARCHAR2,
122                        forwrite IN BOOLEAN  DEFAULT FALSE,
123                        createaw IN BOOLEAN  DEFAULT FALSE,
124                        attargs  IN VARCHAR2 DEFAULT NULL,
125                        tbspace  IN VARCHAR2 DEFAULT NULL);
126    PROCEDURE aw_attach(schema   IN VARCHAR2,
127                        name     IN VARCHAR2,
128                        forwrite IN BOOLEAN  DEFAULT FALSE,
129                        createaw IN BOOLEAN  DEFAULT FALSE,
130                        attargs  IN VARCHAR2 DEFAULT NULL,
131                        tbspace  IN VARCHAR2 DEFAULT NULL);
132  
133    PROCEDURE aw_detach(name     IN VARCHAR2);
134  
135    PROCEDURE aw_detach(schema   IN VARCHAR2,
136                        name     IN VARCHAR2);
137  
138    PROCEDURE aw_create(name     IN VARCHAR2,
139                        tbspace  IN VARCHAR2 DEFAULT NULL,
140                        partnum  IN NUMBER   DEFAULT NULL);
141  
142    PROCEDURE aw_create(schema   IN VARCHAR2,
143                        name     IN VARCHAR2,
144                        tbspace  IN VARCHAR2 DEFAULT NULL,
145                        partnum  IN NUMBER   DEFAULT NULL);
146  
147    PROCEDURE aw_copy(oldname IN VARCHAR2,
148                      newname IN VARCHAR2,
149                      newtablespace IN VARCHAR2 DEFAULT NULL,
150                      partnum IN NUMBER DEFAULT NULL);
151  
152    PROCEDURE aw_copy(oldschema IN VARCHAR2,
153                      oldname IN VARCHAR2,
154                      newname IN VARCHAR2,
155                      newtablespace IN VARCHAR2 DEFAULT NULL,
156                      partnum IN NUMBER DEFAULT NULL);
157  
158    PROCEDURE aw_delete(name     IN VARCHAR2);
159    PROCEDURE aw_delete(schema   IN VARCHAR2,
160                        name     IN VARCHAR2);
161  
162    PROCEDURE aw_rename(inname   IN VARCHAR2,
163                        outname  IN VARCHAR2);
164  
165    FUNCTION  aw_tablespace(schema IN VARCHAR2,
166                            name   IN VARCHAR2) RETURN VARCHAR2;
167  
168    FUNCTION  aw_tablespace(name   IN VARCHAR2) RETURN VARCHAR2;
169  
170    FUNCTION  aw_is_system(schema IN VARCHAR2,
171                           name   IN VARCHAR2) RETURN BOOLEAN;
172  
173    TYPE eif_t         IS TABLE OF BLOB NOT NULL;
174    TYPE eif_objlist_t IS TABLE OF VARCHAR2(100);
175  
176    -- Enumerated Types for the datadfns param to EIF import
177    EIFIMP_DATA        CONSTANT BINARY_INTEGER := 1;
178    EIFIMP_DEFINES     CONSTANT BINARY_INTEGER := 2;
179    EIFIMP_DFNS        CONSTANT BINARY_INTEGER := EIFIMP_DEFINES;
180    EIFIMP_DATADEFINES CONSTANT BINARY_INTEGER := 3;
181    EIFIMP_DATADFNS    CONSTANT BINARY_INTEGER := EIFIMP_DATADEFINES;
182  
183    AWNAME_IS_NULL EXCEPTION;
184  
185    FUNCTION  eif_blob_out(name IN VARCHAR2,
186                           objlist IN eif_objlist_t DEFAULT NULL,
187                           api IN BOOLEAN DEFAULT TRUE) RETURN BLOB;
188    FUNCTION  eif_blob_out(schema IN VARCHAR2, name IN VARCHAR2,
189                           objlist IN eif_objlist_t DEFAULT NULL,
190                           api IN BOOLEAN DEFAULT TRUE) RETURN BLOB;
191    PROCEDURE eif_blob_in(name IN VARCHAR2, implob IN BLOB,
192                          datadfns IN BINARY_INTEGER DEFAULT EIFIMP_DATA,
193                          objlist  IN eif_objlist_t  DEFAULT NULL,
194                          api IN BOOLEAN DEFAULT TRUE);
195    PROCEDURE eif_blob_in(schema IN VARCHAR2, name IN VARCHAR2, implob IN BLOB,
196                          datadfns IN BINARY_INTEGER DEFAULT EIFIMP_DATA,
197                          objlist  IN eif_objlist_t  DEFAULT NULL,
198                          api IN BOOLEAN DEFAULT TRUE);
199    PROCEDURE eif_out(name IN VARCHAR2, expeif OUT eif_t,
200                      objlist IN eif_objlist_t DEFAULT NULL,
201                      dfns IN BOOLEAN DEFAULT FALSE,
202                      api IN BOOLEAN DEFAULT TRUE);
203    PROCEDURE eif_out(schema IN VARCHAR2, name IN VARCHAR2, expeif OUT eif_t,
204                      objlist IN eif_objlist_t DEFAULT NULL,
205                      dfns IN BOOLEAN DEFAULT FALSE,
206                      api IN BOOLEAN DEFAULT TRUE);
207    PROCEDURE eif_in(name IN VARCHAR2, impeif IN eif_t,
208                     datadfns IN BINARY_INTEGER DEFAULT EIFIMP_DATA,
209                     objlist IN eif_objlist_t DEFAULT NULL,
210                     api IN BOOLEAN DEFAULT TRUE);
211    PROCEDURE eif_in(schema IN VARCHAR2, name IN VARCHAR2, impeif IN eif_t,
212                     datadfns IN BINARY_INTEGER DEFAULT EIFIMP_DATA,
213                     objlist IN eif_objlist_t DEFAULT NULL,
214                     api IN BOOLEAN DEFAULT TRUE);
215    PROCEDURE eif_delete(eif IN OUT eif_t);
216    FUNCTION  get_obj_protect RETURN BOOLEAN;
217  
218    aw_changed_error CONSTANT NUMBER := -20003;
219    awname_null_error CONSTANT NUMBER := -20004;
220    has_schema_error CONSTANT NUMBER := -20005;
221    bad_snowflake_error CONSTANT NUMBER := -20006;
222  
223    PROCEDURE convert(awname IN VARCHAR2);
224    PROCEDURE convert(oldname IN VARCHAR2, newname IN VARCHAR2,
225                      newtablespace IN VARCHAR2 DEFAULT NULL);
226  
227    en_tbs_error CONSTANT NUMBER := -20001;
228    PROCEDURE move_awmeta(dest_tbs IN VARCHAR2);
229  
230    FUNCTION prop_val(rid IN ROWID) RETURN VARCHAR2;
231    FUNCTION olap_type(otype IN NUMBER) RETURN VARCHAR2;
232    FUNCTION prop_clob(rid IN ROWID) RETURN CLOB;
233    FUNCTION prop_len(rid IN ROWID) RETURN NUMBER;
234    PROCEDURE gather_stats;
235    FUNCTION in_aw_cleanup RETURN BOOLEAN;
236    PROCEDURE VALIDATE_AW_NAME(awname IN VARCHAR2);
237    PROCEDURE VALIDATE_SCHEMA_NAME(schema IN VARCHAR2);
238    PROCEDURE PARSE_AW_NAME(inschema IN VARCHAR2, inawname in VARCHAR2,
239                            schema OUT VARCHAR2, awname OUT VARCHAR2,
240                            defschema OUT BOOLEAN);
241    PROCEDURE PARSE_SCHEMA_NAME(inschema IN VARCHAR2, schema OUT VARCHAR2,
242                                defschema OUT BOOLEAN);
243  
244    -- Internal types, not for user consumption
245    TYPE loblineiter_t IS RECORD (
246      mylob   CLOB,
247      loc     NUMBER,
248      clength NUMBER,
249      cmax    NUMBER,
250      linemax NUMBER);
251  
252  END dbms_aw;
253  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> -- Give execute privileges
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_aw FOR sys.dbms_aw
  2  /

Synonym created.

SQL> GRANT EXECUTE ON dbms_aw TO PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> @@?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> @@prvtaw.plb
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> CREATE OR REPLACE PACKAGE BODY dbms_aw wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  ddc4 33bd
 21  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
202  MiFsnIMcSHPWfjfdS4D4tYG1rVMp+A==
203  
204  /

Package body created.

SQL> show errors;
No errors.
SQL> @@?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> @@olaptf.plb
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> CREATE or REPLACE TYPE OLAP_SRF_T wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  d
 20  43 81
 21  W5k4+sqVQjtqncAgNbc3AtqGS2swg0SvLbKpfHQ2ZyfozmUxpvSXNu9n41QsumeNc8SP/yRe
 22  dwzYeEhVqO74LVE2JsT+EfJahEzcYkoh4ZKr172Xt+huwe5bz6nzjQ==
 23  
 24  /

Type created.

SQL> show errors;
No errors.
SQL> create or replace function OLAP_NUMBER_SRF wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  2bc 16d
 21  Oj7mmngM285kcSCagjqo7gx/3NYwg43Mf0hqfHSKbuovWNMOfcgNtmLZy/sTZRblnxsgMUUh
 22  FlDB6uJ3V9HTDjwUpNB3COKefol21vZL/a2gAo2zDA231vvgL4pPeKW1CwdIJxKEf4CJauWH
 23  5qVJtQbyhNtjpF/LCpLvqpIFRC4F2ypgTCqv6i6y+kZzYNg57uQ2m0Jp1nFb2GJ1dHxhb2EP
 24  nNnGWCSaxJ0hxTZDNgGzkvP4f7zHY0kArFLYn1B0MhZS46MImApoR3WBrvRXhG2iCfJsiMNJ
 25  gnpjLyaHAlOHFb+0RsT+WPstJHX9RG1n8QXQTSTcYL367STOpLIxisaNHthxtJ0iEB1n5PDT
 26  
 27  
 28  /

Function created.

SQL> show errors;
No errors.
SQL> drop public synonym OLAP_EXPRESSION;
drop public synonym OLAP_EXPRESSION
                    *
ERROR at line 1:
ORA-01432: public synonym to be dropped does not exist


SQL> create or replace operator OLAP_EXPRESSION binding(raw, VARCHAR2)
  2    return NUMBER with index context, scan context OLAP_SRF_T
  3      using OLAP_NUMBER_SRF;

Operator created.

SQL> /

Operator created.

SQL> show errors;
No errors.
SQL> create or replace function OLAP_TEXT_SRF wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  2b1 16d
 21  70kmwpx0RASbTQbtdBq3/Fxxaj4wg43MNUhqyi+KrWRUQ4laXCi+M6DUtJP6OfaTJ8HbOygR
 22  I4VOHTc8Uo1aKkkEyXCf6AhgvZMdYWqo40EUV0ifz2lnOQTGsbLkvyneWlEokTKiIthp06za
 23  vni61WZeHqH6oOakMSkPHmyu81vnwua77OJEhvjyTj9qo3pyhKa+m2kH6IG0J2lEfLT2tIf/
 24  wWSuvs8gqhHDf5u9/OW/+8YvckPJFK2swhsCcQ77rSJm7FW5sUg4R/leHyuzUW1ori6elZt0
 25  sDlmPb233pylHd/ucz/JZ3cSMsFwzIDc+IiBpwGgyIbk1iSlaQY/P7cXPn35c0OeC7JtNQ==
 26  
 27  
 28  /

Function created.

SQL> show errors;
No errors.
SQL> drop public synonym OLAP_EXPRESSION_TEXT;
drop public synonym OLAP_EXPRESSION_TEXT
                    *
ERROR at line 1:
ORA-01432: public synonym to be dropped does not exist


SQL> create or replace operator OLAP_EXPRESSION_TEXT binding(raw, VARCHAR2)
  2    return VARCHAR2 with index context, scan context OLAP_SRF_T
  3      using OLAP_TEXT_SRF;

Operator created.

SQL> /

Operator created.

SQL> show errors;
No errors.
SQL> create or replace function OLAP_DATE_SRF wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  2ae 171
 21  qU07zN++f797FIJH1S2VArdsWgUwg43MNUhqyi+KrWRUQ4laXCi+M6A5itiR1g1WDcfm7dL7
 22  LstCP2voMnFsCde9QFgBdSbWXOb/rPYt0KuVonKBSiieheGGpTQ3tdGCM5PSQNhKhQeU8ual
 23  SbUGoGbCg1/y1JT82/+7RcrrliVbUdhQ+EV53UDiZTSaS/fdb8DTZ7x03rPf+/0d5aZv2h0F
 24  HjrkOmualgUsq1xfz+FMMiIGL+u+aHQUgGn/GIhjZwDAq2ZAc7mxJzhHGcco3LNRByb9Lp6V
 25  CHTB0rY9mbd5p6Wk3+7NP8lnJVsyhnDMlYnS7/y/SvoVjkMs5EoH04GGEyHV/mmPcx7rH7ya
 26  9JI=
 27  
 28  /

Function created.

SQL> show errors;
No errors.
SQL> drop public synonym OLAP_EXPRESSION_DATE;
drop public synonym OLAP_EXPRESSION_DATE
                    *
ERROR at line 1:
ORA-01432: public synonym to be dropped does not exist


SQL> create or replace operator OLAP_EXPRESSION_DATE binding(raw, VARCHAR2)
  2    return DATE with index context, scan context OLAP_SRF_T
  3      using OLAP_DATE_SRF;

Operator created.

SQL> /

Operator created.

SQL> show errors;
No errors.
SQL> create or replace function OLAP_BOOL_SRF wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  2b3 171
 21  IUHcfGQH0hI18+PO3szP3Ms/qOwwg43Mf0hqfHSKbuovWNMOfcgNti7Zy/u6ZRblnxt5kJ42
 22  EacincA71FL3pg0bKTCApEJcSxqKVlM5mFRXsaKWPdzLNn41S6oZ3arQiEXM0kDmgIlqnmzv
 23  zreqUmx/BSV0GmqeMuDQtUUO647eqU3V0rwnJ0trYl+KeOAh49eucE8FIREeqQ37l6mVPN0z
 24  HsA6z5b/wdDNltCZNa01k6Ai4Czr2uojPO/IAyc512kH8UVN852YRddfMfkEAu+Hon+VXmVr
 25  e1juf6migcV+HmzPB9cwEk+IyNI3SHZWJXWnc+OSA5eROKOaLORKBzTNxo32ZHG0nSIQHepu
 26  bbM=
 27  
 28  /

Function created.

SQL> show errors;
No errors.
SQL> drop public synonym OLAP_EXPRESSION_BOOL;
drop public synonym OLAP_EXPRESSION_BOOL
                    *
ERROR at line 1:
ORA-01432: public synonym to be dropped does not exist


SQL> create or replace operator OLAP_EXPRESSION_BOOL binding(raw, VARCHAR2)
  2    return NUMBER with index context, scan context OLAP_SRF_T
  3      using OLAP_BOOL_SRF;

Operator created.

SQL> /

Operator created.

SQL> show errors;
No errors.
SQL> drop type body OLAPImpl_t;
drop type body OLAPImpl_t
*
ERROR at line 1:
ORA-04043: object OLAPIMPL_T does not exist


SQL> create or replace type OLAPImpl_t wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  d
 20  8f be
 21  EIRG/2mT9NgI9iSPGvYFDdiol58wg+nw7Z4VfI5gkE6Ov341bpncePoCYSGhviQR6DSprNa7
 22  0CbLQQjPLHY72jUxuA9BZIASHez/DEZwR4kNWC8dno6dCWl4V6ZY9z5hDr+m1AV88MFItz6S
 23  8LySICqnmi3vXNF1CjOPf/Qbee31yGJC4HiHrixLge/+
 24  
 25  /

Type created.

SQL> show errors;
No errors.
SQL> create or replace type OLAPRanCurImpl_t wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  d
 20  e6b 31e
 21  yDCAintbN1duA04z97r7oq3bd78wg0OnLtDrfC9Arf7qXzOJ8ue93FpudheDdS6KfEFQzT7F
 22  CmbIb1QN6QbBgkjE9T7/xrnyPStdL2xB0LSCch51wZSs1cPpbbuSwZfPmO3e3w4n/y45RRvm
 23  2S7N92dCuCkSd3ryYKYi6kaTjDqeqXdWQto/PowB18ViuNrPBENHzXZDm8e18jGt2RfWPpHg
 24  lWBqGmHs8AOPZXlhk2XS7FkY9FedOepOUri1Y43/Lb7brbRFWfc5YL5R0Xle5Z4ixSXCJXgL
 25  46LTwC5v5RV41GXc92bcCWHmMd476Od74JZZ8hiLyGNjIHfY9/7jnFxsFZVkgYuCKX6+vIcQ
 26  c6A0487XdMFlqljXlIBHjWah21oc8czPKQVQMJDmLINi+BcLgoyUmKfgLKPhj6Ap/NkQsbzY
 27  B6cC2EH6tN6d9q48mDkMxwKG0cPV5j5iGyJwHFpVxfKT88g+ClHuNY+I2lLABbCyT72E1uAk
 28  cYPo4J7uZjQ1qK3l/Gt/0NPDWa5ygNw9J0KYVJCHLjeNn9kkJ9POTTxivoN/MWU9p9UGqjPs
 29  VZn7n8d5RPgoc1ud+ebkDaiibbFF6eM3MMQ1NvQkSNAOWAdzWbVevpLX4A2t9i1BPSxpqR4J
 30  swgswttLdef5tpGQSRxt+ralxF2RItOq6gP7q8jvCoC8qiNHjtWI/HuzkHb8+sDHc0PSaQx4
 31  g2Id3hmBGgeGTB9FfmrQ4PPHKBJFuBwoiqRSeD9gdn0TLB5DQsBQVQ6zzlVtmhvjR3o=
 32  
 33  /

Type created.

SQL> show errors;
No errors.
SQL> create or replace function OLAP_TABLE wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  2e0 fb
 21  7jmelfCSxeI0bGSpSqSYB0kCLl0wg2MlLp4VZ3REcLFBZgxE89idj8WQ6Kuh6zgb7/U9+Jrm
 22  5Qk1Tee3Lm9CLDE0eyaCSJSjNZr9p+ZtrTTGY/GPElQP+EqvTH+OCn8Zp3jAPLrB3nvLlD11
 23  22e3hcYrEbR4faq87EsVsgWpeIhhhUsFdJjZS/h0EoVLxnQSkrHRONs3VkQCtJUqJ3jDbPHw
 24  sb4XrhXylBqFI0IrWP2W7ZAXKPz1EzA=
 25  
 26  /

Function created.

SQL> show errors;
No errors.
SQL> create or replace function CUBE_TABLE wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  7f a2
 21  QzUf5JyTzy3etZxTULoHHpFaVQgwg0wYf8upynSmkELpgEx2cZCew3msAmd/OJu1nXxgho9i
 22  nHFIJgaJjKkKp9zp/U14pcB4zmqbzt2K30frpc1YoMk3JZfjJXrFbwkL00meVl1rb6eU4N3b
 23  Ep6w/1VExmt2zw==
 24  
 25  /

Function created.

SQL> show errors;
No errors.
SQL> create or replace function OLAPRC_TABLE wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  ab be
 21  RqkrMY7nDPwJ5Nr/xKo0z1X0CiYwg3lKf8sVfHSmWPie0MqoOSsbsSp3JwaiSvCJPrW16Qdm
 22  r91ixGi4cmnAPp5sOCqrSscGTjYs595DLVIHLKIo9l1YzZLwDBjY7wtztp2zEemYD920ao6j
 23  IHh3vA4LC0/lw9xRNGchs7EI1vI48far+VfNwt1Jtw==
 24  
 25  /

Function created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PUBLIC SYNONYM OLAP_TABLE FOR SYS.OLAP_TABLE
  2  /

Synonym created.

SQL> GRANT EXECUTE ON SYS.OLAP_TABLE TO PUBLIC
  2  /

Grant succeeded.

SQL> CREATE OR REPLACE PUBLIC SYNONYM CUBE_TABLE FOR SYS.CUBE_TABLE
  2  /

Synonym created.

SQL> GRANT EXECUTE ON SYS.CUBE_TABLE TO PUBLIC
  2  /

Grant succeeded.

SQL> CREATE OR REPLACE PUBLIC SYNONYM OLAPRC_TABLE FOR SYS.OLAPRC_TABLE
  2  /

Synonym created.

SQL> GRANT EXECUTE ON SYS.OLAPRC_TABLE TO PUBLIC
  2  /

Grant succeeded.

SQL> CREATE OR REPLACE PUBLIC SYNONYM OLAP_SRF_T FOR SYS.OLAP_SRF_T
  2  /

Synonym created.

SQL> GRANT EXECUTE ON SYS.OLAP_SRF_T TO PUBLIC
  2  /

Grant succeeded.

SQL> CREATE OR REPLACE PUBLIC SYNONYM OLAP_NUMBER_SRF FOR SYS.OLAP_NUMBER_SRF
  2  /

Synonym created.

SQL> GRANT EXECUTE ON SYS.OLAP_NUMBER_SRF TO PUBLIC
  2  /

Grant succeeded.

SQL> CREATE OR REPLACE PUBLIC SYNONYM OLAP_EXPRESSION FOR SYS.OLAP_EXPRESSION
  2  /

Synonym created.

SQL> GRANT EXECUTE ON SYS.OLAP_EXPRESSION TO PUBLIC
  2  /

Grant succeeded.

SQL> CREATE OR REPLACE PUBLIC SYNONYM OLAP_TEXT_SRF FOR SYS.OLAP_TEXT_SRF
  2  /

Synonym created.

SQL> GRANT EXECUTE ON SYS.OLAP_TEXT_SRF TO PUBLIC
  2  /

Grant succeeded.

SQL> CREATE OR REPLACE PUBLIC SYNONYM OLAP_EXPRESSION_TEXT
  2    FOR SYS.OLAP_EXPRESSION_TEXT
  3  /

Synonym created.

SQL> GRANT EXECUTE ON SYS.OLAP_EXPRESSION_TEXT TO PUBLIC
  2  /

Grant succeeded.

SQL> CREATE OR REPLACE PUBLIC SYNONYM OLAP_DATE_SRF FOR SYS.OLAP_DATE_SRF
  2  /

Synonym created.

SQL> GRANT EXECUTE ON SYS.OLAP_DATE_SRF TO PUBLIC
  2  /

Grant succeeded.

SQL> CREATE OR REPLACE PUBLIC SYNONYM OLAP_EXPRESSION_DATE
  2    FOR SYS.OLAP_EXPRESSION_DATE
  3  /

Synonym created.

SQL> GRANT EXECUTE ON SYS.OLAP_EXPRESSION_DATE TO PUBLIC
  2  /

Grant succeeded.

SQL> CREATE OR REPLACE PUBLIC SYNONYM OLAP_BOOL_SRF FOR SYS.OLAP_BOOL_SRF
  2  /

Synonym created.

SQL> GRANT EXECUTE ON SYS.OLAP_BOOL_SRF TO PUBLIC
  2  /

Grant succeeded.

SQL> CREATE OR REPLACE PUBLIC SYNONYM OLAP_EXPRESSION_BOOL
  2    FOR SYS.OLAP_EXPRESSION_BOOL
  3  /

Synonym created.

SQL> GRANT EXECUTE ON SYS.OLAP_EXPRESSION_BOOL TO PUBLIC
  2  /

Grant succeeded.

SQL> CREATE OR REPLACE FUNCTION OLAP_CONDITION wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  116 e7
 21  QZvPnONnf/RjJgThAJS7SLHyKXEwg41Kr8usZ3SiALvq0ue9HKnbL3gclwkNvY4Jn7MF+bUP
 22  Uwr0I2PE3PjJi6vbQkFEi/OcfcmIzu1vDvAdb2nPwzmfXxNAR3lNuUqDitbe7wiInHyBGri8
 23  Z7JjzJs1nWbi+oI9bTRgvYZ1S7CMbP5hKcIWGRvk3vcCEAj+D68tADJMuqPr6/BsmBDhJ/Za
 24  ORIw+6Guew0=
 25  
 26  /

Function created.

SQL> SHOW ERRORS;
No errors.
SQL> GRANT EXECUTE ON OLAP_CONDITION TO PUBLIC;

Grant succeeded.

SQL> CREATE OR REPLACE PUBLIC SYNONYM OLAP_CONDITION FOR SYS.OLAP_CONDITION
  2  /

Synonym created.

SQL> @@?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> @@dbmsawex.sql
SQL> --
SQL> -- $Header: oraolap/src/sql/dbmsawex.sql /main/15 2017/03/29 10:42:40 jcarey Exp $
SQL> --
SQL> -- dbmsawex.sql
SQL> --
SQL> -- Copyright (c) 2004, 2017, Oracle and/or its affiliates. All rights reserved.
SQL> --
SQL> --    NAME
SQL> --      dbmsawex.sql
SQL> --
SQL> --    DESCRIPTION
SQL> --      Provides the DBMS_AW_EXP package
SQL> --
SQL> --    NOTES
SQL> --      None
SQL> --
SQL> --
SQL> -- BEGIN SQL_FILE_METADATA
SQL> -- SQL_SOURCE_FILE: olap/src/sql/dbmsawex.sql
SQL> -- SQL_SHIPPED_FILE: rdbms/admin/dbmsawex.sql
SQL> -- SQL_PHASE: DBMSAWEX
SQL> -- SQL_STARTUP_MODE: NORMAL
SQL> -- SQL_IGNORABLE_ERRORS: NONE
SQL> -- SQL_CALLING_FILE: rdbms/admin/olappl.sql
SQL> -- END SQL_FILE_METADATA
SQL> --
SQL> --    MODIFIED   (MM/DD/YY)
SQL> --      jcarey    03/13/17 - Bug 25254484 - aw lockdown
SQL> --      cchiappa  07/18/16 - Bug#24309417
SQL> --      cchiappa  03/14/13 - Set _ORACLE_SCRIPT
SQL> --      cchiappa  07/27/12 - V12 support
SQL> --      cchiappa  07/18/12 - Export transporting
SQL> --      surman    03/27/12 - 13615447: Add SQL patching tags
SQL> --      esoyleme  03/11/09 - transportable tablespaces with MVs
SQL> --      hyechung  06/27/07 - schema_callout
SQL> --      esoyleme  07/20/04 - callout-based transport
SQL> --      cchiappa  07/13/04 - Move DBMS_AW_EXP to dbmsawex.sql (again)
SQL> --      cchiappa  07/02/04 - Backout split
SQL> --      cchiappa  06/30/04 - Move DBMS_AW_EXP here
SQL> --      cchiappa  04/06/04 - Created dummy file
SQL> --
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> CREATE OR REPLACE PACKAGE dbms_aw_exp AUTHID CURRENT_USER AS
  2  
  3    EIF_LOB_SIZE_OUT_OF_RANGE EXCEPTION;
  4    INVALID_AW_VERSION CONSTANT NUMBER := -20004;
  5    CROSS_PLATFORM_TRANSPORT CONSTANT NUMBER := -20005;
  6    AW_TOO_MANY_OBJECTS CONSTANT NUMBER := -20006;
  7  
  8    PROCEDURE alter_lob_size(  newsize     IN   NUMBER);
  9  
 10    PROCEDURE import_begin120( schema      IN   VARCHAR2,
 11                               name        IN   VARCHAR2);
 12    PROCEDURE import_chunk120( amt         IN   BINARY_INTEGER,
 13                               stream      IN   VARCHAR2);
 14    PROCEDURE import_finish120(schema      IN   VARCHAR2,
 15                               name        IN   VARCHAR2);
 16    PROCEDURE import_begin112( schema      IN   VARCHAR2,
 17                               name        IN   VARCHAR2);
 18    PROCEDURE import_chunk112( amt         IN   BINARY_INTEGER,
 19                               stream      IN   VARCHAR2);
 20    PROCEDURE import_finish112(schema      IN   VARCHAR2,
 21                               name        IN   VARCHAR2);
 22    PROCEDURE import_begin100( schema      IN   VARCHAR2,
 23                               name        IN   VARCHAR2);
 24    PROCEDURE import_chunk100( amt         IN   BINARY_INTEGER,
 25                               stream      IN   VARCHAR2);
 26    PROCEDURE import_finish100(schema      IN   VARCHAR2,
 27                               name        IN   VARCHAR2);
 28    PROCEDURE import_begin92(  schema      IN   VARCHAR2,
 29                               name        IN   VARCHAR2);
 30    PROCEDURE import_chunk92(  amt         IN   BINARY_INTEGER,
 31                               stream      IN   VARCHAR2);
 32    PROCEDURE import_finish92( schema      IN   VARCHAR2,
 33                               name        IN   VARCHAR2);
 34  
 35    -- Transportable tablespace support
 36    PROCEDURE trans_begin102(  awname      IN   VARCHAR2,
 37                               schema      IN   VARCHAR2,
 38                               namespace   IN   PLS_INTEGER,
 39                               type        IN   PLS_INTEGER);
 40  
 41    PROCEDURE trans_chunk102(  amt         IN     BINARY_INTEGER,
 42                               stream      IN     VARCHAR2);
 43  
 44    PROCEDURE trans_finish102( awname      IN   VARCHAR2,
 45                               schema      IN   VARCHAR2,
 46                               namespace   IN   PLS_INTEGER,
 47                               type        IN   PLS_INTEGER);
 48  
 49    PROCEDURE trans_finish112( awname      IN   VARCHAR2,
 50                               schema      IN   VARCHAR2,
 51                               namespace   IN   PLS_INTEGER,
 52                               type        IN   PLS_INTEGER,
 53                               prepost     IN  PLS_INTEGER);
 54  
 55    PROCEDURE trans_finish120( awname      IN   VARCHAR2,
 56                               schema      IN   VARCHAR2,
 57                               namespace   IN   PLS_INTEGER,
 58                               type        IN   PLS_INTEGER,
 59                               prepost     IN  PLS_INTEGER);
 60  
 61    PROCEDURE trans_finish122( awname      IN   VARCHAR2,
 62                               schema      IN   VARCHAR2,
 63                               namespace   IN   PLS_INTEGER,
 64                               type        IN   PLS_INTEGER,
 65                               prepost     IN  PLS_INTEGER);
 66  
 67    FUNCTION  schema_info_exp( schema      IN   VARCHAR2,
 68                               prepost     IN   PLS_INTEGER,
 69                               isdba       IN   PLS_INTEGER,
 70                               version     IN   VARCHAR2,
 71                               new_block   OUT  PLS_INTEGER)
 72       RETURN VARCHAR2;
 73  
 74    PROCEDURE schema_callout(  schema      IN   VARCHAR2,
 75                               prepost     IN   PLS_INTEGER,
 76                               isdba       IN   PLS_INTEGER,
 77                               version     IN   VARCHAR2);
 78  
 79    PROCEDURE import_callout120(schema     IN   VARCHAR2);
 80    PROCEDURE import_callout112(schema     IN   VARCHAR2);
 81  
 82    PROCEDURE import_table_callout120(
 83                                schema     IN   VARCHAR2,
 84                                tabname    IN   VARCHAR2,
 85                                preport    IN   PLS_INTEGER);
 86  
 87    FUNCTION  instance_extended_info_exp(
 88                                name       IN   VARCHAR2,
 89                                schema     IN   VARCHAR2,
 90                                namespace  IN   PLS_INTEGER,
 91                                type       IN   PLS_INTEGER,
 92                                prepost    IN   PLS_INTEGER,
 93                                exp_user   IN   VARCHAR2,
 94                                isdba      IN   PLS_INTEGER,
 95                                version    IN   VARCHAR2,
 96                                new_block  OUT  PLS_INTEGER)
 97       RETURN VARCHAR2;
 98  
 99    PROCEDURE instance_callout_imp(
100                                obj_name   IN   VARCHAR2,
101                                obj_schema IN   VARCHAR2,
102                                obj_type   IN   VARCHAR2,
103                                prepost    IN   PLS_INTEGER,
104                                action     OUT  VARCHAR2,
105                                alt_name   OUT  VARCHAR2);
106  
107    TYPE rawvec_t      IS TABLE OF      RAW(31744);
108    TYPE varchar2vec_t IS TABLE OF VARCHAR2(31744);
109    FUNCTION  lob_write(       wlob IN OUT NOCOPY BLOB,
110                               pos  IN            BINARY_INTEGER,
111                               data IN            rawvec_t)
112       RETURN BINARY_INTEGER;
113  
114    FUNCTION  lob_writeappend( wlob IN OUT NOCOPY BLOB,
115                               data IN            rawvec_t)
116       RETURN BINARY_INTEGER;
117  
118    FUNCTION  lob_write(       wlob IN OUT NOCOPY CLOB CHARACTER SET ANY_CS,
119                               pos  IN            BINARY_INTEGER,
120                               data IN            varchar2vec_t)
121       RETURN BINARY_INTEGER;
122  
123    FUNCTION  lob_writeappend( wlob IN OUT NOCOPY CLOB CHARACTER SET ANY_CS,
124                               data IN            varchar2vec_t)
125       RETURN BINARY_INTEGER;
126  
127    -- Exported for DBMS_CUBE_EXP
128    FUNCTION transporting
129       RETURN BOOLEAN;
130  
131  END dbms_aw_exp;
132  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_aw_exp FOR sys.dbms_aw_exp
  2  /

Synonym created.

SQL> GRANT EXECUTE ON dbms_aw_exp TO PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> @@?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> @@prvtawex.plb
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> CREATE OR REPLACE PACKAGE BODY dbms_aw_exp wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  b0d6 2e42
 21  +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
183  dxdTkLWSqmh151Y=
184  
185  /

Package body created.

SQL> SHOW ERRORS;
No errors.
SQL> DECLARE
  2    rowcount PLS_INTEGER;
  3    i_class  PLS_INTEGER;
  4  BEGIN
  5    FOR i_class IN 1..7 LOOP
  6      IF i_class = 2 OR i_class = 4 OR i_class = 6 THEN
  7        SELECT count(*) INTO rowcount FROM exppkgact$
  8          WHERE package = 'DBMS_AW_EXP' AND class = i_class;
  9        IF rowcount <= 0 THEN
 10          INSERT INTO exppkgact$ VALUES('DBMS_AW_EXP', 'SYS', i_class, 1000);
 11        END IF;
 12      END IF;
 13    END LOOP;
 14  END;
 15  /

PL/SQL procedure successfully completed.

SQL> show errors;
No errors.
SQL> commit;

Commit complete.

SQL> @@?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> @@dbmsawst.sql
SQL> Rem
SQL> Rem $Header: oraolap/src/sql/dbmsawst.sql /main/6 2016/07/28 09:32:05 cchiappa Exp $
SQL> Rem
SQL> Rem dbmsawst.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2016, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsawst.sql - AW statistics package definition
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Gathers statistics for AWs, DIMENSIONS & CUBES
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      none
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: olap/src/sql/dbmsawst.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/dbmsawst.sql
SQL> Rem SQL_PHASE: DBMSAWST
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/olappl.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    cchiappa    07/18/16 - Bug#24309417
SQL> Rem    cchiappa    03/14/13 - Set _ORACLE_SCRIPT
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    ckearney    04/28/08 - add clear
SQL> Rem    ckearney    10/12/06 - add mapping to xsanalyze callout
SQL> Rem    ckearney    06/05/06 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> CREATE OR REPLACE PACKAGE dbms_aw_stats AUTHID CURRENT_USER AS
  2  
  3    --
  4    -- ERROR NUMBERS
  5    --
  6    -- Note : DBMS_OUTPUT, DBMS_DESCRIBE and DBMS_AW (maybe others) use
  7    -- the application error numbers -20001 to -20005 for there own purposes
  8    --
  9  
 10    aw_error CONSTANT NUMBER := -20001;
 11  
 12    --
 13    -- PUBLIC INTERFACE
 14    --
 15  
 16    PROCEDURE analyze(inName IN VARCHAR2);
 17    PROCEDURE clear(inName IN VARCHAR2);
 18  END dbms_aw_stats;
 19  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_aw_stats FOR sys.dbms_aw_stats
  2  /

Synonym created.

SQL> GRANT EXECUTE ON dbms_aw_stats TO PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> @@?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> @@prvtawst.plb
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> CREATE OR REPLACE PACKAGE BODY dbms_aw_stats wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  5b0 2b9
 21  TDfQPDEMWu6avWUgc4AkawEg6dMwgz3D+kgFfC/NrQ9/helvyjZL4Y418BwWJ2YDp6ETGn4K
 22  HxXpxwwSTR31OpJ0HwoZ/ISzDLIMysHXM8mzrAiI9i/FXP6lOuuckAU/v5iczdnLdb6++3xM
 23  AfhEFQmGCykrNDY4cJUhT2VMSpfEhs/hj5TrT0ECK3Ye3O8hET2jUcnCKz1b+otXm5YvwLjM
 24  Z1CmPTGaZcDAgZxupIhDiVRLukpb7UXs/UknMP4cwn7Ts5vFI6qyOwor/2Z7w3BxIl3zjf2Y
 25  aRsOjchZ/txabbInKOq054h3FdnSi9E2fdgRAs27eqQXPXRjzgRtwy/zI01n2fhmQNEJX45p
 26  eiPfd8sxDWIWzSAiMVQA2um9+ObUq7aUnopTUTTfn4kyOSqXXCtn1NougB50TwZuAT4VNSb6
 27  n63cCX6yQZgcjwuMZfLMPIlLJOvewHob/WoU9hJmHJCzMAQKAn7juKucMK4A6F3Mt+miIKqK
 28  tLHNTnIPrsRGOwKQ5uB91nwuexpIYKF1OdFF/6FjlI3oSJVAAw2M+JM/NOno8AE85HkY5Dre
 29  +NfOlZLEk4ejmBAqAnpVYTihZm2ModAQg8S5dAQaPy5A0PsyV2C+fF2qtPk3o9OLN4DCrYgC
 30  hGMMt7aSm6qbeqQmmcNz/4r4pCFJIIf7IPvMQQ==
 31  
 32  /

Package body created.

SQL> show errors;
No errors.
SQL> @@?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> @@dbmscbl.sql
SQL> --
SQL> -- $Header: oraolap/src/sql/dbmscbl.sql /main/19 2016/10/13 09:21:24 cchiappa Exp $
SQL> --
SQL> -- dbmscbl.sql
SQL> --
SQL> -- Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
SQL> --
SQL> --    NAME
SQL> --      dbmscbl.sql - DBMS_CUBE_LOG declarations
SQL> --
SQL> --    DESCRIPTION
SQL> --      Provides interfaces which control logging in the OLAP component
SQL> --
SQL> --    NOTES
SQL> --      <other useful comments, qualifications, etc.>
SQL> --
SQL> --
SQL> -- BEGIN SQL_FILE_METADATA
SQL> -- SQL_SOURCE_FILE: olap/src/sql/dbmscbl.sql
SQL> -- SQL_SHIPPED_FILE: rdbms/admin/dbmscbl.sql
SQL> -- SQL_PHASE: DBMSCBL
SQL> -- SQL_STARTUP_MODE: NORMAL
SQL> -- SQL_IGNORABLE_ERRORS: NONE
SQL> -- SQL_CALLING_FILE: rdbms/admin/olappl.sql
SQL> -- END SQL_FILE_METADATA
SQL> --
SQL> --    MODIFIED   (MM/DD/YY)
SQL> --    cchiappa    10/03/16 - Add time to REJECTED_RECORDS & DIM_COMPILE_LOG
SQL> --    joevilla    11/13/13 - Added BUILD_V12201
SQL> --    cchiappa    03/14/13 - Set _ORACLE_SCRIPT
SQL> --    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> --    smierau     01/11/11 - Add create_reject_sql
SQL> --    smierau     03/08/10 - Add MAX_REJECT_LOBS, CONTINUE_AFTER_MAX_REJECTS
SQL> --    csperry     08/03/09 - add write to log methods
SQL> --    smesropi    04/15/09 - Added BUILD_V11200B3
SQL> --    cchiappa    04/14/09 - Rename values to match db logging
SQL> --    cchiappa    04/09/09 - logging error debugability
SQL> --    cchiappa    03/23/09 - Add INVALID_LOCATION exception
SQL> --    cchiappa    03/19/09 - CUBE_BUILD_LOG has time zone
SQL> --    cchiappa    02/17/09 - Deprecate constants in favor of functions
SQL> --    smierau     11/13/08 - Add LOG_EVERY_N parameter.
SQL> --    akociube    09/17/08 - Add SET_QUERY_ENV for debugging
SQL> --    smesropi    09/02/08 - Added BUILD_V11200
SQL> --    cchiappa    08/20/08 - CUBE_BUILD_LOG support
SQL> --    cchiappa    08/05/08 - Add {get,set}_log_spec
SQL> --    cchiappa    07/07/08 -
SQL> --    akociube    06/19/08 - change verbosity
SQL> --    cchiappa    06/04/08 - DBMS_CUBE_LOG declarations
SQL> --    cchiappa    06/04/08 - Created
SQL> --
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> CREATE OR REPLACE PACKAGE dbms_cube_log AUTHID CURRENT_USER AS
  2  
  3    ---------------------
  4    --  OVERVIEW
  5    --
  6    --  This package is the interface to the OLAP logging infrastructure
  7    --
  8    ---------------------
  9    --  Visibility
 10    --   All users
 11    --
 12  
 13    ---------------------
 14    --  CONSTANTS
 15  
 16    -- Log types
 17    TYPE_OPERATIONS_C        CONSTANT BINARY_INTEGER := 1;
 18    TYPE_REJECTED_RECORDS_C  CONSTANT BINARY_INTEGER := 2;
 19    TYPE_DIMENSION_COMPILE_C CONSTANT BINARY_INTEGER := 3;
 20    TYPE_BUILD_C             CONSTANT BINARY_INTEGER := 4;
 21  
 22    -- Log targets
 23    TARGET_TABLE_C      CONSTANT BINARY_INTEGER := 1;
 24    TARGET_TRACE_C      CONSTANT BINARY_INTEGER := 2;
 25    TARGET_FILE_C       CONSTANT BINARY_INTEGER := 3;
 26    TARGET_LOB_C        CONSTANT BINARY_INTEGER := 4;
 27  
 28    -- Log levels
 29    LEVEL_LOWEST_C      CONSTANT BINARY_INTEGER := 1;
 30    LEVEL_LOW_C         CONSTANT BINARY_INTEGER := 2;
 31    LEVEL_MEDIUM_C      CONSTANT BINARY_INTEGER := 3;
 32    LEVEL_HIGH_C        CONSTANT BINARY_INTEGER := 4;
 33    LEVEL_HIGHEST_C     CONSTANT BINARY_INTEGER := 5;
 34    VERBOSE_ACTION_C    CONSTANT BINARY_INTEGER := LEVEL_LOWEST_C;
 35    VERBOSE_NOTICE_C    CONSTANT BINARY_INTEGER := LEVEL_LOW_C;
 36    VERBOSE_INFO_C      CONSTANT BINARY_INTEGER := LEVEL_MEDIUM_C;
 37    VERBOSE_STATS_C     CONSTANT BINARY_INTEGER := LEVEL_HIGH_C;
 38    VERBOSE_DEBUG_C     CONSTANT BINARY_INTEGER := LEVEL_HIGHEST_C;
 39  
 40    -- Log table versions
 41    OPERATIONS_V112ALPHA CONSTANT BINARY_INTEGER := 1;
 42    OPERATIONS_V112      CONSTANT BINARY_INTEGER := 2;
 43    OPERATIONS_VCURRENT  CONSTANT BINARY_INTEGER := OPERATIONS_V112;
 44  
 45    REJECTED_RECORDS_V112ALPHA CONSTANT BINARY_INTEGER := 1;
 46    REJECTED_RECORDS_V112      CONSTANT BINARY_INTEGER := 2;
 47    REJECTED_RECORDS_V122      CONSTANT BINARY_INTEGER := 3;
 48    REJECTED_RECORDS_VCURRENT  CONSTANT BINARY_INTEGER := REJECTED_RECORDS_V122;
 49  
 50    DIMENSION_COMPILE_V112ALPHA CONSTANT BINARY_INTEGER := 1;
 51    DIMENSION_COMPILE_V112      CONSTANT BINARY_INTEGER := 2;
 52    DIMENSION_COMPILE_V122      CONSTANT BINARY_INTEGER := 3;
 53    DIMENSION_COMPILE_VCURRENT  CONSTANT BINARY_INTEGER := DIMENSION_COMPILE_V122;
 54  
 55    BUILD_V11106   CONSTANT BINARY_INTEGER := 1;
 56    BUILD_V11106A  CONSTANT BINARY_INTEGER := 2;
 57    BUILD_V11107   CONSTANT BINARY_INTEGER := 3;
 58    BUILD_V11200B2 CONSTANT BINARY_INTEGER := 4;
 59    BUILD_V11200B3 CONSTANT BINARY_INTEGER := 5;
 60    BUILD_V11200   CONSTANT BINARY_INTEGER := 6;
 61    BUILD_V12201   CONSTANT BINARY_INTEGER := 7;
 62    BUILD_VCURRENT CONSTANT BINARY_INTEGER := BUILD_V12201;
 63  
 64    -- Parameters
 65    -- Maximum errors logged before hard error raised
 66    MAX_ERRORS      CONSTANT BINARY_INTEGER := 1;
 67    -- Seconds between flushes of log
 68    FLUSH_INTERVAL  CONSTANT BINARY_INTEGER := 2;
 69    -- For rejected records, when do we log the full record?
 70    LOG_FULL_RECORD CONSTANT BINARY_INTEGER := 3;
 71      -- Log full record when no ROW_ID available
 72      FULL_RECORD_AUTO   CONSTANT BINARY_INTEGER := 0;
 73      -- Always log full record
 74      FULL_RECORD_ALWAYS CONSTANT BINARY_INTEGER := 1;
 75      -- Never log full record
 76      FULL_RECORD_NEVER  CONSTANT BINARY_INTEGER := 2;
 77    -- During import, log progress after EVERY_N row
 78    LOG_EVERY_N     CONSTANT BINARY_INTEGER := 4;
 79    -- Allow errors during logging to reach the user
 80    ALLOW_ERRORS    CONSTANT BINARY_INTEGER := 5;
 81    -- Maximum errors logged with LOB column populated
 82    MAX_REJECT_LOBS      CONSTANT BINARY_INTEGER := 6;
 83    -- Maximum errors logged with LOB column populated
 84    CONTINUE_AFTER_MAX_REJECTS  CONSTANT BINARY_INTEGER := 7;
 85      -- Don't continue after max errors
 86      CONTINUE_AFTER_MAX_NO CONSTANT BINARY_INTEGER := 0;
 87      -- Continue after max errors
 88      CONTINUE_AFTER_MAX_YES CONSTANT BINARY_INTEGER := 1;
 89  
 90    ---------------------
 91    --  TYPES
 92    -- For create_reject_sql
 93    TYPE REJECT_IDS is varray(500) of number;
 94    TYPE REJECT_SQL is varray(500) of clob;
 95  
 96    ---------------------
 97    --  EXCEPTIONS
 98    INVALID_TYPE EXCEPTION;
 99        PRAGMA EXCEPTION_INIT(INVALID_TYPE, -37561);
100    INVALID_TARGET EXCEPTION;
101        PRAGMA EXCEPTION_INIT(INVALID_TARGET, -37562);
102    INVALID_LEVEL EXCEPTION;
103        PRAGMA EXCEPTION_INIT(INVALID_LEVEL, -37563);
104    INVALID_VERSION EXCEPTION;
105        PRAGMA EXCEPTION_INIT(INVALID_VERSION, -37564);
106    INVALID_LOCATION EXCEPTION;
107        PRAGMA EXCEPTION_INIT(INVALID_LOCATION, -37566);
108    INVALID_SQL_ID EXCEPTION;
109        PRAGMA EXCEPTION_INIT(INVALID_SQL_ID, -37571);
110    INVALID_ID EXCEPTION;
111        PRAGMA EXCEPTION_INIT(INVALID_ID, -37572);
112    NO_LIMITS EXCEPTION;
113        PRAGMA EXCEPTION_INIT(NO_LIMITS, -37573);
114    INVALID_LOG_MSG_NAME EXCEPTION;
115        PRAGMA EXCEPTION_INIT(INVALID_LOG_MSG_NAME, -37577);
116  
117    ---------------------
118    --  PROCEDURES
119  
120    -- Enable logging to a particular location with a given level
121    PROCEDURE enable(log_type      IN BINARY_INTEGER DEFAULT NULL,
122                     log_target    IN BINARY_INTEGER DEFAULT NULL,
123                     log_level     IN BINARY_INTEGER DEFAULT NULL);
124    PROCEDURE enable(log_type      IN BINARY_INTEGER DEFAULT NULL,
125                     log_target    IN BINARY_INTEGER DEFAULT NULL,
126                     log_level     IN BINARY_INTEGER DEFAULT NULL,
127                     log_location  IN OUT NOCOPY CLOB);
128    PROCEDURE enable(log_type      IN BINARY_INTEGER DEFAULT NULL,
129                     log_target    IN BINARY_INTEGER DEFAULT NULL,
130                     log_level     IN BINARY_INTEGER DEFAULT NULL,
131                     log_location  IN VARCHAR2);
132  
133    -- Disable logging to a location
134    PROCEDURE disable(log_type    IN BINARY_INTEGER DEFAULT NULL,
135                      log_target  IN BINARY_INTEGER DEFAULT NULL);
136  
137    -- Returns the default name for a logging type
138    FUNCTION default_name(log_type IN BINARY_INTEGER
139                            DEFAULT DBMS_CUBE_LOG.TYPE_OPERATIONS_C)
140      RETURN VARCHAR2;
141  
142    -- Get current logging information
143    PROCEDURE get_log(log_type     IN BINARY_INTEGER DEFAULT NULL,
144                      log_target   IN BINARY_INTEGER DEFAULT NULL,
145                      log_level    OUT BINARY_INTEGER,
146                      log_location OUT VARCHAR2);
147  
148    -- Get string describing current logging
149    FUNCTION  get_log_spec RETURN VARCHAR2;
150  
151    -- Set all logging based on string
152    PROCEDURE set_log_spec(log_spec IN VARCHAR2);
153  
154    -- Set all limits for query environment
155    PROCEDURE set_query_env(sql_id IN VARCHAR2,
156                            id IN NUMBER DEFAULT NULL,
157                            tblname IN VARCHAR2 DEFAULT NULL);
158  
159    -- Creates an appropriate table for the given log type
160    PROCEDURE table_create(log_type IN BINARY_INTEGER
161                             DEFAULT DBMS_CUBE_LOG.TYPE_OPERATIONS_C,
162                           tblname IN VARCHAR2 DEFAULT NULL);
163  
164    -- Retrieve version of table, or current default version
165    -- if tblname is NULL
166    FUNCTION version(log_type IN BINARY_INTEGER
167                       DEFAULT DBMS_CUBE_LOG.TYPE_OPERATIONS_C,
168                     tblname IN VARCHAR2 DEFAULT NULL)
169      RETURN BINARY_INTEGER;
170  
171    -- Set a parameter's value
172    PROCEDURE set_parameter(log_type      IN BINARY_INTEGER
173                              DEFAULT DBMS_CUBE_LOG.TYPE_OPERATIONS_C,
174                            log_parameter IN BINARY_INTEGER,
175                            value         IN BINARY_INTEGER);
176  
177    -- Retrieve a parameter's value
178    FUNCTION get_parameter(log_type      IN BINARY_INTEGER
179                             DEFAULT DBMS_CUBE_LOG.TYPE_OPERATIONS_C,
180                           log_parameter IN BINARY_INTEGER)
181      RETURN BINARY_INTEGER;
182  
183    -- Force any open logs to flush
184    PROCEDURE flush;
185  
186    --------------------
187    -- LOGGING FUNCTIONS
188    PROCEDURE write_to_oplog (
189      oplogHandleId   in  number   default null,
190      msgName         in  varchar2 , -- Cannot be null
191      msgText         in  varchar2 default null,
192      details         in  clob     default null,
193      component       in  varchar2 default 'PLSQL',
194      operation       in  varchar2 default null, --cannot be null
195      recordLogLevel  in  binary_integer default LEVEL_LOW_C);
196  
197    PROCEDURE start_oplog (
198      oplogHandleId   out number,
199      msgName         in  varchar2 , -- Cannot be null
200      msgText         in  varchar2 default null,
201      component       in  varchar2 default 'PLSQL',
202      operation       in  varchar2 default null, -- Cannot be null
203      recordLogLevel  in  binary_integer default LEVEL_LOW_C);
204  
205    PROCEDURE complete_oplog (
206      oplogHandleId   in  number );
207  
208  
209  
210    ----------------------
211    --  ACCESSOR FUNCTIONS
212  
213    -- Log types
214    FUNCTION TYPE_OPERATIONS RETURN BINARY_INTEGER;
215    FUNCTION TYPE_REJECTED_RECORDS RETURN BINARY_INTEGER;
216    FUNCTION TYPE_DIMENSION_COMPILE RETURN BINARY_INTEGER;
217    FUNCTION TYPE_BUILD RETURN BINARY_INTEGER;
218  
219    -- Log targets
220    FUNCTION TARGET_TABLE RETURN BINARY_INTEGER;
221    FUNCTION TARGET_TRACE RETURN BINARY_INTEGER;
222    FUNCTION TARGET_FILE RETURN BINARY_INTEGER;
223    FUNCTION TARGET_LOB RETURN BINARY_INTEGER;
224  
225    -- Log levels
226    FUNCTION LEVEL_LOWEST RETURN BINARY_INTEGER;
227    FUNCTION LEVEL_LOW RETURN BINARY_INTEGER;
228    FUNCTION LEVEL_MEDIUM RETURN BINARY_INTEGER;
229    FUNCTION LEVEL_HIGH RETURN BINARY_INTEGER;
230    FUNCTION LEVEL_HIGHEST RETURN BINARY_INTEGER;
231    FUNCTION VERBOSE_ACTION RETURN BINARY_INTEGER;
232    FUNCTION VERBOSE_NOTICE RETURN BINARY_INTEGER;
233    FUNCTION VERBOSE_INFO RETURN BINARY_INTEGER;
234    FUNCTION VERBOSE_STATS RETURN BINARY_INTEGER;
235    FUNCTION VERBOSE_DEBUG RETURN BINARY_INTEGER;
236  
237    ----------------------
238    --  UTILITY FUNCTIONS
239  
240    -- Create SQL to find rejected records.
241    -- Given a schema, rejected records log table name and
242    -- and an array of ID numbers, this returns an array of sql
243    -- statements (1 per ID) that can be used to help find the
244    -- rejected records.  If inIds is null this returns one
245    -- SQL statment for every ID the the reject table that
246    -- has any associated CLOBs.
247    FUNCTION create_reject_sql(schema       IN VARCHAR2,
248                               logTableName IN VARCHAR2,
249                               inIds        IN REJECT_IDS DEFAULT NULL)
250      RETURN REJECT_SQL;
251  
252  END dbms_cube_log;
253  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> -- Give execute privileges
SQL> CREATE OR REPLACE PUBLIC SYNONYM dbms_cube_log FOR sys.dbms_cube_log
  2  /

Synonym created.

SQL> GRANT EXECUTE ON dbms_cube_log TO PUBLIC
  2  /

Grant succeeded.

SQL> 
SQL> @@?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> @@prvtcbl.plb
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> CREATE OR REPLACE PACKAGE BODY dbms_cube_log wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  9872 22ce
 21  272LwDgZn2BhPpeWCEuLzfqlCr0wg80Au8cFYfH+gdLqj+z+YAlP/C1uGs1ccpBrFIPJhLee
 22  oa0ynbh+k953Azt6oUiDWPkIxJmpzi4YiV324k563mzztJXgv/uK4B+P2/3tCP8QZV/GsV25
 23  MziQckFIwTpzmxcGY2LmrH2XmdZSHF9zFpn/4SSo+dDvqvFEUiGpwOQTFBk6Y0lPwTWOkaT9
 24  woC8kruG6kw2/cY/7IBSp/gkOd7oDhQa0ybLB+cPkGlG978pwYd1zhnOe0/o+VPRWG/KZhBz
 25  7GZiRS8oqoUth+viH7ipmz0KhgsCJVZKTnxK//3Mk6aoAprKwm8r0ID5MOymefd4dHPcBE/B
 26  MYHbF7Ss43TWhQzi+y6LT9bS1PlYeLKC0y5qS8YFd/kW4Zat/gMAL0b5jSw8Dg4MrIkG4wZ8
 27  HPfVlohMMPqhsK6TKtJy1uNv/ZAePsMzkdYAQEAVkrN1hHOUzsNKyhxCTRuONXoCgwgWQXG3
 28  zAQomI4WWjVYZST0NMj8HDoGxIHgMzbvek8kGWgZhnBPEDUKvJnCmWUYa3MsgpJwBmym+93e
 29  ByRh57M6V6S8/PO3DYamEV+2eE2PDjZcdaNEo/XtwYtgbE1wmBGNANNwX784fFlnFJF6NFnH
 30  u0zLnbJ5q0zOjHhCdiO3pxM9EzFlTxB1cvlJDxmaz6IiIICXwyGAPx4jRdbxtG4ZW/RwaCJa
 31  CXCrWVJ0DH9dxKAK5UL7CeqdeE6a31tcuOo17yq/cspc5xRyBvPYz6Gp2an6R3uMleZLhnVS
 32  cjiygHIPMNFv8qPYuEaRasjFTXGLvCIiuW+ZnS8acTauvJRj4cQDjndX/fdltAh8dFF4Jyn0
 33  JUg28iT0XuD1WJTZlAR7MuibOon0MiGkklAITu8zBPI1Dttt1GJ49nCgrDpgOlrCmSTTPZ6L
 34  z7/yJR7S4ylZ7JKhn9KfnjyOBMiGehD9CdbljAaOAKjTwOxEOMhMLFKYKfAsRCQ6pBlg0E5F
 35  gF3T5q1UIluIql+M7ay/nkTdFBtfJUrT8TA1/LrUQ6njxRGYNherCfA3y25RdjqAEnhp8r5I
 36  fxmLz+geoK9oLuR95VXvzbMhN2SIT9yD8tD14OR8gbrfoxShrE3bTfHTWvWJSj3id92CbLGk
 37  freTChGz3rJK1nfsrJ+TBXeIEW36mHk9RbrYUjF7hRgBgwsNKz7r0/Z6O4aipqX4BdESBWKD
 38  NEqLLUpr4U1pODblebjkepoOHs/KC4xHPE3eJ4mTqyrNRhVgfE8HP/VBTMNqhyMk5ir9YegC
 39  zMlwd8Oizr/f8GB+PotFdbC2qqLTJBMbwLI7Pv/Pc1KHi6hcUMrGhOVQUPPbIS2RsQU+JiZM
 40  oN7rQJFdIXZDu/HKToa9yoVgUgfhsw+vdbIrJ3FZlgdTCIQMgAhDFEpwjT7yMgUkQc6haxtK
 41  BtnSbpOuY5W0wcIGLU9CNXWX4PXIk/PIRypfHynHNjvv2FcMZ9nQFpyuCpU5dvAxm22QNu86
 42  QFHuWQpNwyJKFNCUqOrDxcYUlcw3oSbDSqHy4uG3iQ/t8kPXoczvGy+CkD/l1SvcWZXk1usJ
 43  6S3dNZeAL7MHaZ63wCt0qAYEhPWAwceIhAcEFh7X1ydOuzebk3SJ1gphvII5NJkQvubIy7ZZ
 44  y/H7czjCHRDuDA+NJUenKCy7wRKuS7Sbbzs425SQKuV+iDwVi4/JJtLDJkPJWGSUSgw4tKvR
 45  3w76AmY1+++FfCcElmOGIpvdMVZNj3m8HcEtq765D5sbg6Bh5vumYVu6uBv5KPkWHcEACIBS
 46  ZeIVfitVGBJ2cZLMGMzTd2HK0tXIujLE4Czc1rhxN/en9npnu7S4u/PrZ84OFnQz2UyZHk38
 47  C7nfxu7S8Z+mkvGU+IiBYcwp9TzYIlBgX3mD4iaH+dD5Eez73MredjClO9f673yOBK8aLvnO
 48  hIql3bEz8xAJUE7GLKwY36OvoFBoRJuMxOtXHQipPVgwOFvjCzdBZgk808L1NmLMGH6crLjf
 49  HjQhBC7ELZ9DTvl+C5gRObEz7vPS6h4JXL/rGK0KCUx2fvwcuN8l3+/0uqJTt4H12knZ0E49
 50  18ktz3G2VGd3zVb+L+FTyvKCUARodJkcr1lCbte95Ngd7GVL9byHhLcNa+QUpRUfxV0jvKNo
 51  aJ1NREoTv44wnmkNBc/9myKSndcXrhOVhnI2QfN9u8n5fKpod+nShHoabkUddZX4RGlLz64/
 52  kxk8CypjcNKgozht5isyBUCBHMTFiKf610haCbV5/1Y3n2shxK5t+Np3H8hqnUGLTabQrijE
 53  TlxiRojYluPFunpH94gKOn6+RQpExd+tL/knvEVM4h8Tmvpz5LE6EITDC3WZli8uIQ9eKRnX
 54  JEgiIaJmOUFeWYG02qR7LdhPSP1mlzR+7CU14XuSoNTiR59mvSQWF0irmeeLsz4C7UW+qux4
 55  b70ygjEOBdhIhQYIc8CB3aCUvJNTcGEZ+k0nZTXii51HFxM6pCA0ryG+mrQAzktOtxTJTg6d
 56  o/uCiBa+kIybZIssnNV9ARBZOmNP6Bm+lvPg0jAf9VllicKiF5+3uWMIIYg3NIa/y6J5zrq2
 57  Fgr6z4T2cRrXpyyqJIX16oT0VTwStmK81tQsKZf00QYGP/kgKiKgq5moJl6wXdpqhb6aL+8v
 58  k7i4wqMZGXIsjtsoToM0CxHAlqs6PlPNjc594zpaeUCjU5bdQme6M0XQEXJvCoFAz6bHwckq
 59  +KXaR12d0buqArMDMBTHkceCbklHMxNiLLszYJfb//4kl7HskucofN1jHXl0Jypx2I8mzSK6
 60  +VknVyEZMG7Zf4MmhlhXemWWR1Ay9a0Lpf2DyqQEHq0sCtg7SJjKabCvNcrABEcT2fqCUOoG
 61  sFLleBZes3oFzGpPXbBXm4Ec46OfVG2hcHutrjQtnYzrFsDgJ5I8jN7ARBCfotaV/4KLDzAa
 62  FP05mQdcAozC5vfphvKM86Eh/1bsR51upUcE+/gJ3cLRQzeIVfm5iR/eJktbBeuMVxhhlEpe
 63  epccmlydqgYCt5nQspH+hSUlfFZ0er5GBJh8ZmrbHDNnw+UUX3UTF5i53zkX8QWw29j29Vxr
 64  S2CwRBm78i8o5SUSYcxDZoXsIuxQxwkuKOjRXCXD46BlDfo+6TElSphFe5jYl1u3Uf3HTH9F
 65  a/63jJkXgjV7fHqwFAyyppDqfu+kzusk+YMajPrqxtOtkF8pF5X8tNTkdMm8wdm69Qfc6yl8
 66  1/FKktiAkgCbm1MFYa9r/kurwjQEsugMvFvIMw7s2yfVhmUcWxex20hh1ujQW+DI2bMe4r71
 67  Zf/UhHa8/IPrzbmAlKPzy/FUxykWvRtY9wE4JRROEI3LblSkj5BHKbynRxYpbon1lBTB/OKT
 68  rQhy0yTtpigUmOPGg6wgPY1eQEuHTPvbrAnMXA1bTIyTPSNkuaBR+1gLQ6mXAuhpDkl2nT/R
 69  O71Rz3Wp/p/M58SaO5UNIJ9wg3gSTtgatgLOMT8Ba0TRpFAXFcJwaQaGSX0Zd1udp45OJ7kP
 70  Le0gwKHBiyaukkBpd7h1yfExF10aAOjgyMuTPk6vm6RBIckkAuDwSFj6HhvAXrpPEHQTG1Lq
 71  Y1IDbvbfjF5dV43+rtg9JlRJDU5COYIq/xH/qe+x7eOPs2g3GEFTTlPpq3gi3r+YZTyD5WfD
 72  3KZOpy/6mvk8uUiI+HEBPVLvmCdi7Ieel6QGenNsrQwGDHkaXCic7CR2FEoQR1omSCCurrpZ
 73  5aT8aeraMY15OfOeNllLVhmD6G2NrDoqsAcE9dqhebK/x2X0SUjME7069anDR5ba75aQdYe5
 74  IX/tz+KNNw3mCqHVhs5T/6tb9c0lnMH8vVM/UKvY3g15E7e3hj+2tUZqpBVJMQEP94kB5tLj
 75  /BP6zYC8OkPcsA5O7ki9cDKC3cVv2sZBUfh9KmTn5L9uDNbmzrCTKcKlTgXetgXWSgm+yKkZ
 76  vbm0xiYUJFBDn0ObUgmJA2nRUKvGtPUHDz2aIzlpHIpI4b7wT3nBscVy4iakcEUt1xXu209C
 77  3fKQrGsMIdimyAlXgdKMxG1/XP58bsrIdcAfNnl4jNKH5dgGC1+/9lcRzVHyX71lxEqTO6xj
 78  4G97bJf/X3qw+t7OZGIAUigHHB6TvkF9W6ZtvLpJWTp9AstOvlVBqk5ndWu5pdYJA8bznuen
 79  7fr0fHSoc9Z5ESmciVT/8ScqLQmVPGvZcjdeGdgycbPenDpiw+c9FQSmbcaBGw9oJtqr4N39
 80  TsZFTSuMxQxwCl6Bvfy8TfSBD/6swwGvMN5IPeTCNCq9KidNAFKxcC04GW4DQNObt1tu25rq
 81  D/O7uUrpIPhzjLakpzkZ255MBv2JLfte7pPcdWhbEj3auac9FyYPoxfeEIzsWT9QU/hFjmTs
 82  amPRsxsGKgy0ZZUr3KWG8BWklFKI3WQhpNk2MDLPfrPAeJpoVrmtf9LAiTM36zvLe1e70gIn
 83  mByj5bRnKNXDLbCGra17rXvfUrOJrB8bLZAg1SG3rF0oToGSi8G+OMGTUQv0W5ZZ5JadDVxC
 84  7c+j14s6Jzr0rs51qwFrC4iurXIwJ9h0DSWnQV79/CbW4ijXd+4Okktt5sP2Rkf8LUmcm5et
 85  DPvl2EflXXXk7RlW6j116ZfcnTmIUZuh8JdfpAND79eDgwHUxfA0pAl/NR9nnJIO4Q/Edi11
 86  cIo8dyHS4s8QB2jYNXizDSpqTczvzlyr+OVNxn5dGJ+G3t9YyeJTp/7i5ffOTDaQO02Py1N1
 87  z/sHkXqycxS1qBwrJ2lDi++klTGuFOyqwHJbGHDQeh/EMONyrzlsRerzsetqIwF/7RuoAO9R
 88  6hxyXhVC3FWCBjD/e/Ekmn1ESmmnto6w1wu/mOKm8beWM0pRjD7fhP6yAdi0xoLEBR7U6NvI
 89  v9RjcQX/gQsJg0oI4jZIKEGkX4XBMSNd4mTx+FqY3ooABky2BmeKYRMNxf70M5qsGodkyuiT
 90  4Mq20HbqyWEPkP2C3ZyYQs4Veu9WMGa5vvcUJYDYKfXO5ZIbdFIZ/uRpVppPhroE4qQEn1AN
 91  Q9GJkM6T/nv3A7jsh36MBnNz65JqH4HbFTn6AgcSz3WGaD5IVAoS5I0hAA8ee3BtVZYEHMZr
 92  u+mVvPgWxbmfUL+wQlYgjq6M2E4BnESmLWXwze4zbh9ABMuGcwax2S1WFDzeFAagDhzXFCc/
 93  bsA5MJvS1TuFJhxNl7OvOZ1JxtSJ777epatZmVYOlMJPqwODjaZVdVKqy/5UUc+zrVakEljG
 94  YKIENAiTGwAqavnRVkszb8keindCebnwPJALM1hMYTm3o2zr8qiC1Hq473H7T5fndxcEkRhl
 95  1wN503HAeTl4clVvR5+Rkyhh4Dv/929TDLc/xMRLbNbqIcxBSkXtssbNdAlbDXzC4Ixckwvo
 96  AOhAEZ+e+n2z7bX+8+3l3W52GdpofyYIXPSKPlLfsp1v5AOpB0rKXgONqNJevpgGcZQOKsdM
 97  hR2vbNtC8kp5Gx77Y2V7Q7XLH60Vofp5y2sVPkWwQX6Kp/CjOzKGTVoBYYAuq136CJBaDvq1
 98  Q/XDyfd2FgRpnWR3I02x14vGV0EMi9coU3caRpDgaE+nFys3o6ipnVPLirh6izqJDgaOUE7e
 99  NT0pp0WCTC226gNPDU78J2GWv9P900sqKi0b+/9MrhNvon31fyrPTIAjM2HcTTFR1IE8gY+u
100  5SXtvxdftKFIxXV5wWar3jkFwSDcFacdYvAR3dWIq8SdtU0g9QRMDi0z4JrcEKUsr+G5S5ic
101  /Ej0EcQUPBLE1NytT7lH/1F6Ix7RnDNTBZiLQ440gyqai5Agx1DEkn1lmOd2NiIXLddY2XR6
102  084Yyy4G6378IYulOLiIka0SZvbCwoKlytSg4d///uimrdesho+mUq0bZVWir+zOPpdqheo4
103  lDS/QlIdTZec6qy7MDvx2u4CXBa5QdU7pid6oeQt1gO0Ap8T5Xy6/46AojRDYDLD0rOA/iDa
104  TIc4sY4F8nLU/5hzgtNIAkj+iTibQjopl6U7jyKJGMTp3Shz6RTp3u8PhwtNLWxpQcPlfMMu
105  9zuJO0BnlIQ37kLkP3AYQ84fbgWaTr9GZS4GQzocrw9YTtVXG9xIjge3QjlDPjpKEPYM0Vnr
106  yntJflKDGffmtXeSn4CmHeIPSOnRycpuSIXXhqRrRrPLV3/5D8ACJd2FBbc1yeqJ0uA9kxFY
107  sKUZpGzrTetB3ZGXp5k07kKJgQZ4hYA//UHP3si9sKluJWtpzOrpQuxsXofqsHTJmlq6spV0
108  vznVCxIAnU9y0vZzI1ZiA0nA0ZpkpyhjJd6tih+HN8+SfA8+v0JRp6C3zqSYtjvXicZSHJqO
109  1bNd8n+cZ597o0jVYZzcFZunERX8hsDWkyGQ35SjmFXWlghGPwYY9OvBBHTdf5ahAwhsDoqf
110  oQUVxHHzE+HzLkP1UGAtpl8C+unhKxZqYHZ9uaXLLZqTP5rXIzyfFoI58Ib0ieVP8NH1TgdK
111  NidC0mfEEkdhzOsb3S9RIsKegb8EkndpJXSqyZ2mCIUri3vVIdVAlFnLTfcdsVhwp9YyNrVD
112  S8iSpDTN9kB4TSL5WRWVauBOpMKn9zEy4I/vqVwpJsmTxCttSKb8f4l2EdF02nGXtEPThfI0
113  XuG7kEOdgxpVc+UPocD4i7a+MX5IySxL0HbVXCn+0kjCPcIGVS6lmQFM5DmYjv6clGsIiJwY
114  8vM5eHnwCksxr8FXF15KOkiwJfSyXQ8qZK0oF3XBXmwXumNfgzzIhs/F/vlLmewe3xEImGR2
115  lmf7tn+w6sYKZCBTpu+o0pVtaduNL2EssHE6D11tWrHwnU41vkea4guMw4f2qOWMmVFENwEy
116  Q6RbQ7QFty+LX2E68fTA7DEzGvnU4/HEeLOrcLmdhh+Dxx+Ucc/1yXb/kAaQqUFvdlZ0TBtU
117  QnaArUb1QYRDcYt7EUXlnf9gtgvQV0eSKTa0UPNoHivD03TH6gYAFtXHvFBnlzG9yUudBOr/
118  HWn8fWVYxo/IrkXCKHa7fyZ2OTxtWUE1CCRJLhuq8cUMZIAQDV9r/zKgvkpl6n3AglxhPTKu
119  eVyOwI8/Yr3Vd4jvv2iOKT6/sf0gIbM3iLOK1+EntoMGa0NZiDgFGOSIoR1kkQHN40eo7d2F
120  JcBAlv3E9pUO0jzX4Fuyn+TYf/Of24CwFcW/yK/hV/ATyfhHI8fSWIEzrc1jTfCDzKaNp4mw
121  yeLv1aE0s0iyqA5VLyIy3/VvijxrA92zTwMOGtoRoIpQ56mTeVBiVIR74EUz69jM2sUOfqEQ
122  5b+AiYo8GIy9Hz9opFiHuVA2HSG6OK5Mskw2wR/aIdZwye/O2Nj0VRoVqEyyk8C+m7eoU2e+
123  xj/f3llbjTspclXXNxd2IXboe01VdhK5SNHj/waQq4RnmD7P/EjnEAr1sKcWGlWOEIpI9ooo
124  sMHaDemozWF9hje8wwq1NkSKd0QPQ7gsoO8Pr9yrFJwL4B+Q+hNjdYTXcG7Fb39JNiyDZIg8
125  x633g28N9pGOfs+klAV6ShZUz/+Z6Q1mvO/eDjvnq9syA84K66Tn1o4Wr3jXfS/OoubKgq1G
126  pAEhFakY+JZTWvZ7Cn+e3crMwIFSoXwwCgTkltKOD5ir9dC55rAxY6tHEnkvWzsWgfIKsrAX
127  2/NTEhBW/A2eUWMMFNBqkOMjUbOPSaq6H6I2DUWjTRmx6ofw7dKxSr7gLInRMIjDjvxqarAd
128  mf0RunzisxHISnZ0KZm509p2WYn9MddaSbnMwu5HkEtmyUDcQFDGANG5BSn5WOzOd32ImkrY
129  LsAI4IHCDCe0pGWXRgEtgKoBB+dVDXfdsKcDDWy59piITMG6fYGL5RImn69VsZcRdtCfR6eu
130  0P1f2giFYCYw8uEJnq+UeIJvCNA9m+uG6x2tbBBmap9bLt/UuKRMXHfjpNStKevvq8lqTj7R
131  OAtEejuU8NryeYFEtvXK2WiZYU9t+R3VOkn3eRH350SJEDpbKfZ49RWS5pkRi+F5brU8eN09
132  YiBrV2J5TlRHoSNvByrXC4XxHt1V4ZpkKmof6FIqTQQaMtKpw90f5XB0vcJU633rhutzEENs
133  T6N8FgTElTM0EG6nlfjbRdA1Io1EkgC1FunDBK8khKlmbhSlf3PpPrLYDBvpBCZNzeOoiMWw
134  Wwx13FpsjuWCFp1siUDlmXPaY5red90OSu34Z8y2gntDRfw9dyJsfQn1LdQpCzJkDGPUU1Re
135  GuJSe+cSqGQApvZ0IsePgQFNuH0cywKz25b2KZPlRazxcuAOUATF9fygJwYbVuBWGwSrOLbv
136  TTANnARgFZ73PsPgft6rwQRMqwxb/BPJr3afKb5Uj6ab40LvMDUnX7A42nRft1WMo6M5GKB1
137  gQ2eU9CsFxkpPKrqWIKjJQKzQJjHS8fJgU06eXSSRQscOT4qGT2B+hwvO6dq7LH3uGIAbMan
138  faT+GSdvxFGKD2XpuaBbb6mNZ34L85fmjZdg4KJpDCNedc7lldbm2v6CPyAqwNj2Zr8RpsPV
139  8892ArFvOaAILR93gyy0etSbu5mbbnHRaaV7AXOxT1Fk4Xxzec84A/08+bCP9w3Fk27dGcDc
140  plIARrtrrjwNbNgYCc9bzOZ5mGWwqyT5NXbk4N6qUpLQJ+KtOjOUFYGkxX1dT3Ft5TrqcwPY
141  Ts3R3rp1v/24g3HyTqD8KIKy39z8y2IQYJVEgyowo7UpTS7BYCBlr6GDdQw6fFa0wwVttl9c
142  Ay3SAlXTxcwbJNkVacAFQ8njmLEnKKJlQH5GTTiRvKKzoyGKAUhfNb0QT778g7L5hqr7hziN
143  tA==
144  
145  /

Package body created.

SQL> show errors;
No errors.
SQL> @@?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> @@?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem Replication
SQL> Rem
SQL> @@execrep.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/execrep.sql /main/5 2014/11/27 16:09:01 jorgrive Exp $
SQL> Rem
SQL> Rem execrep.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2014, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      execrep.sql - EXEC REPlication
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      PL/SQL blocks for replication executed after package bodies
SQL> Rem      are loaded.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/execrep.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/execrep.sql
SQL> Rem SQL_PHASE: EXECREP
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    jorgrive    10/20/14 - Desupport Advanced Replication
SQL> Rem    jorgrive    02/21/14 - Bug 9774957
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    elu         10/23/06 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> Rem Objects for deferred RPC and Materialized Views
SQL> Rem Dependencies on queues and jobs; required for Replication
SQL> @@catdefer
SQL> rem
SQL> rem $Header: rdbms/admin/catdefer.sql /main/23 2014/11/27 16:09:01 jorgrive Exp $
SQL> rem
SQL> Rem Copyright (c) 1992, 2014, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem    NAME
SQL> Rem      catdefer.sql - catalog of deferred rpc queues
SQL> Rem    DESCRIPTION
SQL> Rem      catalog of deferred rpc queues
SQL> Rem      This file contains sql which creates the base tables
SQL> Rem      used to store deferred remote procedure calls for used in
SQL> Rem      transaction replication.
SQL> Rem      Tables:
SQL> Rem         defTran
SQL> Rem         defTranDest
SQL> Rem         defError
SQL> Rem         defCallDest
SQL> Rem         defDefaultDest
SQL> Rem         defCall
SQL> Rem         defSchedule
SQL> Rem    RETURNS
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      Tables created in this file are owned by user system (not) sys
SQL> Rem      views are owned by sys.
SQL> Rem      The defcall view is implemented by the prvtdfri.plb script.
SQL> Rem      The defcalldest view is implemented by the catrepc.sql script.
SQL> Rem      The deftrandest view is reimplemented by the catrepc.sql script.
SQL> Rem      If the repcat tables are installed,
SQL> Rem      the catrepc.sql script should always be run after this script is run.
SQL> Rem
SQL> Rem      Tables are created in catdefrt.sql.  All other objects created here
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catdefer.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catdefer.sql
SQL> Rem SQL_PHASE: CATDEFER
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/execrep.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     jorgrive   10/20/14  - Desupport Advanced Replication
SQL> Rem     surman     12/29/13  - 13922626: Update SQL metadata
SQL> Rem     surman     03/27/12  - 13615447: Add SQL patching tags
SQL> Rem     elu        11/03/06  - modify for parallel upgrade
SQL> Rem     rburns     07/27/06  - separate queues
SQL> Rem     lkaplan    05/05/05  - grant analyze any to allow lock_table_stats
SQL> Rem     gviswana   01/29/02  - CREATE OR REPLACE SYNONYM
SQL> Rem     gviswana   05/24/01  - CREATE OR REPLACE SYNONYM
SQL> Rem     liwong     10/23/00  - Add disabled_internally_set
SQL> Rem     narora     10/02/00  - code review comments
SQL> Rem     narora     09/29/00  - use decode for txn_count=0 in defschedule
SQL> Rem     narora     09/13/00  - add comments to new def$_destination columns
SQL> Rem     narora     08/30/00  - enhance defschedule
SQL> Rem     elu        09/12/00  - add catchup to defschedule
SQL> Rem     liwong     09/03/00  - add master db w/o quiesce: fixes
SQL> Rem     narora     07/11/00  - grant priviliges to v$ views
SQL> Rem     jingliu    07/29/97 -  change deflob.enq_tid to deferred_tran_id
SQL> Rem     jstamos    04/04/97 -  tighter AQ integration
SQL> Rem     liwong     03/07/97 -  merge 433785 manually
SQL> Rem     liwong     02/10/97 -  Comment out defcalldest,
SQL> Rem                         -  modify deftrandest, add queue_batch to deftran
SQL> Rem     liwong     01/15/97 -  Modified delete statement for expact$ and added
SQL> Rem                         -  def$_aqcall and def$_aqerror
SQL> Rem     jstamos    01/03/97 -  add drop user cascade support
SQL> Rem     jstamos    12/23/96 -  comment on nclob_col
SQL> Rem     jstamos    11/21/96 -  nchar support
SQL> Rem     ato        11/08/96 -  remove catqueue.sql
SQL> Rem     sjain      11/06/96 -  Change defcall and deftran for backwards compata
SQL> Rem     sjain      11/05/96 -  Fix type in defcall
SQL> Rem     mluong     10/28/96 -  remove dup calls to build AQ package
SQL> Rem     sjain      10/17/96 -  AQ Conversion
SQL> Rem     sjain      10/15/96 -  aq conversion
SQL> Rem     sjain      10/14/96 -  Aq conversion
SQL> Rem     sjain      10/01/96 -  AQ conversion
SQL> Rem     sjain      09/04/96 -  AQ cont.
SQL> Rem     sjain      07/25/96 -  continue with the aq conversion
SQL> Rem     sjain      07/22/96 -  Convert to AQ
SQL> Rem     jstamos    06/12/96 -  LOB support for deferred RPCs
SQL> Rem     ldoo       05/09/96 -  New security model
SQL> Rem     mmonajje   05/21/96 -  Replace interval col name with interval#
SQL> Rem     ixhu       04/11/96 -  AQ support: add obj_type in expact$
SQL> Rem     asurpur    04/08/96 -  Dictionary Protection Implementation
SQL> Rem     jstamos    08/17/95 -  code review changes
SQL> Rem     jstamos    08/16/95 -  add comments to views
SQL> Rem     hasun      01/23/95 -  Modify views for Rep3 - Object Groups
SQL> Rem     dsdaniel   01/25/95 -  merge changes from branch 1.5.720.4
SQL> Rem     dsdaniel   01/23/95 -  merge changes from branch 1.1.710.11
SQL> Rem     dsdaniel   01/05/95 -  need extra at sign
SQL> Rem     dsdaniel   12/23/94 -  merge changes from branch 1.5.720.1-3
SQL> Rem     dsdaniel   12/21/94 -  merge changes from branch 1.1.710.8-10
SQL> Rem     dsdaniel   12/08/94 -  revise defcalldest, deftrandest views
SQL> Rem     dsdaniel   11/22/94 -  split out table creations
SQL> Rem     dsdaniel   11/18/94 -  deftran-ectomy, deftrandest-ectomy
SQL> Rem     dsdaniel   11/17/94 -  merge changes from branch 1.1.710.7
SQL> Rem     dsdaniel   11/09/94 -  defcalldest, deftrandest changes
SQL> Rem     dsdaniel   08/04/94 -  make it a cluster (again)
SQL> Rem     dsdaniel   08/04/94 -  create a version without the cluster
SQL> Rem     dsdaniel   08/03/94 -  eliminate ON DELETE CASCADE *again
SQL> Rem     dsdaniel   08/02/94 -  make it a cluster
SQL> Rem     dsdaniel   07/28/94 -  restore ON DELETE CASCADE
SQL> Rem     dsdaniel   07/27/94 -  eliminate ON DELETE CASCADE
SQL> Rem     dsdaniel   07/19/94 -  export support changes
SQL> Rem     rjenkins   03/22/94 -  merge changes from branch 1.1.710.4
SQL> Rem     rjenkins   01/19/94 -  merge changes from branch 1.1.710.3
SQL> Rem     dsdaniel   01/18/94 -  merge changes from branch 1.1.710.2
SQL> Rem     rjenkins   01/17/94 -  changing jq to job
SQL> Rem     rjenkins   12/17/93 -  creating job queue
SQL> Rem     dsdaniel   10/31/93 -  merge changes from branch 1.1.710.1
SQL> Rem     dsdaniel   10/28/93 -  deferred rpc dblink security
SQL> Rem                         -  also removed table drops, since shouldnt
SQL> Rem                         -  loose data on upgrade
SQL> Rem     dsdaniel   10/26/93 -  merge changes from branch 1.1.400.1
SQL> Rem     dsdaniel   10/10/93 -  Creation from dbmsdefr
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> -- Bug 979398: Have a before-row insert trigger on def$_propagator
SQL> -- which raises an exception if there is 1 or more rows in def$_propagator
SQL> GRANT EXECUTE ON dbms_sys_error TO system
  2  /

Grant succeeded.

SQL> 
SQL> create or replace view gv_$mvrefresh as select * from gv$mvrefresh
  2  /

View created.

SQL> create or replace public synonym gv$mvrefresh for gv_$mvrefresh
  2  /

Synonym created.

SQL> grant select on gv_$mvrefresh to select_catalog_role
  2  /

Grant succeeded.

SQL> 
SQL> create or replace view v_$mvrefresh as select * from v$mvrefresh
  2  /

View created.

SQL> create or replace public synonym v$mvrefresh for v_$mvrefresh
  2  /

Synonym created.

SQL> grant select on v_$mvrefresh to select_catalog_role
  2  /

Grant succeeded.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem Recompile views, synonyms and packages that were dependent
SQL> Rem on the dummy def$_aqcall and def$_aqerror tables (which were
SQL> Rem dropped and recreated in catdefer.sql).
SQL> 
SQL> alter package DBMS_SNAPSHOT  compile
  2  /

Package altered.

SQL> 
SQL> Rem Added to support dbms_repcat.wait_master_log
SQL> GRANT EXECUTE ON dbms_alert TO system
  2  /

Grant succeeded.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem GSM Catalogs
SQL> 
SQL> --CATCTL -R
SQL> --CATCTL -M
SQL> Rem
SQL> Rem Streams
SQL> Rem
SQL> @@execstr.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/execstr.sql /main/5 2014/02/20 12:45:55 surman Exp $
SQL> Rem
SQL> Rem execstr.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2014, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      execstr.sql - Execute anonymous blocks for STReam
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/execstr.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/execstr.sql
SQL> Rem SQL_PHASE: EXECSTR
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    elu         08/31/11 - procedure LCR
SQL> Rem    rmao        12/09/08 - add daily job to clean automatic split/merge
SQL> Rem                         - job history
SQL> Rem    rmao        12/09/08 - add daily job to clean recoverable scripts
SQL> Rem    jinwu       11/13/06 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> Rem The following 'Rule evaluation context' block is moved from dbmslcr
SQL> Rem because of its dependency on the body package of SYS.DBMS_RULE_ADM
SQL> 
SQL> --------------------------
SQL> -- Rule evaluation context
SQL> --------------------------
SQL> -- {ROW,DDL}_VARIABLE_VALUE_FUNCTION converts AnyData to its LCR type
SQL> -- evaluation_context_function handles bookkeeping information, e.g.,
SQL> -- source data dictionary, commit/rollback.
SQL> DECLARE
  2    vt sys.re$variable_type_list;
  3  BEGIN
  4    vt := sys.re$variable_type_list(
  5      sys.re$variable_type('DML', 'SYS.LCR$_ROW_RECORD',
  6         'SYS.DBMS_STREAMS_INTERNAL.ROW_VARIABLE_VALUE_FUNCTION',
  7         'SYS.DBMS_STREAMS_INTERNAL.ROW_FAST_EVALUATION_FUNCTION'),
  8      sys.re$variable_type('DDL', 'SYS.LCR$_DDL_RECORD',
  9         'SYS.DBMS_STREAMS_INTERNAL.DDL_VARIABLE_VALUE_FUNCTION',
 10         'SYS.DBMS_STREAMS_INTERNAL.DDL_FAST_EVALUATION_FUNCTION'),
 11      sys.re$variable_type('PROC', 'SYS.LCR$_PROCEDURE_RECORD',
 12         'SYS.DBMS_STREAMS_INTERNAL.PROC_VARIABLE_VALUE_FUNCTION',
 13         'SYS.DBMS_STREAMS_INTERNAL.PROC_FAST_EVALUATION_FUNCTION'),
 14      sys.re$variable_type(NULL, 'SYS.ANYDATA',
 15         NULL,
 16         'SYS.DBMS_STREAMS_INTERNAL.ANYDATA_FAST_EVAL_FUNCTION'));
 17  
 18    dbms_rule_adm.create_evaluation_context(
 19      evaluation_context_name=>'SYS.STREAMS$_EVALUATION_CONTEXT',
 20      variable_types=>vt,
 21      evaluation_function=>
 22        'SYS.DBMS_STREAMS_INTERNAL.EVALUATION_CONTEXT_FUNCTION');
 23  EXCEPTION WHEN OTHERS THEN
 24    IF SQLCODE = -24145 THEN
 25      -- If the evaluation context already exists, then for upgrade, reset the
 26      -- evaluation context variables to include procedure LCRs
 27      dbms_rule_adm.alter_evaluation_context(
 28        evaluation_context_name=>'SYS.STREAMS$_EVALUATION_CONTEXT',
 29        variable_types=>vt);
 30    ELSE
 31      RAISE;
 32    END IF;
 33  END;
 34  /

PL/SQL procedure successfully completed.

SQL> 
SQL> begin
  2  dbms_rule_adm.grant_object_privilege(
  3     privilege=>dbms_rule_adm.EXECUTE_ON_EVALUATION_CONTEXT,
  4     object_name=>'SYS.STREAMS$_EVALUATION_CONTEXT',
  5     grantee=>'PUBLIC', grant_option=>FALSE);
  6  end;
  7  /

PL/SQL procedure successfully completed.

SQL> ------------------------------
SQL> -- END Rule evaluation context
SQL> ------------------------------
SQL> 
SQL> 
SQL> Rem The following block is moved from catpstr.sql because of
SQL> Rem its dependency on SYS.DEFAULT_JOB_CLASS
SQL> 
SQL> -- Create auto-purge job for file groups
SQL> BEGIN
  2    dbms_scheduler.create_job(
  3    job_name        => 'FGR$AUTOPURGE_JOB',
  4    job_type        => 'PLSQL_BLOCK',
  5    job_action      => 'sys.dbms_file_group.purge_file_group(NULL);',
  6    repeat_interval => 'freq=daily;byhour=0;byminute=0;bysecond=0',
  7    enabled         => FALSE,
  8    comments        => 'file group auto-purge job');
  9  
 10    dbms_scheduler.set_attribute('FGR$AUTOPURGE_JOB',
 11      'FOLLOW_DEFAULT_TIMEZONE',TRUE);
 12  EXCEPTION WHEN others THEN
 13      IF sqlcode = -27477 THEN
 14         NULL;
 15      ELSE RAISE;
 16      END IF;
 17  END;
 18  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> Rem From catstrt.sql
SQL> 
SQL> /* Register internal action context export function with the rules
SQL>  * engine.  The first parameter should match
SQL>  * dbms_streams_decl.inttrans_rule_id.
SQL>  */
SQL> BEGIN
  2    sys.dbms_ruleadm_internal.register_internal_actx('streams_it',
  3             'sys.dbms_logrep_exp.internal_transform_export');
  4  EXCEPTION WHEN OTHERS THEN NULL;
  5  END;
  6  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> -- Create daily job to clean recoverable scripts
SQL> -- enable job initially to avoid enable/disable job when change view
SQL> BEGIN
  2    dbms_scheduler.create_job(
  3    job_name        => 'RSE$CLEAN_RECOVERABLE_SCRIPT',
  4    job_type        => 'PLSQL_BLOCK',
  5    job_action      => 'sys.dbms_streams_auto_int.clean_recoverable_script;',
  6    repeat_interval => 'freq=daily;byhour=0;byminute=0;bysecond=0',
  7    enabled         => TRUE,
  8    comments        => 'auto clean job for recoverable script');
  9  
 10    dbms_scheduler.set_attribute('RSE$CLEAN_RECOVERABLE_SCRIPT',
 11      'FOLLOW_DEFAULT_TIMEZONE',TRUE);
 12  EXCEPTION WHEN others THEN
 13    -- ignore if job already created
 14    IF sqlcode != -27477 THEN
 15      RAISE;
 16    END IF;
 17  END;
 18  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create daily job to clean auto split merge views
SQL> -- enable job initially to avoid enable/disable job when change view
SQL> BEGIN
  2    dbms_scheduler.create_job(
  3    job_name        => 'SM$CLEAN_AUTO_SPLIT_MERGE',
  4    job_type        => 'PLSQL_BLOCK',
  5    job_action      => 'sys.dbms_streams_auto_int.clean_auto_split_merge;',
  6    repeat_interval => 'freq=daily;byhour=0;byminute=0;bysecond=0',
  7    enabled         => TRUE,
  8    comments        => 'auto clean job for auto split merge');
  9  
 10    dbms_scheduler.set_attribute('SM$CLEAN_AUTO_SPLIT_MERGE',
 11      'FOLLOW_DEFAULT_TIMEZONE',TRUE);
 12  EXCEPTION WHEN others THEN
 13    -- ignore if job already created
 14    IF sqlcode != -27477 THEN
 15      RAISE;
 16    END IF;
 17  END;
 18  /

PL/SQL procedure successfully completed.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem Kernel Service Workgroup Services
SQL> Rem
SQL> @@execsvr.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/execsvr.sql /main/5 2016/10/03 10:44:21 sroesch Exp $
SQL> Rem
SQL> Rem execsvr.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2016, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      execsvr.sql - run PL/sql and sql in order to define
SQL> Rem                    and activate the Kernel Service Workgroup
SQL> Rem                    Services.
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Defines and starts the AQ queues required to support
SQL> Rem      the Kernel Service Workgroup Services.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      Must be run as SYSDBA.
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/execsvr.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/execsvr.sql
SQL> Rem SQL_PHASE: EXECSVR
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    sroesch     09/12/16 - 24539642: Check if queue already exists
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    arogers     10/23/06 - 5572026 - issue sql instead of kswssetupaq
SQL> Rem    arogers     10/23/06 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> Rem Clean up any previous definitions.
SQL> DECLARE
  2    num_queues       NUMBER;
  3    num_queue_tables NUMBER;
  4    num_subscribers  NUMBER;
  5    num_trans        NUMBER;
  6  
  7    ok               BOOLEAN;
  8  
  9    subscriber       sys.aq$_agent;
 10  BEGIN
 11    -- Determine if RLB queue is already defined
 12    select count (*)
 13      into num_queues
 14      from dba_queues
 15     where owner       = 'SYS'
 16       and name        = 'SYS$SERVICE_METRICS'
 17       and queue_table = 'SYS$SERVICE_METRICS_TAB'
 18       and queue_type  = 'NORMAL_QUEUE';
 19  
 20    -- Determine if RLB queue table has been defined
 21    select count(*)
 22      into num_queue_tables
 23      from dba_queue_tables
 24     where owner       = 'SYS'
 25       and queue_table = 'SYS$SERVICE_METRICS_TAB'
 26       and type        = 'OBJECT';
 27  
 28    -- Determine the number of RLB queue subscribers
 29    select count(*)
 30      into num_subscribers
 31      from dba_queue_subscribers
 32     where owner       = 'SYS'
 33       and queue_name  = 'SYS$SERVICE_METRICS'
 34       and queue_table = 'SYS$SERVICE_METRICS_TAB'
 35       and consumer_name in ('SCHEDULER$_LBAGT', 'SYS$RLB_GEN_SUB');
 36  
 37    -- Determine the number of RLB transformations
 38    select count(*)
 39      into num_trans
 40      from dba_transformations
 41     where owner = 'SYS'
 42       and name in('SYS$SERVICE_METRICS_TS', 'SYS$SERVICE_METRICS_GEN_TS');
 43  
 44    -- Check if all the expected objects have been created
 45    ok :=     (num_queues       = 1)
 46          and (num_queue_tables = 1)
 47          and (num_subscribers  = 2)
 48          and (num_trans        = 2);
 49  
 50    -- Clean up any previous definitions if required
 51    IF NOT ok THEN
 52      BEGIN
 53       dbms_aqadm.remove_subscriber(
 54         queue_name => 'SYS$SERVICE_METRICS',
 55         subscriber => sys.aq$_agent('SYS$RLB_GEN_SUB', null, null));
 56      EXCEPTION
 57      WHEN others THEN
 58        IF sqlcode = -24035  or sqlcode = -24010 THEN NULL;
 59           -- suppress error for non-existent subscriber/queue
 60        ELSE raise;
 61        END IF;
 62      END;
 63  
 64      BEGIN
 65       dbms_transform.drop_transformation('SYS','SYS$SERVICE_METRICS_GEN_TS');
 66      EXCEPTION
 67      WHEN others THEN
 68        IF sqlcode = -24185 THEN NULL;
 69             -- suppress error for non-existent transformation
 70        ELSE raise;
 71        END IF;
 72      END;
 73  
 74      BEGIN
 75       dbms_transform.drop_transformation('SYS','SYS$SERVICE_METRICS_TS');
 76      EXCEPTION
 77      WHEN others THEN
 78        IF sqlcode = -24185 THEN NULL;
 79             -- suppress error for non-existent transformation
 80        ELSE raise;
 81         END IF;
 82      END;
 83  
 84      BEGIN
 85       dbms_aqadm.stop_queue('SYS$SERVICE_METRICS');
 86      EXCEPTION
 87        WHEN others THEN
 88        IF sqlcode = -24010 THEN NULL;
 89             -- suppress error for non-existent queue
 90        ELSE raise;
 91        END IF;
 92      END;
 93  
 94      BEGIN
 95       dbms_aqadm.drop_queue('SYS$SERVICE_METRICS');
 96      EXCEPTION
 97      WHEN others THEN
 98        IF sqlcode = -24010 THEN NULL;
 99           -- suppress error for non-existent queue
100        ELSE raise;
101        END IF;
102      END;
103  
104      BEGIN
105       dbms_aqadm.drop_queue_table('SYS$SERVICE_METRICS_TAB');
106      EXCEPTION
107      WHEN others THEN
108        IF sqlcode = -24002 THEN NULL;
109          -- suppress error for non-existent queue table
110        ELSE raise;
111        END IF;
112      END;
113  
114      -- Define queues, types and start.
115      EXECUTE IMMEDIATE 'CREATE OR REPLACE TYPE SYS$RLBTYP as object (srv VARCHAR2(1024), payload VARCHAR2(4000))';
116  
117      BEGIN
118        DBMS_AQADM.CREATE_QUEUE_TABLE(
119          'SYS$SERVICE_METRICS_TAB',
120          'SYS$RLBTYP',
121          'tablespace sysaux, storage (INITIAL 1M next 1M pctincrease 0)',
122          NULL, TRUE);
123      END;
124  
125      BEGIN
126        DBMS_AQADM.CREATE_QUEUE('SYS$SERVICE_METRICS',
127                                queue_table    => 'SYS$SERVICE_METRICS_TAB',
128                                retention_time => 3600);
129      END;
130    END IF;
131  
132    -- Start the queue
133    BEGIN
134      DBMS_AQADM.START_QUEUE('SYS$SERVICE_METRICS', TRUE, TRUE);
135    END;
136  
137    IF NOT ok
138    THEN
139      BEGIN
140        DBMS_TRANSFORM.CREATE_TRANSFORMATION(
141          'SYS',
142          'SYS$SERVICE_METRICS_TS',
143          'SYS',
144          'SYS$RLBTYP',
145          'SYS',
146          'VARCHAR2',
147          'source.user_data.payload');
148      END;
149  
150      BEGIN
151        DBMS_TRANSFORM.CREATE_TRANSFORMATION(
152          'SYS',
153          'SYS$SERVICE_METRICS_GEN_TS',
154          'SYS',
155          'SYS$RLBTYP',
156          'SYS',
157          'SYS$RLBTYP',
158          'source.user_data');
159      END;
160  
161      BEGIN
162        subscriber := sys.aq$_agent('SYS$RLB_GEN_SUB', NULL, NULL);
163  
164        dbms_aqadm_sys.add_subscriber(
165          queue_name     => 'SYS.SYS$SERVICE_METRICS',
166          subscriber     => subscriber,
167          transformation => 'SYS.SYS$SERVICE_METRICS_GEN_TS');
168      END;
169    END IF;
170  END;
171  /

PL/SQL procedure successfully completed.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem Stats
SQL> Rem
SQL> @@execstat.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/execstat.sql /main/2 2014/02/20 12:45:44 surman Exp $
SQL> Rem
SQL> Rem execstat.sql
SQL> Rem
SQL> Rem Copyright (c) 2007, 2014, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      execstat.sql - EXECute STATs packages
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Executes the stats initialization procedure
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/execstat.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/execstat.sql
SQL> Rem SQL_PHASE: EXECSTAT
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      01/23/14 - 13922626: Update SQL metadata
SQL> Rem    rburns      01/06/07 - initialize stats
SQL> Rem    rburns      01/06/07 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> begin
  2    dbms_stats.init_package;
  3  end;
  4  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem SMB
SQL> Rem
SQL> @@execsmb.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/execsmb.sql /main/2 2016/01/29 10:27:57 jftorres Exp $
SQL> Rem
SQL> Rem execsmb.sql
SQL> Rem
SQL> Rem Copyright (c) 2015, 2016, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      execsmb.sql - EXECute SQL Management Base packages
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Initializes the dbms_smb and dbms_spm packages.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/execsmb.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/execsmb.sql
SQL> Rem    SQL_PHASE: EXECSMB
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    jftorres    01/19/16 - #(13073335): rename init_smb_config() to
SQL> Rem                           init_smb()
SQL> Rem    jftorres    02/02/15 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> exec dbms_smb_internal.init_smb();

PL/SQL procedure successfully completed.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem SNMP catalog objects
SQL> Rem must be after dbmsdrs, catsvrm.sql, catalrt.sql
SQL> Rem
SQL> @@catsnmp.sql
SQL> Rem
SQL> Rem NAME
SQL> Rem    CATSNMP.SQL
SQL> Rem  FUNCTION
SQL> Rem    Creates an SNMPAgent role to access the v$ tables
SQL> Rem  NOTES
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catsnmp.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catsnmp.sql
SQL> Rem SQL_PHASE: CATSNMP
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem  MODIFIED
SQL> Rem         bram   09/17/18 - 28102711:create dbsnmp with no authentication
SQL> Rem     mfallen    08/23/18 - bug 27489150: move Feature Usage to PL/SQL
SQL> Rem     aramappa   02/28/16 - 21239547:Remove INHERIT PRIVILEGE on SYS to
SQL> Rem                           DBSNMP
SQL> Rem     surman     12/29/13 - 13922626: Update SQL metadata
SQL> Rem     surman     03/27/12 - 13615447: Add SQL patching tags
SQL> Rem     dalpern    03/21/12 - bug 13853343: grant INH PRIVS on sys to dbsnmp
SQL> Rem     akruglik   10/03/11 - (13056894): make it possible for dbsnmp to see
SQL> Rem                           all data in CONTAINER_DATA objects in the Root
SQL> Rem     akruglik   09/06/11 - rename CDB_ADMIN to CDB_DBA
SQL> Rem     akruglik   08/29/11 - DB Consolidation: grant CDB_ADMIN role to dbsnmp
SQL> Rem     rpang      07/25/11 - Proj 32719: grant inherit any priv to dbsnmp
SQL> Rem     rkunnamp   01/20/11 - bug 9346110 fix transaction
SQL> Rem     ychan      06/17/09 - Fix bug 8607966
SQL> Rem     dsemler    01/14/08 - Add QOS user creation
SQL> Rem     amahalin   06/21/07 - to grant SELECT_CATALOG_ROLE to OEM_MONITOR
SQL> Rem     jsoule     05/07/07 - grant dbms_management_packs access to dbsnmp
SQL> Rem     ychan      02/13/07 - Add db_feature table and procedure
SQL> Rem     jsoule     07/20/06 - restore bsln schema creation
SQL> Rem     jsoule     07/13/06 - remove bsln dependency on EMDW
SQL> Rem     lburgess   03/27/06 - user lowercase for DBSNMP password
SQL> Rem     nachen     02/02/05 - add OEM_ADVISOR role
SQL> Rem     ychan      11/11/04 - Fix bug 3926476
SQL> Rem     zsyed      10/29/04 - Removing addition of dbsnmp to SYS_USER group
SQL> Rem     jsoule     08/06/04 - add dbsnmp baseline schema objects
SQL> Rem     shigupta   07/16/04 - add dbsnmp to sys_group consumer group
SQL> Rem     hxlin      06/28/04 - Put SQL Response back
SQL> Rem     hxlin      06/18/04 - Temporarily remove response.plb
SQL> Rem     shigupta   06/07/03 - cleanup
SQL> Rem     ychan      11/05/03 - Fix bug 3234502
SQL> Rem     jochen     10/02/03 - Add ANALYZE ANY DICTIONARY to OEM_MONITOR
SQL> Rem     vchao      07/09/03 - Fix bug 3027355. Modify alert_que privileges
SQL> Rem     ychan      06/27/03 - Add aq priv
SQL> Rem     ychan      06/26/03 - Add aq priv
SQL> Rem     lhan       06/27/03 - change key of gtt
SQL> Rem     lhan       06/13/03 - remove hard tab
SQL> Rem     lhan       06/06/03 - Add GTTs definition
SQL> Rem     ychan      05/14/03 - Remove reuse
SQL> Rem     ychan      05/11/03 - Grant dbms_lock
SQL> Rem     ychan      04/28/03 - Add response sql
SQL> Rem     ychan      03/26/03 - Fix connect dbsnmp
SQL> Rem     ychan      03/24/03 - Fix bug 2657279
SQL> Rem     jaysmith   08/21/02 - remove create user error-handling
SQL> Rem     jaysmith   08/18/02 - suppress error from create user
SQL> Rem     jaysmith   08/16/02 - do not recreate DBSNMP user each time run
SQL> Rem     xxu        02/01/02 - add function OemGetNextExtend
SQL> Rem     glavash    01/03/02 - remove superfluos privs
SQL> Rem     rburns     10/28/01 - wrap drop role statement
SQL> Rem     gviswana   05/24/01 - CREATE OR REPLACE SYNONYM
SQL> Rem     jaysmith   04/11/01 - restore views, oemagent roles
SQL> Rem     jaysmith   03/08/01 - pull back grants for dbsnmp user
SQL> Rem     glavash    02/16/01 - add select access to sys.obj$ user and ts
SQL> Rem     glavash    10/23/00 - add statspack views
SQL> Rem     dholail    04/12/99 - Adding Events role OEM_MONITOR
SQL> Rem     cluo       07/15/96 -
> Rem     dnakos     removed creation of backup script tables
SQL> Rem     dnakos     removed creation of obsolete history tables
SQL> Rem     dnakos     removed references to obsolete DBA_LOCKS
SQL> Rem
SQL> Rem  OWNER
SQL> Rem    ebosco
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> alter session set "_ORACLE_SCRIPT"=true;

Session altered.

SQL> 
SQL> BEGIN
  2    EXECUTE IMMEDIATE 'drop role SNMPAGENT';
  3  EXCEPTION
  4     WHEN OTHERS THEN
  5        IF SQLCODE = -1919 THEN NULL;
  6        ELSE RAISE;
  7        END IF;
  8  END;
  9  /

PL/SQL procedure successfully completed.

SQL> 
SQL> REM
SQL> REM -- OEM_ADVISOR role is needed so that users with this
SQL> REM -- role could manage advisor tasks.
SQL> REM
SQL> create role OEM_ADVISOR;

Role created.

SQL>     REM -- Privileges to run Advisor Tasks as Scheduler Jobs
SQL>     grant ADVISOR to OEM_ADVISOR;

Grant succeeded.

SQL>     grant CREATE JOB to OEM_ADVISOR;

Grant succeeded.

SQL>     REM -- Privileges to run SQL Tuning Advisor Tasks
SQL>     grant ADMINISTER SQL TUNING SET to OEM_ADVISOR;

Grant succeeded.

SQL> 
SQL> REM
SQL> REM -- OEM_MONTOR role is needed so that users of EM Diagnostics Pack can grant this
SQL> REM -- role to another user who they want to use to monitor database using EM Agent.
SQL> REM -- DBSNMP is the out-of-box default user used by EM Agent to monitor the database.
SQL> REM
SQL> create role OEM_MONITOR;

Role created.

SQL> 
SQL>     REM -- Ability to create a session and read dictionary views
SQL>     grant CREATE SESSION to OEM_MONITOR;

Grant succeeded.

SQL>     grant SELECT ANY DICTIONARY to OEM_MONITOR;

Grant succeeded.

SQL> 
SQL>     REM -- Privileges to enable/disable SQL Tracing and Statistics Aggregation
SQL>     grant execute on SYS.DBMS_SYSTEM to OEM_MONITOR;

Grant succeeded.

SQL>     grant execute on SYS.DBMS_MONITOR to OEM_MONITOR;

Grant succeeded.

SQL> 
SQL>     REM -- Privileges to run AWR report
SQL>     grant execute on dbms_workload_repository to OEM_MONITOR;

Grant succeeded.

SQL> 
SQL>     REM -- Privileges to run Advisor Tasks as Scheduler Jobs
SQL>     grant ADVISOR to OEM_MONITOR;

Grant succeeded.

SQL>     grant CREATE JOB to OEM_MONITOR;

Grant succeeded.

SQL> 
SQL>     REM -- HA related package
SQL>     grant execute on SYS.DBMS_DRS to OEM_MONITOR;

Grant succeeded.

SQL> 
SQL>     REM -- Privileges needed to use DBMS_SPACE package. This package
SQL>     REM -- is used by Space metrics
SQL>     REM
SQL>     grant analyze any to OEM_MONITOR;

Grant succeeded.

SQL>     grant analyze any dictionary to OEM_MONITOR;

Grant succeeded.

SQL> 
SQL>     REM -- Privileges for alerts queue
SQL>     grant EXECUTE on DBMS_AQADM to OEM_MONITOR;

Grant succeeded.

SQL>     grant EXECUTE on DBMS_AQ to OEM_MONITOR;

Grant succeeded.

SQL>     grant EXECUTE on DBMS_SERVER_ALERT to OEM_MONITOR;

Grant succeeded.

SQL> 
SQL>     REM -- Privileges for OLS Data Dictionary Views
SQL>     grant SELECT_CATALOG_ROLE to OEM_MONITOR;

Grant succeeded.

SQL> 
SQL>     begin
  2        dbms_aqadm.grant_system_privilege('manage_any', 'OEM_MONITOR', false);
  3        dbms_aqadm.grant_queue_privilege('dequeue', 'alert_que', 'OEM_MONITOR', false);
  4      end;
  5      /

PL/SQL procedure successfully completed.

SQL> 
SQL> create user DBSNMP NO AUTHENTICATION default TABLESPACE SYSAUX ACCOUNT LOCK;

User created.

SQL> 
SQL> REM
SQL> REM Grant INHERIT ANY PRIVILEGES to DBSNMP to inherit privileges of callers of
SQL> REM its invoker rights routines. Revoke automatic grant of INHERIT PRIVILEGES
SQL> REM from public.
SQL> REM
SQL> grant inherit any privileges to DBSNMP;

Grant succeeded.

SQL> 
SQL> declare
  2    already_revoked exception;
  3    pragma exception_init(already_revoked,-01927);
  4  begin
  5    execute immediate 'revoke inherit privileges on user DBSNMP from public';
  6  exception
  7    when already_revoked then
  8      null;
  9  end;
 10  /

PL/SQL procedure successfully completed.

SQL> 
SQL> grant select any dictionary to DBSNMP;

Grant succeeded.

SQL> grant OEM_MONITOR to DBSNMP;

Grant succeeded.

SQL> 
SQL> remark
SQL> remark grant role containing privileges needed to administer a
SQL> remark Consolidated Database
SQL> remark
SQL> grant CDB_DBA to DBSNMP;

Grant succeeded.

SQL> 
SQL> remark
SQL> remark make it possible for dbsnmp to see all data in CONTAINER_DATA objects
SQL> remark in the Root
SQL> remark
SQL> alter user DBSNMP set container_data=all;

User altered.

SQL> 
SQL> REM - These privileges are needed for SQL Response metric. These need to be
SQL> REM - granted only to DBSNMP since DBSNMP schema owns these objects.
SQL> REM - The response.plb file (see below) creates the tables and procedures
SQL> REM - under DBSNMP. Such creation will fail without these privileges.
SQL> REM
SQL> grant create table to DBSNMP;

Grant succeeded.

SQL> grant create procedure to DBSNMP;

Grant succeeded.

SQL> grant unlimited tablespace to DBSNMP;

Grant succeeded.

SQL> 
SQL> REM - DBSNMP user should get preferential resource allocation on a system
SQL> REM - experiencing contention. This is to ensure that DBA is able to use
SQL> REM - EM to diagnose the problem. If resource manager is enabled then sys_group
SQL> REM - gets a high allocation since this is what sys and system belong to.
SQL> REM - Therefore, add dbsnmp to sys_group.
SQL> 
SQL> REM Grant these directly to the owner of mgmt_bsln_internal.
SQL> GRANT EXECUTE ON DBMS_SERVER_ALERT TO DBSNMP;

Grant succeeded.

SQL> GRANT EXECUTE ON DBMS_MANAGEMENT_PACKS TO DBSNMP;

Grant succeeded.

SQL> 
SQL> ALTER SESSION SET CURRENT_SCHEMA = DBSNMP;

Session altered.

SQL> 
SQL> REM Load the SQL Response Metric
SQL> @@response.plb
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> CREATE TABLE dbsnmp.mgmt_snapshot(
  2         instance_number          NUMBER NOT NULL,
  3         snap_id                  NUMBER NOT NULL,
  4         capture_time             DATE NOT NULL,
  5         db_time                  NUMBER,
  6         cpu_time                 NUMBER,
  7         application_wait_time    NUMBER,
  8         cluster_wait_time        NUMBER,
  9         user_io_wait_time        NUMBER,
 10         concurrency_wait_time    NUMBER,
 11         constraint inst_num_key unique (instance_number)
 12  ) NOLOGGING;

Table created.

SQL> CREATE TABLE dbsnmp.mgmt_snapshot_sql(
  2         snap_id         NUMBER NOT NULL,
  3         sql_id          VARCHAR2(13),
  4         hash_value      NUMBER NOT NULL,
  5         child_number    NUMBER NOT NULL,
  6         elapsed_time    NUMBER NOT NULL,
  7         executions      NUMBER NOT NULL) NOLOGGING;

Table created.

SQL> CREATE TABLE dbsnmp.mgmt_baseline(
  2         instance_number          NUMBER NOT NULL,
  3         capture_time             DATE NOT NULL,
  4         prev_capture_time        DATE NOT NULL,
  5         db_time                  NUMBER,
  6         cpu_time                 NUMBER,
  7         application_wait_time    NUMBER,
  8         cluster_wait_time        NUMBER,
  9         user_io_wait_time        NUMBER,
 10         concurrency_wait_time    NUMBER);

Table created.

SQL> CREATE TABLE dbsnmp.mgmt_baseline_sql(
  2         instance_number NUMBER NOT NULL,
  3         sql_text        VARCHAR2(1000),
  4         sql_id          VARCHAR2(13),
  5         hash_value      NUMBER NOT NULL,
  6         executions      NUMBER,
  7         elapsed_time    NUMBER,
  8         t_per_exec      NUMBER NOT NULL);

Table created.

SQL> CREATE TABLE dbsnmp.mgmt_capture(
  2         instance_number          NUMBER NOT NULL,
  3         capture_id               NUMBER NOT NULL,
  4         capture_time             DATE NOT NULL,
  5         db_time                  NUMBER,
  6         cpu_time                 NUMBER,
  7         application_wait_time    NUMBER,
  8         cluster_wait_time        NUMBER,
  9         user_io_wait_time        NUMBER,
 10         concurrency_wait_time    NUMBER);

Table created.

SQL> CREATE TABLE dbsnmp.mgmt_capture_sql(
  2         capture_id      NUMBER NOT NULL,
  3         sql_id          VARCHAR2(13),
  4         hash_value      NUMBER NOT NULL,
  5         elapsed_time    NUMBER,
  6         executions      NUMBER);

Table created.

SQL> CREATE TABLE dbsnmp.mgmt_response_config(
  2         instance_number NUMBER NOT NULL,
  3         startup_time    DATE);

Table created.

SQL> CREATE TABLE dbsnmp.mgmt_latest(
  2         instance_number          NUMBER NOT NULL,
  3         capture_id               NUMBER NOT NULL,
  4         capture_time             DATE NOT NULL,
  5         prev_capture_time        DATE NOT NULL,
  6         sql_response_time        NUMBER NOT NULL,
  7         adjusted_sql_response_time NUMBER NOT NULL,
  8         baseline_sql_response_time NUMBER NOT NULL,
  9         relative_sql_response_time NUMBER NOT NULL,
 10         db_time                  NUMBER,
 11         cpu_time                 NUMBER,
 12         application_wait_time    NUMBER,
 13         cluster_wait_time        NUMBER,
 14         user_io_wait_time        NUMBER,
 15         concurrency_wait_time    NUMBER);

Table created.

SQL> CREATE TABLE dbsnmp.mgmt_latest_sql(
  2         capture_id      NUMBER NOT NULL,
  3         sql_id          VARCHAR2(13),
  4         hash_value      NUMBER NOT NULL,
  5         executions      NUMBER,
  6         elapsed_time    NUMBER,
  7         t_per_exec      NUMBER,
  8         adjusted_elapsed_time NUMBER);

Table created.

SQL> CREATE TABLE dbsnmp.mgmt_history(
  2         instance_number          NUMBER NOT NULL,
  3         capture_id               NUMBER NOT NULL,
  4         capture_time             DATE NOT NULL,
  5         prev_capture_time        DATE NOT NULL,
  6         sql_response_time        NUMBER NOT NULL,
  7         adjusted_sql_response_time NUMBER NOT NULL,
  8         baseline_sql_response_time NUMBER NOT NULL,
  9         relative_sql_response_time NUMBER NOT NULL,
 10         db_time                  NUMBER,
 11         cpu_time                 NUMBER,
 12         application_wait_time    NUMBER,
 13         cluster_wait_time        NUMBER,
 14         user_io_wait_time        NUMBER,
 15         concurrency_wait_time    NUMBER);

Table created.

SQL> CREATE TABLE dbsnmp.mgmt_history_sql(
  2         capture_id       NUMBER NOT NULL,
  3         sql_id           VARCHAR2(13),
  4         hash_value       NUMBER NOT NULL,
  5         executions       NUMBER,
  6         elapsed_time     NUMBER,
  7         t_per_exec       NUMBER,
  8         adjusted_elapsed_time NUMBER);

Table created.

SQL> CREATE GLOBAL TEMPORARY TABLE dbsnmp.mgmt_tempt_sql(
  2         sql_id          VARCHAR2(13),
  3         hash_value      NUMBER NOT NULL,
  4         elapsed_time    NUMBER NOT NULL,
  5         executions      NUMBER NOT NULL)
  6         ON COMMIT DELETE ROWS;

Table created.

SQL> CREATE sequence dbsnmp.mgmt_response_capture_id
  2         START WITH 1 INCREMENT BY 1 ORDER;

Sequence created.

SQL> CREATE sequence dbsnmp.mgmt_response_snapshot_id
  2         START WITH 1 INCREMENT BY 1 ORDER;

Sequence created.

SQL> CREATE OR REPLACE VIEW dbsnmp.mgmt_response_baseline AS
  2     SELECT b.instance_number, s.sql_text, s.hash_value, v.address, s.t_per_exec
  3       FROM dbsnmp.mgmt_baseline b, dbsnmp.mgmt_baseline_sql s, v$sqlarea v
  4      WHERE b.instance_number = s.instance_number
  5        AND s.hash_value = v.hash_value;

View created.

SQL> CREATE OR REPLACE PACKAGE dbsnmp.mgmt_response wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  9
 20  402 21f
 21  FGzRNO47I7axCfXBmchUBiXIj/swg2NemMCGfHQ0PPmejj4aiHi+PJQur2/GBoamUK3qTWXq
 22  Q3/B5LVG8QbbC/q+BsU1mG1spqz6tO0xqHpzQiPrndCwsZzB6+9Xh+GpdrasgKgXPckGWntn
 23  Sje4me+guY0FdthTBKafFlsUuQvm+o6PcIVhQD/LFaKz4Le9r9OrNVUE1P9E2Fd1GuKzErj7
 24  5jP9GpQ2AQgVD2kQQyVwB5UCqjJFY30kzQ4nssS1R9rZZFTmYLO8ZkgLvdvncpRUcouTt/KG
 25  V+hMv3OyScnQI1MeEq0sTEIfjqqMc8k2PPUrxrrl1CjbVnjbPuvLKp/XfkQPfh5UZqRkMN9b
 26  w/R4tMCBIy1iPel6wyFVGiPUa9W6r5skywbkxqkKyYLkTHSRRN9DPhEJ/G4qc8se1lJlzFYf
 27  bemtvX6ck8iL6ci+adEZcCQA4BZiLzkSblw863hc7P0YCvIPFIOJqIH9s0lv27CUcBHouBA/
 28  RowII5PDj7+HoNgnGDdSc4akQWOUkg==
 29  
 30  /

Package created.

SQL> CREATE OR REPLACE PACKAGE BODY dbsnmp.mgmt_response wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  b
 20  7dd8 1ad6
 21  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
115  /UCwa4Y=
116  
117  /

Package body created.

SQL> show errors
No errors.
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL>     REM -- Privilege to execute MGMT_RESPONSE package (for SQL Response Metric)
SQL>     grant EXECUTE on dbsnmp.mgmt_response to OEM_MONITOR;

Grant succeeded.

SQL> 
SQL> REM -- Privileges to query SQL Response tables
SQL> grant select on dbsnmp.mgmt_baseline to OEM_MONITOR;

Grant succeeded.

SQL> grant select on dbsnmp.mgmt_baseline_sql to OEM_MONITOR;

Grant succeeded.

SQL> grant select on dbsnmp.mgmt_latest to OEM_MONITOR;

Grant succeeded.

SQL> grant select on dbsnmp.mgmt_latest_sql to OEM_MONITOR;

Grant succeeded.

SQL> grant select on dbsnmp.mgmt_history to OEM_MONITOR;

Grant succeeded.

SQL> grant select on dbsnmp.mgmt_history_sql to OEM_MONITOR;

Grant succeeded.

SQL> 
SQL> REM Create the BSLN schema objects
SQL> @@catbsln
SQL> 
SQL> Rem
SQL> Rem $Header: rdbms/admin/catbsln.sql /main/3 2014/02/20 12:45:44 surman Exp $
SQL> Rem
SQL> Rem catbsln.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2013, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catbsln.sql - Baseline schema creation.
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Creates the EM baseline feature schema components
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      Called by catsnmp.sql during database creation.
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catbsln.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catbsln.sql
SQL> Rem SQL_PHASE: CATBSLN
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catsnmp.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    jsoule      05/02/06 - created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> Rem Create object types for bsln.
SQL> @@catbslny.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catbslny.sql /main/3 2014/02/20 12:45:40 surman Exp $
SQL> Rem
SQL> Rem catbslny.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2013, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catbslny.sql - CATalog BaSeLiNe tYpes.
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script defines the types to create for metric baseline support.
SQL> Rem      These are the most fundamental composite types, used in function and
SQL> Rem      procedure APIs.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      None.
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catbslny.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catbslny.sql
SQL> Rem SQL_PHASE: CATBSLNY
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catbsln.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    jsoule      05/02/06 - created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> Rem
SQL> Rem  Type:
SQL> Rem    bsln_metric_set
SQL> Rem
SQL> Rem  Description:
SQL> Rem    This is a set of metrics supported by baselines.
SQL> Rem
SQL> 
SQL> Rem
SQL> Rem  Type:
SQL> Rem    bsln_metric_t
SQL> Rem
SQL> Rem  Description:
SQL> Rem    A metric (metadata) relation
SQL> Rem
SQL> Rem  Fields:
SQL> Rem    metric_id - metric observed
SQL> Rem    status    - status of the metric (e.g., preferred)
SQL> Rem
SQL> 
SQL> drop type bsln_metric_set;
drop type bsln_metric_set
*
ERROR at line 1:
ORA-04043: object BSLN_METRIC_SET does not exist


SQL> 
SQL> create or replace type bsln_metric_t as object
  2    (metric_id number
  3    ,status    varchar2(16)
  4    );
  5  /

Type created.

SQL> 
SQL> grant execute on bsln_metric_t to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> Rem
SQL> Rem  Type:
SQL> Rem    bsln_metric_set
SQL> Rem
SQL> Rem  Description:
SQL> Rem    This is a set of metrics.
SQL> Rem
SQL> 
SQL> create type bsln_metric_set as table of bsln_metric_t;
  2  /

Type created.

SQL> 
SQL> grant execute on bsln_metric_set to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> Rem
SQL> Rem  Type:
SQL> Rem    bsln_variance_t
SQL> Rem
SQL> Rem  Description:
SQL> Rem    The variance measure for a metric in a baseline within a time-group of
SQL> Rem    a specific timegrouping.
SQL> Rem
SQL> Rem  Fields:
SQL> Rem    metric_id          - the metric's identifier
SQL> Rem    bsln_guid          - the baseline's globally unique ID
SQL> Rem    timegrouping       - the timegrouping used to generate this timegroup
SQL> Rem    timegroup_hours    - the number of hours (from canonical week)
SQL> Rem                         within this timegroup
SQL> Rem    timegroup_cardinality - the number of datapoints that contributed
SQL> Rem    timegroup_variance - the variance measure of the timegroup
SQL> Rem
SQL> 
SQL> drop type bsln_variance_set;
drop type bsln_variance_set
*
ERROR at line 1:
ORA-04043: object BSLN_VARIANCE_SET does not exist


SQL> 
SQL> create or replace type bsln_variance_t as object
  2    (metric_id             number
  3    ,bsln_guid             raw(16)
  4    ,timegrouping          varchar2(2)
  5    ,timegroup_hours       number
  6    ,timegroup_cardinality number
  7    ,timegroup_variance    number
  8    );
  9  /

Type created.

SQL> 
SQL> grant execute on bsln_variance_t to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> Rem
SQL> Rem  Type:
SQL> Rem    bsln_variance_set;
SQL> Rem
SQL> Rem  Description:
SQL> Rem    This is a set of baseline metric variances.
SQL> Rem
SQL> 
SQL> create type bsln_variance_set as table of bsln_variance_t;
  2  /

Type created.

SQL> 
SQL> grant execute on bsln_variance_set to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> Rem
SQL> Rem  Type:
SQL> Rem    bsln_observation_t
SQL> Rem
SQL> Rem  Description:
SQL> Rem    This relation is an observation of a data source.
SQL> Rem
SQL> Rem  Fields:
SQL> Rem    metric_id - metric observed
SQL> Rem    bsln_guid - unique baseline identifier
SQL> Rem    timegroup - encoding of the subinterval of a baseline
SQL> Rem    obs_time  - time of observation
SQL> Rem    obs_value - value observed
SQL> 
SQL> drop type bsln_observation_set;
drop type bsln_observation_set
*
ERROR at line 1:
ORA-04043: object BSLN_OBSERVATION_SET does not exist


SQL> 
SQL> create or replace type bsln_observation_t as object
  2    (metric_id number
  3    ,bsln_guid raw(16)
  4    ,timegroup varchar2(5)
  5    ,obs_time  date
  6    ,obs_value number
  7    );
  8  /

Type created.

SQL> 
SQL> grant execute on bsln_observation_t to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> Rem
SQL> Rem  Type:
SQL> Rem    bsln_observation_set
SQL> Rem
SQL> Rem  Description:
SQL> Rem    This is a set of observations of data sources.
SQL> Rem
SQL> 
SQL> create type bsln_observation_set as table of bsln_observation_t;
  2  /

Type created.

SQL> 
SQL> grant execute on bsln_observation_set to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> Rem
SQL> Rem  Type:
SQL> Rem    bsln_statistics_t
SQL> Rem
SQL> Rem  Description:
SQL> Rem    An object attribute-column matched to mgmt_bsln_statistics
SQL> Rem
SQL> 
SQL> drop type bsln_statistics_set;
drop type bsln_statistics_set
*
ERROR at line 1:
ORA-04043: object BSLN_STATISTICS_SET does not exist


SQL> 
SQL> create or replace type bsln_statistics_t as object
  2    (bsln_guid        raw(16)
  3    ,metric_id        number
  4    ,compute_date     date
  5    ,timegrouping     varchar2(2)
  6    ,timegroup        varchar2(5)
  7    ,sample_count     number
  8    ,average          number
  9    ,minimum          number
 10    ,maximum          number
 11    ,sdev             number
 12    ,pctile_25        number
 13    ,pctile_50        number
 14    ,pctile_75        number
 15    ,pctile_90        number
 16    ,pctile_95        number
 17    ,pctile_99        number
 18    ,est_sample_count number
 19    ,est_slope        number
 20    ,est_intercept    number
 21    ,est_fit_quality  number
 22    ,est_pctile_999   number
 23    ,est_pctile_9999  number
 24    );
 25  /

Type created.

SQL> 
SQL> grant execute on bsln_statistics_t to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> Rem
SQL> Rem  Type:
SQL> Rem    bsln_statistics_set
SQL> Rem
SQL> Rem  Description:
SQL> Rem    A set of statistics objects
SQL> Rem
SQL> 
SQL> create type bsln_statistics_set as table of bsln_statistics_t;
  2  /

Type created.

SQL> 
SQL> grant execute on bsln_statistics_set to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem Create tables for bsln.
SQL> @@catbslnt.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catbslnt.sql /main/3 2014/02/20 12:45:46 surman Exp $
SQL> Rem
SQL> Rem catbslnt.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2013, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catbslnt.sql - CATalog BaSeLiNe Tables.
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script defines the tables to create for metric baseline support.
SQL> Rem      These tables are not the published API to stored data.  For the ex-
> Rem      ternal interface, see bsln_views.sql.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catbslnt.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catbslnt.sql
SQL> Rem SQL_PHASE: CATBSLNT
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catbsln.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    jsoule      06/15/06 - restore compute_date on baselines
SQL> Rem    jsoule      05/02/06 - created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem  Table:
SQL> Rem    bsln_metric_defaults
SQL> Rem
SQL> Rem  Description:
SQL> Rem    This table lists the set of 'eligible' metrics for baselining.  Metrics
SQL> Rem    absent from this list cannot contribute to baselines.  Default, or
SQL> Rem    suggested, parameter settings for eligible metrics are found here as
SQL> Rem    well.
SQL> Rem
SQL> Rem  Columns:
SQL> Rem    metric_id - database metric identifier
SQL> Rem    status    - whether this metric is preferred or not
SQL> Rem    category  - the category of change this metric indicates
SQL> Rem
SQL> 
SQL> create table bsln_metric_defaults
  2     (metric_id number       NOT NULL
  3     ,status    varchar2(16) NOT NULL
  4     ,category  varchar2(16) NOT NULL
  5     ,CONSTRAINT bsln_metric_defaults_pk PRIMARY KEY (metric_id)
  6     )
  7  /

Table created.

SQL> comment on table bsln_metric_defaults is
  2  'Default Attributes of Baselineable Metrics'
  3  /

Comment created.

SQL> grant select on bsln_metric_defaults to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> 
SQL> Rem
SQL> Rem  Table:
SQL> Rem    bsln_timegroups
SQL> Rem
SQL> Rem  Description:
SQL> Rem    This table defines the day/night and weekday/weekend boundaries
SQL> Rem    for timegroups.
SQL> Rem
SQL> Rem  Columns:
SQL> Rem    hour     - the hour of the week (0-167)
SQL> Rem    intraday - the value of this hour within the day/night
SQL> Rem    extraday - the value of this hour within the weekday/weekend
SQL> Rem
SQL> 
SQL> create table bsln_timegroups
  2     (hour     number      NOT NULL
  3     ,intraday varchar2(2) NOT NULL
  4     ,extraday varchar2(2) NOT NULL
  5     ,CONSTRAINT bsln_timegroups_pk PRIMARY KEY (hour)
  6     )
  7     ORGANIZATION INDEX
  8  /

Table created.

SQL> comment on table bsln_timegroups is
  2  'Weekday/Weeknight and Day/Night Timegroup Definitions'
  3  /

Comment created.

SQL> grant select on bsln_timegroups to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> Rem
SQL> Rem  Table:
SQL> Rem    bsln_baselines
SQL> Rem
SQL> Rem  Description:
SQL> Rem    This table records the set of existing baselines.
SQL> Rem
SQL> Rem  Columns:
SQL> Rem    dbid          - database identifier
SQL> Rem    instance_name - instance name
SQL> Rem    baseline_id   - baseline identifier
SQL> Rem    bsln_guid     - globally unique baseline identifier
SQL> Rem    timegrouping  - key identifying the timegrouping scheme
SQL> Rem    status        - current status (active vs. inactive)
SQL> Rem
SQL> 
SQL> create table bsln_baselines
  2     (dbid              number       NOT NULL
  3     ,instance_name     varchar2(16) NOT NULL
  4     ,baseline_id       number       NOT NULL
  5     ,bsln_guid         raw(16)      NOT NULL
  6     ,timegrouping      varchar2(2)
  7     ,auto_timegroup    varchar2(1)  NOT NULL
  8     ,status            varchar2(16) NOT NULL
  9     ,last_compute_date date
 10     ,CONSTRAINT bsln_baselines_pk2 PRIMARY KEY (bsln_guid)
 11     ,CONSTRAINT bsln_baselines_uk2 UNIQUE (dbid, instance_name, baseline_id)
 12     )
 13  /

Table created.

SQL> comment on table bsln_baselines is
  2  'Baselines Designated for Metric Statistics Calculation'
  3  /

Comment created.

SQL> grant select on bsln_baselines to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> 
SQL> Rem
SQL> Rem  Table:
SQL> Rem    bsln_statistics
SQL> Rem
SQL> Rem  Description:
SQL> Rem    This table records daily statistical aggregates over subintervals of a
SQL> Rem    baselined datasource.
SQL> Rem
SQL> Rem  Columns:
SQL> Rem    bsln_guid        - globally unique identifier for the baseline
SQL> Rem    metric_id        - unique identifier for the metric
SQL> Rem    compute_date     - day for which statistics were computed
SQL> Rem    timegrouping     - the way the baseline is subdivided into intervals
SQL> Rem    timegroup        - encoding of the subinterval of a baseline
SQL> Rem    sample_count     - number of data points in the baseline's subinterval
SQL> Rem    average          - average                  ||
SQL> Rem    minimum          - minimum                  ||
SQL> Rem    maximum          - maximum                  ||
SQL> Rem    sdev             - standard deviation       ||
SQL> Rem    pctile_25        - value at 25th percentile ||
SQL> Rem    pctile_50        - value at 50th percentile ||
SQL> Rem    pctile_75        - value at 75th percentile ||
SQL> Rem    pctile_90        - value at 90th percentile ||
SQL> Rem    pctile_95        - value at 95th percentile ||
SQL> Rem    est_sample_count - number of data points in the tail of the baseline's
SQL> Rem                       subinterval (used by the estimator)
SQL> Rem    est_slope        - slope of the linear regression of the tail       ||
SQL> Rem    est_intercept    - y-intercept of the linear regression of the tail ||
SQL> Rem    est_fit_quality  - fit quality of the linear function to the tail   ||
SQL> Rem    est_pctile_99    - estimated value at 99th percentile
SQL> Rem    est_pctile_999   - estimated value at 99.9th percentile
SQL> Rem    est_pctile_9999  - estimated value at 99.99th percentile
SQL> Rem
SQL> 
SQL> create table bsln_statistics
  2     (bsln_guid         raw(16)     NOT NULL
  3     ,metric_id         number      NOT NULL
  4     ,compute_date      date        NOT NULL
  5     ,timegrouping      varchar2(2) NOT NULL
  6     ,timegroup         varchar2(5) NOT NULL
  7     ,sample_count      number      NOT NULL
  8     ,average           number
  9     ,minimum           number
 10     ,maximum           number
 11     ,sdev              number
 12     ,pctile_25         number
 13     ,pctile_50         number
 14     ,pctile_75         number
 15     ,pctile_90         number
 16     ,pctile_95         number
 17     ,pctile_99         number
 18     ,est_sample_count  number
 19     ,est_slope         number
 20     ,est_intercept     number
 21     ,est_fit_quality   number
 22     ,est_pctile_999    number
 23     ,est_pctile_9999   number
 24     ,CONSTRAINT bsln_statistics_pk1 PRIMARY KEY
 25           (metric_id, compute_date, timegroup, bsln_guid)
 26     ,CONSTRAINT bsln_statistics_fk FOREIGN KEY (bsln_guid)
 27           REFERENCES bsln_baselines (bsln_guid)
 28           ON DELETE CASCADE
 29     )
 30  /

Table created.

SQL> comment on table bsln_statistics is
  2  'Metric Statistics for Baselines'
  3  /

Comment created.

SQL> grant select on bsln_statistics to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> 
SQL> Rem
SQL> Rem  Table:
SQL> Rem    bsln_threshold_params
SQL> Rem
SQL> Rem  Description:
SQL> Rem    This table keeps the current threshold parameter settings for dynamic
SQL> Rem    thresholds.
SQL> Rem
SQL> Rem  Columns:
SQL> Rem    bsln_guid        - globally unique identifier for the baseline
SQL> Rem    metric_id        - database metric identifier
SQL> Rem    threshold_method - method used to generate thresholds
SQL> Rem    num_occurrences  - number of occurrences
SQL> Rem    warning_param    - warning parameter
SQL> Rem    critical_param   - critical parameter
SQL> Rem    fail_action      - set threshold action for inadequate data or fit
SQL> Rem    adaptive         - is this threshold parameter adaptive (Y or N)
SQL> Rem    last_set_date    - time thresholds were last set under these conditions
SQL> Rem    in_effect        - are these thresholds in effect currently (Y or N)
SQL> Rem
SQL> 
SQL> create table bsln_threshold_params
  2     (bsln_guid        raw(16)      NOT NULL
  3     ,metric_id        number       NOT NULL
  4     ,threshold_method varchar2(16) NOT NULL
  5     ,num_occurrences  number       NOT NULL
  6     ,warning_param    number
  7     ,critical_param   number
  8     ,fail_action      varchar2(16)
  9     ,adaptive         varchar2(1)  NOT NULL
 10     ,last_set_date    date
 11     ,in_effect        varchar2(1)  NOT NULL
 12     ,CONSTRAINT bsln_thresholds_pk1 PRIMARY KEY (bsln_guid, metric_id)
 13     ,CONSTRAINT bsln_thresholds_fk FOREIGN KEY (bsln_guid)
 14           REFERENCES bsln_baselines (bsln_guid)
 15           ON DELETE CASCADE
 16     )
 17  /

Table created.

SQL> comment on table bsln_threshold_params is
  2  'Baseline Metric Threshold Parameters'
  3  /

Comment created.

SQL> grant select on bsln_threshold_params to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem Create the BSLN package definition.
SQL> @@dbmsbsln.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/dbmsbsln.sql /main/5 2014/02/20 12:45:50 surman Exp $
SQL> Rem
SQL> Rem dbmsbsln.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2013, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      dbmsbsln.sql - BaSeLiNe package (creation).
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script defines the packaged procedures and functions required
SQL> Rem      for metric baseline support.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/dbmsbsln.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/dbmsbsln.sql
SQL> Rem SQL_PHASE: DBMSBSLN
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catbsln.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    jsoule      05/16/07 - restore backward-compatibility of deprecated API
SQL> Rem    jsoule      10/24/06 - change default num occurs
SQL> Rem    jsoule      05/02/06 - created/relocated from EMDB
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> create or replace
  2  package bsln
  3  as
  4    ----------------------------------------------------------------------------
  5    --
  6    --    package subtypes
  7    --
  8    ----------------------------------------------------------------------------
  9  
 10    subtype guid_t             is bsln_baselines.bsln_guid%TYPE;
 11    subtype timegroup_field_t  is bsln_timegroups.intraday%TYPE;
 12    subtype timegroup_t        is bsln_statistics.timegroup%TYPE;
 13    subtype timegrouping_t     is bsln_statistics.timegrouping%TYPE;
 14    subtype fail_action_t      is bsln_threshold_params.fail_action%TYPE;
 15    subtype threshold_method_t is bsln_threshold_params.threshold_method%TYPE;
 16    subtype param_value_t      is bsln_threshold_params.critical_param%TYPE;
 17    subtype preferred_status_t is bsln_metric_defaults.status%TYPE;
 18  
 19    ----------------------------------------------------------------------------
 20    --
 21    --    externally visible constants and subtypes
 22    --
 23    ----------------------------------------------------------------------------
 24  
 25    K_TIMEGROUPING_FIELD_X constant varchar2(1) := 'X';
 26    K_TIMEGROUPING_FIELD_N constant varchar2(1) := 'N';
 27    K_TIMEGROUPING_FIELD_H constant varchar2(1) := 'H';
 28    K_TIMEGROUPING_FIELD_W constant varchar2(1) := 'W';
 29    K_TIMEGROUPING_FIELD_D constant varchar2(1) := 'D';
 30  
 31    K_TIMEGROUPING_XX constant timegrouping_t :=
 32      K_TIMEGROUPING_FIELD_X||K_TIMEGROUPING_FIELD_X;
 33    K_TIMEGROUPING_HX constant timegrouping_t :=
 34      K_TIMEGROUPING_FIELD_H||K_TIMEGROUPING_FIELD_X;
 35    K_TIMEGROUPING_XD constant timegrouping_t :=
 36      K_TIMEGROUPING_FIELD_X||K_TIMEGROUPING_FIELD_D;
 37    K_TIMEGROUPING_HD constant timegrouping_t :=
 38      K_TIMEGROUPING_FIELD_H||K_TIMEGROUPING_FIELD_D;
 39    K_TIMEGROUPING_XW constant timegrouping_t :=
 40      K_TIMEGROUPING_FIELD_X||K_TIMEGROUPING_FIELD_W;
 41    K_TIMEGROUPING_HW constant timegrouping_t :=
 42      K_TIMEGROUPING_FIELD_H||K_TIMEGROUPING_FIELD_W;
 43    K_TIMEGROUPING_NW constant timegrouping_t :=
 44      K_TIMEGROUPING_FIELD_N||K_TIMEGROUPING_FIELD_W;
 45    K_TIMEGROUPING_ND constant timegrouping_t :=
 46      K_TIMEGROUPING_FIELD_N||K_TIMEGROUPING_FIELD_D;
 47    K_TIMEGROUPING_NX constant timegrouping_t :=
 48      K_TIMEGROUPING_FIELD_N||K_TIMEGROUPING_FIELD_X;
 49  
 50    K_TIMEGROUP_FIELD_XX constant timegroup_field_t := 'XX';
 51    K_TIMEGROUP_FIELD_DY constant timegroup_field_t := 'DY';
 52    K_TIMEGROUP_FIELD_NT constant timegroup_field_t := 'NT';
 53    K_TIMEGROUP_FIELD_WD constant timegroup_field_t := 'WD';
 54    K_TIMEGROUP_FIELD_WE constant timegroup_field_t := 'WE';
 55  
 56    K_DEFAULT_NUM_OCCURS constant number := 2;
 57  
 58    K_FAIL_ACTION_UNSET    constant fail_action_t := 'UNSET';
 59    K_FAIL_ACTION_PRESERVE constant fail_action_t := 'PRESERVE';
 60  
 61    K_METHOD_SIGLVL constant threshold_method_t := 'SIGLVL';
 62    K_METHOD_PCTMAX constant threshold_method_t := 'PCTMAX';
 63  
 64    K_SIGLVL_95   constant param_value_t := 0.95;
 65    K_SIGLVL_99   constant param_value_t := 0.99;
 66    K_SIGLVL_999  constant param_value_t := 0.999;
 67    K_SIGLVL_9999 constant param_value_t := 0.9999;
 68  
 69    K_TRUE  constant integer := 1;
 70    K_FALSE constant integer := 0;
 71    K_YES   constant varchar2(1) := 'Y';
 72    K_NO    constant varchar2(1) := 'N';
 73  
 74    K_STATUS_ACTIVE   constant bsln_baselines.status%TYPE := 'ACTIVE';
 75    K_STATUS_INACTIVE constant bsln_baselines.status%TYPE := 'INACTIVE';
 76  
 77    K_STATUS_PREFERRED    constant preferred_status_t := 'PREFERRED';
 78    K_STATUS_NONPREFERRED constant preferred_status_t := 'NONPREFERRED';
 79  
 80    K_CATEGORY_PERFORMANCE constant bsln_metric_defaults.category%TYPE :=
 81              'PERFORMANCE';
 82    K_CATEGORY_DEMAND      constant bsln_metric_defaults.category%TYPE :=
 83              'DEMAND';
 84    K_CATEGORY_SHAPE       constant bsln_metric_defaults.category%TYPE :=
 85              'SHAPE';
 86  
 87    K_SCORE_MAXIMUM   constant number := 10.0;
 88    K_SCORE_HIGHINC   constant number := 5.0;
 89    K_SCORE_MEDIUMEXC constant number := 0.0;
 90  
 91    ----------------------------------------------------------------------------
 92    --
 93    --    package exception declarations
 94    --
 95    ----------------------------------------------------------------------------
 96  
 97    X_INVALID_BASELINE         constant number := -20101;
 98    X_INVALID_INTERVAL         constant number := -20102;
 99    -- X_DATASOURCE_NOT_FOUND  constant number := -20103;           -- DEPRECATED
100    X_INVALID_THRESHOLD_METHOD constant number := -20104;
101    X_INVALID_METRIC           constant number := -20105;
102    X_BASELINE_NOT_FOUND       constant number := -20106;
103    -- X_SOURCE_CONFLICT       constant number := -20107;           -- DEPRECATED
104    X_NOT_SUPPORTED            constant number := -20108;
105    X_BSLNTHR_ERROR            constant number := -20109;
106    X_DEPRECATION_ERROR        constant number := -20110;
107    X_INVALID_TIMEGROUPING     constant number := -20111;
108  
109    INVALID_BASELINE         exception;
110    INVALID_INTERVAL         exception;
111    -- DATASOURCE_NOT_FOUND  exception;                             -- DEPRECATED
112    INVALID_THRESHOLD_METHOD exception;
113    INVALID_METRIC           exception;
114    BASELINE_NOT_FOUND       exception;
115    -- SOURCE_CONFLICT       exception;                             -- DEPRECATED
116    NOT_SUPPORTED            exception;
117    BSLNTHR_ERROR            exception;
118    DEPRECATION_ERROR        exception;
119    INVALID_TIMEGROUPING     exception;
120  
121    PRAGMA EXCEPTION_INIT(INVALID_BASELINE, -20101);
122    PRAGMA EXCEPTION_INIT(INVALID_INTERVAL, -20102);
123    -- PRAGMA EXCEPTION_INIT(DATASOURCE_NOT_FOUND, -20103);         -- DEPRECATED
124    PRAGMA EXCEPTION_INIT(INVALID_THRESHOLD_METHOD, -20104);
125    PRAGMA EXCEPTION_INIT(INVALID_METRIC, -20105);
126    PRAGMA EXCEPTION_INIT(BASELINE_NOT_FOUND, -20106);
127    -- PRAGMA EXCEPTION_INIT(SOURCE_CONFLICT, -20107);              -- DEPRECATED
128    PRAGMA EXCEPTION_INIT(NOT_SUPPORTED, -20108);
129    PRAGMA EXCEPTION_INIT(BSLNTHR_ERROR, -20109);
130    PRAGMA EXCEPTION_INIT(DEPRECATION_ERROR, -20110);
131    PRAGMA EXCEPTION_INIT(INVALID_TIMEGROUPING, -20111);
132  
133    ----------------------------------------------------------------------------
134    --
135    --    utility routines
136    --
137    ----------------------------------------------------------------------------
138  
139    function target_uid(dbid_in         in number
140                       ,instance_num_in in number)
141    return guid_t;
142  
143    function this_target_uid
144    return guid_t;
145  
146    function target_uid(dbid_in          in number
147                       ,instance_name_in in varchar2)
148    return guid_t
149    DETERMINISTIC;
150  
151    function metric_uid(metric_id_in in number)
152    return guid_t
153    DETERMINISTIC;
154  
155    function datasource_guid(target_uid_in in guid_t                -- DEPRECATED
156                            ,metric_uid_in in guid_t                -- DEPRECATED
157                            ,key_value_in  in varchar2 := ' ')      -- DEPRECATED
158    return guid_t                                                   -- DEPRECATED
159    DETERMINISTIC;                                                  -- DEPRECATED
160  
161    function baseline_guid
162      (baseline_id_in   in number
163      ,instance_name_in in varchar2 := NULL
164      ,dbid_in          in number := NULL)
165    return guid_t;
166  
167    function moving_window_baseline_guid
168      (instance_name_in in varchar2 := NULL
169      ,dbid_in          in number := NULL)
170    return guid_t;
171  
172    function timegroup(timegrouping_in in timegrouping_t
173                      ,time_in         in date)
174    return timegroup_t;
175  
176    function subinterval_code(subinterval_key_in in timegrouping_t  -- DEPRECATED
177                             ,time_in            in date)           -- DEPRECATED
178    return timegroup_t;                                             -- DEPRECATED
179  
180    function timegroup(timegrouping_in in timegrouping_t
181                      ,hour_of_week_in in binary_integer)
182    return timegroup_t;
183  
184    ----------------------------------------------------------------------------
185    --
186    --    administration routines
187    --
188    ----------------------------------------------------------------------------
189  
190    procedure update_moving_window                                  -- DEPRECATED
191      (interval_days_in   in number                                 -- DEPRECATED
192      ,subinterval_key_in in timegrouping_t                         -- DEPRECATED
193      ,target_uid_in      in guid_t := NULL);                       -- DEPRECATED
194  
195    procedure create_baseline_static                                -- DEPRECATED
196      (name_in            in varchar2                               -- DEPRECATED
197      ,interval_begin_in  in date                                   -- DEPRECATED
198      ,interval_end_in    in date                                   -- DEPRECATED
199      ,subinterval_key_in in timegrouping_t                         -- DEPRECATED
200      ,target_uid_in      in guid_t := NULL);                       -- DEPRECATED
201  
202    procedure drop_baseline                                         -- DEPRECATED
203      (name_in       in varchar2                                    -- DEPRECATED
204      ,target_uid_in in guid_t := NULL);                            -- DEPRECATED
205  
206    procedure register_datasource                                   -- DEPRECATED
207      (dbid_in         in number                                    -- DEPRECATED
208      ,instance_num_in in number                                    -- DEPRECATED
209      ,metric_id_in    in number);                                  -- DEPRECATED
210  
211    procedure deregister_datasource                                 -- DEPRECATED
212      (dbid_in         in number                                    -- DEPRECATED
213      ,instance_num_in in number                                    -- DEPRECATED
214      ,metric_id_in    in number);                                  -- DEPRECATED
215  
216    procedure set_default_timegrouping
217      (timegrouping_in  in timegrouping_t
218      ,instance_name_in in varchar2 := NULL
219      ,dbid_in          in number := NULL);
220  
221    procedure activate_baseline                                     -- DEPRECATED
222      (name_in       in varchar2                                    -- DEPRECATED
223      ,target_uid_in in guid_t := NULL);                            -- DEPRECATED
224  
225    procedure deactivate_baseline                                   -- DEPRECATED
226      (name_in       in varchar2                                    -- DEPRECATED
227      ,target_uid_in in guid_t := NULL);                            -- DEPRECATED
228  
229    procedure set_threshold_parameters
230      (bsln_guid_in        in guid_t
231      ,metric_id_in        in number
232      ,threshold_method_in in threshold_method_t
233      ,warning_param_in    in param_value_t
234      ,critical_param_in   in param_value_t
235      ,num_occurs_in       in integer := K_DEFAULT_NUM_OCCURS
236      ,fail_action_in      in fail_action_t := K_FAIL_ACTION_UNSET);
237  
238    procedure set_threshold_parameters                              -- DEPRECATED
239      (bsln_guid_in        in guid_t                                -- DEPRECATED
240      ,ds_guid_in          in guid_t                                -- DEPRECATED
241      ,threshold_method_in in threshold_method_t                    -- DEPRECATED
242      ,warning_param_in    in param_value_t                         -- DEPRECATED
243      ,critical_param_in   in param_value_t                         -- DEPRECATED
244      ,num_occurs_in       in integer := K_DEFAULT_NUM_OCCURS       -- DEPRECATED
245      ,fail_action_in      in fail_action_t := K_FAIL_ACTION_UNSET);-- DEPRECATED
246  
247    procedure unset_threshold_parameters
248      (bsln_guid_in in guid_t
249      ,metric_id_in in number);
250  
251    ----------------------------------------------------------------------------
252    -- enable/disable API, deprecated in 11.1
253    ----------------------------------------------------------------------------
254    procedure enable;                                               -- DEPRECATED
255    procedure disable;                                              -- DEPRECATED
256    function is_enabled return integer;                             -- DEPRECATED
257  
258    procedure delete_bsln_jobs;                                     -- DEPRECATED
259  
260    -----------------------------------------------------------------------------
261    --
262    --    operational routines
263    --
264    -----------------------------------------------------------------------------
265  
266    -----------------------------------------------------------------------------
267    -- automation hooks, deprecated in 11.1
268    -----------------------------------------------------------------------------
269    procedure set_all_thresholds;                                   -- DEPRECATED
270    procedure compute_all_statistics;                               -- DEPRECATED
271  
272    -----------------------------------------------------------------------------
273    -- statistics computation and quality (of extrapolation)
274    -----------------------------------------------------------------------------
275    function compute_statistics                                     -- DEPRECATED
276      (bsln_name_in       in varchar2                               -- DEPRECATED
277      ,interval_begin_in  in date                                   -- DEPRECATED
278      ,interval_end_in    in date                                   -- DEPRECATED
279      ,subinterval_key_in in timegrouping_t                         -- DEPRECATED
280      ,target_uid_in      in guid_t := NULL)                        -- DEPRECATED
281    return bsln_statistics_set;                                     -- DEPRECATED
282  
283    function data_and_model_OK
284      (threshold_method_in in threshold_method_t
285      ,threshold_param_in  in param_value_t
286      ,sample_count_in     in number
287      ,fit_quality_in      in number)
288    return integer;
289  
290    ----------------------------------------------------------------------------
291    -- metric quality as signal
292    ----------------------------------------------------------------------------
293  
294    type signal_rectype is record
295      (bsln_guid guid_t
296      ,metric_id number
297      ,quality   number);
298  
299    type signal_cvtype is ref cursor return signal_rectype;
300  
301    function metric_signal_qualities
302      (bsln_guid_in      in guid_t
303      ,metric_ids_in     in bsln_metric_set := NULL
304      ,reference_time_in in date)
305    return signal_cvtype;
306  
307    ----------------------------------------------------------------------------
308    --
309    --    SLPA declarations for Design by Contract support
310    --
311    ----------------------------------------------------------------------------
312    ASSERTFAIL     EXCEPTION;
313    ASSERTFAIL_C   CONSTANT INTEGER := -20999;
314    PRAGMA EXCEPTION_INIT(ASSERTFAIL, -20999);
315    PKGNAME_C      CONSTANT VARCHAR2(20) := 'BSLN';
316    ----------------------------------------------------------------------------
317  end bsln;
318  /

Package created.

SQL> 
SQL> create or replace synonym mgmt_bsln
  2  for bsln
  3  /

Synonym created.

SQL> 
SQL> grant execute on bsln to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem Create the BSLN_INTERNAL package definition, package body.
SQL> Rem Create the BSLN package body.
SQL> @@prvtblid.plb
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> create or replace
  2  package bsln_internal wrapped
  3  a000000
  4  1
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  abcd
 20  9
 21  24bf a88
 22  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
 59  
 60  /

Package created.

SQL> grant execute on bsln_internal to oem_monitor
  2  /

Grant succeeded.

SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> @@prvtblib.plb
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> create or replace
  2  package body bsln_internal wrapped
  3  a000000
  4  1
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  abcd
 20  b
 21  13a36 444b
 22  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
261  JhBDSXUGu5p2dNIGZyIPi07WtU61+4nMai0=
262  
263  /

Package body created.

SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> @@prvtbsln.plb
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> create or replace
  2  package body bsln wrapped
  3  a000000
  4  1
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  abcd
 20  b
 21  7a53 1d3e
 22  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
124  5lc2S0pNa+wuIQ183Dr7xO593jLOJLVbOtR71Q==
125  
126  /

Package body created.

SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem Seed the tables.
SQL> @@catbslnd.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catbslnd.sql /main/5 2014/02/20 12:45:40 surman Exp $
SQL> Rem
SQL> Rem catbslnd.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2013, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catbslnd.sql - BaSeLiNe Dml for database
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Seeds metadata tables for Oracle 11g deployments
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catbslnd.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catbslnd.sql
SQL> Rem SQL_PHASE: CATBSLND
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catbsln.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    jsoule      10/17/06 - add new preferred metrics
SQL> Rem    jsoule      08/02/06 - protect against primary key violations
SQL> Rem    jsoule      05/02/06 - created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> Rem
SQL> Rem  Seed bsln_metric_defaults
SQL> Rem
SQL> 
SQL> declare
  2  
  3    procedure add_metric_defaults(metric_id_in in number
  4                                 ,status_in    in varchar2
  5                                 ,category_in  in varchar2)
  6    is
  7    begin
  8      insert into bsln_metric_defaults
  9        (metric_id,   status,   category)
 10      values
 11        (metric_id_in,status_in,category_in);
 12    exception when DUP_VAL_ON_INDEX then
 13      null;
 14    end;
 15  
 16  begin
 17  
 18    add_metric_defaults(2106,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_PERFORMANCE);
 19    add_metric_defaults(2109,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_PERFORMANCE);
 20    add_metric_defaults(2147,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_PERFORMANCE);
 21    add_metric_defaults(2144,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_PERFORMANCE);
 22    add_metric_defaults(2005,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_SHAPE);
 23    add_metric_defaults(2017,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_SHAPE);
 24    add_metric_defaults(2031,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_SHAPE);
 25    add_metric_defaults(2045,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_SHAPE);
 26    add_metric_defaults(2066,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_SHAPE);
 27    add_metric_defaults(2072,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_SHAPE);
 28    add_metric_defaults(2145,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_SHAPE);
 29    add_metric_defaults(2003,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_DEMAND);
 30    add_metric_defaults(2026,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_DEMAND);
 31    add_metric_defaults(2004,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_DEMAND);
 32    add_metric_defaults(2006,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_DEMAND);
 33    add_metric_defaults(2016,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_DEMAND);
 34    add_metric_defaults(2018,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_DEMAND);
 35    add_metric_defaults(2058,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_DEMAND);
 36    add_metric_defaults(2121,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_DEMAND);
 37    add_metric_defaults(2146,bsln.K_STATUS_PREFERRED,bsln.K_CATEGORY_DEMAND);
 38    add_metric_defaults(2032,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_PERFORMANCE);
 39    add_metric_defaults(2036,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_PERFORMANCE);
 40    add_metric_defaults(2052,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_PERFORMANCE);
 41    add_metric_defaults(2098,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_PERFORMANCE);
 42    add_metric_defaults(2099,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_PERFORMANCE);
 43    add_metric_defaults(2103,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_DEMAND);
 44    add_metric_defaults(2104,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_DEMAND);
 45    add_metric_defaults(2030,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_DEMAND);
 46    add_metric_defaults(2022,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_DEMAND);
 47    add_metric_defaults(2046,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_DEMAND);
 48    add_metric_defaults(2028,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_DEMAND);
 49    add_metric_defaults(2044,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_DEMAND);
 50    add_metric_defaults(2038,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_DEMAND);
 51    add_metric_defaults(2024,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_DEMAND);
 52    add_metric_defaults(2076,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_SHAPE);
 53    add_metric_defaults(2025,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_SHAPE);
 54    add_metric_defaults(2019,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_SHAPE);
 55    add_metric_defaults(2087,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_SHAPE);
 56    add_metric_defaults(2088,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_SHAPE);
 57    add_metric_defaults(2089,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_SHAPE);
 58    add_metric_defaults(2091,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_SHAPE);
 59    add_metric_defaults(2007,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_SHAPE);
 60    add_metric_defaults(2029,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_SHAPE);
 61    add_metric_defaults(2035,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_SHAPE);
 62    add_metric_defaults(2053,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_SHAPE);
 63    add_metric_defaults(2037,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_SHAPE);
 64    add_metric_defaults(2039,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_SHAPE);
 65    add_metric_defaults(2023,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_SHAPE);
 66    add_metric_defaults(2027,bsln.K_STATUS_NONPREFERRED,bsln.K_CATEGORY_SHAPE);
 67  
 68    commit;
 69  
 70  end;
 71  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem
SQL> Rem  Seed bsln_timegroups
SQL> Rem
SQL> Rem  Notes:
SQL> Rem    Hours (of the week) begin on Monday morning, 12AM.
SQL> Rem    Daytime hours are from 7am to 7pm.
SQL> Rem    Weekend days are Saturday and Sunday.
SQL> Rem
SQL> 
SQL> begin
  2  
  3    for h in 0..167
  4    loop
  5      begin
  6        insert into bsln_timegroups
  7         (hour
  8         ,intraday
  9         ,extraday
 10         )
 11        values
 12         (h
 13         ,case when mod(h, 24) < 7 or mod(h, 24) > 18
 14               then bsln.K_TIMEGROUP_FIELD_NT
 15               else bsln.K_TIMEGROUP_FIELD_DY end
 16         ,case when h < 2*24
 17               then bsln.K_TIMEGROUP_FIELD_WE
 18               else bsln.K_TIMEGROUP_FIELD_WD end
 19         );
 20      exception
 21        -------------------------------
 22        -- ignore duplicates
 23        -------------------------------
 24        when DUP_VAL_ON_INDEX
 25        then null;
 26      end;
 27    end loop;
 28  
 29    commit;
 30  
 31  end;
 32  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem Create views for bsln.
SQL> @@catbslnv.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catbslnv.sql /main/3 2014/02/20 12:45:46 surman Exp $
SQL> Rem
SQL> Rem catbslnv.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2013, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catbslnv.sql - CATalog BaSeLiNe Views.
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script defines the views to create for metric baseline support.
SQL> Rem      These views are the 10.2 and 11.1 APIs to stored data.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      There are two views for each table exposed.  The 10.2 views are not
SQL> Rem      deprecated and only used for 10.2 clients.  The 11.1 views are the
SQL> Rem      forward-looking API that will remain in 11.2, for example.
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catbslnv.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catbslnv.sql
SQL> Rem SQL_PHASE: CATBSLNV
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catbsln.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    jsoule      06/27/06 - react to dba_hist_baseline reversion
SQL> Rem    jsoule      05/02/06 - created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> Rem
SQL> Rem mgmt_bsln_metrics
SQL> Rem
SQL> 
SQL> create or replace view mgmt_bsln_metrics
  2    (metric_uid
  3    ,tail_estimator
  4    ,threshold_method_default
  5    ,num_occurrences_default
  6    ,warning_param_default
  7    ,critical_param_default
  8    )
  9  as
 10  select bsln.metric_uid(bmd.metric_id)
 11        ,'EXPTAIL'
 12        ,'SIGLVL'
 13        ,1
 14        ,.999
 15        ,.9999
 16    from bsln_metric_defaults bmd
 17   where bmd.status = 'PREFERRED'
 18  /

View created.

SQL> comment on table mgmt_bsln_metrics is
  2  'Metrics Eligible for Baselines (10.2)'
  3  /

Comment created.

SQL> grant select on mgmt_bsln_metrics to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> Rem
SQL> Rem mgmt_bsln_datasources
SQL> Rem
SQL> 
SQL> create or replace view mgmt_bsln_datasources
  2    (datasource_guid
  3    ,source_type
  4    ,target_uid
  5    ,metric_uid
  6    ,target_guid
  7    ,metric_guid
  8    ,key_value
  9    ,dbid
 10    ,instance_num
 11    ,instance_name
 12    ,metric_id
 13    )
 14  as
 15  select bsln.datasource_guid(bsln.target_uid(d.dbid, i.instance_number),
 16                              bsln.metric_uid(bmd.metric_id))
 17        ,'DB'
 18        ,bsln.target_uid(d.dbid, i.instance_number)
 19        ,bsln.metric_uid(bmd.metric_id)
 20        ,null
 21        ,null
 22        ,null
 23        ,d.dbid
 24        ,i.instance_number
 25        ,i.instance_name
 26        ,bmd.metric_id
 27    from gv$database d, gv$instance i, bsln_metric_defaults bmd
 28  /

View created.

SQL> comment on table mgmt_bsln_datasources is
  2  'Registered Metric Baseline Datasources (10.2)'
  3  /

Comment created.

SQL> grant select on mgmt_bsln_datasources to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> Rem
SQL> Rem mgmt_bsln_baselines
SQL> Rem
SQL> 
SQL> create or replace view mgmt_bsln_baselines
  2    (bsln_guid
  3    ,target_uid
  4    ,name
  5    ,type
  6    ,subinterval_key
  7    ,status
  8    )
  9  as
 10  select bb.bsln_guid
 11        ,bsln.target_uid(bb.dbid, i.instance_number)
 12        ,ab.baseline_name
 13        ,DECODE(ab.baseline_type,
 14                'MOVING_WINDOW', 'R',
 15                                 'S')
 16        ,bb.timegrouping
 17        ,bb.status
 18    from bsln_baselines bb, dba_hist_baseline_metadata ab, gv$instance i
 19   where ab.dbid = bb.dbid
 20     and ab.baseline_id = bb.baseline_id
 21     and bb.instance_name = i.instance_name
 22     and ab.baseline_type in ('MOVING_WINDOW', 'STATIC', 'GENERATED')
 23  /

View created.

SQL> comment on table mgmt_bsln_baselines is
  2  'Database Metric Baselines (10.2)'
  3  /

Comment created.

SQL> grant select on mgmt_bsln_baselines to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> Rem
SQL> Rem mgmt_bsln_intervals
SQL> Rem
SQL> 
SQL> create or replace view mgmt_bsln_intervals
  2    (bsln_guid
  3    ,interval_begin
  4    ,interval_end
  5    ,interval_days
  6    )
  7  as
  8  select bb.bsln_guid
  9        ,case ab.baseline_type when 'MOVING_WINDOW' then NULL
 10                               else ab.start_snap_time end
 11        ,case ab.baseline_type when 'MOVING_WINDOW' then NULL
 12                               else ab.end_snap_time end
 13        ,case ab.baseline_type when 'MOVING_WINDOW' then ab.moving_window_size
 14                               else NULL end
 15    from bsln_baselines bb, dba_hist_baseline ab, gv$instance i
 16   where ab.dbid = bb.dbid
 17     and ab.baseline_id = bb.baseline_id
 18     and i.instance_name = bb.instance_name
 19     and ab.baseline_type in ('MOVING_WINDOW', 'STATIC', 'GENERATED')
 20  /

View created.

SQL> comment on table mgmt_bsln_intervals is
  2  'Database Metric Baseline Intervals (10.2)'
  3  /

Comment created.

SQL> grant select on mgmt_bsln_intervals to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> Rem
SQL> Rem mgmt_bsln_threshold_parms
SQL> Rem
SQL> 
SQL> create or replace view mgmt_bsln_threshold_parms
  2    (bsln_guid
  3    ,datasource_guid
  4    ,threshold_method
  5    ,num_occurrences
  6    ,warning_param
  7    ,critical_param
  8    ,fail_action
  9    )
 10  as
 11  select btp.bsln_guid
 12        ,bsln.datasource_guid(bsln.target_uid(bb.dbid, i.instance_number),
 13                              bsln.metric_uid(btp.metric_id))
 14        ,btp.threshold_method
 15        ,btp.num_occurrences
 16        ,btp.warning_param
 17        ,btp.critical_param
 18        ,btp.fail_action
 19    from bsln_threshold_params btp, bsln_baselines bb, gv$instance i
 20   where btp.bsln_guid = bb.bsln_guid
 21     and bb.instance_name = i.instance_name
 22  /

View created.

SQL> comment on table mgmt_bsln_threshold_parms is
  2  'Database Metric Baseline Thresholds (10.2)'
  3  /

Comment created.

SQL> grant select on mgmt_bsln_threshold_parms to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> Rem
SQL> Rem mgmt_bsln_statistics
SQL> Rem
SQL> 
SQL> create or replace view mgmt_bsln_statistics
  2    (bsln_guid
  3    ,datasource_guid
  4    ,compute_date
  5    ,subinterval_code
  6    ,sample_count
  7    ,average
  8    ,minimum
  9    ,maximum
 10    ,sdev
 11    ,pctile_25
 12    ,pctile_50
 13    ,pctile_75
 14    ,pctile_90
 15    ,pctile_95
 16    ,est_sample_count
 17    ,est_slope
 18    ,est_intercept
 19    ,est_fit_quality
 20    ,est_pctile_99
 21    ,est_pctile_999
 22    ,est_pctile_9999
 23    )
 24  as
 25  select bs.bsln_guid
 26        ,bsln.datasource_guid(bsln.target_uid(bb.dbid, i.instance_number),
 27                              bsln.metric_uid(bs.metric_id))
 28        ,bs.compute_date
 29        ,bs.timegroup
 30        ,bs.sample_count
 31        ,bs.average
 32        ,bs.minimum
 33        ,bs.maximum
 34        ,bs.sdev
 35        ,bs.pctile_25
 36        ,bs.pctile_50
 37        ,bs.pctile_75
 38        ,bs.pctile_90
 39        ,bs.pctile_95
 40        ,bs.est_sample_count
 41        ,bs.est_slope
 42        ,bs.est_intercept
 43        ,bs.est_fit_quality
 44        ,bs.pctile_99
 45        ,bs.est_pctile_999
 46        ,bs.est_pctile_9999
 47    from bsln_statistics bs, bsln_baselines bb, gv$instance i
 48   where bs.bsln_guid = bb.bsln_guid
 49     and bb.instance_name = i.instance_name
 50     and bs.timegrouping = bb.timegrouping
 51  /

View created.

SQL> comment on table mgmt_bsln_statistics is
  2  'Database Metric Baseline Statistics (10.2)'
  3  /

Comment created.

SQL> grant select on mgmt_bsln_statistics to oem_monitor
  2  /

Grant succeeded.

SQL> 
SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> REM Create GTTs for Tablespaces Full metric under DBSNMP schema
SQL> create global temporary table mgmt_db_file_gtt (
  2          tablespace_name varchar2(30),
  3          meg number,
  4          max_meg number,
  5          file_name varchar2(513),
  6          file_id number,
  7          ts# number,
  8          blocksize number,
  9          flag number,
 10          constraint mgmt_db_file_gtt_pk primary key (tablespace_name,file_id)
 11  )
 12  on commit delete rows;

Table created.

SQL> 
SQL> create global temporary table mgmt_db_size_gtt (
  2          tablespace_name varchar2(30),
  3          sz number,
  4          constraint mgmt_db_size_gtt_pk primary key (tablespace_name)
  5  )
  6  on commit delete rows;

Table created.

SQL> 
SQL> REM ******************************
SQL> REM Start: Tracking em db feature
SQL> REM ******************************
SQL> CREATE TABLE mgmt_db_feature_log (
  2     source varchar2(30) NOT NULL CONSTRAINT mgmt_db_feature_log_pk PRIMARY KEY,
  3     last_update_date timestamp with time zone);

Table created.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE mgmt_update_db_feature_log(src IN VARCHAR2)
  2  AS
  3      l_last_update_date mgmt_db_feature_log.last_update_date%TYPE;
  4      current_date mgmt_db_feature_log.last_update_date%TYPE;
  5      diff interval day(9) to second(9);
  6      diff_min NUMBER;
  7    BEGIN
  8      current_date := SYSTIMESTAMP;
  9      SELECT last_update_date
 10        INTO l_last_update_date
 11          FROM mgmt_db_feature_log
 12          WHERE source = src;
 13      diff := current_date - l_last_update_date;
 14      diff_min := EXTRACT(DAY FROM diff)*24*60+EXTRACT(HOUR FROM diff)*60+EXTRACT(MINUTE FROM diff);
 15      -- 2 hours 2x60=120
 16      IF (diff_min > 120) THEN
 17          UPDATE mgmt_db_feature_log set last_update_date = current_date WHERE source = src;
 18          commit;
 19      END IF;
 20    EXCEPTION
 21      when NO_DATA_FOUND then
 22        BEGIN
 23          INSERT INTO mgmt_db_feature_log VALUES (src, systimestamp);
 24          commit;
 25        END;
 26    END;
 27  /

Procedure created.

SQL> 
SQL> GRANT EXECUTE ON  dbsnmp.mgmt_update_db_feature_log TO OEM_MONITOR;

Grant succeeded.

SQL> 
SQL> REM Feature Usage queries encapsulated in PL/SQL for security
SQL> 
SQL> CREATE OR REPLACE PROCEDURE dbms_feature_em_int
  2  (feature_boolean OUT number,
  3   aux_count       OUT number,
  4   info            OUT clob,
  5   l_src           IN  varchar2)
  6  AS
  7  BEGIN
  8   select count(1), null, null
  9     into feature_boolean, aux_count, info
 10     from dbsnmp.mgmt_db_feature_log a
 11    where a.source = l_src
 12      and CAST(a.last_update_date AS DATE) >=
 13           (select nvl(max(last_sample_date), sysdate-7)
 14              from sys.wri$_dbu_usage_sample);
 15  END;
 16  /

Procedure created.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE dbms_feature_em_gc
  2  (feature_boolean OUT number,
  3   aux_count       OUT number,
  4   info            OUT clob)
  5  AS
  6  BEGIN
  7   dbms_feature_em_int(feature_boolean, aux_count, info, 'GC');
  8  END;
  9  /

Procedure created.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE dbms_feature_em_diag
  2  (feature_boolean OUT number,
  3   aux_count       OUT number,
  4   info            OUT clob)
  5  AS
  6  BEGIN
  7   dbms_feature_em_int(feature_boolean, aux_count, info, 'Diagnostic');
  8  END;
  9  /

Procedure created.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE dbms_feature_em_tuning
  2  (feature_boolean OUT number,
  3   aux_count       OUT number,
  4   info            OUT clob)
  5  AS
  6  BEGIN
  7   dbms_feature_em_int(feature_boolean, aux_count, info, 'Tuning');
  8  END;
  9  /

Procedure created.

SQL> 
SQL> REM ******************************
SQL> REM END: Tracking em db feature
SQL> REM ******************************
SQL> 
SQL> ALTER SESSION SET CURRENT_SCHEMA = SYS;

Session altered.

SQL> 
SQL> REM This must be called after the DBSNMP user is known to be created as
SQL> REM   it grants permissions to DBSNMP
SQL> @@catqos
SQL> Rem
SQL> Rem $Header: rdbms/admin/catqos.sql /main/19 2018/08/20 07:05:49 espgarci Exp $
SQL> Rem
SQL> Rem catqos.sql
SQL> Rem
SQL> Rem Copyright (c) 2008, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catqos.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Create Quality of Service Management Schema in the datbase
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This script must run after catsnmp so that the DBSNMP user is
SQL> Rem      already in place when the grants are done.
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catqos.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catqos.sql
SQL> Rem SQL_PHASE: CATQOS
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catsnmp.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    espgarci    07/19/18 - 27965293: create APPQOSSYS with no authentication
SQL> Rem    alui        02/21/17 - grant wlm_pcservice view access to appqossys user
SQL> Rem    jmunozn     01/23/17 - Add grants for Project 70502
SQL> Rem    alui        11/02/15 - bug 22049157: fixed views for selective pdb
SQL> Rem                           management
SQL> Rem    alui        08/21/15 - Bug 20674123: fix feature usage for QoSM
SQL> Rem    alui        04/10/15 - grant privilege access for RM RSRC plan
SQL> Rem                           directives
SQL> Rem    alui        11/05/14 - 19954888: grants needed for access to PDB name.
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    akruglik    02/05/13 - (bug 16194686) ensure that ALTER USER SET
SQL> Rem                           CONTAINER_DATA statement refers to a public
SQL> Rem                           synonym to a [g]v_$ view defined over a fixed
SQL> Rem                           view
SQL> Rem    alui        07/22/12 - for appqossys to see all data in v$wlm_pcmetric
SQL> Rem                           in the root
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    rpang       07/25/11 - Proj 32719: revoke inherit priv on appqossys
SQL> Rem    alui        02/28/11 - grant type access to APPQOSSYS user for
SQL> Rem                           Capabilities object
SQL> Rem    sbasu       06/05/10 - add privilege to APPQOSSYS user for RLB|CLB info
SQL> Rem    alui        10/26/09 - add tables for pushing alerts
SQL> Rem    dsemler     03/10/09 - add EM access to WLM_CLASSIFIER_PLAN
SQL> Rem    dsemler     02/24/09 - remove psm column, add negative_interval column
SQL> Rem                           to wlm_metrics_stream
SQL> Rem    dsemler     11/26/08 - correct privileges assigned to appqossys
SQL> Rem    alui        08/15/08 - change Max classifier list string from 2048 to
SQL> Rem                           4000
SQL> Rem    alui        06/11/08 - add classifier table
SQL> Rem    dsemler     03/26/08 - add required permissions to the APPQOSSYS user
SQL> Rem    dsemler     01/10/08 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> create user APPQOSSYS no authentication
  2    default tablespace sysaux
  3    quota unlimited on sysaux
  4    account lock;

User created.

SQL> 
SQL> Rem Grants required for APPQOSSYS
SQL> grant CREATE SESSION to APPQOSSYS;

Grant succeeded.

SQL> grant SELECT on sys.v_$wlm_pcmetric to APPQOSSYS;

Grant succeeded.

SQL> alter USER APPQOSSYS set container_data=all for "PUBLIC".v$wlm_pcmetric;

User altered.

SQL> grant SELECT on sys.v_$wlm_pcservice to APPQOSSYS;

Grant succeeded.

SQL> alter USER APPQOSSYS set container_data=all for "PUBLIC".v$wlm_pcservice;

User altered.

SQL> grant SELECT on DBA_PDBS to APPQOSSYS;

Grant succeeded.

SQL> alter USER APPQOSSYS set container_data=all for dba_pdbs;

User altered.

SQL> grant SELECT on sys.v_$containers to APPQOSSYS;

Grant succeeded.

SQL> alter USER APPQOSSYS set container_data=all for "PUBLIC".v$containers;

User altered.

SQL> grant SELECT on DBA_RSRC_CONSUMER_GROUPS to APPQOSSYS;

Grant succeeded.

SQL> grant SELECT on DBA_RSRC_GROUP_MAPPINGS to APPQOSSYS;

Grant succeeded.

SQL> grant SELECT on DBA_CDB_RSRC_PLAN_DIRECTIVES to APPQOSSYS;

Grant succeeded.

SQL> grant SELECT on V_$SESSION to APPQOSSYS;

Grant succeeded.

SQL> grant SELECT on V_$PROCESS to APPQOSSYS;

Grant succeeded.

SQL> grant SELECT on V_$LICENSE to APPQOSSYS;

Grant succeeded.

SQL> grant SELECT on V_$OSSTAT to APPQOSSYS;

Grant succeeded.

SQL> grant SELECT on ALL_SERVICES to APPQOSSYS;

Grant succeeded.

SQL> grant ALTER SESSION to APPQOSSYS;

Grant succeeded.

SQL> grant execute on WLM_CAPABILITY_OBJECT to APPQOSSYS;

Grant succeeded.

SQL> grant execute on WLM_CAPABILITY_ARRAY to APPQOSSYS;

Grant succeeded.

SQL> grant SELECT on sys.v_$wlm_db_mode to APPQOSSYS;

Grant succeeded.

SQL> alter USER APPQOSSYS set container_data=all for "PUBLIC".v$wlm_db_mode;

User altered.

SQL> grant SELECT on sys.gv_$wlm_db_mode to APPQOSSYS;

Grant succeeded.

SQL> alter USER APPQOSSYS set container_data=all for "PUBLIC".gv$wlm_db_mode;

User altered.

SQL> grant SELECT on V_$SYSMETRIC to APPQOSSYS;

Grant succeeded.

SQL> grant SELECT on V_$PARAMETER to APPQOSSYS;

Grant succeeded.

SQL> 
SQL> Rem Execute on DBMS_WLM permits DBWLM to upload classifiers used in tagging
SQL> grant execute on dbms_wlm to appqossys;

Grant succeeded.

SQL> 
SQL> Rem Grant Resource Manager Admin privilege, so DBWLM can alter consumer
SQL> Rem   group mappings.
SQL> begin
  2  dbms_resource_manager_privs.grant_system_privilege(
  3    grantee_name => 'APPQOSSYS',
  4    privilege_name => 'ADMINISTER_RESOURCE_MANAGER',
  5    admin_option => FALSE);
  6  end;
  7  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem Revoke automatic grant of INHERIT PRIVILEGES from public
SQL> declare
  2    already_revoked exception;
  3    pragma exception_init(already_revoked,-01927);
  4  begin
  5    execute immediate 'revoke inherit privileges on user appqossys from public';
  6  exception
  7    when already_revoked then
  8      null;
  9  end;
 10  /

PL/SQL procedure successfully completed.

SQL> 
SQL> ALTER SESSION SET CURRENT_SCHEMA = APPQOSSYS;

Session altered.

SQL> 
SQL> CREATE TABLE wlm_metrics_stream
  2  (
  3     timestamp          DATE,
  4     pc                 VARCHAR2(31),
  5     negative_interval  NUMBER
  6  )
  7  /

Table created.

SQL> 
SQL> CREATE TABLE wlm_classifier_plan
  2  (
  3     oper               NUMBER,
  4     nclsrs             NUMBER,
  5     clpcstr            VARCHAR2(4000),
  6     active             CHAR,
  7     seqno              NUMBER,
  8     timestamp          DATE,
  9     chksum             NUMBER
 10  )
 11  /

Table created.

SQL> 
SQL> CREATE TABLE wlm_mpa_stream
  2  (
  3     name               VARCHAR2(4000),
  4     serverorpool       VARCHAR2(8),
  5     risklevel          NUMBER
  6  )
  7  /

Table created.

SQL> 
SQL> CREATE TABLE wlm_violation_stream
  2  (
  3     timestamp         DATE,
  4     serverpool        VARCHAR2(4000),
  5     violation         VARCHAR2(4000)
  6  )
  7  /

Table created.

SQL> 
SQL> CREATE TABLE wlm_feature_usage
  2  (
  3     timestamp           TIMESTAMP,
  4     modebtime           TIMESTAMP,
  5     curmode             NUMBER,
  6     prevmode            NUMBER,
  7     maxpc               NUMBER,
  8     curnumpc            NUMBER,
  9     managed             NUMBER,
 10     measureonly         NUMBER,
 11     monitor             NUMBER,
 12     managed_cumtime     INTERVAL DAY(9) to SECOND(0),
 13     measureonly_cumtime INTERVAL DAY(9) to SECOND(0),
 14     monitor_cumtime     INTERVAL DAY(9) to SECOND(0),
 15     used                NUMBER,
 16     stats1              NUMBER,
 17     stats2              NUMBER,
 18     stats3              NUMBER,
 19     feature_info        VARCHAR2(4000)
 20  )
 21  /

Table created.

SQL> 
SQL> Rem Allow the EM Agent access to this table for PSM alert purposes
SQL> CREATE OR REPLACE PUBLIC SYNONYM WLM_METRICS_STREAM
  2    FOR APPQOSSYS.WLM_METRICS_STREAM;

Synonym created.

SQL> GRANT SELECT ON APPQOSSYS.wlm_metrics_stream TO DBSNMP;

Grant succeeded.

SQL> 
SQL> Rem Allow the EM Agent access to WLM_CLASSIFIER_PLAN
SQL> CREATE OR REPLACE PUBLIC SYNONYM WLM_CLASSIFIER_PLAN
  2    FOR APPQOSSYS.WLM_CLASSIFIER_PLAN;

Synonym created.

SQL> GRANT SELECT ON APPQOSSYS.wlm_classifier_plan TO DBSNMP;

Grant succeeded.

SQL> 
SQL> Rem Allow the EM Agent access to this table for alert purposes
SQL> CREATE OR REPLACE PUBLIC SYNONYM WLM_MPA_STREAM
  2    FOR APPQOSSYS.WLM_MPA_STREAM;

Synonym created.

SQL> GRANT SELECT ON APPQOSSYS.wlm_mpa_stream TO DBSNMP;

Grant succeeded.

SQL> 
SQL> Rem Allow the EM Agent access to this table for alert purposes
SQL> CREATE OR REPLACE PUBLIC SYNONYM WLM_VIOLATION_STREAM
  2    FOR APPQOSSYS.WLM_VIOLATION_STREAM;

Synonym created.

SQL> GRANT SELECT ON APPQOSSYS.wlm_violation_stream TO DBSNMP;

Grant succeeded.

SQL> 
SQL> CREATE SYNONYM DBMS_WLM FOR SYS.DBMS_WLM;

Synonym created.

SQL> 
SQL> ALTER SESSION SET CURRENT_SCHEMA = SYS;

Session altered.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem describe utility (used by mod_plsql)
SQL> Rem
SQL> @@wpiutil.sql
SQL> Rem
SQL> Rem $Header: plsql/admin/wpiutil.sql /main/5 2017/10/27 14:10:48 lvbcheng Exp $
SQL> Rem
SQL> Rem wpiutil.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2017, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      wpiutil.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: plsql/admin/wpiutil.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/wpiutl.sql
SQL> Rem SQL_PHASE: WPIUTIL
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    lvbcheng    10/12/17 - 26148849
SQL> Rem    nle         02/09/01 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> create or replace package sys.wpiutl as
  2    pragma deprecate (wpiutl);
  3    TYPE tvarchar IS table of varchar2(512) index by binary_integer;
  4    TYPE tvchar3 IS table of VARCHAR2(3) index by binary_integer;
  5    SUBTYPE ptnod IS pidl.ptnod;
  6  
  7    -- Constant for errors
  8    s_ok CONSTANT NUMBER := 0;            -- successful
  9    s_subpnotfound CONSTANT NUMBER := 1;  -- subprogram NOT found
 10    s_notinpackage CONSTANT NUMBER := 2;  -- PACKAGE found, proc NOT found
 11    s_notasub CONSTANT NUMBER := 3;       -- found, but not a subprog
 12    s_notunique CONSTANT NUMBER := 4;     -- too many matches (overloading error)
 13    s_nomatch CONSTANT NUMBER := 5;       -- found, but param names not matched
 14    s_typenotmatch CONSTANT NUMBER := 6;  -- name match, type doesn't match
 15  
 16    -- The following t_ constants can NOT exceed 999
 17    t_scalar  CONSTANT CHAR(3) := '000';
 18    t_v7array CONSTANT CHAR(3) := '001';
 19  
 20    -- subpparam:
 21    --   IN:  name        name of the subprogram, package, or owner
 22    --        subname     name of subprogram if not null
 23    --        prename     name of owner if not null
 24    --        pnames      names of formal parameter
 25    --   OUT: ptnames     names of formal parameter types
 26    --        ptypes      characteristic of the types: scalar, V7_array, ...
 27    --        status      error code = s_ok           : subprogram found
 28    --                                 s_subpnotfound : not found in schema
 29    --                                 s_notinpackage : not found in package
 30    --                                 s_notasub      : found, but not a subprog
 31    --                                 s_notunique    : too many matches.
 32    --                                 s_nomatch      : found, but no match
 33    --
 34    -- This function analyzes the following types of names:
 35    --    <NAME>
 36    --    <NAME>.<SUBNAME>
 37    --    <PRENAME>.<NAME>.<SUBNAME>
 38    -- It resolves overloading subprograms by parameter names (i.e. PNAMES),
 39    -- and returns types of the parameters that are listed in pnames
 40    -- <NAME> may not be NULL while prename and subname may.
 41    --
 42    -- pnames, ptnames, and ptypes are optional.
 43    --
 44    PROCEDURE subpparam(objnum NUMBER, name VARCHAR2, subname VARCHAR2,
 45                        prename VARCHAR2, status OUT NUMBER, misdef OUT VARCHAR2,
 46                        nename OUT VARCHAR2);
 47    PROCEDURE subpparam(objnum NUMBER, name VARCHAR2, subname VARCHAR2,
 48                        prename VARCHAR2, pnames IN OUT tvarchar,
 49                        ptnames IN OUT tvarchar, ptypes IN OUT tvchar3,
 50                        status OUT NUMBER, misdef OUT VARCHAR2,
 51                        nename OUT VARCHAR2);
 52  
 53    -- This is similar to subpparam but used for flexible parameter
 54    -- Note: different from subpparam, pnames and ptypes are INput only
 55    PROCEDURE subpfparam(objnum NUMBER, name VARCHAR2, subname VARCHAR2,
 56                         prename VARCHAR2, pnames IN tvarchar,
 57                         ptnames IN OUT tvarchar, ptypes IN tvchar3,
 58                         status OUT NUMBER, misdef OUT VARCHAR2,
 59                         nename OUT VARCHAR2);
 60  end;
 61  /

Package created.

SQL> show errors;
No errors.
SQL> create or replace package body sys.wpiutl as
  2  
  3    --------------------------------
  4    -- List of private subprograms
  5    --------------------------------
  6    -- Driving the whole process
  7    PROCEDURE driver(objnum NUMBER, ownerName VARCHAR2, objname VARCHAR2,
  8                     subname VARCHAR2, pnames IN OUT tvarchar,
  9                     ptnames IN OUT tvarchar, ptypes IN OUT tvchar3,
 10                     status OUT PLS_INTEGER, misdef OUT VARCHAR2,
 11                     nename OUT VARCHAR2);
 12  
 13    -- Find subprograms and describe the parameters
 14    PROCEDURE describe(objn NUMBER, name VARCHAR2, subname VARCHAR2,
 15                       usr VARCHAR2, prefix VARCHAR2, pnames tvarchar,
 16                       ptnames IN OUT tvarchar, ptypes IN OUT tvchar3,
 17                       status OUT PLS_INTEGER, misdef OUT VARCHAR2,
 18                       nename OUT VARCHAR2);
 19    pragma interface(C, describe);  /* first entry of this package ICD */
 20  
 21    -- Normalize names
 22    FUNCTION normalname(name VARCHAR2) RETURN VARCHAR2;
 23  
 24    ------------------------------------------------------------------------
 25    --            Public suprogram implementation                         --
 26    ------------------------------------------------------------------------
 27    PROCEDURE subpparam(objnum NUMBER, name VARCHAR2, subname VARCHAR2,
 28                        prename VARCHAR2, status OUT NUMBER, misdef OUT VARCHAR2,
 29                        nename OUT VARCHAR2) IS
 30      pnames tvarchar;
 31      ptnames tvarchar;
 32      ptypes tvchar3;
 33    BEGIN
 34      driver(objnum, prename, name, subname, pnames, ptnames, ptypes,
 35             status, misdef, nename);
 36    END;
 37  
 38    PROCEDURE subpparam(objnum NUMBER, name VARCHAR2, subname VARCHAR2,
 39                        prename VARCHAR2, pnames IN OUT tvarchar,
 40                        ptnames IN OUT tvarchar, ptypes IN OUT tvchar3,
 41                        status OUT NUMBER, misdef OUT VARCHAR2,
 42                        nename OUT VARCHAR2) IS
 43    BEGIN
 44      driver(objnum, prename, name, subname, pnames, ptnames, ptypes,
 45             status, misdef, nename);
 46    END;
 47  
 48    PROCEDURE subpfparam(objnum NUMBER, name VARCHAR2, subname VARCHAR2,
 49                         prename VARCHAR2, pnames IN tvarchar,
 50                         ptnames IN OUT tvarchar, ptypes IN tvchar3,
 51                         status OUT NUMBER, misdef OUT VARCHAR2,
 52                         nename OUT VARCHAR2) IS
 53      vpnames tvarchar;
 54      vptypes tvchar3;
 55      tmisdef VARCHAR2(4096);
 56      tnename VARCHAR2(4096);
 57      tstatus PLS_INTEGER;
 58    BEGIN
 59      vpnames(1) := pnames(2);
 60      vpnames(2) := pnames(3);
 61      vptypes(1) := ptypes(2);
 62      vptypes(2) := ptypes(3);
 63  
 64      driver(objnum, prename, name, subname, vpnames, ptnames, vptypes,
 65             status, tmisdef, tnename);
 66  
 67      IF (status != s_ok) THEN
 68        vpnames := pnames;
 69        vptypes := ptypes;
 70        driver(objnum, prename, name, subname, vpnames, ptnames, vptypes,
 71               tstatus, tmisdef, tnename);
 72        IF (tstatus = s_ok) THEN
 73          status := tstatus;
 74          misdef := NULL;
 75          nename := NULL;
 76        END IF;
 77      END IF;
 78    END;
 79  
 80  
 81    ------------------------------------------------------------------------
 82    --                                                                    --
 83    --      Private subprogram implementation                             --
 84    --                                                                    --
 85    ------------------------------------------------------------------------
 86    PROCEDURE driver(objnum NUMBER, ownerName VARCHAR2, objname VARCHAR2,
 87                     subname VARCHAR2, pnames IN OUT tvarchar,
 88                     ptnames IN OUT tvarchar, ptypes IN OUT tvchar3,
 89                     status OUT PLS_INTEGER, misdef OUT VARCHAR2,
 90                     nename OUT VARCHAR2) IS
 91  
 92      -- prefix string. This prefix string is computed here and later used
 93      -- to compute the fully elaborated name. It is not used for name
 94      -- resolution.
 95      prefix dbms_quoted_id := null;
 96  
 97    BEGIN
 98  
 99      -- bug 26148849:
100      -- In this bug fix, the dependency on the user builtin has been removed
101      -- and prefix is now always ownerName followed by a '.' if ownerName is
102      -- not a NULL string.
103      if(ownerName is not null) then
104        prefix := ownerName || '.';
105      end if;
106  
107      -- Normalize name before comparison
108      FOR i IN 1..pnames.count LOOP
109        pnames(i) := normalname(pnames(i));
110      END LOOP;
111  
112      describe(objnum, objname, subname, ownerName, prefix,
113               pnames, ptnames, ptypes, status, misdef, nename);
114    END driver;
115  
116    -----------------------
117    -- normalname: RETURN a normalized name.
118    -----------------------
119    FUNCTION normalname(name VARCHAR2) RETURN VARCHAR2 IS
120      firstchar VARCHAR2(4);
121      len NUMBER;
122    BEGIN
123      IF (name IS NULL OR name = '') THEN RETURN name; END IF;
124      firstchar := substr(name, 1, 1);
125      IF (firstchar = '"') THEN
126        len := length(name);
127        IF (len > 1 AND substr(name, len, 1) = '"') THEN
128          IF (len > ORA_MAX_NAME_LEN+3) THEN --input name length>max quoted id+1
129            len := ORA_MAX_NAME_LEN+1; -- truncate name length to max id length+1
130          ELSE
131            len := len-2;
132          END IF;
133          RETURN substr(name, 2, len);  -- return name without quotes
134        END IF;
135      END IF;
136      RETURN upper(name);
137    END normalname;
138  
139  end;
140  /

Package body created.

SQL> grant execute on sys.wpiutl to public
  2  /

Grant succeeded.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem embedded plsql gateway/owa packages
SQL> Rem
SQL> @@owainst.sql
SQL> Rem
SQL> Rem $Header: wwg_src_1/admin/owa/owainst.sql /main/34 2017/02/16 09:45:11 cvanes Exp $
SQL> Rem
SQL> Rem owainst.sql
SQL> Rem
SQL> Rem Copyright (c) 2001, 2017, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      owainst.sql - OWA pkg installation script
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This file is a driver file that installs the OWA packages
SQL> Rem      bundled with the database.  If you are directly invoking
SQL> Rem      the script you must run this script as SYS.
SQL> Rem
SQL> Rem      Note: this script also gets used during upgrades.
SQL> Rem      If the OWA packages already loaded in the database (if any)
SQL> Rem      are more recent (based on OWA_UTIL.get_version() value),
SQL> Rem      then this script will not reload the shipped OWA packages.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This script can automatically install OWA packages in databases
SQL> Rem      version 8.0.x and higher and is normally invoked via owaload.sql
SQL> Rem      Here is what the script does
SQL> Rem      - For 9.0.x and above, installs owacomm.sql
SQL> Rem      - For 8.1.x and above, installs wpiutl.sql and owacomm8i.sql
SQL> Rem      - For 8.0.x and above, installs wpiutl.sql and owacomm8.sql
SQL> Rem      To install the OWA packages in a 7.x database (not certified,
SQL> Rem      but should work), manually install wpiutl7.sql and owacomm7.sql
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    cvanes      01/17/17 - 23633556 Bump the version number 11.2.0.0.1
SQL> Rem    cvanes      01/23/12 - 13619141 Bump main version to 11.2.0.0.0
SQL> Rem    cvanes      06/14/11 - Bump version number to 10.1.2.2.0
SQL> Rem    cvanes      05/31/11 - 12607131: Update version number to 10.1.2.0.10
SQL> Rem    mmuppago    04/07/09 - bumping up ship version
SQL> Rem    aimmanue    01/24/08 - Bump up the version
SQL> Rem    pkapasi     01/04/08 - Support db > 10.2.x only - bug#6160589
SQL> Rem    pkapasi     11/03/06 - Bump up owa version for next release
SQL> Rem    pkapasi     10/12/06 - Increment version number
SQL> Rem    mmuppago    04/27/06 - bumping up ship version
SQL> Rem    mmuppago    03/21/06 - bumping up ship version
SQL> Rem    mmuppago    11/01/05 - fix: 3434804 - OWA packages should not
SQL> Rem                           overwrite customers OWA_CUSTOM packages
SQL> Rem    mmuppago    10/03/05 - Bump up the version
SQL> Rem    ehlee       04/25/05 - Bump up version
SQL> Rem    ehlee       09/02/04 - Bump up version
SQL> Rem    dnonkin     09/01/04 - Bump up version
SQL> Rem    pkapasi     11/27/03 - Bump up version
SQL> Rem    pkapasi     05/29/03 - Fix bugs and bump up version
SQL> Rem    ehlee       11/01/02 - Bump up version
SQL> Rem    ehlee       10/31/02 - Bump up version
SQL> Rem    pkapasi     10/09/02 - Bump up version
SQL> Rem    pkapasi     08/07/02 - Bump up version
SQL> Rem    ehlee       06/10/02 - Bump up version
SQL> Rem    ehlee       12/03/01 - Bump up version
SQL> Rem    ehlee       10/15/01 - Bump up version
SQL> Rem    pkapasi     09/21/01 - Bump up version
SQL> Rem    skwong      08/20/01 - Add owacomm8i.sql for 8i.
SQL> Rem    pkapasi     08/02/01 - Remove recompile of owa_util. causes invalidations
SQL> Rem    ehlee       07/11/01 - Change version to 3.0.0.0.6
SQL> Rem    pkapasi     06/14/01 - Change script to work for all 8.x databases
SQL> Rem    pkapasi     06/12/01 - Cleanup logic to figure which file is installed
SQL> Rem    pkapasi     06/12/01 - Add logic to install based on database version
SQL> Rem    kmuthukk    04/27/01 - version check based OWA pkg install
SQL> Rem    kmuthukk    04/27/01 - Created
SQL> Rem
SQL> 
SQL> variable owa_file_name   varchar2(200);
SQL> variable privcust_file   varchar2(200);
SQL> variable pubcust_file    varchar2(200);
SQL> variable owa_dbg_msg     varchar2(1000);
SQL> variable db_version      number;
SQL> 
SQL> 
SQL> Rem
SQL> Rem always initialize owa_file_name to some dummy value.
SQL> Rem
SQL> begin :owa_file_name := 'dummy_value'; end;
  2  /

PL/SQL procedure successfully completed.

SQL> begin :privcust_file := 'owadummy.sql'; end;
  2  /

PL/SQL procedure successfully completed.

SQL> begin :pubcust_file := 'owadummy.sql'; end;
  2  /

PL/SQL procedure successfully completed.

SQL> 
SQL> DECLARE
  2    /*
  3     * This next line must be updated whenever
  4     * OWA_UTIL.owa_version is updated.
  5     */
  6    shipped_owa_version    VARCHAR2(80) := '11.2.0.0.1';
  7    installed_owa_version  VARCHAR2(80);
  8    db_version_str         VARCHAR2(32);
  9    db_comp_version_str    VARCHAR2(32);
 10    new_line               VARCHAR2(4)  := '
 11  ';
 12    install_pkgs           BOOLEAN;
 13    is_supported_db_ver    boolean;
 14  
 15    -- procedure executes a DDL and ignores errors if any.
 16    PROCEDURE execute_ddl(ddl_statement VARCHAR2) IS
 17      ddl_cursor INTEGER;
 18    BEGIN
 19      -- try to execute DDL
 20      ddl_cursor := dbms_sql.open_cursor;
 21  
 22      -- issue the DDL statement
 23      dbms_sql.parse (ddl_cursor, ddl_statement, dbms_sql.native);
 24      dbms_sql.close_cursor (ddl_cursor);
 25    EXCEPTION
 26      -- ignore exceptions
 27      when others then
 28        if (dbms_sql.is_open(ddl_cursor)) then
 29          dbms_sql.close_cursor(ddl_cursor);
 30        end if;
 31    END;
 32  
 33   --
 34   -- takes a string of the form 'num1.num2.num3.....'
 35   -- returns "num1" AND updates string to 'num2.num3...'
 36   --
 37   FUNCTION get_next_int_and_advance(str IN OUT varchar2)
 38        RETURN PLS_INTEGER is
 39    loc pls_integer;
 40    ans pls_integer;
 41   BEGIN
 42    loc := instr(str, '.', 1);
 43    if (loc > 0) then
 44     ans := to_number(substr(str, 1, loc - 1));
 45     str := substr(str, loc + 1, length(str) - loc);
 46    else
 47     ans := to_number(str);
 48     str := '';
 49    end if;
 50    return ans;
 51   END;
 52  
 53   --
 54   -- Determines the database version and returns a number like 80500, 81700 etc
 55   --
 56   FUNCTION get_db_version
 57        RETURN NUMBER is
 58      ans            NUMBER;
 59      l_version      VARCHAR2(32);
 60      l_comp_version VARCHAR2(32);
 61   BEGIN
 62     -- Get the version of the backend database
 63     dbms_utility.db_version(l_version, l_comp_version);
 64  
 65     -- Convert string to a number
 66     ans := 0;
 67     FOR i in 1..5 LOOP
 68       ans := 10 * ans + get_next_int_and_advance(l_version);
 69     END LOOP;
 70  
 71     RETURN ans;
 72  
 73   END;
 74  
 75    --
 76    -- If shipped version of OWA packages is higher than the
 77    -- pre-installed version of the OWA packages, then
 78    -- we need to reinstall the OWA packages.
 79    --
 80    FUNCTION needs_reinstall(shipped_owa_version   IN VARCHAR2,
 81                             installed_owa_version IN VARCHAR2)
 82          RETURN BOOLEAN is
 83  
 84       shp_str VARCHAR2(80) := shipped_owa_version;
 85       shp_vsn PLS_INTEGER;
 86       ins_str VARCHAR2(80) := installed_owa_version;
 87       ins_vsn PLS_INTEGER;
 88  
 89    BEGIN
 90      --
 91      -- either OWA pkgs are not already installed (as can happen
 92      -- with a new DB) or an older version of the pkg is installed
 93      -- where version numbering was not implemented.
 94      --
 95      IF (installed_owa_version is NULL) THEN
 96        return TRUE;
 97      END IF;
 98  
 99      -- If version is the same, then we don't install it again to avoid
100      -- recompiling all dependent packages.
101      --
102      IF (installed_owa_version = shipped_owa_version) THEN
103        return FALSE;
104      END IF;
105  
106      --
107      -- Check if shipped version is higher.
108      --
109      -- The OWA_UTIL version number format is V1.V2.V3.V4.V5.
110      -- Lets compare versions by comparing Vi's from left to right.
111      --
112      FOR i in 1..5 LOOP
113  
114       -- parse "shipped_version" one int at a time, from L to R
115       shp_vsn := get_next_int_and_advance(shp_str);
116  
117       -- parse "installed_version" one int at a time, from L to R
118       ins_vsn := get_next_int_and_advance(ins_str);
119  
120       IF (shp_vsn > ins_vsn) THEN
121         return TRUE;
122       END IF;
123  
124       IF (shp_vsn < ins_vsn) THEN
125         return FALSE;
126       END IF;
127  
128      END LOOP;
129  
130      --
131      -- Should never come here. Return TRUE in this case as well.
132      --
133      RETURN TRUE;
134    END;
135  
136    FUNCTION get_installed_owa_version RETURN VARCHAR2 IS
137      owa_version VARCHAR2(80);
138      l_cursor    INTEGER;
139      l_stmt      VARCHAR2(256);
140      l_status    INTEGER;
141    BEGIN
142  
143      --
144      -- Run this block via dynamic SQL and not static SQL
145      -- because compilation of this block could fail as OWA_UTIL
146      -- might be non-existant. Doing it from dynamic SQL allows
147      -- us to catch the compile error as a run-time exception
148      -- and proceed.
149      --
150      l_stmt := 'select OWA_UTIL.get_version from dual';
151      l_cursor := dbms_sql.open_cursor;
152      dbms_sql.parse(l_cursor, l_stmt, dbms_sql.native);
153      dbms_sql.define_column( l_cursor, 1, owa_version, 80 );
154      l_status := dbms_sql.execute(l_cursor);
155  
156      loop
157         if dbms_sql.fetch_rows (l_cursor) > 0 then
158            dbms_sql.column_value(l_cursor, 1, owa_version);
159         else
160            exit;
161         end if;
162      end loop;
163      dbms_sql.close_cursor(l_cursor);
164  
165      return owa_version;
166  
167    EXCEPTION
168      --
169      -- Either OWA pkgs have not been preinstalled
170      -- Or, they are older set of OWA pkgs which
171      -- a.) did not implement the OWA_UTIL.get_version method
172      -- b.) resulted in ORA-6571 : ignore it
173      --
174      WHEN OTHERS THEN
175       if dbms_sql.is_open(l_cursor) then
176           dbms_sql.close_cursor(l_cursor);
177       end if;
178       return NULL;
179    END;
180  
181  BEGIN
182  
183   -- Get the version of OWA packages installed in the database
184   installed_owa_version := get_installed_owa_version;
185  
186   -- Get the version of the backend database
187   dbms_utility.db_version(db_version_str, db_comp_version_str);
188  
189   -- Format a message for display
190   IF (installed_owa_version is NULL) THEN
191      :owa_dbg_msg := 'No older OWA packages detected or OWA packages too old';
192      :pubcust_file := 'pubcust.sql';
193      :privcust_file := 'privcust.sql';
194   ELSE
195      :owa_dbg_msg := 'Installed OWA version is: ' || installed_owa_version;
196   END IF;
197   :owa_dbg_msg := :owa_dbg_msg || ';' || new_line ||
198                    'Shipped OWA version is  : ' || shipped_owa_version || ';';
199  
200   -- Get the version of the backend database in number format
201   :db_version := get_db_version;
202  
203   -- Check if we have the right DB version (10.2.x or higher => needed for bug#6160589)
204   if (:db_version < 102000) then
205       is_supported_db_ver := false;
206   else
207       is_supported_db_ver := true;
208   end if;
209  
210   -- Proceed with the install
211   if (is_supported_db_ver) then
212       -- Check if we need to install the OWA packages?
213       install_pkgs := needs_reinstall(shipped_owa_version, installed_owa_version);
214  
215       IF (install_pkgs) THEN
216  
217         -- Setup the debug message
218         :owa_dbg_msg := :owa_dbg_msg || new_line ||
219                     'OWA version ' || shipped_owa_version ||
220                     ' will be installed into your Oracle ' ||
221                     db_version_str || ' database';
222  
223         -- Dealing with 10.2.x and above
224         :owa_file_name := 'owacomm.sql';
225  
226         :owa_dbg_msg := :owa_dbg_msg || new_line || 'Will install ' ||
227                     :owa_file_name;
228  
229       ELSE
230         :owa_file_name := 'owadummy.sql';
231         :owa_dbg_msg := :owa_dbg_msg || new_line ||
232                     'You already have a newer version of the OWA packages' ||
233                     new_line || 'No install is required';
234       END IF;
235  
236   else
237       -- DB version is not right, print message and exit
238       :owa_dbg_msg := :owa_dbg_msg || new_line ||
239           'OWA version ' || shipped_owa_version ||
240           ' requires the database version to be at least 10.2.x.' ||
241           ' Your Oracle database version is ' || db_version_str ||
242           ', OWA packages will not be installed.';
243       :owa_file_name := 'owadummy.sql';
244   end if;
245  END;
246  /

PL/SQL procedure successfully completed.

SQL> 
SQL> print :owa_dbg_msg;

OWA_DBG_MSG
--------------------------------------------------------------------------------
No older OWA packages detected or OWA packages too old;
Shipped OWA version is  : 11.2.0.0.1;
OWA version 11.2.0.0.1 will be installed into your Oracle 19.0.0.0.0 database
Will install owacomm.sql


SQL> 
SQL> COLUMN :owa_file_name NEW_VALUE owa_file_var NOPRINT;
SQL> SELECT :owa_file_name FROM DUAL;




1 row selected.

SQL> COLUMN :pubcust_file NEW_VALUE pubcust_var NOPRINT;
SQL> SELECT :pubcust_file FROM DUAL;




1 row selected.

SQL> COLUMN :privcust_file NEW_VALUE privcust_var NOPRINT;
SQL> SELECT :privcust_file FROM DUAL;




1 row selected.

SQL> 
SQL> alter session set events '10520 trace name context forever, level 10';

Session altered.

SQL> @@&pubcust_var;
SQL> Rem  Copyright (c) 1995, 1996, 1997 by Oracle Corp.  All Rights Reserved.
SQL> Rem
SQL> Rem   NAME
SQL> Rem     pubcust.sql - Oracle Web Agent PL/SQL customization package.
SQL> Rem   PURPOSE
SQL> Rem     Set up some values to be used by Web Agent packages.
SQL> Rem   NOTES
SQL> Rem
SQL> Rem   HISTORY
SQL> Rem     mpal   07/09/97 -  Creation
SQL> Rem
SQL> 
SQL> create or replace package OWA_CUSTOM is
  2  
  3     -- If your timezone is not in the list of standard timezones,
  4     -- then use dbms_server_gmtdiff to give the number of hours
  5     -- that your database server is ahead (or negative if behind)
  6     -- Greenwich Mean Time
  7     dbms_server_timezone constant varchar2(3) := 'PST';
  8     dbms_server_gmtdiff  constant number      := NULL;
  9  
 10         /************************************************************************/
 11        /*  Global PLSQL Agent Authorization callback function -                */
 12       /*     it is used when PLSQL Agent's authorization scheme is set to     */
 13      /*      GLOBAL or CUSTOM when there is no overriding OWA_CUSTOM package */
 14     /************************************************************************/
 15     function authorize return boolean;
 16  
 17  end;
 18  /

Package created.

SQL> show errors
No errors.
SQL> @@&owa_file_var;
SQL> Rem Copyright (c) 1995, 2009, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem   NAME
SQL> Rem     owacomm.sql - PL/SQL Gateway package installation
SQL> Rem   PURPOSE
SQL> Rem     Install the PL/SQL packages needed to run the PL/SQL
SQL> Rem     gateway for 8.x and beyond databases.
SQL> Rem   NOTES
SQL> Rem     This script installs the PL/SQL gateway toolkit
SQL> Rem     packages (such as HTP/HTP/OWA_UTIL, WPG_DOCLOAD etc.)
SQL> Rem     it should be called BY a driver script such AS owaload.sql
SQL> Rem   IMPORTANT
SQL> Rem     Please keep this file as generic as possible. This file must be
SQL> Rem     able to run in both SQLPLUS and SVRMGRL
SQL> Rem   history
SQL> Rem     ehanks     01/18/08 -  Changing "grant all" to "grant execute" for
SQL> Rem                            security bug #6596784.
SQL> Rem     mmuppago   11/01/05 -  removed call to pubcust.sql and privcust.sql(bug#3434804)
SQL> Rem                            OWA packages should not overwrite customers OWA_CUSTOM packages
SQL> Rem     dnonkin    08/31/04 -  removed call to owadins.sql
SQL> Rem     pkapasi    06/17/01 -  Add support for EBCDIC databases(bug#1778693)
SQL> Rem     ehlee      03/14/01 -  split handle 8.0.x databases to owacomm8.sql
SQL> Rem     ehlee      12/26/00 -  handle 8.0.x databases
SQL> Rem     rdecker    07/21/00 -  split synonym handling INTO NEW files
SQL> Rem     ehlee      05/05/00 -  fixing spelling error for "package"
SQL> Rem     ehlee      05/05/00 -  add owa_cache
SQL> Rem     rdecker    04/20/00 -  split off FROM owaload.sql
SQL> Rem
SQL> 
SQL> prompt In owacomm.sql
In owacomm.sql
SQL> 
SQL> whenever sqlerror exit sql.sqlcode
SQL> 
SQL> Prompt Revoking the debug privileges
Revoking the debug privileges
SQL> 
SQL> declare
  2     l_privilege varchar2(10) := 'DEBUG';
  3     l_owner varchar2(10) := 'PUBLIC';
  4  
  5     /**
  6      * Revokes the debug privilege on specific packages
  7      * for which excess privileges were granted
  8      * incorrectly in earlier releases.
  9      **/
 10     procedure revoke_privileges
 11      (
 12           p_privilege      in varchar2,
 13           p_user           in varchar2
 14      )
 15      is
 16          object_name dba_tab_privs.table_name%type := null;
 17  
 18          -- Fetch all the specific objects
 19          -- for which the user has the privilege.
 20          -- Here we are revoking privileges on precise objects for which
 21          -- privileges were granted incorrectly in earlier releases through
 22          -- the scripts owacomm.sql and privcust.sql.
 23          -- This cursor will be invoked using the
 24          -- 'Debug' Privilege and 'Public' user.
 25  
 26  
 27          cursor  object_prv (p_privilege IN varchar2 ,p_user IN varchar2)
 28            is select table_name from dba_tab_privs,
 29           dba_objects where privilege=p_privilege
 30           and grantee = p_user and table_name =
 31           object_name and object_type ='PACKAGE'
 32           and dba_objects.OWNER ='SYS'
 33           and dba_objects.OWNER = dba_tab_privs.OWNER
 34           and object_name in
 35           ('OWA_CUSTOM','OWA', 'HTF',
 36            'HTP','OWA_COOKIE','OWA_IMAGE',
 37            'OWA_OPT_LOCK','OWA_PATTERN','OWA_SEC',
 38            'OWA_TEXT','OWA_UTIL','OWA_CACHE','OWA_MATCH');
 39  
 40           l_revoke_cmd varchar2(4000);
 41  
 42      begin
 43  
 44           -- Execute the query for fetching
 45           -- the objects for which the user has privilege.
 46           open object_prv (p_privilege,p_user);
 47  
 48           -- Loop through the objects on which
 49           -- the user has the privilege and
 50           -- revoke the privilege.
 51  
 52           loop
 53              fetch object_prv into object_name;
 54              exit when object_prv%NOTFOUND;
 55  
 56              -- Execute the revoke privilege command
 57              l_revoke_cmd := 'Revoke ' ||  p_privilege || ' on ' || object_name
 58                          || ' from ' ||  p_user;
 59              dbms_output.put_line ('Revoking privilege on ' || object_name);
 60  
 61              execute immediate l_revoke_cmd ;
 62           end loop;
 63  
 64           -- Close the cursor.
 65           close object_prv;
 66     exception
 67         when others then
 68             dbms_output.put_line
 69                 ('ERROR: owacomm.sql while revoking the  privilege on '
 70                   ||  object_name );
 71             dbms_output.put_line(sqlerrm );
 72  
 73             if object_prv%isopen then
 74              close object_prv;
 75             end if;
 76  
 77             raise;
 78     end revoke_privileges;
 79  
 80     /**
 81      * Returns true if the user has
 82      * privilege on specific packages for which
 83      * excess privilege was granted incorrectly
 84      * during earlier releases.
 85      * False otherwise.
 86      */
 87  
 88     function has_privilege
 89      (
 90           p_privilege      in varchar2,
 91           p_user           in varchar2
 92      )
 93      return boolean
 94      is
 95          l_count number := null;
 96  
 97          -- Fetch the count of objects (precise packages)
 98          -- for which the user has the privilege.
 99          -- This cursor will be invoked using the
100          -- 'Debug' Privilege and 'Public' user.
101          -- So this fetches the count of precise packages for which
102          -- the public user has debug privileges that were
103          -- incorrectly granted in earlier releases.
104  
105          cursor  object_prv (p_privilege IN varchar2 ,p_user IN varchar2)
106            is select count(1) from dba_tab_privs,
107           dba_objects where privilege = p_privilege
108           and grantee = p_user and table_name =
109           object_name
110           and dba_objects.OWNER ='SYS'
111           and dba_objects.OWNER = dba_tab_privs.OWNER
112           and object_type ='PACKAGE'
113           and object_name in
114           ('OWA_CUSTOM','OWA', 'HTF',
115            'HTP','OWA_COOKIE','OWA_IMAGE',
116            'OWA_OPT_LOCK','OWA_PATTERN','OWA_SEC',
117            'OWA_TEXT','OWA_UTIL','OWA_CACHE','OWA_MATCH');
118  
119           l_has_privilege boolean := false;
120  
121      begin
122          -- Get the count of owa packages
123          -- for which the user has the privilege.
124          -- Execute the query.
125          open object_prv (p_privilege,p_user);
126  
127          -- Fetch the result.
128          fetch object_prv into l_count;
129  
130          -- Close the cursor.
131          close object_prv;
132  
133          -- Return true if there are packages
134          -- with debug privileges for public.
135          -- False otherwise.
136  
137           if l_count > 0 then
138              l_has_privilege := true;
139           end if;
140  
141           return l_has_privilege;
142  
143      exception
144         when others then
145             dbms_output.put_line
146                 ('ERROR: owacomm.sql while checking privileges.');
147             dbms_output.put_line(sqlerrm );
148  
149             if object_prv%isopen then
150                 close object_prv;
151             end if;
152             raise;
153      end has_privilege;
154  
155  begin
156  
157       /* Check if the public user has debug privileges
158        * on specific packages. Skip this step if the user
159        * doesn't have the debug privilege.
160        */
161  
162       if has_privilege(l_privilege, l_owner) then
163  
164          dbms_output.put_line ('Revoking the debug privilege from PUBLIC schema.');
165          dbms_output.put_line ('Revoking debug privilege started at ' ||
166                                   to_char(sysdate, 'dd-mon-yyyy HH:MI:SS'));
167  
168          -- Revoke the debug privileges from the public user.
169          revoke_privileges(l_privilege, l_owner);
170  
171          dbms_output.put_line ('Revoking debug privilege ended at ' ||
172                                  to_char(sysdate, 'dd-mon-yyyy HH:MI:SS'));
173  
174       else
175  
176          dbms_output.put_line ('Debug Privileges not granted for PUBLIC.' ||
177                                ' Skipping this step.');
178  
179       end if;
180  end;
181  /

PL/SQL procedure successfully completed.

SQL> 
SQL> whenever sqlerror continue
SQL> 
SQL> @@owachars.sql
SQL> Rem
SQL> Rem $Header: owachars.sql 17-jun-2001.15:46:58 pkapasi Exp $
SQL> Rem
SQL> Rem owachars.sql
SQL> Rem
SQL> Rem  Copyright (c) Oracle Corporation 2001. All Rights Reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      owachars.sql - OWA chars installation script
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This file allows OWA packages to support EBCDIC character set
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    pkapasi     08/21/01 - Fix bug#1930471
SQL> Rem    pkapasi     06/17/01 - Created (as per bug#1778693)
SQL> Rem
SQL> 
SQL> 
SQL> DECLARE
  2   l_ret    INTEGER;
  3   l_csr    INTEGER;
  4   l_nlsc   v$nls_parameters.value%type;
  5   l_str    VARCHAR2(32000);
  6  
  7  BEGIN
  8  
  9    SELECT value INTO l_nlsc FROM v$nls_parameters
 10     WHERE parameter = 'NLS_CHARACTERSET';
 11  
 12    IF l_nlsc LIKE '%EBCDIC%' THEN
 13      l_str := 'CREATE OR REPLACE PACKAGE owa_cx IS ';
 14      l_str := l_str || ' NL_CHAR CONSTANT varchar2(1) := chr(21); ';
 15      l_str := l_str || ' SP_CHAR CONSTANT varchar2(1) := chr(64); ';
 16      l_str := l_str || ' BS_CHAR CONSTANT varchar2(1) := chr(22); ';
 17      l_str := l_str || ' HT_CHAR CONSTANT varchar2(1) := chr(5); ';
 18      l_str := l_str || ' XP_CHAR CONSTANT varchar2(1) := chr(90); ';
 19      l_str := l_str || ' END owa_cx;';
 20    ELSE
 21      l_str := 'CREATE OR REPLACE PACKAGE owa_cx IS ';
 22      l_str := l_str || ' NL_CHAR CONSTANT varchar2(1) := chr(10); ';
 23      l_str := l_str || ' SP_CHAR CONSTANT varchar2(1) := chr(32); ';
 24      l_str := l_str || ' BS_CHAR CONSTANT varchar2(1) := chr(8); ';
 25      l_str := l_str || ' HT_CHAR CONSTANT varchar2(1) := chr(9); ';
 26      l_str := l_str || ' XP_CHAR CONSTANT varchar2(1) := chr(33); ';
 27      l_str := l_str || ' end owa_cx;';
 28    END IF;
 29  
 30    l_csr := dbms_sql.open_cursor;
 31    dbms_sql.parse(l_csr, l_str, dbms_sql.native);
 32    l_ret := dbms_sql.execute(l_csr);
 33    dbms_sql.close_cursor(l_csr);
 34  
 35  END;
 36  /

PL/SQL procedure successfully completed.

SQL> SHOW ERRORS;
No errors.
SQL> 
SQL> @@pubht.sql
SQL> Rem  Copyright (c) 1994, 1995, 1996, 1997 by Oracle Corp.  All rights reserved.
SQL> Rem
SQL> Rem   NAME
SQL> Rem     ht.sql - Hyper Text packages
SQL> Rem   PURPOSE
SQL> Rem     Provide utility functions for producing HTML documents
SQL> Rem     from pl/sql.
SQL> Rem   NOTES
SQL> Rem     Two sets of packages - one is all functions/constants (htf)
SQL> Rem                          - one is all procedures (htp)
SQL> Rem
SQL> Rem     A PL/SQL table of varchar2 is used to buffer output.
SQL> Rem       htp.print() buffers the output.
SQL> Rem       owa.get_page() fetches it out.
SQL> Rem
SQL> Rem     This script should be run by the intended owner of the OWA packages.
SQL> Rem   HISTORY
SQL> Rem     mmuppago   04/27/06 -  Changes to comply with XHTML req. from Portal
SQL> Rem     pkapasi    07/25/02 -  Performance fixes (2460224, 2470207, 2482024)
SQL> Rem     skwong     07/20/01 -  Add NCHAR support
SQL> Rem     skwong     07/20/01 -  Add APIs and types related to RAW transfers
SQL> Rem     pkapasi    06/12/01 -  Merge OAS specific helper functions
SQL> Rem     ehlee      05/10/00 -  Remove header reserving procedures
SQL> Rem     ehlee      05/05/00 -  Add two functions to reserve header spaces
SQL> Rem     rdasarat   11/19/98 -  Add addDefaultHTMLHdr procedure
SQL> Rem     rdasarat   10/26/98 -  Fix 735061
SQL> Rem     rdasarat   04/02/98 -  Add file upload/download functionality
SQL> Rem     rdasarat   01/14/98 -  Add pack_after variable for procedure prn
SQL> Rem     rdasarat   11/13/97 -  Add init procedure
SQL> Rem     mpal       04/23/97 -  Fix bug# #482019 - added escape_url for '%'
SQL> Rem     mpal       01/29/97 -  Fix bug# #444697 - Restore pragma references
SQL> Rem                            for anchor, anchor2, mail
SQL> Rem     rpang      01/27/97 -  Restored PRAGMA RESTRICT_REFERENCES (bug#439474)
SQL> Rem     mpal       11/15/96 -  Adding formFile procedure
SQL> Rem     mpal       11/12/96 -  Adding NLS char conversion
SQL> Rem     mpal       08/22/96 -  HTML 3.2 support
SQL> Rem     mpal       08/19/96 -  Fix Bug# 393305
SQL> Rem     mpal       06/24/96 -  Adding escape sequence support '%'
SQL> Rem     mbookman   03/04/96 -  Fixed a number of new PRAGMAs
SQL> Rem     mbookman   03/04/96 -  Re-asserted purity level for htf.base (314403)
SQL> Rem     mbookman   03/04/95 -  Change RESTRICT_REFERENCES (314398)
SQL> Rem     kireland   02/03/96 -  HTML3.0 support, Netscape Frames, Msft extensions
SQL> Rem     mbookman   07/26/95 -  Added mailto support
SQL> Rem     mbookman   05/23/95 -  Full HTML 2.0 support. Standardize names
SQL> Rem     mloennro   09/05/94 -  Creation
SQL> Rem
SQL> 
SQL> REM Creating HTF package...
SQL> create or replace package htf as
  2  
  3  /* STRUCTURE tags */
  4  /*function*/ htmlOpen          constant varchar2(7) := '<html>';
  5           /* No attributes in HTML 3.0 spec as of 6/7/95 */
  6  /*function*/ htmlClose         constant varchar2(7) := '</html>';
  7           /* No attributes in HTML 3.0 spec as of 6/7/95 */
  8  /*function*/ headOpen          constant varchar2(7) := '<head>';
  9           /* No attributes in HTML 3.0 spec as of 6/7/95 */
 10  /*function*/ headClose         constant varchar2(7) := '</head>';
 11           /* No attributes in HTML 3.0 spec as of 6/7/95 */
 12  function     bodyOpen (cbackground in varchar2 DEFAULT NULL,
 13                         cattributes in varchar2 DEFAULT NULL) return varchar2;
 14  /*function*/ bodyClose         constant varchar2(7) := '</body>';
 15           /* No attributes in HTML 3.0 spec as of 6/7/95 */
 16  /* END STRUCTURE tags */
 17  
 18  /* HEAD Related elements tags */
 19  function title(ctitle in varchar2 character set any_cs) return varchar2 character set ctitle%charset;
 20           /* No attributes in HTML 3.0 spec as of 6/7/95 */
 21  function htitle(ctitle      in varchar2 character set any_cs,
 22                  nsize       in integer  DEFAULT 1,
 23                  calign      in varchar2 DEFAULT NULL,
 24                  cnowrap     in varchar2 DEFAULT NULL,
 25                  cclear      in varchar2 DEFAULT NULL,
 26                  cattributes in varchar2 DEFAULT NULL)
 27                  return varchar2 character set ctitle%charset;
 28  function base(    ctarget in varchar2 DEFAULT NULL,
 29          cattributes in varchar2 DEFAULT NULL) return varchar2;
 30  
 31  function isindex(cprompt in varchar2 character set any_cs DEFAULT NULL,
 32                   curl    in varchar2 DEFAULT NULL)
 33                   return varchar2 character set cprompt%charset;
 34           /* No attributes in HTML 3.0 spec as of 6/7/95 */
 35  function linkRel(crel   in varchar2,
 36                   curl   in varchar2,
 37                   ctitle in varchar2 character set any_cs DEFAULT NULL)
 38                   return varchar2 character set ctitle%charset;
 39           /* No attributes in HTML 3.0 spec as of 6/7/95 */
 40  function linkRev(crev   in varchar2,
 41                   curl   in varchar2,
 42                   ctitle in varchar2 character set any_cs DEFAULT NULL)
 43                   return varchar2 character set ctitle%charset;
 44           /* No attributes in HTML 3.0 spec as of 6/7/95 */
 45  function meta(chttp_equiv in varchar2,
 46                cname       in varchar2,
 47                ccontent    in varchar2) return varchar2;
 48           /* No attributes in HTML 3.0 spec as of 6/7/95 */
 49  function nextid(cidentifier in varchar2) return varchar2;
 50           /* No attributes in HTML 3.0 spec as of 6/7/95 */
 51  
 52  function style(cstyle in varchar2 character set any_cs)
 53                return varchar2 character set cstyle%charset;
 54       /* No attributes in HTML 3.2 spec as of 8/22/96 */
 55  function script(cscript in varchar2,
 56          clanguage in varchar2 DEFAULT NULL) return varchar2;
 57  
 58  /* END HEAD Related elements tags */
 59  
 60  /* BODY ELEMENT tags */
 61  function hr  (cclear      in varchar2 DEFAULT NULL,
 62                csrc        in varchar2 DEFAULT NULL,
 63                cattributes in varchar2 DEFAULT NULL) return varchar2;
 64  function line(cclear      in varchar2 DEFAULT NULL,
 65                csrc        in varchar2 DEFAULT NULL,
 66                cattributes in varchar2 DEFAULT NULL) return varchar2;
 67  function br(cclear      in varchar2 DEFAULT NULL,
 68              cattributes in varchar2 DEFAULT NULL) return varchar2;
 69  function nl(cclear      in varchar2 DEFAULT NULL,
 70              cattributes in varchar2 DEFAULT NULL) return varchar2;
 71  
 72  function header(nsize   in integer,
 73                  cheader in varchar2 character set any_cs,
 74                  calign  in varchar2 DEFAULT NULL,
 75                  cnowrap in varchar2 DEFAULT NULL,
 76                  cclear  in varchar2 DEFAULT NULL,
 77                  cattributes in varchar2 DEFAULT NULL)
 78                  return varchar2 character set cheader%charset;
 79  
 80  function anchor(curl        in varchar2,
 81                  ctext       in varchar2 character set any_cs,
 82                  cname       in varchar2 character set any_cs DEFAULT NULL,
 83                  cattributes in varchar2 DEFAULT NULL)
 84                  return varchar2 character set ctext%charset;
 85  
 86  function anchor2(curl        in varchar2,
 87                  ctext       in varchar2 character set any_cs,
 88                  cname       in varchar2 character set any_cs DEFAULT NULL,
 89          ctarget        in varchar2 DEFAULT NULL,
 90                  cattributes in varchar2 DEFAULT NULL)
 91                  return varchar2 character set ctext%charset;
 92  
 93  function mailto(caddress    in varchar2,
 94                  ctext       in varchar2 character set any_cs,
 95                  cname       in varchar2 character set any_cs DEFAULT NULL,
 96                  cattributes in varchar2 DEFAULT NULL)
 97                  return varchar2 character set ctext%charset;
 98  
 99  function img(curl        in varchar2,
100               calign      in varchar2 DEFAULT NULL,
101               calt        in varchar2 DEFAULT NULL,
102               cismap      in varchar2 DEFAULT NULL,
103               cattributes in varchar2 DEFAULT NULL) return varchar2;
104  function img2(curl        in varchar2,
105               calign      in varchar2 DEFAULT NULL,
106               calt        in varchar2 DEFAULT NULL,
107               cismap      in varchar2 DEFAULT NULL,
108            cusemap     in varchar2 DEFAULT NULL,
109               cattributes in varchar2 DEFAULT NULL) return varchar2;
110  
111  function area(    ccoords    in varchar2,
112                   cshape    in varchar2 DEFAULT NULL,
113                   chref    in varchar2 DEFAULT NULL,
114                   cnohref    in varchar2 DEFAULT NULL,
115          ctarget in varchar2 DEFAULT NULL,
116          cattributes in varchar2 DEFAULT NULL) return varchar2;
117  
118  function mapOpen(cname    in varchar2,
119           cattributes in varchar2 DEFAULT NULL) return varchar2;
120  /*function*/ mapClose    constant varchar2(6) := '</map>';
121  
122  function bgsound(csrc    in varchar2,
123           cloop     in varchar2 DEFAULT NULL,
124           cattributes in varchar2 DEFAULT NULL) return varchar2;
125  
126  
127  /*function*/ para              constant varchar2(3) := '<p>';
128  function paragraph(calign       in varchar2 DEFAULT NULL,
129                     cnowrap      in varchar2 DEFAULT NULL,
130                     cclear       in varchar2 DEFAULT NULL,
131                     cattributes  in varchar2 DEFAULT NULL) return varchar2;
132  function div(    calign       in varchar2 DEFAULT NULL,
133                  cattributes  in varchar2 DEFAULT NULL) return varchar2;
134  function address(cvalue       in varchar2 character set any_cs,
135                   cnowrap      in varchar2 DEFAULT NULL,
136                   cclear       in varchar2 DEFAULT NULL,
137                   cattributes  in varchar2 DEFAULT NULL)
138                   return varchar2 character set cvalue%charset;
139  function comment(ctext in varchar2 character set any_cs)
140                   return varchar2 character set ctext%charset;
141  function preOpen(cclear      in varchar2 DEFAULT NULL,
142                   cwidth      in varchar2 DEFAULT NULL,
143                   cattributes in varchar2 DEFAULT NULL) return varchar2;
144  /*function*/ preClose          constant varchar2(6) := '</pre>';
145  /*function*/ listingOpen    constant varchar2(9) := '<listing>';
146  /*function*/ listingClose    constant varchar2(10) := '</listing>';
147  
148  function nobr(ctext in varchar2 character set any_cs)
149               return varchar2 character set ctext%charset;
150  /*function*/ wbr constant varchar(5) := '<wbr>';
151  
152  function center(ctext in varchar2 character set any_cs)
153                  return varchar2 character set ctext%charset;
154  /*function*/ centerOpen    constant varchar2(8) := '<center>';
155  /*function*/ centerClose constant varchar2(9) := '</center>';
156  
157  function blockquoteOpen(cnowrap      in varchar2 DEFAULT NULL,
158                          cclear       in varchar2 DEFAULT NULL,
159                          cattributes  in varchar2 DEFAULT NULL) return varchar2;
160  /*function*/ blockquoteClose   constant varchar2(13) := '</blockquote>';
161  
162  /* LIST tags */
163  function listHeader(ctext in varchar2 character set any_cs,
164                      cattributes in varchar2 DEFAULT NULL)
165                      return varchar2 character set ctext%charset;
166  function listItem(ctext       in varchar2 character set any_cs DEFAULT NULL,
167                    cclear      in varchar2 DEFAULT NULL,
168                    cdingbat    in varchar2 DEFAULT NULL,
169                    csrc        in varchar2 DEFAULT NULL,
170                    cattributes in varchar2 DEFAULT NULL)
171                    return varchar2 character set ctext%charset;
172  function ulistOpen(cclear      in varchar2 DEFAULT NULL,
173                     cwrap       in varchar2 DEFAULT NULL,
174                     cdingbat    in varchar2 DEFAULT NULL,
175                     csrc        in varchar2 DEFAULT NULL,
176                     cattributes in varchar2 DEFAULT NULL) return varchar2;
177  /*function */ ulistClose        constant varchar2(5) := '</ul>';
178  function olistOpen(cclear      in varchar2 DEFAULT NULL,
179                     cwrap       in varchar2 DEFAULT NULL,
180                     cattributes in varchar2 DEFAULT NULL) return varchar2;
181  /*function */ olistClose        constant varchar2(5) := '</ol>';
182  function dlistOpen(cclear      in varchar2 DEFAULT NULL,
183                     cattributes in varchar2 DEFAULT NULL) return varchar2;
184  function dlistTerm(ctext       in varchar2 character set any_cs DEFAULT NULL,
185                     cclear      in varchar2 DEFAULT NULL,
186                     cattributes in varchar2 DEFAULT NULL)
187                     return varchar2 character set ctext%charset;
188  function dlistDef(ctext       in varchar2 character set any_cs DEFAULT NULL,
189                    cclear      in varchar2 DEFAULT NULL,
190                    cattributes in varchar2 DEFAULT NULL)
191                    return varchar2 character set ctext%charset;
192  /*function */ dlistClose        constant varchar2(5) := '</dl>';
193  
194  /*function */ menulistOpen      constant varchar2(6) := '<menu>';
195  /*function */ menulistClose     constant varchar2(7) := '</menu>';
196  
197  /*function */ dirlistOpen       constant varchar2(5) := '<dir>';
198  /*function */ dirlistClose      constant varchar2(6) := '</dir>';
199  /* END LIST tags */
200  
201  
202  /* SEMANTIC FORMAT ELEMENTS */
203  function dfn(ctext in varchar2 character set any_cs,
204                cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
205  function cite(ctext in varchar2 character set any_cs,
206                cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
207  function code(ctext in varchar2 character set any_cs,
208                cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
209  function em(ctext in varchar2 character set any_cs,
210              cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
211  function emphasis(ctext in varchar2 character set any_cs,
212                    cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
213  function keyboard(ctext in varchar2 character set any_cs,
214                    cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
215  function kbd(ctext in varchar2 character set any_cs,
216               cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
217  function sample(ctext in varchar2 character set any_cs,
218                  cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
219  function strong(ctext in varchar2 character set any_cs,
220                  cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
221  function variable(ctext in varchar2 character set any_cs,
222                    cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
223  function big(    ctext         in varchar2 character set any_cs,
224          cattributes     in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
225  function small(    ctext         in varchar2 character set any_cs,
226          cattributes     in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
227  function sub(    ctext         in varchar2 character set any_cs,
228          calign         in varchar2 DEFAULT NULL,
229          cattributes     in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
230  function sup(    ctext         in varchar2 character set any_cs,
231          calign        in varchar2 DEFAULT NULL,
232          cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
233  /* END SEMANTIC FORMAT ELEMENTS */
234  
235  /* PHYSICAL FORMAT ELEMENTS */
236  function basefont(    nsize in integer,
237              cattributes in varchar2 DEFAULT NULL) return varchar2;
238  function fontOpen(    ccolor     in varchar2 DEFAULT NULL,
239          cface    in varchar2 DEFAULT NULL,
240          csize    in varchar2 DEFAULT NULL,
241          cattributes in varchar2 DEFAULT NULL) return varchar2;
242  /*function*/ fontClose    constant varchar2(7) := '</font>';
243  function bold(ctext in varchar2 character set any_cs,
244                cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
245  function italic(ctext in varchar2 character set any_cs,
246                  cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
247  function teletype(ctext in varchar2 character set any_cs,
248                    cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
249  function plaintext(ctext in varchar2 character set any_cs,
250                       cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
251  function s(ctext in varchar2 character set any_cs,
252             cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
253  function strike(ctext in varchar2 character set any_cs,
254                  cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
255  
256  function underline(ctext in varchar2 character set any_cs,
257             cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset;
258  /* END PHYSICAL FORMAT ELEMENTS */
259  
260  /* HTML FORMS */
261  function formOpen(curl     in varchar2,
262                    cmethod  in varchar2 DEFAULT 'post',
263            ctarget  in varchar2 DEFAULT NULL,
264            cenctype in varchar2 DEFAULT NULL,
265            cattributes in varchar2 DEFAULT NULL) return varchar2;
266  
267  function formCheckbox(cname       in varchar2,
268                        cvalue      in varchar2 character set any_cs DEFAULT 'on',
269                        cchecked    in varchar2 DEFAULT NULL,
270                        cattributes in varchar2 DEFAULT NULL) return varchar2 character set cvalue%charset;
271  function formFile(cname       in varchar2,
272                    caccept     in varchar2 DEFAULT NULL,
273                    cattributes in varchar2 DEFAULT NULL) return varchar2;
274  function formHidden(cname       in varchar2,
275                      cvalue      in varchar2 character set any_cs DEFAULT NULL,
276                      cattributes in varchar2 DEFAULT NULL) return varchar2 character set cvalue%charset;
277  function formImage(cname       in varchar2,
278                     csrc        in varchar2,
279                     calign      in varchar2 DEFAULT NULL,
280                     cattributes in varchar2 DEFAULT NULL) return varchar2;
281  function formPassword(cname       in varchar2,
282                        csize       in varchar2 DEFAULT NULL,
283                        cmaxlength  in varchar2 DEFAULT NULL,
284                        cvalue      in varchar2 character set any_cs DEFAULT NULL,
285                        cattributes in varchar2 DEFAULT NULL) return varchar2 character set cvalue%charset;
286  function formRadio(cname       in varchar2,
287                     cvalue      in varchar2 character set any_cs,
288                     cchecked    in varchar2 DEFAULT NULL,
289                     cattributes in varchar2 DEFAULT NULL) return varchar2 character set cvalue%charset;
290  function formReset(cvalue      in varchar2 character set any_cs DEFAULT 'Reset',
291                     cattributes in varchar2 DEFAULT NULL) return varchar2 character set cvalue%charset;
292  function formSubmit(cname       in varchar2 DEFAULT NULL,
293                      cvalue      in varchar2 character set any_cs DEFAULT 'Submit',
294                      cattributes in varchar2 DEFAULT NULL) return varchar2 character set cvalue%charset;
295  function formText(cname       in varchar2,
296                    csize       in varchar2 DEFAULT NULL,
297                    cmaxlength  in varchar2 DEFAULT NULL,
298                    cvalue      in varchar2 character set any_cs DEFAULT NULL,
299                    cattributes in varchar2 DEFAULT NULL) return varchar2 character set cvalue%charset;
300  function formSelectOpen(cname       in varchar2,
301                          cprompt     in varchar2 character set any_cs DEFAULT NULL,
302                          nsize       in integer  DEFAULT NULL,
303                          cattributes in varchar2 DEFAULT NULL)
304                          return varchar2 character set cprompt%charset;
305  function formSelectOption(cvalue      in varchar2 character set any_cs,
306                            cselected   in varchar2 DEFAULT NULL,
307                            cattributes in varchar2 DEFAULT NULL)
308                            return varchar2 character set cvalue%charset;
309  /*function */ formSelectClose   constant varchar2(9) := '</select>';
310  
311  function formTextarea(cname       in varchar2,
312                        nrows       in integer,
313                        ncolumns    in integer,
314                        calign      in varchar2 DEFAULT NULL,
315                        cattributes in varchar2 DEFAULT NULL) return varchar2;
316  
317  function formTextarea2(cname       in varchar2,
318                        nrows       in integer,
319                        ncolumns    in integer,
320                        calign      in varchar2 DEFAULT NULL,
321                        cwrap       in varchar2 DEFAULT NULL,
322                        cattributes in varchar2 DEFAULT NULL) return varchar2;
323  
324  function formTextareaOpen(cname       in varchar2,
325                            nrows       in integer,
326                            ncolumns    in integer,
327                            calign      in varchar2 DEFAULT NULL,
328                            cattributes in varchar2 DEFAULT NULL) return varchar2;
329  
330  function formTextareaOpen2(cname       in varchar2,
331                            nrows       in integer,
332                            ncolumns    in integer,
333                            calign      in varchar2 DEFAULT NULL,
334                            cwrap       in varchar2 DEFAULT NULL,
335                            cattributes in varchar2 DEFAULT NULL) return varchar2;
336  
337  /*function */ formTextareaClose constant varchar2(11) := '</textarea>';
338  
339  /*function */ formClose         constant varchar2(7) := '</form>';
340  /* END HTML FORMS */
341  
342  
343  /* HTML TABLES */
344  function tableOpen(cborder     in varchar2 DEFAULT NULL,
345                     calign      in varchar2 DEFAULT NULL,
346                     cnowrap     in varchar2 DEFAULT NULL,
347                     cclear      in varchar2 DEFAULT NULL,
348                     cattributes in varchar2 DEFAULT NULL) return varchar2;
349  function tableCaption(ccaption    in varchar2 character set any_cs,
350                        calign      in varchar2 DEFAULT NULL,
351                        cattributes in varchar2 DEFAULT NULL)
352                        return varchar2 character set ccaption%charset;
353  function tableRowOpen(calign      in varchar2 DEFAULT NULL,
354                        cvalign     in varchar2 DEFAULT NULL,
355                        cdp         in varchar2 DEFAULT NULL,
356                        cnowrap     in varchar2 DEFAULT NULL,
357                        cattributes in varchar2 DEFAULT NULL) return varchar2;
358  function tableHeader(cvalue      in varchar2 character set any_cs DEFAULT NULL,
359                       calign      in varchar2 DEFAULT NULL,
360                       cdp         in varchar2 DEFAULT NULL,
361                       cnowrap     in varchar2 DEFAULT NULL,
362                       crowspan    in varchar2 DEFAULT NULL,
363                       ccolspan    in varchar2 DEFAULT NULL,
364                       cattributes in varchar2 DEFAULT NULL)
365                       return varchar2 character set cvalue%charset;
366  function tableData(cvalue      in varchar2 character set any_cs DEFAULT NULL,
367                     calign      in varchar2 DEFAULT NULL,
368                     cdp         in varchar2 DEFAULT NULL,
369                     cnowrap     in varchar2 DEFAULT NULL,
370                     crowspan    in varchar2 DEFAULT NULL,
371                     ccolspan    in varchar2 DEFAULT NULL,
372                     cattributes in varchar2 DEFAULT NULL)
373                     return varchar2 character set cvalue%charset;
374  function format_cell( columnValue in varchar2 character set any_cs,
375                        format_numbers in varchar2 default null)
376                        return varchar2 character set columnvalue%charset;
377  /*function */ tableRowClose constant varchar2(5) := '</tr>';
378  
379  /*function */ tableClose    constant varchar2(8) := '</table>';
380  /* END HTML TABLES */
381  
382  /* HTML FRAMES */
383  
384  function framesetOpen(    crows    in varchar2 DEFAULT NULL,    /* row heigh value list */
385              ccols     in varchar2 DEFAULT NULL,
386              cattributes in varchar2 DEFAULT NULL) return varchar2;    /* column width list */
387  
388  /* function */ framesetClose     constant varchar2(11) := '</frameset>';
389  
390  function frame(        csrc    in varchar2,                /* URL */
391              cname    in varchar2 DEFAULT NULL,        /* Window Name */
392              cmarginwidth     in varchar2 DEFAULT NULL,    /* Value in pixels */
393              cmarginheight    in varchar2 DEFAULT NULL,    /* Value in pixels */
394              cscrolling    in varchar2 DEFAULT NULL,    /* yes | no | auto */
395              cnoresize    in varchar2 DEFAULT NULL,
396              cattributes    in varchar2 DEFAULT NULL) return varchar2;    /* Not resizable by user */
397  
398  /* function */ noframesOpen    constant varchar2(10) := '<noframes>';
399  /* function */ noframesClose    constant varchar2(11) := '</noframes>';
400  /* END HTML FRAMES */
401  
402  /* SPECIAL HTML TAGS */
403  function appletOpen(ccode     in varchar2,
404              cwidth    in integer,
405              cheight    in integer,
406              cattributes in varchar2 DEFAULT NULL) return varchar2;
407  function param(cname     in varchar2,
408             cvalue     in varchar2 character set any_cs)
409                 return varchar2 character set cvalue%charset;
410  /*function */ appletClose    constant varchar2(9) := '</applet>';
411  /* END SPECIAL HTML TAGS */
412  
413  /* SPECIAL FUNCTIONS */
414  function escape_sc(ctext in varchar2 character set any_cs)
415                    return varchar2 character set ctext%charset;
416  function escape_url(p_url in varchar2 character set any_cs)
417                     return varchar2 character set p_url%charset;
418  /* END SPECIAL FUNCTIONS */
419  
420  /* END BODY ELEMENT tags */
421  
422  /* Assert function purities so that they can be used in select lists */
423  PRAGMA RESTRICT_REFERENCES(bodyOpen,         WNDS, WNPS, RNDS, RNPS);
424  PRAGMA RESTRICT_REFERENCES(title,            WNDS, WNPS, RNDS, RNPS);
425  PRAGMA RESTRICT_REFERENCES(htitle,           WNDS, WNPS, RNDS, RNPS);
426  PRAGMA RESTRICT_REFERENCES(base,             WNDS, WNPS, RNDS);
427  PRAGMA RESTRICT_REFERENCES(isindex,          WNDS, WNPS, RNDS, RNPS);
428  PRAGMA RESTRICT_REFERENCES(linkRel,          WNDS, WNPS, RNDS, RNPS);
429  PRAGMA RESTRICT_REFERENCES(linkRev,          WNDS, WNPS, RNDS, RNPS);
430  PRAGMA RESTRICT_REFERENCES(meta,             WNDS, WNPS, RNDS, RNPS);
431  PRAGMA RESTRICT_REFERENCES(nextid,           WNDS, WNPS, RNDS, RNPS);
432  PRAGMA RESTRICT_REFERENCES(style,            WNDS, WNPS, RNDS, RNPS);
433  PRAGMA RESTRICT_REFERENCES(script,           WNDS, WNPS, RNDS, RNPS);
434  PRAGMA RESTRICT_REFERENCES(hr,               WNDS, WNPS, RNDS, RNPS);
435  PRAGMA RESTRICT_REFERENCES(line,             WNDS, WNPS, RNDS, RNPS);
436  PRAGMA RESTRICT_REFERENCES(br,               WNDS, WNPS, RNDS, RNPS);
437  PRAGMA RESTRICT_REFERENCES(nl,               WNDS, WNPS, RNDS, RNPS);
438  PRAGMA RESTRICT_REFERENCES(header,           WNDS, WNPS, RNDS, RNPS);
439  PRAGMA RESTRICT_REFERENCES(anchor,           WNDS, WNPS, RNDS, RNPS);
440  PRAGMA RESTRICT_REFERENCES(anchor2,          WNDS, WNPS, RNDS, RNPS);
441  PRAGMA RESTRICT_REFERENCES(mailto,           WNDS, WNPS, RNDS, RNPS);
442  PRAGMA RESTRICT_REFERENCES(img,              WNDS, WNPS, RNDS, RNPS);
443  PRAGMA RESTRICT_REFERENCES(img2,              WNDS, WNPS, RNDS, RNPS);
444  PRAGMA RESTRICT_REFERENCES(mapOpen,          WNDS, WNPS, RNDS, RNPS);
445  PRAGMA RESTRICT_REFERENCES(area,             WNDS, WNPS, RNDS, RNPS);
446  PRAGMA RESTRICT_REFERENCES(bgsound,          WNDS, WNPS, RNDS, RNPS);
447  PRAGMA RESTRICT_REFERENCES(paragraph,        WNDS, WNPS, RNDS, RNPS);
448  PRAGMA RESTRICT_REFERENCES(div,                WNDS, WNPS, RNDS, RNPS);
449  PRAGMA RESTRICT_REFERENCES(address,          WNDS, WNPS, RNDS, RNPS);
450  PRAGMA RESTRICT_REFERENCES(comment,          WNDS, WNPS, RNDS, RNPS);
451  PRAGMA RESTRICT_REFERENCES(preOpen,          WNDS, WNPS, RNDS, RNPS);
452  PRAGMA RESTRICT_REFERENCES(nobr,             WNDS, WNPS, RNDS, RNPS);
453  PRAGMA RESTRICT_REFERENCES(center,           WNDS, WNPS, RNDS, RNPS);
454  PRAGMA RESTRICT_REFERENCES(blockquoteOpen,   WNDS, WNPS, RNDS, RNPS);
455  PRAGMA RESTRICT_REFERENCES(listHeader,       WNDS, WNPS, RNDS, RNPS);
456  PRAGMA RESTRICT_REFERENCES(listItem,         WNDS, WNPS, RNDS, RNPS);
457  PRAGMA RESTRICT_REFERENCES(ulistOpen,        WNDS, WNPS, RNDS, RNPS);
458  PRAGMA RESTRICT_REFERENCES(olistOpen,        WNDS, WNPS, RNDS, RNPS);
459  PRAGMA RESTRICT_REFERENCES(dlistOpen,        WNDS, WNPS, RNDS, RNPS);
460  PRAGMA RESTRICT_REFERENCES(dlistTerm,        WNDS, WNPS, RNDS, RNPS);
461  PRAGMA RESTRICT_REFERENCES(dlistDef,         WNDS, WNPS, RNDS, RNPS);
462  PRAGMA RESTRICT_REFERENCES(cite,             WNDS, WNPS, RNDS, RNPS);
463  PRAGMA RESTRICT_REFERENCES(dfn,              WNDS, WNPS, RNDS, RNPS);
464  PRAGMA RESTRICT_REFERENCES(code,             WNDS, WNPS, RNDS, RNPS);
465  PRAGMA RESTRICT_REFERENCES(em,               WNDS, WNPS, RNDS, RNPS);
466  PRAGMA RESTRICT_REFERENCES(emphasis,         WNDS, WNPS, RNDS, RNPS);
467  PRAGMA RESTRICT_REFERENCES(keyboard,         WNDS, WNPS, RNDS, RNPS);
468  PRAGMA RESTRICT_REFERENCES(kbd,              WNDS, WNPS, RNDS, RNPS);
469  PRAGMA RESTRICT_REFERENCES(sample,           WNDS, WNPS, RNDS, RNPS);
470  PRAGMA RESTRICT_REFERENCES(strong,           WNDS, WNPS, RNDS, RNPS);
471  PRAGMA RESTRICT_REFERENCES(variable,         WNDS, WNPS, RNDS, RNPS);
472  PRAGMA RESTRICT_REFERENCES(big,                 WNDS, WNPS, RNDS, RNPS);
473  PRAGMA RESTRICT_REFERENCES(small,            WNDS, WNPS, RNDS, RNPS);
474  PRAGMA RESTRICT_REFERENCES(sub,              WNDS, WNPS, RNDS, RNPS);
475  PRAGMA RESTRICT_REFERENCES(sup,              WNDS, WNPS, RNDS, RNPS);
476  PRAGMA RESTRICT_REFERENCES(basefont,         WNDS, WNPS, RNDS, RNPS);
477  PRAGMA RESTRICT_REFERENCES(fontOpen,         WNDS, WNPS, RNDS, RNPS);
478  PRAGMA RESTRICT_REFERENCES(bold,             WNDS, WNPS, RNDS, RNPS);
479  PRAGMA RESTRICT_REFERENCES(italic,           WNDS, WNPS, RNDS, RNPS);
480  PRAGMA RESTRICT_REFERENCES(teletype,         WNDS, WNPS, RNDS, RNPS);
481  PRAGMA RESTRICT_REFERENCES(plaintext,        WNDS, WNPS, RNDS, RNPS);
482  PRAGMA RESTRICT_REFERENCES(strike,           WNDS, WNPS, RNDS, RNPS);
483  PRAGMA RESTRICT_REFERENCES(s,                WNDS, WNPS, RNDS, RNPS);
484  PRAGMA RESTRICT_REFERENCES(underline,        WNDS, WNPS, RNDS, RNPS);
485  PRAGMA RESTRICT_REFERENCES(formOpen,         WNDS, WNPS, RNDS, RNPS);
486  PRAGMA RESTRICT_REFERENCES(formCheckbox,     WNDS, WNPS, RNDS, RNPS);
487  PRAGMA RESTRICT_REFERENCES(formFile,         WNDS, WNPS, RNDS, RNPS);
488  PRAGMA RESTRICT_REFERENCES(formHidden,       WNDS, WNPS, RNDS, RNPS);
489  PRAGMA RESTRICT_REFERENCES(formImage,        WNDS, WNPS, RNDS, RNPS);
490  PRAGMA RESTRICT_REFERENCES(formPassword,     WNDS, WNPS, RNDS, RNPS);
491  PRAGMA RESTRICT_REFERENCES(formRadio,        WNDS, WNPS, RNDS, RNPS);
492  PRAGMA RESTRICT_REFERENCES(formReset,        WNDS, WNPS, RNDS, RNPS);
493  PRAGMA RESTRICT_REFERENCES(formSubmit,       WNDS, WNPS, RNDS, RNPS);
494  PRAGMA RESTRICT_REFERENCES(formText,         WNDS, WNPS, RNDS, RNPS);
495  PRAGMA RESTRICT_REFERENCES(formSelectOpen,   WNDS, WNPS, RNDS, RNPS);
496  PRAGMA RESTRICT_REFERENCES(formSelectOption, WNDS, WNPS, RNDS, RNPS);
497  PRAGMA RESTRICT_REFERENCES(formTextarea,     WNDS, WNPS, RNDS, RNPS);
498  PRAGMA RESTRICT_REFERENCES(formTextarea2,     WNDS, WNPS, RNDS, RNPS);
499  PRAGMA RESTRICT_REFERENCES(formTextareaOpen, WNDS, WNPS, RNDS, RNPS);
500  PRAGMA RESTRICT_REFERENCES(formTextareaOpen2, WNDS, WNPS, RNDS, RNPS);
501  PRAGMA RESTRICT_REFERENCES(tableOpen,        WNDS, WNPS, RNDS, RNPS);
502  PRAGMA RESTRICT_REFERENCES(tableCaption,     WNDS, WNPS, RNDS, RNPS);
503  PRAGMA RESTRICT_REFERENCES(tableRowOpen,     WNDS, WNPS, RNDS, RNPS);
504  PRAGMA RESTRICT_REFERENCES(tableHeader,      WNDS, WNPS, RNDS, RNPS);
505  PRAGMA RESTRICT_REFERENCES(tableData,        WNDS, WNPS, RNDS, RNPS);
506  PRAGMA RESTRICT_REFERENCES(framesetOpen,     WNDS, WNPS, RNDS, RNPS);
507  PRAGMA RESTRICT_REFERENCES(frame,            WNDS, WNPS, RNDS, RNPS);
508  PRAGMA RESTRICT_REFERENCES(appletOpen,       WNDS, WNPS, RNDS, RNPS);
509  PRAGMA RESTRICT_REFERENCES(param,            WNDS, WNPS, RNDS, RNPS);
510  
511  PRAGMA RESTRICT_REFERENCES(escape_sc,        WNDS, WNPS, RNDS, RNPS);
512  PRAGMA RESTRICT_REFERENCES(escape_url,       WNDS, WNPS, RNDS, RNPS);
513  
514  end;
515  /

Package created.

SQL> show errors package htf
No errors.
SQL> 
SQL> REM Creating HTP package...
SQL> create or replace package htp as
  2  
  3  /* STRUCTURE tags */
  4  procedure htmlOpen;
  5  procedure htmlClose;
  6  procedure headOpen;
  7  procedure headClose;
  8  procedure bodyOpen(cbackground in varchar2 DEFAULT NULL,
  9                     cattributes in varchar2 DEFAULT NULL)   ;
 10  procedure bodyClose;
 11  /* END STRUCTURE tags */
 12  
 13  /* HEAD Related elements tags */
 14  procedure title  (ctitle in varchar2 character set any_cs)                      ;
 15  procedure htitle(ctitle      in varchar2 character set any_cs,
 16                   nsize       in integer  DEFAULT 1,
 17                   calign      in varchar2 DEFAULT NULL,
 18                   cnowrap     in varchar2 DEFAULT NULL,
 19                   cclear      in varchar2 DEFAULT NULL,
 20                   cattributes in varchar2 DEFAULT NULL)     ;
 21  procedure base(    ctarget    in varchar2 DEFAULT NULL,
 22          cattributes in varchar2 DEFAULT NULL);
 23  procedure isindex(cprompt in varchar2 character set any_cs DEFAULT NULL,
 24                    curl    in varchar2 DEFAULT NULL) ;
 25  procedure linkRel(crel   in varchar2,
 26                    curl   in varchar2,
 27                    ctitle in varchar2 character set any_cs DEFAULT NULL)          ;
 28  procedure linkRev(crev  in varchar2,
 29                    curl  in varchar2,
 30                    ctitle in varchar2 character set any_cs DEFAULT NULL)          ;
 31  procedure meta(chttp_equiv in varchar2,
 32                 cname       in varchar2,
 33                 ccontent    in varchar2)                     ;
 34  procedure nextid(cidentifier in varchar2)                   ;
 35  procedure style(cstyle in varchar2 character set any_cs)                ;
 36  procedure script(cscript     in varchar2,
 37           clanguage     in varchar2 DEFAULT NULL)   ;
 38  /* END HEAD Related elements tags */
 39  
 40  /* BODY ELEMENT tags */
 41  procedure hr  (cclear      in varchar2 DEFAULT NULL,
 42                 csrc        in varchar2 DEFAULT NULL,
 43                 cattributes in varchar2 DEFAULT NULL)       ;
 44  procedure line(cclear      in varchar2 DEFAULT NULL,
 45                 csrc        in varchar2 DEFAULT NULL,
 46                 cattributes in varchar2 DEFAULT NULL)       ;
 47  procedure br(cclear      in varchar2 DEFAULT NULL,
 48               cattributes in varchar2 DEFAULT NULL)         ;
 49  procedure nl(cclear      in varchar2 DEFAULT NULL,
 50               cattributes in varchar2 DEFAULT NULL)         ;
 51  
 52  procedure header(nsize   in integer,
 53                   cheader in varchar2 character set any_cs,
 54                   calign  in varchar2 DEFAULT NULL,
 55                   cnowrap in varchar2 DEFAULT NULL,
 56                   cclear  in varchar2 DEFAULT NULL,
 57                   cattributes in varchar2 DEFAULT NULL)     ;
 58  procedure anchor(curl        in varchar2,
 59                   ctext       in varchar2 character set any_cs,
 60                   cname       in varchar2 DEFAULT NULL,
 61                   cattributes in varchar2 DEFAULT NULL)     ;
 62  procedure anchor2(curl        in varchar2,
 63                   ctext       in varchar2 character set any_cs,
 64                   cname       in varchar2 DEFAULT NULL,
 65           ctarget     in varchar2 DEFAULT NULL,
 66                   cattributes in varchar2 DEFAULT NULL)     ;
 67  procedure mailto(caddress    in varchar2,
 68                   ctext       in varchar2 character set any_cs,
 69                   cname       in varchar2 character set any_cs DEFAULT NULL,
 70                   cattributes in varchar2 DEFAULT NULL)     ;
 71  procedure img(curl        in varchar2,
 72                calign      in varchar2 DEFAULT NULL,
 73                calt        in varchar2 DEFAULT NULL,
 74                cismap      in varchar2 DEFAULT NULL,
 75                cattributes in varchar2 DEFAULT NULL)        ;
 76  procedure img2(curl        in varchar2,
 77                calign      in varchar2 DEFAULT NULL,
 78                calt        in varchar2 DEFAULT NULL,
 79                cismap      in varchar2 DEFAULT NULL,
 80                cusemap     in varchar2 DEFAULT NULL,
 81                cattributes in varchar2 DEFAULT NULL)        ;
 82  procedure area(    ccoords    in varchar2,
 83                     cshape    in varchar2 DEFAULT NULL,
 84                    chref    in varchar2 DEFAULT NULL,
 85                    cnohref in varchar2 DEFAULT NULL,
 86          ctarget in varchar2 DEFAULT NULL,
 87          cattributes in varchar2 DEFAULT NULL);
 88  
 89  procedure mapOpen(cname    in varchar2,
 90            cattributes in varchar2 DEFAULT NULL);
 91  procedure mapClose;
 92  
 93  procedure bgsound(csrc    in varchar2,
 94            cloop    in varchar2 DEFAULT NULL,
 95            cattributes in varchar2 DEFAULT NULL);
 96  
 97  
 98  procedure para;
 99  procedure paragraph(calign       in varchar2 DEFAULT NULL,
100                      cnowrap      in varchar2 DEFAULT NULL,
101                      cclear       in varchar2 DEFAULT NULL,
102                      cattributes  in varchar2 DEFAULT NULL) ;
103  procedure div(    calign       in varchar2 DEFAULT NULL,
104                  cattributes  in varchar2 DEFAULT NULL) ;
105  procedure address(cvalue       in varchar2 character set any_cs,
106                    cnowrap      in varchar2 DEFAULT NULL,
107                    cclear       in varchar2 DEFAULT NULL,
108                    cattributes  in varchar2 DEFAULT NULL)   ;
109  procedure comment(ctext in varchar2 character set any_cs)                       ;
110  procedure preOpen(cclear      in varchar2 DEFAULT NULL,
111                    cwidth      in varchar2 DEFAULT NULL,
112                    cattributes in varchar2 DEFAULT NULL)    ;
113  procedure preClose;
114  procedure listingOpen;
115  procedure listingClose;
116  procedure nobr(ctext in varchar2 character set any_cs);
117  procedure wbr;
118  procedure center(ctext in varchar2 character set any_cs);
119  procedure centerOpen;
120  procedure centerClose;
121  
122  procedure blockquoteOpen(cnowrap      in varchar2 DEFAULT NULL,
123                           cclear       in varchar2 DEFAULT NULL,
124                           cattributes  in varchar2 DEFAULT NULL) ;
125  procedure blockquoteClose;
126  
127  /* LIST tags */
128  procedure listHeader(ctext in varchar2 character set any_cs,
129                       cattributes in varchar2 DEFAULT NULL) ;
130  procedure listItem(ctext       in varchar2 character set any_cs DEFAULT NULL,
131                     cclear      in varchar2 DEFAULT NULL,
132                     cdingbat    in varchar2 DEFAULT NULL,
133                     csrc        in varchar2 DEFAULT NULL,
134                     cattributes in varchar2 DEFAULT NULL)   ;
135  procedure ulistOpen(cclear      in varchar2 DEFAULT NULL,
136                      cwrap       in varchar2 DEFAULT NULL,
137                      cdingbat    in varchar2 DEFAULT NULL,
138                      csrc        in varchar2 DEFAULT NULL,
139                      cattributes in varchar2 DEFAULT NULL)  ;
140  procedure ulistClose;
141  procedure olistOpen(cclear      in varchar2 DEFAULT NULL,
142                      cwrap       in varchar2 DEFAULT NULL,
143                      cattributes in varchar2 DEFAULT NULL)  ;
144  procedure olistClose;
145  procedure dlistOpen(cclear      in varchar2 DEFAULT NULL,
146                      cattributes in varchar2 DEFAULT NULL)  ;
147  procedure dlistTerm(ctext       in varchar2 character set any_cs DEFAULT NULL,
148                      cclear      in varchar2 DEFAULT NULL,
149                      cattributes in varchar2 DEFAULT NULL)  ;
150  procedure dlistDef(ctext       in varchar2 character set any_cs DEFAULT NULL,
151                     cclear      in varchar2 DEFAULT NULL,
152                     cattributes in varchar2 DEFAULT NULL)  ;
153  procedure dlistClose;
154  
155  procedure menulistOpen;
156  procedure menulistClose;
157  procedure dirlistOpen;
158  procedure dirlistClose;
159  /* END LIST tags */
160  
161  /* SEMANTIC FORMAT ELEMENTS */
162  procedure dfn(ctext in varchar2 character set any_cs,
163                 cattributes in varchar2 DEFAULT NULL) ;
164  procedure cite(ctext in varchar2 character set any_cs,
165                 cattributes in varchar2 DEFAULT NULL) ;
166  procedure code(ctext in varchar2 character set any_cs,
167                 cattributes in varchar2 DEFAULT NULL) ;
168  procedure em(ctext in varchar2 character set any_cs,
169               cattributes in varchar2 DEFAULT NULL) ;
170  procedure emphasis(ctext in varchar2 character set any_cs,
171                     cattributes in varchar2 DEFAULT NULL) ;
172  procedure keyboard(ctext in varchar2 character set any_cs,
173                     cattributes in varchar2 DEFAULT NULL) ;
174  procedure kbd(ctext in varchar2 character set any_cs,
175                cattributes in varchar2 DEFAULT NULL) ;
176  procedure sample(ctext in varchar2 character set any_cs,
177                   cattributes in varchar2 DEFAULT NULL) ;
178  procedure strong(ctext in varchar2 character set any_cs,
179                   cattributes in varchar2 DEFAULT NULL) ;
180  procedure variable(ctext in varchar2 character set any_cs,
181                     cattributes in varchar2 DEFAULT NULL) ;
182  procedure big(    ctext         in varchar2 character set any_cs,
183          cattributes     in varchar2 DEFAULT NULL);
184  procedure small(ctext         in varchar2 character set any_cs,
185          cattributes     in varchar2 DEFAULT NULL);
186  procedure sub(    ctext         in varchar2 character set any_cs,
187          calign        in varchar2 DEFAULT NULL,
188          cattributes     in varchar2 DEFAULT NULL);
189  procedure sup(    ctext         in varchar2 character set any_cs,
190          calign        in varchar2 DEFAULT NULL,
191          cattributes     in varchar2 DEFAULT NULL);
192  
193  /* END SEMANTIC FORMAT ELEMENTS */
194  
195  /* PHYSICAL FORMAT ELEMENTS */
196  procedure basefont(nsize in integer);
197  procedure fontOpen(    ccolor    in varchar2 DEFAULT NULL,
198          cface    in varchar2 DEFAULT NULL,
199          csize    in varchar2 DEFAULT NULL,
200          cattributes in varchar2 DEFAULT NULL);
201  procedure fontClose;
202  procedure bold(ctext in varchar2 character set any_cs,
203                 cattributes in varchar2 DEFAULT NULL) ;
204  procedure italic(ctext in varchar2 character set any_cs,
205                   cattributes in varchar2 DEFAULT NULL) ;
206  procedure teletype(ctext in varchar2 character set any_cs,
207                     cattributes in varchar2 DEFAULT NULL) ;
208  procedure plaintext(ctext in varchar2 character set any_cs,
209                      cattributes in varchar2 DEFAULT NULL) ;
210  procedure s(ctext in varchar2 character set any_cs,
211              cattributes in varchar2 DEFAULT NULL) ;
212  procedure strike(ctext in varchar2 character set any_cs,
213                   cattributes in varchar2 DEFAULT NULL) ;
214  procedure underline(ctext in varchar2 character set any_cs,
215                   cattributes in varchar2 DEFAULT NULL) ;
216  /* END PHYSICAL FORMAT ELEMENTS */
217  
218  /* HTML FORMS */
219  procedure formOpen(curl     in varchar2,
220                     cmethod  in varchar2 DEFAULT 'post',
221             ctarget  in varchar2 DEFAULT NULL,
222             cenctype in varchar2 DEFAULT NULL,
223             cattributes in varchar2 DEFAULT NULL);
224  
225  procedure formCheckbox(cname       in varchar2,
226                         cvalue      in varchar2 character set any_cs DEFAULT 'on',
227                         cchecked    in varchar2 DEFAULT NULL,
228                         cattributes in varchar2 DEFAULT NULL);
229  procedure formFile(cname       in varchar2,
230                     caccept     in varchar2 DEFAULT NULL,
231                     cattributes in varchar2 DEFAULT NULL);
232  procedure formHidden(cname       in varchar2,
233                       cvalue      in varchar2 character set any_cs DEFAULT NULL,
234                       cattributes in varchar2 DEFAULT NULL);
235  procedure formImage(cname       in varchar2,
236                      csrc        in varchar2,
237                      calign      in varchar2 DEFAULT NULL,
238                      cattributes in varchar2 DEFAULT NULL);
239  procedure formPassword(cname       in varchar2,
240                         csize       in varchar2 DEFAULT NULL,
241                         cmaxlength  in varchar2 DEFAULT NULL,
242                         cvalue      in varchar2 character set any_cs DEFAULT NULL,
243                         cattributes in varchar2 DEFAULT NULL);
244  procedure formRadio(cname       in varchar2,
245                      cvalue      in varchar2 character set any_cs,
246                      cchecked    in varchar2 DEFAULT NULL,
247                      cattributes in varchar2 DEFAULT NULL);
248  procedure formReset(cvalue      in varchar2 character set any_cs DEFAULT 'Reset',
249                      cattributes in varchar2 DEFAULT NULL);
250  procedure formSubmit(cname       in varchar2 DEFAULT NULL,
251                       cvalue      in varchar2 character set any_cs DEFAULT 'Submit',
252                       cattributes in varchar2 DEFAULT NULL);
253  procedure formText(cname       in varchar2,
254                     csize       in varchar2 DEFAULT NULL,
255                     cmaxlength  in varchar2 DEFAULT NULL,
256                     cvalue      in varchar2 character set any_cs DEFAULT NULL,
257                     cattributes in varchar2 DEFAULT NULL);
258  
259  procedure formSelectOpen(cname       in varchar2,
260                           cprompt     in varchar2 character set any_cs DEFAULT NULL,
261                           nsize       in integer  DEFAULT NULL,
262                           cattributes in varchar2 DEFAULT NULL);
263  procedure formSelectOption(cvalue      in varchar2 character set any_cs,
264                             cselected   in varchar2 DEFAULT NULL,
265                             cattributes in varchar2 DEFAULT NULL);
266  procedure formSelectClose;
267  
268  procedure formTextarea(cname       in varchar2,
269                         nrows       in integer,
270                         ncolumns    in integer,
271                         calign      in varchar2 DEFAULT NULL,
272                         cattributes in varchar2 DEFAULT NULL);
273  
274  procedure formTextarea2(cname       in varchar2,
275                         nrows       in integer,
276                         ncolumns    in integer,
277                         calign      in varchar2 DEFAULT NULL,
278                 cwrap       in varchar2 DEFAULT NULL,
279                         cattributes in varchar2 DEFAULT NULL);
280  
281  procedure formTextareaOpen(cname       in varchar2,
282                             nrows       in integer,
283                             ncolumns    in integer,
284                             calign      in varchar2 DEFAULT NULL,
285                             cattributes in varchar2 DEFAULT NULL);
286  
287  procedure formTextareaOpen2(cname       in varchar2,
288                             nrows       in integer,
289                             ncolumns    in integer,
290                             calign      in varchar2 DEFAULT NULL,
291                 cwrap       in varchar2 DEFAULT NULL,
292                             cattributes in varchar2 DEFAULT NULL);
293  procedure formTextareaClose;
294  
295  procedure formClose;
296  /* END HTML FORMS */
297  
298  /* HTML TABLES */
299  procedure tableOpen(cborder     in varchar2 DEFAULT NULL,
300                      calign      in varchar2 DEFAULT NULL,
301                      cnowrap     in varchar2 DEFAULT NULL,
302                      cclear      in varchar2 DEFAULT NULL,
303                      cattributes in varchar2 DEFAULT NULL);
304  procedure tableCaption(ccaption    in varchar2 character set any_cs,
305                         calign      in varchar2 DEFAULT NULL,
306                         cattributes in varchar2 DEFAULT NULL);
307  procedure tableRowOpen(calign      in varchar2 DEFAULT NULL,
308                         cvalign     in varchar2 DEFAULT NULL,
309                         cdp         in varchar2 DEFAULT NULL,
310                         cnowrap     in varchar2 DEFAULT NULL,
311                         cattributes in varchar2 DEFAULT NULL);
312  procedure tableHeader(cvalue      in varchar2 character set any_cs DEFAULT NULL,
313                        calign      in varchar2 DEFAULT NULL,
314                        cdp         in varchar2 DEFAULT NULL,
315                        cnowrap     in varchar2 DEFAULT NULL,
316                        crowspan    in varchar2 DEFAULT NULL,
317                        ccolspan    in varchar2 DEFAULT NULL,
318                        cattributes in varchar2 DEFAULT NULL);
319  procedure tableData(cvalue      in varchar2 character set any_cs DEFAULT NULL,
320                      calign      in varchar2 DEFAULT NULL,
321                      cdp         in varchar2 DEFAULT NULL,
322                      cnowrap     in varchar2 DEFAULT NULL,
323                      crowspan    in varchar2 DEFAULT NULL,
324                      ccolspan    in varchar2 DEFAULT NULL,
325                      cattributes in varchar2 DEFAULT NULL);
326  procedure tableRowClose;
327  
328  procedure tableClose;
329  /* END HTML TABLES */
330  
331  /* BEGIN HTML FRAMES - Netscape Extensions FRAMESET, FRAME tags */
332  procedure framesetOpen(    crows in varchar2 DEFAULT NULL,    /* row height value list */
333              ccols in varchar2 DEFAULT NULL,
334              cattributes in varchar2 DEFAULT NULL);    /* column width list */
335  procedure framesetClose;
336  procedure frame(    csrc    in varchar2,                /* URL */
337              cname    in varchar2 DEFAULT NULL,        /* Window Name */
338              cmarginwidth     in varchar2 DEFAULT NULL,    /* Value in pixels */
339              cmarginheight    in varchar2 DEFAULT NULL,    /* Value in pixels */
340              cscrolling    in varchar2 DEFAULT NULL,    /* yes | no | auto */
341              cnoresize    in varchar2 DEFAULT NULL,
342              cattributes     in varchar2 DEFAULT NULL);    /* Not resizable by user */
343  procedure noframesOpen;
344  procedure noframesClose;
345  
346  /* END FRAMES */
347  
348  /* BEGIN SPECIAL HTML TAGS */
349  procedure appletOpen(    ccode        in varchar2,
350                           cwidth       in integer,
351                           cheight      in integer,
352                           cattributes  in varchar2 DEFAULT NULL);
353  procedure param(    cname        in varchar2,
354                      cvalue        in varchar2 character set any_cs);
355  procedure appletClose;
356  
357  /* END BODY ELEMENT tags */
358  
359  /* TYPES FOR htp.print */
360  -- PL/SQL table used for output buffering
361  HTBUF_LEN number := 255;
362  type htbuf_arr is table of varchar2(256) index by binary_integer;
363  type htraw_arr is table of raw(256)      index by binary_integer;
364  
365  /* SPECIAL PROCEDURES */
366  procedure init;
367  -- call addDefaultHTMLHdr(FALSE) before your first call
368  -- to prn or print to suppress HTML header generation
369  -- if not present
370  procedure addDefaultHTMLHdr(bAddHTMLHdr in boolean);
371  procedure flush;
372  
373  /* Start of OAS specific helper procedures */
374  procedure flush_charset_convert (charset in varchar2);
375  procedure get_page_charset_convert (thepage out NOCOPY htbuf_arr,
376     irows in out integer, charset in varchar2);
377  /* End of OAS specific helper procedures */
378  
379  function get_line (irows out integer) return varchar2;
380  procedure get_page (thepage out NOCOPY htbuf_arr, irows in out integer);
381  
382  /* Add RAW transfer API */
383  procedure get_page_raw (thepage out NOCOPY htraw_arr, irows in out integer);
384  procedure showpage;
385  procedure reset_get_page;
386  
387  /* Following procedures are for file download feature */
388  procedure download_file(sFileName in varchar2,
389     bCompress in boolean default false);
390  procedure get_download_files_list(sFilesList out varchar2,
391     nCompress out binary_integer);
392  
393    -- Output Procedures
394  -- skwong: Added "character set any_cs"
395  procedure print (cbuf in varchar2 character set any_cs DEFAULT NULL);
396  procedure print (dbuf in date);
397  procedure print (nbuf in number);
398  
399    -- Output without the newline
400  -- skwong: Added "character set any_cs"
401  procedure prn (cbuf in varchar2 character set any_cs DEFAULT NULL);
402  procedure prn (dbuf in date);
403  procedure prn (nbuf in number);
404  
405    -- Abbrev call to print()
406  -- skwong: Added "character set any_cs"
407  procedure p (cbuf in varchar2 character set any_cs DEFAULT NULL);
408  procedure p (dbuf in date);
409  procedure p (nbuf in number);
410  
411    -- Raw output functions
412  /* Allow direct writes of raw content, e.g. to produce images or
413  ** literally anything. */
414  procedure putraw  (bbuf in raw, buflen pls_integer DEFAULT NULL);
415  
416  procedure prints(ctext in varchar2 character set any_cs);
417  procedure ps(ctext in varchar2 character set any_cs);
418  procedure escape_sc(ctext in varchar2 character set any_cs);
419  procedure setHTTPCharset(iana_charset in varchar2,
420                           ora_charset varchar2 default NULL);
421  procedure print_header(cbuf in varchar2, nline in number);
422  /* Set raw transfer mode */
423  procedure set_transfer_mode(tmode in varchar2);
424  /* END SPECIAL PROCEDURES */
425  end;
426  /

Package created.

SQL> show errors package htp
No errors.
SQL> 
SQL> @@pubutil.sql
SQL> rem
SQL> rem
SQL> Rem  Copyright (c) 1995, 1996, 1997 by Oracle Corporation. All rights reserved.
SQL> Rem    NAME
SQL> Rem      pubutil.sql - package of various OWA utility procedures
SQL> Rem    DESCRIPTION
SQL> Rem      This file contains one package:
SQL> Rem         owa_util    - Utitility procedures/functions for use
SQL> Rem                       with the Oracle Web Agent
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      The Oracle Web Agent is needed to use these facilities.
SQL> Rem      The package owa is needed to use these facilities.
SQL> Rem      The packages htp and htf are needed to use these facilities.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     vtropash   08/26/15  - 21683691
SQL> Rem     mmuppago   05/22/06  - Changes to comply with XHTML req. from Portal
SQL> Rem     ehlee      12/03/01 -  Workaround for bug#2129672
SQL> Rem     ehlee      10/30/01 -  Fix bug#2087553
SQL> Rem     ehlee      10/12/01 -  Move version string out of this spec
SQL> Rem     pkapasi    09/21/01 -  Version 3.0.0.0.7
SQL> Rem     skwong     07/20/01 -  Add NCHAR support
SQL> Rem     ehlee      07/11/01 -  Version 3.0.0.0.6
SQL> Rem     pkapasi    06/15/01 -  Version 3.0.0.0.5
SQL> Rem     ehlee      02/21/01 -  Version 3.0.0.0.4
SQL> Rem     ehlee      01/24/01 -  Version 3.0.0.0.3
SQL> Rem     ehlee      01/23/01 -  Version 3.0.0.0.2 string correction
SQL> Rem     ehlee      12/29/00 -  Version 3.0.0.0.2
SQL> Rem     ehlee      10/09/00 -  Version 3.0.0.0.1
SQL> Rem     ehlee      09/15/00 -  Fix bug#1401472 (add version number)
SQL> Rem     ehlee      06/28/00 -  Increase vc_arr varchar2 size from 2000 to 32000
SQL> Rem     ehlee      01/14/00 -  Add default charset support
SQL> Rem     rdasarat   10/26/98 -  Fix 735061
SQL> Rem     rdasarat   12/02/97 -  Fix 591932
SQL> Rem     rdasarat   10/17/97 -  Add ccharset to mime_header
SQL> Rem     rdasarat   07/09/97 -  Implement COMMON schema; optimize code
SQL> Rem     mpal       11/12/96 -  Fix bug#412612 change default for nrow_max to 500
SQL> Rem     rpang      01/27/97 -  Restored PRAGMA RESTRICT_REFERENCES (bug#439474)
SQL> Rem     rpang      06/29/96 -  Added IP_ADDRESS type, get_procedure
SQL> Rem     mpal       06/24/96 -  Add new utilities for 2.1
SQL> Rem     mbookman   03/04/96 -  Assert purity of get_cgi_env
SQL> Rem     mbookman   01/24/96 -  Add "bclose_header" field to HTTP header calls
SQL> Rem     mbookman   01/24/96 -  Remove HTTP_HEADER_OPEN
SQL> Rem     mbookman   01/12/96 -  Add REDIRECT_URL and STATUS_LINE
SQL> Rem     mbookman   12/13/95 -  Add HTTP_HEADER_OPEN, HTTP_HEADER_CLOSE
SQL> Rem     mbookman   07/09/95 -  Creation
SQL> 
SQL> REM Creating OWA_UTIL package...
SQL> create or replace package OWA_UTIL AUTHID CURRENT_USER
  2  is
  3  
  4     type ident_arr is table of varchar2(30) index by binary_integer;
  5     type ident_narr is table of nvarchar2(30) index by binary_integer;
  6     type num_arr is table of number index by binary_integer;
  7     type ip_address is table of integer index by binary_integer;
  8  
  9     type vc_arr is table of varchar2(32000) index by binary_integer;
 10     type nc_arr is table of nvarchar2(16000) index by binary_integer;
 11     type raw_arr is table of raw(32000) index by binary_integer;
 12  
 13     -- Functions/Procedures
 14     procedure name_resolve(
 15        cname in varchar2,
 16        o_procowner out varchar2,
 17        o_procname out varchar2
 18     );
 19  
 20       /******************************************************************/
 21      /* Procedure to link back to the PL/SQL source for your procedure */
 22     /******************************************************************/
 23      /* SHOWSOURCE can take as an argument a procedure, function,     */
 24      /*   package, package.procedure or package.function.             */
 25      /* SHOWSOURCE prints the source for the specified stored PL/SQL. */
 26      /* If package.procedure or package.function are passed, it will  */
 27      /* print the entire package.                                     */
 28     procedure showsource(cname in varchar2);
 29  
 30       /**************************************************/
 31      /* Procedures for printing out an OWA "signature" */
 32     /**************************************************/
 33      /* SIGNATURE prints an HTML line followed by a line like:               */
 34      /*   This page was produced by the Oracle Web Agent on 09/07/95 09:39   */
 35     procedure signature;
 36  
 37      /* SIGNATURE (cname) prints an HTML line followed by 2 lines like:      */
 38      /*   This page was produced by the Oracle Web Agent on August 9, 1995
 39           9:39 AM                                                            */
 40      /*   View PL/SQL source code (hypertext-link)                           */
 41      /* SIGNATURE can take as an argument a procedure, function, or package, */
 42      /*   but not package.procedure or package.function.  See SHOWSOURCE.    */
 43     procedure signature(cname in varchar2 character set any_cs);
 44  
 45        /******************************************************/
 46       /* Procedure for printing a page generated by htp/htf */
 47      /* in SQL*Plus or SQL*DBA                             */
 48     /******************************************************/
 49      /* SHOWPAGE can be called to print out the results, */
 50      /* in SQL*Plus or SQL*DBA, of an htp/htf generated  */
 51      /* page. This is done using dbms_output, and thus   */
 52      /* is limited to 255 characters per line and an     */
 53      /* overall buffer size of 1,000,000 bytes.          */
 54     procedure showpage;
 55  
 56       /**************************************************************/
 57      /* Procedure/function for accessing CGI environment variables */
 58     /**************************************************************/
 59     /* GET_CGI_ENV will return the value of the requested CGI     */
 60     /* environment variable, or NULL if that value is not set.    */
 61     function  get_cgi_env(param_name in varchar2) return varchar2;
 62  
 63     /* PRINT_CGI_ENV will print all of the CGI environment        */
 64     /* variables which OWA has made available to PL/SQL.          */
 65     procedure print_cgi_env;
 66  
 67     /* MIME_HEADER will output "Content-type: <ccontent_type>\n\n" */
 68     /* This allows changing the default MIME header which the Web  */
 69     /* Agent returns.  This MUST be come before any htp.print or   */
 70     /* htp.prn calls in order to signal the Web Agent not to use   */
 71     /* the default.                                                */
 72     procedure mime_header(ccontent_type in varchar2 DEFAULT 'text/html',
 73                           bclose_header in boolean  DEFAULT TRUE,
 74                           ccharset      in varchar2 DEFAULT 'MaGiC_KeY');
 75  
 76     /* REDIRECT_URL will output "Location: <curl>\n\n"               */
 77     /* This allows the PL/SQL program to tell the HTTP server to     */
 78     /* visit the specified URL instead of returning output from the  */
 79     /* current URL.  By "visit" it is meant that if the specified    */
 80     /* URL is an HTML page, then it will be returned, but if the URL */
 81     /* specifies another CGI program, or call to the Web Agent, then */
 82     /* the Web Server will make that call.                           */
 83     /* The call to REDIRECT_URL MUST be come before any htp calls in */
 84     /* order to signal the HTTP server to do the redirect.           */
 85     /* This functionality is only available with OWA 1.0.2 or above. */
 86     procedure redirect_url(curl          in varchar2 character set any_cs,
 87                            bclose_header in boolean  DEFAULT TRUE);
 88  
 89     /* STATUS_LINE will output "Status: <nstatus> <creason>\n\n"     */
 90     /* This allows the PL/SQL program to tell the HTTP server to     */
 91     /* return a standard HTTP status code to the client.             */
 92     /* The call to STATUS_LINE MUST be come before any htp calls in  */
 93     /* order to signal the HTTP server to return the status as part  */
 94     /* of the HTTP header instead of as "content data".              */
 95     /* This functionality is only available with OWA 1.5 or above.   */
 96     procedure status_line(nstatus in integer,
 97                           creason in varchar2 character set any_cs DEFAULT NULL,
 98                           bclose_header in boolean  DEFAULT TRUE);
 99  
100     /* HTTP_HEADER_CLOSE should be called after calls to either       */
101     /* MIME_HEADER, REDIRECT_URL, or STATUS_LINE, where bclose_header */
102     /* is set to FALSE.  HTTP_HEADER_CLOSE will close the HTTP header */
103     procedure http_header_close;
104  
105     /* GET_OWA_SERVICE_PATH returns the name of the currently           */
106     /* with its full virtual path, plus the currently active service    */
107     /*  For example, a call to get_owa_service_path could return:       */
108     /*     /ows-bin/myservice/owa/                                      */
109     function get_owa_service_path return varchar2;
110  
111       /******************************************************************/
112      /* Procedures and functions for building HTML and non-HTML tables */
113     /******************************************************************/
114  
115     /* TABLE_TYPE constants */
116     HTML_TABLE constant integer := 1;
117     PRE_TABLE  constant integer := 2;
118  
119     procedure show_query_columns(ctable in varchar2);
120  
121     /* TABLEPRINT will print out an entire Oracle table either as   */
122     /* an HTML table, or as a "pre-formatted" table.  The table     */
123     /* alignment follows the HTML 3.0 current standards for default */
124     /* alignment - column headings are CENTERED while table data is */
125     /* LEFT justified.                                              */
126     /*                                                              */
127     /* TABLEPRINT takes the following parameters:                   */
128     /*                                                              */
129     /* ctable       - the table, view, or synonym name              */
130     /* cattributes  - allows you to pass any of the attributes that */
131     /*                can be passed to the HTML <TABLE> tag.        */
132     /* ntable_type  - HTML_TABLE or PRE_TABLE                       */
133     /* ccolumns     - a comma-delimited list of columns from ctable */
134     /* cclauses     - any SQL "where" or "order by clauses",        */
135     /*  for example : "where deptno = 10"                           */
136     /*                "where deptno = 10 order by ename"            */
137     /*                "order by deptno"                             */
138     /* ccol_aliases - a comma-delimited list of column headings     */
139     /* nrow_min     - the first row, of those fetched, to print     */
140     /* nrow_max     - the last row, of those fetched, to print      */
141     /*                                                              */
142     /* Note that RAW COLUMNS are supported, however LONG RAW        */
143     /*  are not.  References to LONG RAW columns will print the     */
144     /*  result 'Not Printable'.                                     */
145     function tablePrint(ctable       in varchar2,
146                         cattributes  in varchar2 DEFAULT NULL,
147                         ntable_type  in integer  DEFAULT HTML_TABLE,
148                         ccolumns     in varchar2 DEFAULT '*',
149                         cclauses     in varchar2 DEFAULT NULL,
150                         ccol_aliases in varchar2 character set any_cs DEFAULT NULL,
151                         nrow_min     in number DEFAULT 0,
152                         nrow_max     in number DEFAULT 500) return boolean;
153  
154     /* Lower-level routines for printing out the table */
155     procedure comma_to_ident_arr(list    in varchar2 character set any_cs,
156                                  arr    out ident_arr,
157                                  lenarr out num_arr,
158                                  arrlen out integer);
159  
160     procedure comma_to_ident_arr(list    in varchar2 character set any_cs,
161                                  arr    out ident_narr,
162                                  lenarr out num_arr,
163                                  arrlen out integer);
164  
165     procedure tableOpen(cattributes in varchar2 DEFAULT NULL,
166                         ntable_type in integer DEFAULT HTML_TABLE);
167  
168     procedure tableCaption(ccaption    in varchar2 character set any_cs,
169                            calign      in varchar2 DEFAULT 'center',
170                            ntable_type in integer  DEFAULT HTML_TABLE);
171  
172     procedure tableHeaderRowOpen(crowstring  in out varchar2,
173                                  ntable_type in     integer DEFAULT HTML_TABLE);
174  
175     procedure tableHeaderRowOpen(crowstring   in out varchar2,
176                                  ntable_width    out integer,
177                                  ntable_type  in     integer DEFAULT HTML_TABLE);
178  
179     procedure tableHeader(ccolumn_name in     varchar2 character set any_cs,
180                           ncolumn_size in     integer,
181                           calign       in     varchar2 DEFAULT 'center',
182                           crowstring   in out varchar2,
183                           ntable_type  in     integer DEFAULT HTML_TABLE);
184  
185     procedure tableHeader(ccolumn_name in     varchar2 character set any_cs,
186                           ncolumn_size in     integer,
187                           calign       in     varchar2 DEFAULT 'center',
188                           crowstring   in out varchar2,
189                           ntable_width in out integer,
190                           ntable_type  in     integer DEFAULT HTML_TABLE);
191  
192     procedure tableHeaderRowClose(crowstring  in out varchar2,
193                                   ntable_type in     integer DEFAULT HTML_TABLE);
194  
195     procedure tableHeaderRowClose(crowstring   in out varchar2,
196                                   ntable_width in     integer,
197                                   ntable_type  in     integer DEFAULT HTML_TABLE);
198  
199     procedure tableRowOpen(crowstring  in out varchar2,
200                            ntable_type in     integer DEFAULT HTML_TABLE);
201  
202     procedure tableData(cdata        in     varchar2 character set any_cs,
203                         ncolumn_size in     integer,
204                         calign       in     varchar2 DEFAULT 'left',
205                         crowstring   in out varchar2,
206                         ntable_type  in     integer DEFAULT HTML_TABLE);
207  
208     procedure tableNoData(calign       in     varchar2 DEFAULT 'left',
209                           crowstring   in out varchar2,
210                           nnum_cols    in     integer,
211                           ntable_width in     integer,
212                           ntable_type  in     integer DEFAULT HTML_TABLE);
213  
214     procedure tableRowClose(crowstring  in out varchar2,
215                             ntable_type in     integer DEFAULT HTML_TABLE);
216  
217     procedure tableClose(ntable_type in     integer DEFAULT HTML_TABLE);
218  
219     procedure tableClose(ntable_width in integer,
220                          ntable_type  in integer DEFAULT HTML_TABLE);
221  
222  
223     procedure resolve_table(cobject in varchar2,
224                             cschema in varchar2,
225                             resolved_name    out varchar2,
226                             resolved_owner   out varchar2,
227                             resolved_db_link out varchar2);
228  
229     /* DESCRIBE_COLS returns the column_names and datatypes as */
230     /* arrays for passing to calc_col_sizes                    */
231     procedure describe_cols(
232                             ctable       in varchar2,
233                             ccolumns     in varchar2,
234                             col_names   out ident_arr,
235                             col_dtypes  out ident_arr,
236                             nnum_cols   out integer);
237  
238  
239       /**********************************************************************/
240      /* Function to obtain the procedure being invoked by the PL/SQL Agent */
241     /**********************************************************************/
242     function get_procedure return varchar2;
243  
244     PRAGMA RESTRICT_REFERENCES(get_cgi_env, WNDS, WNPS, RNDS);
245  
246  
247       /******************************************************************/
248      /* Procedures and functions for new utilities for 2.1             */
249     /******************************************************************/
250  
251          /* Exception raised when a query fails to be parsed of when a   */
252          /* non SELECT statement is passed down                                                  */
253      INVALID_QUERY    exception;
254  
255  
256          /* Utility routine used to figure out who called you.  Can be   */
257          /* used in standard footer routine.                                                     */
258      procedure who_called_me( owner      out varchar2,
259                                name       out varchar2,
260                                lineno     out number,
261                                caller_t   out varchar2 );
262  
263  
264          /* Ite = Macro for If then Else                                                                 */
265          /* only for internal usage. Not exposed                                                 */
266      function ite( tf in boolean, yes in varchar2, no in varchar2 )
267       return varchar2;
268  
269          /* shorthand for owa_util.get_cgi_env( 'SCRIPT_NAME' );                 */
270          /* only for internal usage. Not exposed                                                 */
271      function path_to_me return varchar2;
272  
273          /* This prepares a sql query and binds  variables to it                 */
274          function bind_variables
275          (   theQuery in varchar2,
276              bv1Name  in varchar2 default NULL,
277              bv1Value in varchar2 character set any_cs default NULL,
278              bv2Name  in varchar2 default NULL,
279              bv2Value in varchar2 character set any_cs default NULL,
280              bv3Name  in varchar2 default NULL,
281              bv3Value in varchar2 character set any_cs default NULL,
282              bv4Name  in varchar2 default NULL,
283              bv4Value in varchar2 character set any_cs default NULL,
284              bv5Name  in varchar2 default NULL,
285              bv5Value in varchar2 character set any_cs default NULL,
286              bv6Name  in varchar2 default NULL,
287              bv6Value in varchar2 character set any_cs default NULL,
288              bv7Name  in varchar2 default NULL,
289              bv7Value in varchar2 character set any_cs default NULL,
290              bv8Name  in varchar2 default NULL,
291              bv8Value in varchar2 character set any_cs default NULL,
292              bv9Name  in varchar2 default NULL,
293              bv9Value in varchar2 character set any_cs default NULL,
294              bv10Name  in varchar2 default NULL,
295              bv10Value in varchar2 character set any_cs default NULL,
296              bv11Name  in varchar2 default NULL,
297              bv11Value in varchar2 character set any_cs default NULL,
298              bv12Name  in varchar2 default NULL,
299              bv12Value in varchar2 character set any_cs default NULL,
300              bv13Name  in varchar2 default NULL,
301              bv13Value in varchar2 character set any_cs default NULL,
302              bv14Name  in varchar2 default NULL,
303              bv14Value in varchar2 character set any_cs default NULL,
304              bv15Name  in varchar2 default NULL,
305              bv15Value in varchar2 character set any_cs default NULL,
306              bv16Name  in varchar2 default NULL,
307              bv16Value in varchar2 character set any_cs default NULL,
308              bv17Name  in varchar2 default NULL,
309              bv17Value in varchar2 character set any_cs default NULL,
310              bv18Name  in varchar2 default NULL,
311              bv18Value in varchar2 character set any_cs default NULL,
312              bv19Name  in varchar2 default NULL,
313              bv19Value in varchar2 character set any_cs default NULL,
314              bv20Name  in varchar2 default NULL,
315              bv20Value in varchar2 character set any_cs default NULL,
316              bv21Name  in varchar2 default NULL,
317              bv21Value in varchar2 character set any_cs default NULL,
318              bv22Name  in varchar2 default NULL,
319              bv22Value in varchar2 character set any_cs default NULL,
320              bv23Name  in varchar2 default NULL,
321              bv23Value in varchar2 character set any_cs default NULL,
322              bv24Name  in varchar2 default NULL,
323              bv24Value in varchar2 character set any_cs default NULL,
324              bv25Name  in varchar2 default NULL,
325              bv25Value in varchar2 character set any_cs default NULL )
326          return integer;
327  
328  
329          /* Many forms of cellsprint.  First parm is always a query or       */
330          /* an open cursor (from owa_util.bind_variables above).             */
331          /* use max_rows to limit the number of rows displayed (default 100) */
332          /* set p_format_numbers to any NON-NULL value to have any field     */
333          /* that is an oracle number right justified with commas and rounded */
334          /* off to 2 decimal places (if it has decimals)                     */
335  
336       procedure cellsprint( p_colCnt         in integer,
337                             p_resultTbl      in vc_arr,
338                             p_format_numbers in varchar2 default NULL);
339  
340       procedure cellsprint( p_theQuery                in varchar2,
341                                   p_max_rows          in number default 100,
342                                   p_format_numbers    in varchar2 default NULL );
343  
344       procedure cellsprint( p_theCursor               in integer,
345                                   p_max_rows          in number  default 100,
346                                   p_format_numbers    in varchar2 default NULL );
347  
348          /* More involved cellsprint allows you to slice and dice a          */
349          /* result set.  Can be used to page up and down thru queries.  In   */
350          /* addition to the above you can tell it what row to start printing */
351          /* at (eg: skip the first 25 records and then print the next 25     */
352          /* records) and it will tell you. if there are more rows to print.  */
353          /* You would save the offset within the query in a hidden field to  */
354          /* paginate.                                                        */
355       procedure cellsprint( p_theQuery                in varchar2,
356                                   p_max_rows          in number default 100,
357                                   p_format_numbers    in varchar2 default NULL,
358                                   p_skip_rec          in number default 0,
359                                   p_more_data        out boolean );
360  
361       procedure cellsprint( p_theCursor               in integer,
362                                   p_max_rows          in number  default 100,
363                                   p_format_numbers    in varchar2 default NULL,
364                                   p_skip_rec          in number default 0,
365                                   p_more_data        out boolean );
366  
367       procedure cellsprint( p_theQuery                in varchar2,
368                                   p_max_rows          in number default 100,
369                                   p_format_numbers    in varchar2 default NULL,
370                                   p_reccnt           out number );
371  
372       procedure cellsprint( p_theCursor               in integer,
373                                   p_max_rows          in number  default 100,
374                                   p_format_numbers    in varchar2 default NULL,
375                                   p_reccnt           out number );
376  
377       procedure cellsprint( p_theQuery                in varchar2,
378                                   p_max_rows          in number default 100,
379                                   p_format_numbers    in varchar2 default NULL,
380                                   p_skip_rec          in number default 0,
381                                   p_more_data        out boolean,
382                                   p_reccnt           out number );
383  
384       procedure cellsprint( p_theCursor               in integer,
385                                   p_max_rows          in number  default 100,
386                                   p_format_numbers    in varchar2 default NULL,
387                                   p_skip_rec          in number default 0,
388                                   p_more_data        out boolean,
389                                   p_reccnt           out number );
390  
391          /* Create a multi select list, a drop down list or a single select      */
392          /* list.                                                                                                                        */
393          /* You send it a query that selects out in ORDER:                                       */
394          /* COLUMN 1 - What your procedure will get back                                         */
395          /* COLUMN 2 - What your user will see in the list box                           */
396          /* COLUMN 3 - a null or non-null field.  If the field is non-null,      */
397          /*              the current row will be flagged as SELECTED in the      */
398          /*                              list box                                                                                        */
399  
400  
401       procedure listprint( p_theCursor in integer,
402                                  p_cname     in varchar2,
403                                  p_nsize     in number,
404                                  p_multiple     in boolean default FALSE );
405  
406       procedure listprint( p_theQuery  in varchar2,
407                                  p_cname     in varchar2,
408                                  p_nsize     in number,
409                                  p_multiple     in boolean default FALSE );
410  
411  
412          /* procedure for displaying a Date field in html and allowing   */
413          /* the user to pick an arbritrary date.  This procedure uses    */
414          /* 3 html input fields to get the DAY, MONTH, and YEAR fields.  */
415          /* The procedure you write that recieves the input should have  */
416          /* an input variable of type owa_util.datetype.                                 */
417  
418          type dateType is table of varchar2(10) index by binary_integer;
419          procedure choose_date( p_name in varchar2, p_date in date default sysdate);
420          function todate( p_dateArray in dateType ) return date;
421  
422          empty_date      owa_util.datetype;
423  
424          /* routines to print calendars in html format                   */
425          procedure calendarprint( p_query  in varchar2,
426                                                                  p_mf_only in varchar2 default 'N' );
427          procedure calendarprint( p_cursor in integer,
428                                                                  p_mf_only in varchar2 default 'N' );
429  
430       /**********************************************************************/
431      /* Function to obtain the version number                              */
432     /**********************************************************************/
433     function get_version return varchar2;
434     PRAGMA RESTRICT_REFERENCES(get_version, WNDS, WNPS, RNDS);
435  
436       /**********************************************************************/
437      /* Procedure to print the version number                              */
438     /**********************************************************************/
439     procedure print_version;
440  
441       /************************************************************************/
442      /* Function to validate strings that gets set in HTTP header,cookie etc */
443     /************************************************************************/
444     function validate_arg(param in varchar2 character set any_cs) return varchar2;
445  
446  end;
447  /

Package created.

SQL> show errors
No errors.
SQL> 
SQL> @@pubsec.sql
SQL> rem
SQL> rem
SQL> Rem  Copyright (c) 1996, 1997 by Oracle Corporation. All rights reserved.
SQL> Rem    NAME
SQL> Rem      pubsec.sql
SQL> Rem    DESCRIPTION
SQL> Rem      This file contains one package:
SQL> Rem         owa_sec - Utitility procedures/functions to provide security
SQL> Rem                     to procedures accessed via the PL/SQL Agent.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This package allows the developer to access the Web client's
SQL> Rem      authentication information to perform authorization check before
SQL> Rem      a stored procedure is invoked by the PL/SQL Agent.
SQL> Rem
SQL> Rem      Though these procedures and functions are intended to be used by
SQL> Rem      the authorization callback procedures, they can be called by the
SQL> Rem      execution procedures as well.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     mpal       05/12/97 -  Add Custom authentication
SQL> Rem     rpang      06/29/96 -  Creation
SQL> Rem
SQL> 
SQL> create or replace package OWA_SEC is
  2  
  3       /*******************************************************************/
  4      /* PL/SQL Agent's authorization schemes                            */
  5     /*******************************************************************/
  6     NO_CHECK    constant integer := 1; /* no authorization check             */
  7     GLOBAL      constant integer := 2; /* global check by a single procedure */
  8     PER_PACKAGE constant integer := 3; /* use auth procedure in each package */
  9     CUSTOM      constant integer := 4; /* use custom auth procedure          */
 10                                        /*              owa_custom.authorize  */
 11  
 12       /*******************************************************************/
 13      /* Procedure to specify the PL/SQL Agent's authorization scheme    */
 14     /*******************************************************************/
 15     procedure set_authorization(scheme in integer);
 16  
 17       /*******************************************************************/
 18      /* Functions to obtain the Web client's authentication information */
 19     /*******************************************************************/
 20     function get_user_id         return varchar2;
 21     function get_password        return varchar2;
 22     function get_client_ip       return owa_util.ip_address;
 23     function get_client_hostname return varchar2;
 24  
 25       /*******************************************************************/
 26      /* Procedure to specify the dynamic page's protection realm        */
 27     /*******************************************************************/
 28     procedure set_protection_realm(realm in varchar2);
 29  
 30  end;
 31  /

Package created.

SQL> show errors
No errors.
SQL> 
SQL> @@pubowa.sql
SQL> rem
SQL> rem
SQL> Rem  Copyright (c) 1995, 1996, 1997 by Oracle Corporation. All rights reserved.
SQL> Rem    NAME
SQL> Rem      pubowa.sql - package of procedures called directly from OWA
SQL> Rem    DESCRIPTION
SQL> Rem      This file contains one package:
SQL> Rem         owa     - These procedures are interface procedures for
SQL> Rem                     the Oracle Web Agent.  These procedures should
SQL> Rem                     not be called by an end-user.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      The Oracle Web Agent is needed to use these facilities.
SQL> Rem      The package htp is needed to use these facilities.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     pkapasi    10/18/06 - Enhancement Request#5610575: add reset_get_page
SQL> Rem     pkapasi    07/25/02 - Use NOCOPY for performance (bug#2482024)
SQL> Rem     pkapasi    08/21/01 - Fix bug#1930471
SQL> Rem     skwong     07/20/01 - Add RAW support to GET_PAGE interfaces
SQL> Rem     pkapasi    06/17/01 - Add support for EBCDIC databases(bug#1778693)
SQL> Rem     pkapasi    06/12/01 - Merge OAS specific helper functions
SQL> Rem     ehlee      10/06/00 - Increase vc_arr varchar2 size from 2000 to 32000
SQL> Rem     ehlee      06/01/00 - Remove bug fix #1291321 as it causes problems
SQL> Rem     pkapasi    05/08/00 - Fix bug#1291321
SQL> Rem     rdasarat   01/22/98 - Overload init_cgi_env procedure
SQL> Rem     rpang      01/27/97 - Restored PRAGMA RESTRICT_REFERENCES (bug#439474)
SQL> Rem     rpang      01/27/97 - Added initialize procedure
SQL> Rem     rpang      07/03/96 - Added package variables for authorization
SQL> Rem     mbookman   03/04/96 - Asserted the purity of the OWA initialization
SQL> Rem     mbookman   03/04/96 - Added package variable num_cgi_vars (314403)
SQL> Rem     mbookman   07/09/95 - Creation
SQL> 
SQL> REM Creating OWA package...
SQL> create or replace package OWA is
  2     PRAGMA RESTRICT_REFERENCES(owa, WNDS, RNDS, WNPS, RNPS);
  3  
  4     type vc_arr is table of varchar2(32000) index by binary_integer;
  5     type nc_arr is table of nvarchar2(16000) index by binary_integer;
  6     type raw_arr is table of raw(32000) index by binary_integer;
  7  
  8     cgi_var_name vc_arr;
  9     cgi_var_val  vc_arr;
 10     num_cgi_vars number;
 11  
 12     NL_CHAR constant varchar2(1) := owa_cx.nl_char;
 13     SP_CHAR constant varchar2(1) := owa_cx.sp_char;
 14     BS_CHAR constant varchar2(1) := owa_cx.bs_char;
 15     HT_CHAR constant varchar2(1) := owa_cx.ht_char;
 16     XP_CHAR constant varchar2(1) := owa_cx.xp_char;
 17  
 18     auth_scheme       integer;
 19     protection_realm  varchar2(255);
 20     user_id           varchar2(255);
 21     password          varchar2(255);
 22     ip_address        owa_util.ip_address;
 23     hostname          varchar2(255);
 24  
 25         /*******************************************************************/
 26        /* Initialize function -                                           */
 27       /*    This function is called when a DCD is invoked for the first  */
 28      /*   time when PL/SQL Agent starts up.                             */
 29     /*******************************************************************/
 30     function initialize return integer;
 31  
 32       /********************************************/
 33      /* Initialize the CGI environment variables */
 34     /********************************************/
 35     procedure init_cgi_env (param_val  in vc_arr);
 36     procedure init_cgi_env (num_params in number,
 37                             param_name in vc_arr,
 38                             param_val  in vc_arr);
 39  
 40       /*****************************************/
 41      /* Get the output from the user's PL/SQL */
 42     /*****************************************/
 43     function  get_line (irows out integer) return varchar2;
 44     procedure get_page (thepage     out NOCOPY htp.htbuf_arr,
 45                         irows    in out integer );
 46     /* Start of OAS specific helper procedures */
 47     procedure get_page_charset_convert (thepage     out NOCOPY htp.htbuf_arr,
 48                         irows    in out integer ,
 49                         charset in varchar2 );
 50     /* End of OAS specific helper procedures */
 51  
 52     /* The raw interface to match HTP */
 53     procedure get_page_raw (thepage out NOCOPY htp.htraw_arr,
 54                         irows in out integer);
 55  
 56     procedure reset_get_page;
 57  
 58     /* Set package globals */
 59     procedure set_user_id(usr in varchar2);
 60     procedure set_password(pwd in varchar2);
 61  
 62     /* Enable raw transfer mode */
 63     procedure set_transfer_mode(tmode in varchar2);
 64  end;
 65  /

Package created.

SQL> show errors package OWA
No errors.
SQL> 
SQL> @@pubtext.sql
SQL> rem
SQL> rem
SQL> Rem  Copyright (c) 1995, 1996, 1997 by Oracle Corporation. All rights reserved.
SQL> Rem    NAME
SQL> Rem      pubtext.sql
SQL> Rem    DESCRIPTION
SQL> Rem      This file contains one package:
SQL> Rem         owa_text - Utitility procedures/functions for manipulating
SQL> Rem                       large amounts of text.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     mbookman   11/29/95 -  Creation
SQL> 
SQL> create or replace package OWA_TEXT is
  2  
  3     /*
  4     The package OWA_TEXT provides an utility functions for handling
  5     large amounts of text.  These utilities mainly provide the ability
  6     to turn a single stream of text into an array of individual lines.
  7     These utilities are primarily used by the OWA_PATTERN package,
  8     but may also be used independently.
  9     */
 10  
 11     type vc_arr is table of varchar2(32767) index by binary_integer;
 12     type int_arr is table of integer index by binary_integer;
 13  
 14     /* A multi_line is just an abstract datatype which can hold */
 15     /* large amounts of text data as one piece.                 */
 16     type multi_line is record
 17     (
 18        rows        vc_arr,
 19        num_rows    integer,
 20        partial_row boolean
 21     );
 22  
 23     /* row_list is used to contain a list of "interesting" rows */
 24     type row_list is record
 25     (
 26        rows        int_arr,
 27        num_rows    integer
 28     );
 29  
 30     /* Standard "make element" routines. */
 31     function  new_multi return multi_line;
 32     procedure new_multi(mline out multi_line);
 33  
 34     /* STREAM2MULTI takes in a single stream of text and will turn */
 35     /* it into a multi_line structure.                             */
 36     procedure stream2multi(stream in varchar2, mline out multi_line);
 37     /* ADD2MULTI allows you to easily add new text to a multi-line */
 38     /* structure.                                                  */
 39     procedure add2multi(stream   in     varchar2,
 40                         mline    in out multi_line,
 41                         continue in     boolean DEFAULT TRUE);
 42  
 43     /* PRINT_MULTI uses HTP.PRINT to print out a multi-line structure */
 44     procedure print_multi(mline in multi_line);
 45  
 46     /* For manipulating row_list structures - standard creation routines */
 47     function  new_row_list return row_list;
 48     procedure new_row_list(rlist out row_list);
 49  
 50     /* Print a row list using HTP.PRINT */
 51     procedure print_row_list(rlist in row_list);
 52  
 53  end;
 54  /

Package created.

SQL> show errors
No errors.
SQL> @@pubpat.sql
SQL> rem
SQL> rem
SQL> Rem  Copyright (c) 1995, 1996, 1997 by Oracle Corporation. All rights reserved.
SQL> Rem    NAME
SQL> Rem      pubpat.sql
SQL> Rem    DESCRIPTION
SQL> Rem      This file contains one package:
SQL> Rem         owa_pattern - Utitility procedures/functions for matching
SQL> Rem                       and changing values in text strings.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This packages is dependent on the package OWA_TEXT.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     mbookman   11/29/95 -  Creation
SQL> 
SQL> create or replace package OWA_PATTERN is
  2  
  3     /*
  4     The package OWA_PATTERN is a "regular expression" pattern matching
  5     package.  There are 3 fundamental subprograms in OWA_PATTERN.
  6     The are: AMATCH, MATCH, and CHANGE.
  7  
  8     MATCH provides the ability to determine *if* a pattern exists in a
  9     string.
 10  
 11     AMATCH provides more flexibilty to specify *WHERE* in the string to
 12     search for the pattern and also gives more information in return by
 13     indicating *WHERE* in the string the end of the pattern was found.
 14  
 15     CHANGE provides the ability to change occurances of a matched pattern
 16     to a new string.
 17  
 18     The algorithms used here are derived from "Software Tools" by Brian
 19     Kernighan.  These algorithms have been extended to support most of
 20     Perl's pattern matching functionality.
 21  
 22     The regular expression elements that are supported are:
 23  
 24     Assertions:
 25     ----------
 26     ^ Matches the beginning of a line (or string)
 27     $ Matches the end of a line (or string)
 28  
 29     Quantifiers:
 30     -----------
 31     {n,m} Must match at least n times, but not more than m times
 32      {n,} Must match at least n times
 33       {n} Must match exactly n times.
 34         * 0 or more occurances
 35         + 1 or more occurances
 36         ? 0 or 1 occurance(s)
 37  
 38     Legal atoms:
 39     -----------
 40     . matches any character except \n
 41  
 42     A list of characters in square brackets [] is a class of characters,
 43     for example [0-9] indicates match any character from 0 to 9.
 44  
 45     \n matches newlines
 46     \t matches tabs
 47     \d matches digits [0-9]
 48     \D matches non-digits [^0-9]
 49     \w matches word characters (alphanumeric) [0-9a-z_A-Z]
 50     \W matches non-word characters [^0-9a-z_A-Z]
 51     \s matches whitespace characters [ \t\n]
 52     \S matches non-whitespace characters [^ \t\n]
 53     \b matches on "word" boundaries (between \w and \W)
 54  
 55     A backslashed x followed by two hexadecimal digits, such as \x7f,
 56     matches the character having that hexadecimal value.
 57  
 58     A backslashed 2 or 3 digit octal number such as \033 matches the
 59     character with the specified value.
 60  
 61     Any other "backslashed" character matches itself.
 62  
 63     Valid flags passed to CHANGE, MATCH, AMATCH:
 64     -------------------------------------------
 65     i - perform pattern matching in a case-insensitive manner.
 66     g - perform all changes globally (all occurances)
 67  
 68     Replacements
 69     ------------
 70     ampersand can be used in the substitution string to "re-place" that which
 71     has been matched.
 72  
 73     For example: change('Oracle 7.1.3', '\d\.\d\.\d', 'Version &');
 74  
 75                  yields: Oracle Version 7.1.3
 76  
 77     \<n> can be used to do backreferences, meaning to replace portions of
 78        the matched string:
 79  
 80        change('Matt Bookman','(Matt) (Bookman)','\2, \1')
 81            --> Bookman, Matt
 82  
 83     Match Extraction
 84     ----------------
 85     One can extract the matched values from the parenthesized patterns,
 86     for example:
 87  
 88     declare
 89        string     varchar2(32767);
 90        components owa_text.vc_arr;
 91     begin
 92        string := 'Today is 01/04/72';
 93        if (owa_pattern.match(string, '(\d\d)/(\d\d)/(\d\d)', components))
 94        then
 95           htp.print('The month is '||components(1));
 96           htp.print('The day is '||components(2));
 97           htp.print('The year is '||components(3));
 98        end if;
 99     end;
100  
101     Possible future enhancements:
102     -----------------------------
103     * \B - match on non-"word" boundaries (between \w and \w, or \W and \W)
104  
105     * "or" character matches:
106         change(text,'(Unix|unix)','UNIX') would change both occurances
107  
108     * Using control character references:
109  
110          A backslashed c followed by a single character, such as \cD, matches
111          the corresponding control character.
112  
113     -- No support for:
114     --   \b == Backspace (in a character class)
115     --   \r == Carriage return
116     --   \f == Form feed
117     -- Modified support for:
118     --   \s == A whitespace charcter -> [ \t\n\r\f]
119     --   \S == A non-whitespace character
120  
121     */
122  
123     type pattern is table of varchar2(4) index by binary_integer;
124     /* pattern must be able to hold a value for "Character Classes"
125        indicating the number of items in that character class.  For
126        single-byte character sets, which this currently supports,
127        there are no more than 256 characters. */
128  
129     procedure getpat(arg in varchar2, pat in out pattern);
130  
131     /* The easiest to use of the "match" functions is the first.  */
132     /* The second one would be used in the case where you wanted   */
133     /* to perform some optimizations and you were matching against */
134     /* the same pattern repeatedly.  You could use getpat to build */
135     /* the pattern, then call match (2nd version) and amatch       */
136     /* repeatedly.                                                 */
137     function match(line  in varchar2,
138                    pat   in varchar2,
139                    flags in varchar2 DEFAULT NULL) return boolean;
140     function match(line  in     varchar2,
141                    pat   in out pattern,
142                    flags in     varchar2 DEFAULT NULL) return boolean;
143  
144     function match(line  in        varchar2,
145                    pat   in        varchar2,
146                    backrefs    out owa_text.vc_arr,
147                    flags in        varchar2 DEFAULT NULL) return boolean;
148     function match(line     in     varchar2,
149                    pat      in out pattern,
150                    backrefs    out owa_text.vc_arr,
151                    flags    in     varchar2 DEFAULT NULL) return boolean;
152  
153     /* Parameters to MATCH */
154     /* line  - Any text string.                                       */
155     /* pat   - In the first call, pat is a regular expression.        */
156     /*         In the second, pat has been generated by getpat.       */
157     /* flags - only valid value currently is 'i' for case-insensitive */
158     /*         searches.                                              */
159  
160     /* Function returns whether or not a match was made.              */
161  
162     /* The following MATCH functions perform matches on multi-line text */
163     /* objects.                                                         */
164     function match(mline  in     owa_text.multi_line,
165                    pat    in     varchar2,
166                    rlist     out owa_text.row_list,
167                    flags  in     varchar2 DEFAULT NULL) return boolean;
168     function match(mline  in     owa_text.multi_line,
169                    pat    in out pattern,
170                    rlist     out owa_text.row_list,
171                    flags  in     varchar2 DEFAULT NULL) return boolean;
172  
173     /* AMATCH */
174     function amatch(line     in varchar2,
175                     from_loc in integer,
176                     pat      in varchar2,
177                     flags    in varchar2 DEFAULT NULL) return integer;
178     function amatch(line     in     varchar2,
179                     from_loc in     integer,
180                     pat      in out pattern,
181                     flags    in     varchar2 DEFAULT NULL) return integer;
182  
183     function amatch(line     in     varchar2,
184                     from_loc in     integer,
185                     pat      in     varchar2,
186                     backrefs    out owa_text.vc_arr,
187                     flags    in     varchar2 DEFAULT NULL) return integer;
188     function amatch(line     in     varchar2,
189                     from_loc in     integer,
190                     pat      in out pattern,
191                     backrefs    out owa_text.vc_arr,
192                     flags    in     varchar2 DEFAULT NULL) return integer;
193  
194     /* Parameters to AMATCH */
195     /* line  - Any text string.                                        */
196     /* from_loc - Indicates the index of the first character in "line" */
197     /*            to try to match.                                     */
198     /* pat   - See MATCH above.                                        */
199     /* flags - See MATCH above.                                        */
200  
201     /* Function returns the index of the first character after the end */
202     /* of the match.                                                   */
203  
204     function change(line     in out varchar2,
205                     from_str in     varchar2,
206                     to_str   in     varchar2,
207                     flags    in     varchar2 DEFAULT NULL) return integer;
208  
209     procedure change(line     in out varchar2,
210                      from_str in     varchar2,
211                      to_str   in     varchar2,
212                      flags    in     varchar2 DEFAULT NULL);
213  
214     /* Parameters to CHANGE */
215     /* line     - Any text string.                                     */
216     /* from_str - The regular expression to match in "line".           */
217     /* to_str   - The substitution pattern to replace "from_str"       */
218     /* flags    - i - case-insensitive search                          */
219     /*            g - make changes "g"lobally - each occurance.        */
220     /*            By default CHANGE quits after the first match.       */
221     /* Function returns the number of matches made.                    */
222  
223     function change(mline    in out owa_text.multi_line,
224                     from_str in     varchar2,
225                     to_str   in     varchar2,
226                     flags    in     varchar2 DEFAULT NULL) return integer;
227  
228     procedure change(mline    in out owa_text.multi_line,
229                      from_str in     varchar2,
230                      to_str   in     varchar2,
231                      flags    in     varchar2 DEFAULT NULL);
232  
233     /* Parameters to CHANGE */
234     /* mline    - A multi-line structure containing text strings.      */
235     /* from_str - The regular expression to match in "mline".          */
236     /* to_str   - The substitution pattern to replace "from_str"       */
237     /* flags    - i - case-insensitive search                          */
238     /*            g - make changes "g"lobally - each occurance.        */
239     /*            By default CHANGE quits after the first match on     */
240     /*            each line.                                           */
241     /* Function returns the number of matches made.                    */
242  
243  end;
244  /

Package created.

SQL> show errors
No errors.
SQL> @@pubimg.sql
SQL> rem
SQL> rem
SQL> Rem  Copyright (c) 1995, 1996, 1997 by Oracle Corporation. All rights reserved.
SQL> Rem    NAME
SQL> Rem      pubimg.sql
SQL> Rem    DESCRIPTION
SQL> Rem      This file contains one package:
SQL> Rem         owa_image - Utitility procedures/functions for handling image
SQL> Rem                     map (x,y) coordinates.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This package allows the developer to easily handle clickable
SQL> Rem      image input using the Oracle Web Agent.
SQL> Rem
SQL> Rem      When a user clicks on an image (suppose the NAME field of the image
SQL> Rem      is "IMG") and the action of that image is to call the Web Agent,
SQL> Rem      the Web Agent will take the two values, IMG.X and IMG.Y and turn
SQL> Rem      them into a "POINT".  The web developer can then access the x,y
SQL> Rem      values as follows:
SQL> Rem
SQL> Rem      create or replace procedure process_img(img in OWA_IMAGE.POINT) is
SQL> Rem         x integer := OWA_IMAGE.GET_X(img);
SQL> Rem         y integer := OWA_IMAGE.GET_Y(img);
SQL> Rem      begin
SQL> Rem         /* You've got x and y.  Do whatever you like. */
SQL> Rem      end;
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     mbookman   03/13/96 -  Add NULL_POINT
SQL> Rem     mbookman   12/14/95 -  Creation
SQL> 
SQL> create or replace package OWA_IMAGE is
  2  
  3     /* The Web Agent can only pass PL/SQL tables of characters, */
  4     /* but technically, this should be integers.                */
  5     /* PL/SQL will take care of the casting of values.          */
  6     type point is table of varchar2(32767) index by binary_integer;
  7  
  8     NULL_POINT point;
  9  
 10     function get_x(p in point) return integer;
 11     function get_y(p in point) return integer;
 12  
 13     PRAGMA RESTRICT_REFERENCES(get_x, WNDS, WNPS, RNDS, RNPS);
 14     PRAGMA RESTRICT_REFERENCES(get_y, WNDS, WNPS, RNDS, RNPS);
 15  
 16     PRAGMA RESTRICT_REFERENCES(owa_image, WNDS, RNDS,       RNPS);
 17  
 18  end;
 19  /

Package created.

SQL> show errors
No errors.
SQL> 
SQL> @@pubcook.sql
SQL> Rem  Copyright (c) 1996, 2008 by Oracle Corp.  All Rights Reserved.
SQL> Rem
SQL> Rem   NAME
SQL> Rem     pubcook.sql - Wrappers for passing HTTP_COOKIES using
SQL> Rem                   the Oracle Web Agent.
SQL> Rem   PURPOSE
SQL> Rem
SQL> Rem   NOTES
SQL> Rem     This package depends on the PL/SQL package OWA_INIT,
SQL> Rem     namely, the constants DBMS_SERVER_GMTDIFF and
SQL> Rem     DBMS_SERVER_TIMEZONE, because HTTP cookies require
SQL> Rem     timestamps to be in GMT.
SQL> Rem
SQL> Rem   HISTORY
SQL> Rem     akatti     09/12/08 -  Fix bug#7626491 httponly default value corrected
SQL> Rem     akatti     06/10/08 -  Fix bug#7433906 Add httponly support for cooki
SQL> Rem     pkapasi    01/11/01 -  Fix bug#1580414
SQL> Rem     mbookman   02/06/96 -  Creation
SQL> Rem
SQL> 
SQL> create or replace package OWA_COOKIE is
  2  
  3     -- These procedures/functions are merely wrappers around
  4     -- calls to send an HTTP_COOKIE and to get an HTTP_COOKIE.
  5     -- One should be familiar with the specification for
  6     -- HTTP cookies before attempting to use these subprograms.
  7  
  8     -- The HTTP specification for a COOKIE indicates that it
  9     -- cookie name/value pairs should not exceed 4k in size.
 10     type vc_arr is table of varchar2(4096) index by binary_integer;
 11  
 12     -- structure for cookies, as you could have multiple values
 13     -- associated with a single cookie name.
 14     type cookie is RECORD
 15     (
 16        name     varchar2(4096),
 17        vals     vc_arr,
 18        num_vals integer
 19     );
 20     -- Initializes the owa_cookie package variables (called by htp.init)
 21     procedure init;
 22  
 23     -- Calls to the procedure SEND generate an HTTP header line
 24     -- of the form:
 25     -- Set-Cookie: <name>=<value> expires=<expires> path=<path>
 26     --             domain=<domain> [secure] [HttpOnly]
 27     -- Only the name and value are required (as per the HTTP_COOKIE spec),
 28     -- and the default is non-secure.
 29     -- Calls to SEND must fall in the context of an OWA procedure's
 30     -- HTTP header output.  For example:
 31  
 32     -- begin
 33     --    owa_util.mime_header('text/html', FALSE);
 34     --                -- FALSE indicates not to close the header
 35     --    owa_cookie.send('ITEM1','SOCKS');
 36     --    owa_cookie.send('ITEM2','SHOES');
 37     --    owa_util.http_header_close;
 38     --
 39     --    -- Now output the page the user will see.
 40     --    htp.htmlOpen;
 41     --    <etc>
 42     procedure send(name     in varchar2,
 43                    value    in varchar2,
 44                    expires  in date     DEFAULT NULL,
 45                    path     in varchar2 DEFAULT NULL,
 46                    domain   in varchar2 DEFAULT NULL,
 47                    secure   in varchar2 DEFAULT NULL,
 48                    httponly in varchar2 DEFAULT NULL);
 49  
 50     -- GET will return an OWA_COOKIE.COOKIE structure
 51     -- for the specified cookie name.
 52     function get(name in varchar2) return cookie;
 53  
 54     -- REMOVE will simply force the expiration of an existing cookie.
 55     -- This call must come within the context of an HTTP header.
 56     -- See the definition of SEND above.
 57     -- REMOVE generates a line which looks like:
 58     -- Set-Cookie: <name>=<value> expires=01-JAN-1990
 59     procedure remove(name in varchar2,
 60                      val  in varchar2,
 61                      path in varchar2 DEFAULT NULL);
 62  
 63     -- GET_ALL returns an array of name/value pairs of all HTTP_COOKIES
 64     -- sent from the browser.  The name/value pairs appear in the order
 65     -- that they were sent from the browser.
 66     procedure get_all(names    out vc_arr,
 67                       vals     out vc_arr,
 68                       num_vals out integer);
 69  end;
 70  /

Package created.

SQL> show errors
No errors.
SQL> @@puboolk.sql
SQL> rem
SQL> rem
SQL> Rem  Copyright (c) 1996, 1997 by Oracle Corporation. All rights reserved.
SQL> Rem    NAME
SQL> Rem      puboolk.sql - package of various OWA OPTIMISTIC LOCKING procedures
SQL> Rem    DESCRIPTION
SQL> Rem      This file contains one package:
SQL> Rem         owa_opt_lock    - Utitility procedures/functions for use
SQL> Rem                           with the Oracle Web Agent
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      The Oracle Web Agent is needed to use these facilities.
SQL> Rem      The package owa is needed to use these facilities.
SQL> Rem      The package owa_util is needed to use these facilities.
SQL> Rem      The packages htp and htf are needed to use these facilities.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     vtropas 08/26/15  - 21683691
SQL> Rem     mpal       06/24/96 -  Creation
SQL> 
SQL> REM Creating OWA_OPT_LOCK package...
SQL> create or replace package OWA_OPT_LOCK AUTHID CURRENT_USER
  2  as
  3  
  4          type vcArray is table of varchar2(2000) index by binary_integer;
  5  
  6          pragma restrict_references( owa_opt_lock, wnds, rnds, wnps, rnps );
  7  
  8          /* Function to calculate checksum values */
  9          function checksum( p_buff in varchar2 ) return number;
 10          pragma restrict_references( checksum, wnds, rnds, wnps, rnps );
 11  
 12          function checksum( p_owner in varchar2,
 13                                             p_tname in varchar2,
 14                                             p_rowid in rowid ) return number;
 15  
 16          /* Procedures to store and verify row values for optimistic locking */
 17          procedure store_values( p_owner in varchar2,
 18                                                       p_tname in varchar2,
 19                                                       p_rowid in rowid );
 20  
 21          function verify_values( p_old_values in vcArray ) return boolean;
 22  
 23          function get_rowid( p_old_values in vcArray ) return rowid;
 24          pragma restrict_references( get_rowid, wnds, rnds, wnps, rnps );
 25  
 26  end;
 27  /

Package created.

SQL> show errors
No errors.
SQL> @@pubcach.sql
SQL> Rem  Copyright (c) 1999, 2000 by Oracle Corp.  All Rights Reserved.
SQL> Rem
SQL> Rem   NAME
SQL> Rem     pubcach.sql - PUBlic CACHe package
SQL> Rem   PURPOSE
SQL> Rem     Provide cache functions for caching PL/SQL generated contents
SQL> Rem   NOTES
SQL> Rem     This file is used to implement PL/SQL caching in the PL/SQL Gateway.
SQL> Rem     This script should be run by the owner of the OWA packages.
SQL> Rem   MODIFIED   (MM/DD/YY)
SQL> Rem    cvanes     05/12/14 - 18322709: Correct comment for
SQL> Rem                          owa_cache.set_surrogate_control
SQL> Rem    ehlee      07/11/01 - adding Surrogate-Control reserve header
SQL> Rem    ehlee      06/20/00 - adding Expires model support
SQL> Rem    ehlee      05/11/00 - add check for GATEWAY_IVERSION
SQL> Rem    ehlee      05/02/00 - creation
SQL> Rem
SQL> 
SQL> CREATE OR replace PACKAGE owa_cache
  2  AS
  3    --
  4    -- Public types and global variables
  5    --
  6  
  7    -- The different caching levels. For now, just user and system.
  8    system_level CONSTANT VARCHAR(6) := 'SYSTEM';
  9    user_level   CONSTANT VARCHAR(4) := 'USER';
 10  
 11    --
 12    -- PROCEDURE:
 13    --   init
 14    -- DESCRIPTION:
 15    --   Reserve header spaces
 16    -- PARAMS:
 17    --   p_htbuf    IN/OUT: the buffer to reserve the headers in
 18    --   p_rows_in  IN/OUT: the current row number in that buffer
 19    -- NOTE:
 20    --   Should only be called before any data is written to the htbuf
 21    --
 22    PROCEDURE init(p_htbuf IN OUT NOCOPY htp.htbuf_arr, p_rows_in IN OUT number);
 23  
 24    --
 25    -- PROCEDURE:
 26    --   disable
 27    -- DESCRIPTION:
 28    --   Disables the cache
 29    --
 30    PROCEDURE disable;
 31  
 32    --
 33    -- PROCEDURE:
 34    --   set_expires
 35    -- DESCRIPTION:
 36    --   Sets up the cache headers
 37    -- PARAMS:
 38    --   p_expires  IN: number of minutes this cached item is fresh
 39    --   p_level    IN: the caching level for it (USER or SYSTEM for now)
 40    -- EXCEPTIONS:
 41    --   VALUE_ERROR : If p_expires is negative or zero, or p_level is not
 42    --                 'USER' or 'SYSTEM', this exception is thrown
 43    --                 If p_expires is > 525600 (1 year), this exception is thrown
 44    PROCEDURE set_expires(p_expires IN number, p_level IN varchar2);
 45  
 46    --
 47    -- PROCEDURE:
 48    --   set_cache
 49    -- DESCRIPTION:
 50    --   Sets up the cache headers
 51    -- PARAMS:
 52    --   p_etag     IN: the ETag associated with this content
 53    --   p_level    IN: the caching level for it (USER or SYSTEM for now)
 54    -- EXCEPTIONS:
 55    --   VALUE_ERROR : If p_etag is greater than 55 in length or p_level is
 56    --                 not 'USER' or 'SYSTEM', this exception is thrown
 57    --
 58    PROCEDURE set_cache(p_etag IN varchar2, p_level IN varchar2);
 59  
 60    --
 61    -- PROCEDURE:
 62    --   set_not_modified
 63    -- DESCRIPTION:
 64    --   Sets up the headers for a not modified cache hit
 65    -- EXCEPTIONS:
 66    --   VALUE_ERROR : If the ETag wasn't passed in, this exception is thrown
 67    --
 68    PROCEDURE set_not_modified;
 69  
 70    --
 71    -- PROCEDURE:
 72    --   set_surrogate_control
 73    -- DESCRIPTION:
 74    --   Sets up the headers for a surrogate-control header for web cache
 75    -- PARAMS:
 76    --   p_value    IN: value to be passed as the Surrogate-Control header
 77    -- EXCEPTIONS:
 78    --   VALUE_ERROR : If p_value is greater than 236 in length
 79    --
 80    PROCEDURE set_surrogate_control(p_value IN varchar2);
 81  
 82    --
 83    -- FUNCTION:
 84    --   get_level
 85    -- DESCRIPTION:
 86    --   Returns the caching level
 87    -- PARAMS:
 88    --   none
 89    -- RETURN:
 90    --   The caching level string (USER or SYSTEM for now)
 91    --
 92    FUNCTION get_level
 93      RETURN VARCHAR2;
 94  
 95    --
 96    -- FUNCTION:
 97    --   get_etag
 98    -- DESCRIPTION:
 99    --   Returns the caching etag
100    -- PARAMS:
101    --   none
102    -- RETURN:
103    --   The caching etag string
104    --
105    FUNCTION get_etag
106      RETURN VARCHAR2;
107  
108  END owa_cache;
109  /

Package created.

SQL> show errors package owa_cache
No errors.
SQL> 
SQL> 
SQL> 
SQL> @@pubmat.sql
SQL> Rem  Copyright (c) 2004, Oracle. All rights reserved.
SQL> Rem    NAME
SQL> Rem      pubmat.sql - package of various OWA utility procedures
SQL> Rem    DESCRIPTION
SQL> Rem      This file contains one package:
SQL> Rem         owa_match   - Utitility procedures/functions for use
SQL> Rem                       with the Oracle Web Agent
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      The Oracle Web Agent is needed to use these facilities.
SQL> Rem      The package owa_match is needed to use these facilities.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     dnonkin    08/12/04 -  Creation
SQL> 
SQL> create or replace package owa_match
  2  
  3  as
  4  
  5      empty_vc_arr owa_util.vc_arr;
  6  
  7      function match_pattern
  8      (
  9          p_string            in varchar2,
 10          p_simple_pattern    in owa_util.vc_arr default empty_vc_arr,
 11          p_complex_pattern   in owa_util.vc_arr default empty_vc_arr,
 12          p_use_special_chars in boolean         default true
 13      )
 14      return boolean;
 15  
 16  end owa_match;
 17  
 18  /

Package created.

SQL> 
SQL> show errors package owa_match
No errors.
SQL> 
SQL> 
SQL> @@wpgdocs.sql
SQL> Rem
SQL> Rem $Header: wwg_src_1/admin/owa/wpgdocs.sql /main/10 2015/04/13 15:41:00 vtropash Exp $
SQL> Rem
SQL> Rem wpgdocs.sql
SQL> Rem
SQL> Rem Copyright (c) 1998, 2015, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem     wpgdocs.sql - PL/SQL Gateway Document upload/download package Spec
SQL> Rem
SQL> Rem    NOTES
SQL> Rem     This file is used to implement document upload and download
SQL> Rem     features in the PL/SQL Gateway.
SQL> Rem    **IMPORTANT**
SQL> Rem     When making changes to this file, please remember to update
SQL> Rem     the v7 version of this file (wpgdocs7.sql) as well.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     vtropash   06/18/14 - co bug 17892420
SQL> Rem     akatti     03/22/05 - Fix bug#3119039 define get_download_file_raw
SQL> Rem     ehlee      08/31/00 - Fix for freeing temporary blobs (bug#1377860)
SQL> Rem     rdecker    08/07/00 - fix comments
SQL> Rem     kmuthukk   04/19/00 - move synonym creation to owaload.sql
SQL> Rem     kmuthukk   01/20/99 - update name/comments above.
SQL> Rem     rdecker    11/29/99 - add BFILE comments
SQL> Rem     rdecker    11/18/99 - add bfile download support
SQL> Rem     rdecker    11/16/99 - blob download support
SQL> Rem     rdecker    10/13/99 - fix parts table
SQL> Rem     rdecker    10/11/99 - USE document TABLE env variable
SQL> Rem     rdecker    09/22/99 - phase 2 blob upload support
SQL> Rem     rdecker    09/14/99 - Created
SQL> Rem
SQL> 
SQL> 
SQL> Rem Creating WPG_DOCLOAD package...
SQL> CREATE OR replace PACKAGE wpg_docload AUTHID CURRENT_USER
  2  AS
  3  
  4  --
  5  -- Public types and global variables
  6  --
  7  TYPE parts_table IS TABLE OF VARCHAR2(256) INDEX BY binary_integer;
  8  
  9  -- The NAME column in your document table must be the same as the
 10  -- value of name_col_len.
 11  name_col_len CONSTANT pls_integer := 64;
 12  
 13  -- The MIME_TYPE column in your document table must be the same as
 14  -- the value of mimet_col_len.
 15  mimet_col_len CONSTANT pls_integer := 48;
 16  
 17  -- The name length of your document table must be less than
 18  -- max_doctable_name_len.
 19  max_doctable_name_len CONSTANT pls_integer := 256;
 20  
 21  --
 22  -- Public file upload/download procedures and functions
 23  --
 24  
 25  --
 26  -- PROCEDURE:
 27  --   download_file
 28  -- DESCRIPTION:
 29  --   This should be called from within a document download procedure
 30  --   to signal the PL/SQL Gateway that p_filename is to be downloaded
 31  --   from the document table to the client's browser.
 32  --   Normally, a document will be downloaded to the browser unless the
 33  --   browser sends an 'If-Modified-Since' header to the gateway indicating
 34  --   that it has the requested document in its cache.  In that case,
 35  --   the gateway will determine if the browser's cached copy is up to date,
 36  --   and if it is, it will send a 304 message to the browser indicating
 37  --   that the browser should display the cached copy.  However, because
 38  --   a document URL and a document do not necessarily have a one-to-one
 39  --   relationship in the PL/SQL Web Gateway, in some cases it may be
 40  --   undesirable to have the cached copy of a document displayed.  In those
 41  --   cases, the p_bcaching parameter should be set to FALSE to indicate to
 42  --   the gateway to ignore the 'If-Modified-Since' header, and download the
 43  --   document.
 44  -- PARAMS:
 45  --   p_filename   IN: file to download from the document table.
 46  --   p_bcaching   IN: browser caching enabled?
 47  --
 48  PROCEDURE download_file(p_filename IN VARCHAR2,
 49                          p_bcaching IN BOOLEAN DEFAULT true);
 50  
 51  --
 52  -- PROCEDURE:
 53  --   download_file
 54  -- DESCRIPTION:
 55  --   This can be called from within any procedure to signal the
 56  --   PL/SQL Gateway that p_blob is to be downloaded to the client's browser.
 57  -- PARAMS:
 58  --   p_blob   IN: blob to download
 59  --
 60  PROCEDURE download_file(p_blob IN OUT NOCOPY blob);
 61  
 62  --
 63  -- PROCEDURE:
 64  --   download_file
 65  -- DESCRIPTION:
 66  --   This can be called from within any procedure to signal the
 67  --   PL/SQL Gateway that p_bfile is to be downloaded to the client's browser.
 68  -- PARAMS:
 69  --   p_bfile   IN: bfile to download
 70  -- NOTE:
 71  --   p_bfile is declared here as an IN/OUT because the locator is
 72  --   initially opened to check for file accessibility and existance.
 73  --   The open can only be done if the locator is writable and readable.
 74  PROCEDURE download_file(p_bfile IN OUT bfile);
 75  
 76  --
 77  -- Private file upload/download procedures and functions
 78  --
 79  -- **WARNING**
 80  -- The following procedures are used internally by the
 81  -- PL/SQL Gateway.  Do not call them from your PL/SQL code.
 82  --
 83  
 84  --
 85  -- PROCEDURE:
 86  --   get_download_file
 87  -- DESCRIPTION:
 88  --   Get the name and mime_type of the file to be downloaded
 89  -- PARAMS:
 90  --   p_doc_info      OUT: encoded document information
 91  --
 92  PROCEDURE get_download_file(p_doc_info OUT VARCHAR2);
 93  
 94  --
 95  -- PROCEDURE:
 96  --   get_download_file_raw
 97  -- DESCRIPTION:
 98  --   Get the name and mime_type of the file to be downloaded
 99  -- PARAMS:
100  --   p_doc_info      OUT: encoded document information in RAW format
101  --
102  PROCEDURE get_download_file_raw(p_doc_info OUT RAW);
103  
104  --
105  -- PROCEDURE:
106  --   get_download_blob
107  -- DESCRIPTION:
108  --   Get the blob to be downloaded
109  -- PARAMS:
110  --   p_blob  OUT: blob to be downloaded
111  --
112  PROCEDURE get_download_blob(p_blob OUT NOCOPY blob);
113  
114  --
115  -- PROCEDURE:
116  --   get_download_bfile
117  -- DESCRIPTION:
118  --   Get the bfile to be downloaded
119  -- PARAMS:
120  --   p_bfile  OUT: bfile to be downloaded
121  --
122  PROCEDURE get_download_bfile(p_bfile OUT bfile);
123  
124  --
125  -- FUNCTION:
126  --   is_file_download
127  -- DESCRIPTION:
128  --   Is there a file to download?
129  -- PARAMS:
130  --   none
131  -- RETURN:
132  --   TRUE if there is a pending file download, FALSE otherwise.
133  --
134  FUNCTION is_file_download
135    RETURN  BOOLEAN;
136  
137  --
138  -- PROCEDURE:
139  --   get_content_length
140  -- DESCRIPTION:
141  --   Return the length of a lob to be downloaded.  This is only called
142  --   when the user hasn't already specified a predetermined content-length.
143  -- PARAMS:
144  --   none.
145  -- RETURN:
146  --   lob length
147  --
148  FUNCTION get_content_length
149    RETURN pls_integer;
150  
151  END wpg_docload;
152  /

Package created.

SQL> show errors;
No errors.
SQL> 
SQL> @@privht.sql
SQL> Rem Copyright (c) 1994, 2017, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem   NAME
SQL> Rem     ht.sql - Hyper Text packages
SQL> Rem   PURPOSE
SQL> Rem     Provide utility functions for producing HTML documents
SQL> Rem     from pl/sql.
SQL> Rem   NOTES
SQL> Rem
SQL> Rem     Two sets of packages - one is all functions/constants (htf)
SQL> Rem                          - one is all procedures (htp)
SQL> Rem
SQL> Rem     A PL/SQL table of varchar2 is used to buffer output.
SQL> Rem       htp.print() buffers the output.
SQL> Rem       owa.get_page() fetches it out using htp.get_page().
SQL> Rem
SQL> Rem     This script should be run by the owner of the OWA packages.
SQL> Rem
SQL> Rem   HISTORY
SQL> Rem     cvanes     01/16/17 -  Fix bug 23633556:Remove check for DB 10.2
SQL> Rem     cvanes     12/15/11 -  Fix bug 13063704:Handle multibyte surrogate pairs
SQL> Rem     pkapasi    10/18/06 -  Enhancement#5610575: Allow get_page to start over
SQL> Rem     akatti     08/10/06 -  Fix bug# 5409563 - REQUEST_CHARSET is obtained in the proc
SQL> Rem     mmuppago   05/23/06 -  Fix bug# 2136975 - format_cell: fix format string
SQL> Rem     mmuppago   04/27/06 -  Changes to comply with XHTML req. from Portal
SQL> Rem     mmuppago   10/03/05 -  Fix bug#4608020: suppress content-length if dad charset <> db charset
SQL> Rem     pkapasi    11/27/03 -  Fix bug#3284896 - showpage truncates output
SQL> Rem     pkapasi    06/20/03 -  Fix bug#1301623 : handle https in function base
SQL> Rem     pkapasi    05/09/03 -  Add more charsets (bug#2944980)
SQL> Rem     pkapasi    04/21/03 -  Fix bug#2915488 (incorrect Oracle charset)
SQL> Rem     vshimizu   12/23/02 -  Perf fixes (2694343, 2698205)
SQL> Rem     pkapasi    10/07/02 -  Perf issue with mod_plsql<902 (bug#2609772)
SQL> Rem     pkapasi    07/25/02 -  Perf fixes (2460224, 2470207, 2482024, 2483760)
SQL> Rem     ehlee      06/10/02 -  Fix bug# 2305168
SQL> Rem     ihonda     06/10/02 -  Fix bug# 2093593
SQL> Rem     ehlee      10/29/01 -  Fix bug# 2060664
SQL> Rem     ehlee      10/17/01 -  Fix bug# 2050633
SQL> Rem     pkapasi    09/17/01 -  Workaround any_cs bug#1994862
SQL> Rem     skwong     09/04/01 -  Performance fix for raw mode
SQL> Rem     ehlee      08/16/01 -  Fix date printing problem with htp.p
SQL> Rem     skwong     07/20/01 -  Added support for NCHAR
SQL> Rem     skwong     07/20/01 -  Added support for RAW content transfers
SQL> Rem     pkapasi    06/12/01 -  Merge OAS specific helper functions
SQL> Rem     pkapasi    01/11/01 -  Fix bug#1580414
SQL> Rem     ehlee      08/25/00 -  Fix showpage miscalculation
SQL> Rem     rdecker    07/17/00 -  USE PACKAGE vars FOR quot,amp,lt,gt
SQL> Rem     rdecker    07/13/00 -  USE chr(38) IN place OF '&' FOR sqlplus
SQL> Rem     ehlee      05/10/00 -  Add check for Gateway version 2
SQL> Rem     ehlee      05/05/00 -  Call owa_cache.init in init procedure
SQL> Rem     ehlee      01/14/00 -  Add default charset support
SQL> Rem     rdasarat   01/12/99 -  Fix 791217
SQL> Rem     rdasarat   12/31/98 -  Fix 788285
SQL> Rem     rdasarat   11/19/98 -  Add addDefaultHTMLHdr procedure
SQL> Rem     rdasarat   10/26/98 -  Fix 735061
SQL> Rem     rdasarat   06/02/98 -  Fix for Content-length
SQL> Rem     rdasarat   04/02/98 -  Add file upload/download functionality
SQL> Rem     rdasarat   02/03/98 -  Optimize prn, add get_line, get_page...
SQL> Rem     rdasarat   01/14/98 -  Optimize prn
SQL> Rem     mpal       01/06/98 -  Fix bug# 607288 - Correct typo in CTARGET
SQL> Rem     mpal       12/23/97 -  Fix bug# 563953 - Correct typo in STYLE
SQL> Rem     rdasarat   11/13/97 -  Add init procedure
SQL> Rem     rdasarat   10/20/97 -  Optimize htp.print and htp.prn
SQL> Rem     mpal       04/23/97 -  Fix bug# #482019 - added escape_url for '%'
SQL> Rem     mpal       01/29/97 -  Fix bug# #444697 - Restore pragma references
SQL> Rem                            for anchor, anchor2, mail
SQL> Rem     mpal       11/15/96 -  Adding formFile procedure
SQL> Rem     mpal       11/12/96 -  Adding NLS char conversion
SQL> Rem     mpal       08/22/96 -  HTML 3.2 support
SQL> Rem     mpal       08/19/96 -  Fix bug #393305
SQL> Rem     mpal       06/24/96 -  Adding escape sequence support '%'
SQL> Rem     mbookman   03/11/96 -  Adding NLS fixes (substrB and lengthB)
SQL> Rem     kireland   02/02/96 -  HTML 3.0, Netscape and Microsoft extensions
SQL> Rem     mbookman   07/26/95 -  Added mailto support
SQL> Rem     mbookman   05/23/95 -  Full HTML 2.0 support
SQL> Rem                            Numerous function/procedure name
SQL> Rem                            changes for standardization
SQL> Rem     mloennro   09/05/94 -  Creation
SQL> Rem
SQL> 
SQL> REM Creating HTF package body...
SQL> create or replace package body htf as
  2  
  3  /* This function is private to the HTF package */
  4  function IFNOTNULL(str1 in varchar2 character set any_cs,
  5                     str2 in varchar2 character set any_cs)
  6                     return varchar2 character set str2%charset
  7  is
  8  begin
  9     if (str1 is NULL)
 10       then return (NULL);
 11       else return (str2);
 12     end if;
 13  end;
 14  
 15  /* STRUCTURE tags */
 16  function bodyOpen(cbackground in varchar2 DEFAULT NULL,
 17                    cattributes in varchar2 DEFAULT NULL) return varchar2 is
 18      l_str varchar2(32767);
 19  begin
 20      l_str := '<body';
 21      if cbackground is not null then
 22          l_str := l_str||' background="'||cbackground||'"';
 23      end if;
 24      if cattributes is not null then
 25          l_str := l_str||' '||cattributes;
 26      end if;
 27      l_str := l_str||'>';
 28      return l_str;
 29  end;
 30  /* END STRUCTURE tags */
 31  
 32  /* HEAD Related elements tags */
 33  function title  (ctitle in varchar2 character set any_cs) return varchar2 character set ctitle%charset is
 34  begin return ('<title>'||ctitle||'</title>'); end;
 35  
 36  function htitle(ctitle      in varchar2 character set any_cs,
 37                  nsize       in integer  DEFAULT 1,
 38                  calign      in varchar2 DEFAULT NULL,
 39                  cnowrap     in varchar2 DEFAULT NULL,
 40                  cclear      in varchar2 DEFAULT NULL,
 41                  cattributes in varchar2 DEFAULT NULL)
 42                  return varchar2 character set ctitle%charset is
 43  begin return (title(ctitle)||
 44                header(nsize,ctitle,calign,cnowrap,cclear,cattributes)); end;
 45  
 46  function base(ctarget   in varchar2 DEFAULT NULL,
 47                cattributes in varchar2 DEFAULT NULL) return varchar2 is
 48     protocol varchar2(2000);
 49  begin
 50     protocol := owa_util.get_cgi_env ('REQUEST_PROTOCOL');
 51     if (protocol is null) then
 52        protocol := 'http';
 53     else
 54        protocol := lower (protocol);
 55     end if;
 56  
 57     return('<base'||
 58         IFNOTNULL(ctarget,' target="'||ctarget||'"')||
 59              IFNOTNULL(cattributes,' '||cattributes)||
 60         ' href="' || protocol || '://'||
 61                   owa_util.get_cgi_env('SERVER_NAME')||':'||
 62                   owa_util.get_cgi_env('SERVER_PORT')||
 63                   owa_util.get_cgi_env('SCRIPT_NAME')||
 64                   owa_util.get_cgi_env('PATH_INFO')||'" />');
 65  end;
 66  
 67  function isindex(cprompt in varchar2 character set any_cs DEFAULT NULL,
 68                   curl    in varchar2 DEFAULT NULL)
 69                   return varchar2 character set cprompt%charset is
 70  begin return('<isindex'||
 71                IFNOTNULL(cprompt,' prompt="'||cprompt||'"')||
 72                IFNOTNULL(curl,' href="'||curl||'"')||
 73               '>'); end;
 74  
 75  function linkRel(crel   in varchar2,
 76                   curl   in varchar2,
 77                   ctitle in varchar2 character set any_cs DEFAULT NULL)
 78                   return varchar2 character set ctitle%charset is
 79  begin return('<link rel="'||crel||'"'||
 80                    ' href="'||curl||'"'||
 81                 IFNOTNULL(ctitle,' title="'||ctitle||'"')||
 82               '>'); end;
 83  
 84  function linkRev(crev   in varchar2,
 85                   curl   in varchar2,
 86                   ctitle in varchar2 character set any_cs DEFAULT NULL)
 87                   return varchar2 character set ctitle%charset is
 88  begin return('<link rev="'||crev||'"'||
 89                    ' href="'||curl||'"'||
 90                 IFNOTNULL(ctitle,' title="'||ctitle||'"')||
 91               '>'); end;
 92  
 93  function meta(chttp_equiv in varchar2,
 94                cname       in varchar2,
 95                ccontent    in varchar2) return varchar2 is
 96  begin return('<meta http-equiv="'||chttp_equiv||
 97                         '" name="'||cname||
 98                      '" content="'||ccontent||
 99                      '">');
100  end;
101  
102  function nextid(cidentifier in varchar2) return varchar2 is
103  begin return ('<nextid n="'||cidentifier||'>'); end;
104  
105  function style(cstyle in varchar2 character set any_cs)
106                return varchar2 character set cstyle%charset is
107  begin return ('<style>'||cstyle||'</style>'); end;
108  
109  function script(cscript in varchar2,
110                  clanguage in varchar2 DEFAULT NULL) return varchar2 is
111  begin return('<script'||
112         IFNOTNULL(clanguage,' language='''||clanguage||'''')||
113         '>'||cscript||
114         '</script>');
115  end;
116  
117  /* END HEAD Related elements tags */
118  
119  /* BODY ELEMENT tags */
120  function hr  (cclear      in varchar2 DEFAULT NULL,
121                csrc        in varchar2 DEFAULT NULL,
122                cattributes in varchar2 DEFAULT NULL) return varchar2 is
123  begin return('<hr'||
124                IFNOTNULL(cclear,' clear="'||cclear||'"')||
125                IFNOTNULL(csrc,' src="'||csrc||'"')||
126                IFNOTNULL(cattributes,' '||cattributes)||
127               ' />');
128  end;
129  
130  function line(cclear      in varchar2 DEFAULT NULL,
131                csrc        in varchar2 DEFAULT NULL,
132                cattributes in varchar2 DEFAULT NULL) return varchar2 is
133  begin return(hr(cclear, csrc, cattributes)); end;
134  
135  function br(cclear      in varchar2 DEFAULT NULL,
136              cattributes in varchar2 DEFAULT NULL) return varchar2 is
137  begin return('<br'||
138                IFNOTNULL(cclear,' clear="'||cclear||'"')||
139                IFNOTNULL(cattributes,' '||cattributes)||
140               ' />');
141  end;
142  
143  function nl(cclear      in varchar2 DEFAULT NULL,
144              cattributes in varchar2 DEFAULT NULL) return varchar2 is
145  begin return(br(cclear, cattributes)); end;
146  
147  function header(nsize   in integer,
148                  cheader in varchar2 character set any_cs,
149                  calign  in varchar2 DEFAULT NULL,
150                  cnowrap in varchar2 DEFAULT NULL,
151                  cclear  in varchar2 DEFAULT NULL,
152                  cattributes in varchar2 DEFAULT NULL)
153                  return varchar2 character set cheader%charset is
154      ch varchar2(2);
155  begin
156      ch := 'h'||to_char(least(abs(nsize),6));
157      return('<'||ch||
158                  IFNOTNULL(calign,' align="'||calign||'"')||
159                  IFNOTNULL(cclear,' clear="'||cclear||'"')||
160                  IFNOTNULL(cnowrap,' nowrap="nowrap"')||
161                  IFNOTNULL(cattributes,' '||cattributes)||
162                 '>'||cheader||
163                 '</'||ch||'>');
164  end;
165  
166  function anchor(curl        in varchar2,
167                  ctext       in varchar2 character set any_cs,
168                  cname       in varchar2 character set any_cs DEFAULT NULL,
169                  cattributes in varchar2 DEFAULT NULL)
170                  return varchar2 character set ctext%charset is
171  begin return(anchor2(curl,
172            ctext,
173            cname,
174            NULL,
175            cattributes));
176            end;
177  
178  function anchor2(curl       in varchar2,
179                  ctext       in varchar2 character set any_cs,
180                  cname       in varchar2 character set any_cs DEFAULT NULL,
181                  ctarget     in varchar2 DEFAULT NULL,
182                  cattributes in varchar2 DEFAULT NULL)
183                  return varchar2 character set ctext%charset is
184      curl_cname_null EXCEPTION;
185      l_str varchar2(32767);
186  begin
187      if curl is NULL and cname is NULL then
188          l_str := '<!-- ERROR in anchor2 usage, curl and cname cannot be NULL --><a name=" "';
189          if ctext is not null then
190              l_str := l_str||'> '||ctext||' </a';
191          end if;
192          l_str := l_str||'>';
193          return l_str;
194      end if;
195  
196      if curl is NULL then
197          l_str := '<a name="'||cname||'"';
198          if ctext is not null then
199              l_str := l_str||'> '||ctext||' </a';
200          end if;
201          l_str := l_str||'>';
202      else
203          l_str := '<a href="'||curl||'"';
204          if cname is not null then
205              l_str := l_str||' name="'||cname||'"';
206          end if;
207          if ctarget is not null then
208              l_str := l_str||' target="'||ctarget||'"';
209          end if;
210          if cattributes is not null then
211              l_str := l_str||' '||cattributes;
212          end if;
213          l_str := l_str||'>'||ctext||'</a>';
214      end if;
215      return l_str;
216  end;
217  
218  
219  function mailto(caddress in varchar2,
220                  ctext    in varchar2 character set any_cs,
221                  cname       in varchar2 character set any_cs DEFAULT NULL,
222                  cattributes in varchar2 DEFAULT NULL)
223                  return varchar2 character set ctext%charset is
224  begin return (anchor('mailto:'||caddress,ctext,cname,cattributes)); end;
225  
226  function img(curl        in varchar2,
227               calign      in varchar2 DEFAULT NULL,
228               calt        in varchar2 DEFAULT NULL,
229               cismap      in varchar2 DEFAULT NULL,
230               cattributes in varchar2 DEFAULT NULL
231               ) return varchar2 is
232      l_str varchar2(32767);
233  begin
234      l_str := '<img src="'||curl||'"';
235      if calign is not null then
236          l_str := l_str||' align="'||calign||'"';
237      end if;
238      if calt is not null then
239          l_str := l_str||' alt="'||calt||'"';
240      end if;
241      if cismap is not null then
242          l_str := l_str||' ismap="ismap"';
243      end if;
244      if cattributes is not null then
245          l_str := l_str||' '||cattributes;
246      end if;
247      l_str := l_str||' />';
248      return l_str;
249  end;
250  
251  function img2(curl        in varchar2,
252               calign      in varchar2 DEFAULT NULL,
253               calt        in varchar2 DEFAULT NULL,
254               cismap      in varchar2 DEFAULT NULL,
255               cusemap     in varchar2 DEFAULT NULL,
256               cattributes in varchar2 DEFAULT NULL
257               ) return varchar2 is
258  begin return('<img src="'||curl||'"'||
259                 IFNOTNULL(calign,' align="'||calign||'"')||
260                 IFNOTNULL(calt,' alt="'||calt||'"')||
261                 IFNOTNULL(cismap,' ismap="ismap"')||
262                 IFNOTNULL(cusemap,' usemap="'||cusemap||'"')||
263                 IFNOTNULL(cattributes,' '||cattributes)||
264               ' />'); end;
265  
266  
267  function area(    ccoords    in varchar2,
268                   cshape    in varchar2 DEFAULT NULL,
269                   chref    in varchar2 DEFAULT NULL,
270                   cnohref    in varchar2 DEFAULT NULL,
271          ctarget in varchar2 DEFAULT NULL,
272          cattributes in varchar2 DEFAULT NULL) return varchar2 is
273  begin return('<area'||
274          IFNOTNULL(cshape,' shape="'||cshape||'"')||
275          ' coords="'||ccoords||'"'||
276                  IFNOTNULL(chref,' href="'||chref||'"')||
277                  IFNOTNULL(cnohref,' nohref="nohref"')||
278                  IFNOTNULL(ctarget,' target="'||ctarget||'"')||
279          IFNOTNULL(cattributes,' '||cattributes)||
280               ' />'); end;
281  
282  function mapOpen(cname    in varchar2,cattributes in varchar2 DEFAULT NULL) return varchar2 is
283  begin return('<map name="'||cname||'"'||
284          IFNOTNULL(cattributes,' '||cattributes)||
285          '>'); end;
286  
287  function bgsound(csrc    in varchar2,
288           cloop    in varchar2 DEFAULT NULL,
289           cattributes in varchar2 DEFAULT NULL) return varchar2 is
290  begin return('<bgsound src="'||csrc||'"'||
291          IFNOTNULL(cloop,' loop="'||cloop||'"')||
292          IFNOTNULL(cattributes,' '||cattributes)||
293          '>');end;
294  
295  
296  function paragraph(calign       in varchar2 DEFAULT NULL,
297                     cnowrap      in varchar2 DEFAULT NULL,
298                     cclear       in varchar2 DEFAULT NULL,
299                     cattributes  in varchar2 DEFAULT NULL) return varchar2 is
300  begin return('<p'||
301                IFNOTNULL(calign,' align="'||calign||'"')||
302                IFNOTNULL(cclear,' clear="'||cclear||'"')||
303                IFNOTNULL(cnowrap,' nowrap="nowrap"')||
304                IFNOTNULL(cattributes,' '||cattributes)||
305               '>');
306  end;
307  
308  function div(    calign       in varchar2 DEFAULT NULL,
309                     cattributes  in varchar2 DEFAULT NULL) return varchar2 is
310  begin return('<div'||
311                IFNOTNULL(calign,' align="'||calign||'"')||
312                IFNOTNULL(cattributes,' '||cattributes)||
313               '>');
314  end;
315  
316  function address(cvalue       in varchar2 character set any_cs,
317                   cnowrap      in varchar2 DEFAULT NULL,
318                   cclear       in varchar2 DEFAULT NULL,
319                   cattributes  in varchar2 DEFAULT NULL)
320                   return varchar2 character set cvalue%charset is
321  begin return('<address'||
322                 IFNOTNULL(cclear,' clear="'||cclear||'"')||
323                 IFNOTNULL(cnowrap,' nowrap="nowrap"')||
324                 IFNOTNULL(cattributes,' '||cattributes)||
325               '>'||cvalue||
326               '</address>'); end;
327  
328  function comment(ctext in varchar2 character set any_cs)
329                   return varchar2 character set ctext%charset is
330  begin return('<!-- '||ctext||' -->'); end;
331  
332  function preOpen(cclear      in varchar2 DEFAULT NULL,
333                   cwidth      in varchar2 DEFAULT NULL,
334                   cattributes in varchar2 DEFAULT NULL) return varchar2 is
335  begin return('<pre'||
336                IFNOTNULL(cclear,' clear="'||cclear||'"')||
337                IFNOTNULL(cwidth,' width="'||cwidth||'"')||
338                IFNOTNULL(cattributes,' '||cattributes)||
339               '>'); end;
340  
341  function nobr(ctext in varchar2 character set any_cs)
342                return varchar2 character set ctext%charset is
343  begin return('<nobr>'||ctext||'</nobr>'); end;
344  
345  function center(ctext in varchar2 character set any_cs)
346                  return varchar2 character set ctext%charset is
347  begin return('<center>'||ctext||'</center>'); end;
348  
349  
350  function blockquoteOpen(cnowrap      in varchar2 DEFAULT NULL,
351                          cclear       in varchar2 DEFAULT NULL,
352                          cattributes  in varchar2 DEFAULT NULL) return varchar2
353   is
354  begin return('<blockquote'||
355                IFNOTNULL(cclear,' clear="'||cclear||'"')||
356                IFNOTNULL(cnowrap,' nowrap="nowrap"')||
357                IFNOTNULL(cattributes,' '||cattributes)||
358               '>'); end;
359  
360  /* LIST tags */
361  function listHeader(ctext in varchar2 character set any_cs,
362                      cattributes in varchar2 DEFAULT NULL)
363                      return varchar2 character set ctext%charset is
364  begin return('<lh'||
365                IFNOTNULL(cattributes,' '||cattributes)||
366              '>'||ctext||
367              '</lh>'); end;
368  
369  function listItem(ctext       in varchar2 character set any_cs DEFAULT NULL,
370                    cclear      in varchar2 DEFAULT NULL,
371                    cdingbat    in varchar2 DEFAULT NULL,
372                    csrc        in varchar2 DEFAULT NULL,
373                    cattributes in varchar2 DEFAULT NULL)
374                    return varchar2 character set ctext%charset is
375  begin return('<li'||
376                IFNOTNULL(cclear,' clear="'||cclear||'"')||
377                IFNOTNULL(cdingbat,' dingbat="'||cdingbat||'"')||
378                IFNOTNULL(csrc,' src="'||csrc||'"')||
379                IFNOTNULL(cattributes,' '||cattributes)||
380               '>'||ctext);
381  end;
382  
383  function ulistOpen(cclear      in varchar2 DEFAULT NULL,
384                     cwrap       in varchar2 DEFAULT NULL,
385                     cdingbat    in varchar2 DEFAULT NULL,
386                     csrc        in varchar2 DEFAULT NULL,
387                     cattributes in varchar2 DEFAULT NULL) return varchar2 is
388  begin return('<ul'||
389                IFNOTNULL(cclear,' clear="'||cclear||'"')||
390                IFNOTNULL(cwrap,' wrap="'||cwrap||'"')||
391                IFNOTNULL(cdingbat,' dingbat="'||cdingbat||'"')||
392                IFNOTNULL(csrc,' src="'||csrc||'"')||
393                IFNOTNULL(cattributes,' '||cattributes)||
394               '>');
395  end;
396  
397  function olistOpen(cclear      in varchar2 DEFAULT NULL,
398                     cwrap       in varchar2 DEFAULT NULL,
399                     cattributes in varchar2 DEFAULT NULL) return varchar2 is
400  begin return('<ol'||
401                IFNOTNULL(cclear,' clear="'||cclear||'"')||
402                IFNOTNULL(cwrap,' wrap="'||cwrap||'"')||
403                IFNOTNULL(cattributes,' '||cattributes)||
404               '>');
405  end;
406  
407  function dlistOpen(cclear      in varchar2 DEFAULT NULL,
408                     cattributes in varchar2 DEFAULT NULL) return varchar2 is
409  begin return('<dl'||
410                IFNOTNULL(cclear,' clear="'||cclear||'"')||
411                IFNOTNULL(cattributes,' '||cattributes)||
412               '>');
413  end;
414  
415  function dlistTerm(ctext       in varchar2 character set any_cs DEFAULT NULL,
416                     cclear      in varchar2 DEFAULT NULL,
417                     cattributes in varchar2 DEFAULT NULL)
418                     return varchar2 character set ctext%charset is
419  begin return('<dt'||
420                IFNOTNULL(cclear,' clear="'||cclear||'"')||
421                IFNOTNULL(cattributes,' '||cattributes)||
422               '>'||ctext);
423  end;
424  
425  function dlistDef(ctext       in varchar2 character set any_cs DEFAULT NULL,
426                    cclear      in varchar2 DEFAULT NULL,
427                    cattributes in varchar2 DEFAULT NULL)
428                    return varchar2 character set ctext%charset is
429  begin return('<dd'||
430                IFNOTNULL(cclear,' clear="'||cclear||'"')||
431                IFNOTNULL(cattributes,' '||cattributes)||
432               '>'||ctext);
433  end;
434  /* END LIST tags */
435  
436  /* SEMANTIC FORMAT ELEMENTS */
437  function dfn(ctext in varchar2 character set any_cs,
438                cattributes in varchar2 DEFAULT NULL)
439                return varchar2 character set ctext%charset is
440  begin return('<dfn'||
441                IFNOTNULL(cattributes,' '||cattributes)||
442               '>'||ctext||'</dfn>'); end;
443  
444  function cite(ctext in varchar2 character set any_cs,
445                 cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset is
446  begin return('<cite'||
447                IFNOTNULL(cattributes,' '||cattributes)||
448               '>'||ctext||'</cite>'); end;
449  
450  function code(ctext in varchar2 character set any_cs,
451                cattributes in varchar2 DEFAULT NULL) return varchar2  character set ctext%charset is
452  begin return('<code'||
453                IFNOTNULL(cattributes,' '||cattributes)||
454               '>'||ctext||'</code>'); end;
455  
456  function em   (ctext  in varchar2 character set any_cs,
457                 cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset is
458  begin return('<em'||
459                IFNOTNULL(cattributes,' '||cattributes)||
460               '>'||ctext||'</em>'); end;
461  
462  function emphasis(ctext in varchar2 character set any_cs,
463                    cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset is
464  begin return(em(ctext,cattributes)); end;
465  
466  function kbd(ctext in varchar2 character set any_cs,
467               cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset is
468  begin return('<kbd'||
469                IFNOTNULL(cattributes,' '||cattributes)||
470               '>'||ctext||'</kbd>'); end;
471  
472  function keyboard(ctext in varchar2 character set any_cs,
473                    cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset is
474  begin return(kbd(ctext,cattributes)); end;
475  
476  function sample(ctext in varchar2 character set any_cs,
477                  cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset is
478  begin return('<samp'||
479                IFNOTNULL(cattributes,' '||cattributes)||
480               '>'||ctext||'</samp>'); end;
481  
482  function strong   (ctext  in varchar2 character set any_cs,
483                     cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset is
484  begin return('<strong'||
485                IFNOTNULL(cattributes,' '||cattributes)||
486               '>'||ctext||'</strong>'); end;
487  
488  function variable(ctext in varchar2 character set any_cs,
489                    cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset is
490  begin return('<var'||
491                IFNOTNULL(cattributes,' '||cattributes)||
492               '>'||ctext||'</var>'); end;
493  
494  function big(    ctext          in varchar2 character set any_cs,
495                  cattributes     in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset is
496  begin return('<big'||
497                IFNOTNULL(cattributes,' '||cattributes)||
498               '>'||ctext||'</big>'); end;
499  
500  function small(    ctext          in varchar2 character set any_cs,
501                  cattributes     in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset is
502  begin return('<small'||
503                IFNOTNULL(cattributes,' '||cattributes)||
504               '>'||ctext||'</small>'); end;
505  
506  function sub(     ctext          in varchar2 character set any_cs,
507          calign        in varchar2 DEFAULT NULL,
508                  cattributes     in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset is
509  begin return('<sub'||
510                IFNOTNULL(calign,' align="'||calign||'"')||
511                IFNOTNULL(cattributes,' '||cattributes)||
512               '>'||ctext||'</sub>'); end;
513  
514  function sup(    ctext          in varchar2 character set any_cs,
515          calign        in varchar2 DEFAULT NULL,
516                  cattributes     in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset is
517  begin return('<sup'||
518                IFNOTNULL(calign,' align="'||calign||'"')||
519                IFNOTNULL(cattributes,' '||cattributes)||
520               '>'||ctext||'</sup>'); end;
521  
522  /* END SEMANTIC FORMAT ELEMENTS */
523  
524  /* PHYSICAL FORMAT ELEMENTS */
525  function basefont(nsize in integer,
526            cattributes in varchar2 DEFAULT NULL) return varchar2 is
527  begin return('<basefont size="'||nsize||'"'||
528          IFNOTNULL(cattributes,' '||cattributes)||
529          ' />'); end;
530  
531  
532  function fontOpen(    ccolor    in varchar2 DEFAULT NULL,
533          cface    in varchar2 DEFAULT NULL,
534          csize    in varchar2 DEFAULT NULL,
535          cattributes in varchar2 DEFAULT NULL) return varchar2 is
536      l_str varchar2(32767);
537  begin
538      l_str := '<font';
539      if ccolor is not null then
540          l_str := l_str||' color="'||ccolor||'"';
541      end if;
542      if cface is not null then
543          l_str := l_str||' face="'||cface||'"';
544      end if;
545      if csize is not null then
546          l_str := l_str||' size="'||csize||'"';
547      end if;
548      if cattributes is not null then
549          l_str := l_str||' '||cattributes;
550      end if;
551      l_str := l_str||'>';
552      return l_str;
553  end;
554  
555  function bold   (ctext  in varchar2 character set any_cs,
556                   cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset is
557  begin return('<b'||
558                IFNOTNULL(cattributes,' '||cattributes)||
559               '>'||ctext||'</b>'); end;
560  
561  function italic (ctext  in varchar2 character set any_cs,
562                   cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset is
563  begin return('<i'||
564                IFNOTNULL(cattributes,' '||cattributes)||
565               '>'||ctext||'</i>'); end;
566  
567  function teletype(ctext in varchar2 character set any_cs,
568                    cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset is
569  begin return('<tt'||
570                IFNOTNULL(cattributes,' '||cattributes)||
571               '>'||ctext||'</tt>'); end;
572  
573  function plaintext   (ctext  in varchar2 character set any_cs,
574                   cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset is
575  begin return('<plaintext'||
576                IFNOTNULL(cattributes,' '||cattributes)||
577               '>'||ctext||'</plaintext>'); end;
578  function s   (ctext  in varchar2 character set any_cs,
579                   cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset is
580  begin return('<s'||
581                IFNOTNULL(cattributes,' '||cattributes)||
582               '>'||ctext||'</s>'); end;
583  function strike   (ctext  in varchar2 character set any_cs,
584                   cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset is
585  begin return('<strike'||
586                IFNOTNULL(cattributes,' '||cattributes)||
587               '>'||ctext||'</strike>'); end;
588  function underline   (ctext  in varchar2 character set any_cs,
589                   cattributes in varchar2 DEFAULT NULL) return varchar2 character set ctext%charset is
590  begin return('<u'||
591                IFNOTNULL(cattributes,' '||cattributes)||
592               '>'||ctext||'</u>'); end;
593  /* END PHYSICAL FORMAT ELEMENTS */
594  
595  
596  /* HTML FORMS */
597  
598  function formOpen(curl in varchar2,
599                    cmethod  in varchar2 DEFAULT 'post',
600            ctarget  in varchar2 DEFAULT NULL,
601            cenctype in varchar2 DEFAULT NULL,
602            cattributes in varchar2 DEFAULT NULL) return varchar2 is
603  begin return('<form action="'||curl||'" method="'||cmethod||'"'||
604          IFNOTNULL(ctarget,' target="'||ctarget||'"')||
605          IFNOTNULL(cenctype,' enctype="'||cenctype||'"')||
606          IFNOTNULL(cattributes,' '||cattributes)||
607          '>'); end;
608  
609  function formCheckbox(cname in varchar2,
610                        cvalue      in varchar2 character set any_cs DEFAULT 'on',
611                        cchecked    in varchar2 DEFAULT NULL,
612                        cattributes in varchar2 DEFAULT NULL)
613                        return varchar2 character set cvalue%charset is
614  begin
615     return('<input type="checkbox" name="'||cname||'"'||
616             IFNOTNULL(cvalue,' value="'||cvalue||'"')||
617             IFNOTNULL(cchecked,' checked="checked"')||
618             IFNOTNULL(cattributes,' '||cattributes)||
619            ' />');
620  end;
621  
622  function formFile(cname       in varchar2,
623                    caccept     in varchar2 DEFAULT NULL,
624                    cattributes in varchar2 DEFAULT NULL) return varchar2 is
625  begin return('<input type="file"'||
626                IFNOTNULL(cname,' name="'||cname||'"')||
627                IFNOTNULL(caccept,' accept="'||caccept||'"')||
628                IFNOTNULL(cattributes,' '||cattributes)||
629               ' />'); end;
630  
631  function formHidden(cname       in varchar2,
632                      cvalue      in varchar2 character set any_cs DEFAULT NULL,
633                      cattributes in varchar2 DEFAULT NULL) return varchar2 character set cvalue%charset is
634  begin
635     return('<input type="hidden" name="'||cname||'"'||' value="'||cvalue||'"'||
636             IFNOTNULL(cattributes,' '||cattributes)||
637            ' />');
638  end;
639  
640  function formImage(cname       in varchar2,
641                     csrc        in varchar2,
642                     calign      in varchar2 DEFAULT NULL,
643                     cattributes in varchar2 DEFAULT NULL) return varchar2 is
644  begin return('<input type="image" name="'||cname||'"'||
645                                   ' src="'||csrc||'"'||
646                IFNOTNULL(calign,' align="'||calign||'"')||
647                IFNOTNULL(cattributes,' '||cattributes)||
648               ' />');
649  end;
650  
651  function formPassword(cname       in varchar2,
652                        csize       in varchar2 DEFAULT NULL,
653                        cmaxlength  in varchar2 DEFAULT NULL,
654                        cvalue      in varchar2 character set any_cs DEFAULT NULL,
655                        cattributes in varchar2 DEFAULT NULL)
656                        return varchar2 character set cvalue%charset is
657  begin
658     return('<input type="password" name="'||cname||'"'||
659             IFNOTNULL(csize,' size="'||csize||'"')||
660             IFNOTNULL(cmaxlength,' maxlength="'||cmaxlength||'"')||
661             IFNOTNULL(cvalue,' value="'||cvalue||'"')||
662             IFNOTNULL(cattributes,' '||cattributes)||
663            ' />');
664  end;
665  
666  function formRadio(cname       in varchar2,
667                     cvalue      in varchar2 character set any_cs,
668                     cchecked    in varchar2 DEFAULT NULL,
669                     cattributes in varchar2 DEFAULT NULL)
670                     return varchar2 character set cvalue%charset is
671  begin return('<input type="radio" name="'||cname||'"'||
672                                 ' value="'||cvalue||'"'||
673                IFNOTNULL(cchecked,' checked="checked"')||
674                IFNOTNULL(cattributes,' '||cattributes)||
675               ' />');
676  end;
677  
678  function formReset(cvalue      in varchar2 character set any_cs DEFAULT 'Reset',
679                     cattributes in varchar2 DEFAULT NULL)
680                     return varchar2 character set cvalue%charset is
681  begin return('<input type="reset" VALUE="'||cvalue||'"'||
682                IFNOTNULL(cattributes,' '||cattributes)||
683               ' />'); end;
684  
685  function formSubmit(cname       in varchar2 DEFAULT NULL,
686                      cvalue      in varchar2 character set any_cs DEFAULT 'Submit',
687                      cattributes in varchar2 DEFAULT NULL) return varchar2 character set cvalue%charset is
688  begin return('<input type="submit"'||
689                IFNOTNULL(cname,' name="'||cname||'"')||
690                IFNOTNULL(cvalue,' value="'||cvalue||'"')||
691                IFNOTNULL(cattributes,' '||cattributes)||
692               ' />'); end;
693  
694  function formText(cname       in varchar2,
695                    csize       in varchar2 DEFAULT NULL,
696                    cmaxlength  in varchar2 DEFAULT NULL,
697                    cvalue      in varchar2 character set any_cs DEFAULT NULL,
698                    cattributes in varchar2 DEFAULT NULL) return varchar2  character set cvalue%charset is
699  begin
700     return('<input type="text" name="'||cname||'"'||
701             IFNOTNULL(csize,' size="'||csize||'"')||
702             IFNOTNULL(cmaxlength,' maxlength="'||cmaxlength||'"')||
703             IFNOTNULL(cvalue,' value="'||cvalue||'"')||
704             IFNOTNULL(cattributes,' '||cattributes)||
705            ' />');
706  end;
707  
708  function formSelectOpen(cname       in varchar2,
709                          cprompt     in varchar2 character set any_cs DEFAULT NULL,
710                          nsize       in integer  DEFAULT NULL,
711                          cattributes in varchar2 DEFAULT NULL)
712                          return varchar2 character set cprompt%charset is
713  begin return(cprompt||
714              '<select name="'||cname||'"'||
715               IFNOTNULL(nsize,' size="'||nsize||'"')||
716               IFNOTNULL(cattributes,' '||cattributes)||
717              '>');
718  end;
719  
720  function formSelectOption(cvalue      in varchar2 character set any_cs,
721                            cselected   in varchar2 DEFAULT NULL,
722                            cattributes in varchar2) return varchar2 character set cvalue%charset is
723  begin return('<option'||
724                IFNOTNULL(cselected,' selected="selected"')||
725                IFNOTNULL(cattributes,' '||cattributes)||
726               '>'||cvalue||'</option>'); end;
727  
728  function formTextarea(cname       in varchar2,
729                        nrows       in integer,
730                        ncolumns    in integer,
731                        calign      in varchar2 DEFAULT NULL,
732                        cattributes in varchar2 DEFAULT NULL) return varchar2 is
733  begin return('<textarea name="'||cname||'"'||
734                        ' rows="'||to_char(nrows)||'"'||
735                        ' cols="'||to_char(ncolumns)||'"'||
736                IFNOTNULL(calign,' align="'||calign||'"')||
737                IFNOTNULL(cattributes,' '||cattributes)||
738               '></textarea>');
739  end;
740  
741  
742  function formTextarea2(cname       in varchar2,
743                        nrows       in integer,
744                        ncolumns    in integer,
745                        calign      in varchar2 DEFAULT NULL,
746                        cwrap       in varchar2 DEFAULT NULL,
747                        cattributes in varchar2 DEFAULT NULL) return varchar2 is
748  begin return('<textarea name="'||cname||'"'||
749                        ' rows="'||to_char(nrows)||'"'||
750                        ' cols="'||to_char(ncolumns)||'"'||
751                IFNOTNULL(calign,' align="'||calign||'"')||
752                IFNOTNULL(cwrap,' wrap="'||cwrap||'"')||
753                IFNOTNULL(cattributes,' '||cattributes)||
754               '></textarea>');
755  end;
756  
757  function formTextareaOpen(cname       in varchar2,
758                            nrows       in integer,
759                            ncolumns    in integer,
760                            calign      in varchar2 DEFAULT NULL,
761                            cattributes in varchar2 DEFAULT NULL) return varchar2
762   is
763  begin return('<textarea name="'||cname||'"'||
764                        ' rows="'||to_char(nrows)||'"'||
765                        ' cols="'||to_char(ncolumns)||'"'||
766                IFNOTNULL(calign,' align="'||calign||'"')||
767                IFNOTNULL(cattributes,' '||cattributes)||
768               '>');
769  end;
770  
771  
772  function formTextareaOpen2(cname       in varchar2,
773                            nrows       in integer,
774                            ncolumns    in integer,
775                            calign      in varchar2 DEFAULT NULL,
776                            cwrap       in varchar2 DEFAULT NULL,
777                            cattributes in varchar2 DEFAULT NULL) return varchar2
778   is
779  begin return('<textarea name="'||cname||'"'||
780                        ' rows="'||to_char(nrows)||'"'||
781                        ' cols="'||to_char(ncolumns)||'"'||
782                IFNOTNULL(calign,' align="'||calign||'"')||
783                IFNOTNULL(cwrap,' wrap="'||cwrap||'"')||
784                IFNOTNULL(cattributes,' '||cattributes)||
785               '>');
786  end;
787  /* END HTML FORMS */
788  
789  /* HTML TABLES */
790  function tableOpen(cborder     in varchar2 DEFAULT NULL,
791                     calign      in varchar2 DEFAULT NULL,
792                     cnowrap     in varchar2 DEFAULT NULL,
793                     cclear      in varchar2 DEFAULT NULL,
794                     cattributes in varchar2 DEFAULT NULL) return varchar2 is
795      l_str varchar2(32767);
796  begin
797      l_str := '<table ';
798      if cborder is not null then
799          l_str := l_str||' '||cborder;
800      end if;
801      if cnowrap is not null then
802          l_str := l_str||' nowrap="nowrap"';
803      end if;
804      if calign is not null then
805          l_str := l_str||' align="'||calign||'"';
806      end if;
807      if cclear is not null then
808          l_str := l_str||' clear="'||cclear||'"';
809      end if;
810      if cattributes is not null then
811          l_str := l_str||' '||cattributes;
812      end if;
813      l_str := l_str||'>';
814      return l_str;
815  end;
816  
817  function tableCaption(ccaption in varchar2 character set any_cs,
818                        calign   in varchar2 DEFAULT NULL,
819                        cattributes in varchar2 DEFAULT NULL)
820                        return varchar2 character set ccaption%charset is
821  begin return ('<caption'||
822                 IFNOTNULL(calign,' align="'||calign||'"')||
823                 IFNOTNULL(cattributes,' '||cattributes)||
824                '>'||
825                ccaption||'</caption>'); end;
826  
827  function tableRowOpen(calign      in varchar2 DEFAULT NULL,
828                        cvalign     in varchar2 DEFAULT NULL,
829                        cdp         in varchar2 DEFAULT NULL,
830                        cnowrap     in varchar2 DEFAULT NULL,
831                        cattributes in varchar2 DEFAULT NULL) return varchar2 is
832      l_str varchar2(32767);
833  begin
834      l_str := '<tr';
835      if calign is not null then
836          l_str := l_str||' align="'||calign||'"';
837      end if;
838      if cvalign is not null then
839          l_str := l_str||' valign="'||cvalign||'"';
840      end if;
841      if cdp is not null then
842          l_str := l_str||' dp="'||cdp||'"';
843      end if;
844      if cnowrap is not null then
845          l_str := l_str||' nowrap="nowrap"';
846      end if;
847      if cattributes is not null then
848          l_str := l_str||' '||cattributes;
849      end if;
850      l_str := l_str||'>';
851      return l_str;
852  end;
853  
854  function tableHeader(cvalue      in varchar2 character set any_cs DEFAULT NULL,
855                       calign      in varchar2 DEFAULT NULL,
856                       cdp         in varchar2 DEFAULT NULL,
857                       cnowrap     in varchar2 DEFAULT NULL,
858                       crowspan    in varchar2 DEFAULT NULL,
859                       ccolspan    in varchar2 DEFAULT NULL,
860                       cattributes in varchar2 DEFAULT NULL)
861                       return varchar2 character set cvalue%charset is
862  begin return ('<th'||
863                 IFNOTNULL(calign,' align="'||calign||'"')||
864                 IFNOTNULL(cdp,' dp="'||cdp||'"')||
865                 IFNOTNULL(crowspan,' rowspan="'||crowspan||'"')||
866                 IFNOTNULL(ccolspan,' colspan="'||ccolspan||'"')||
867                 IFNOTNULL(cnowrap,' nowrap="nowrap"')||
868                 IFNOTNULL(cattributes,' '||cattributes)||
869                '>'||
870                cvalue||'</th>'); end;
871  
872  function tableData(cvalue      in varchar2 character set any_cs DEFAULT NULL,
873                     calign      in varchar2 DEFAULT NULL,
874                     cdp         in varchar2 DEFAULT NULL,
875                     cnowrap     in varchar2 DEFAULT NULL,
876                     crowspan    in varchar2 DEFAULT NULL,
877                     ccolspan    in varchar2 DEFAULT NULL,
878                     cattributes in varchar2 DEFAULT NULL)
879                     return varchar2 character set cvalue%charset is
880      l_str varchar2(32767);
881  begin
882      l_str := '<td';
883      if calign is not null then
884          l_str := l_str||' align="'||calign||'"';
885      end if;
886      if cdp is not null then
887          l_str := l_str||' dp="'||cdp||'"';
888      end if;
889      if crowspan is not null then
890          l_str := l_str||' rowspan="'||crowspan||'"';
891      end if;
892      if ccolspan is not null then
893          l_str := l_str||' colspan="'||ccolspan||'"';
894      end if;
895      if cnowrap is not null then
896          l_str := l_str||' nowrap="nowrap"';
897      end if;
898      if cattributes is not null then
899          l_str := l_str||' '||cattributes;
900      end if;
901      l_str := l_str||'>'||cvalue||'</td>';
902      return l_str;
903  end;
904  
905  function format_cell( columnValue in varchar2 character set any_cs,
906                        format_numbers in varchar2 default null)
907                        return varchar2 character set columnvalue%charset is
908     function tochar(d in number, f in varchar2) return varchar2 is
909     begin
910        return nvl(ltrim(to_char(d,f)), '(null)');
911     end tochar;
912  begin
913     if (format_numbers is NULL) then
914        return(tableData(columnValue));
915     end if;
916  
917     return(tableData(tochar(to_number(columnValue),format_numbers),'right'));
918  
919     exception
920     when others then
921         return(tableData(nvl(columnValue, '(null)')));
922  end format_cell;
923  /* END HTML TABLES */
924  
925  /* BEGIN HTML FRAMES - Netscape Extensions FRAMESET, FRAME tags */
926  function framesetOpen(crows in varchar2 DEFAULT NULL,/* row height value list */
927              ccols    in varchar2 DEFAULT NULL,
928  cattributes in varchar2 DEFAULT NULL) return varchar2 is /* column width list */
929  begin
930   return('<frameset'||
931      IFNOTNULL(crows, ' rows="'||crows||'"')||
932      IFNOTNULL(ccols, ' cols="'||ccols||'"')||
933      IFNOTNULL(cattributes,' '||cattributes)||
934      '>');
935  end framesetOpen;
936  
937  
938  function frame(        csrc    in varchar2,                /* URL */
939              cname    in varchar2 DEFAULT NULL,        /* Window name */
940              cmarginwidth     in varchar2 DEFAULT NULL,    /* value in pixels */
941              cmarginheight    in varchar2 DEFAULT NULL,    /* value in pixels */
942              cscrolling    in varchar2 DEFAULT NULL,    /* yes | no | auto */
943              cnoresize    in varchar2 DEFAULT NULL,
944              cattributes    in varchar2 DEFAULT NULL) return varchar2 is    /* user cannot resize frame */
945  begin
946   return('<frame src="'||csrc||'"'||
947      IFNOTNULL(cname, ' name="'||cname||'"')||
948      IFNOTNULL(cmarginwidth, ' marginwidth="'||cmarginwidth||'"')||
949      IFNOTNULL(cmarginheight, ' marginheight="'||cmarginheight||'"')||
950      IFNOTNULL(cscrolling, ' scrolling="'||cscrolling||'"')||
951      IFNOTNULL(cnoresize, ' noresize="noresize"')||
952      IFNOTNULL(cattributes,' '||cattributes)||
953      ' />');
954  end frame;
955  
956  
957  /* END HTML FRAMES */
958  
959  /* SPECIAL HTML TAGS */
960  function appletOpen(ccode     in varchar2,
961              cwidth    in integer,
962              cheight    in integer,
963              cattributes in varchar2 DEFAULT NULL) return varchar2 is
964  begin return('<applet code='||ccode||
965          ' width='||cwidth||
966          ' height='||cheight||
967          IFNOTNULL(cattributes,' '||cattributes)||
968          '>');
969  end;
970  
971  function param(cname    in varchar2,
972             cvalue    in varchar2 character set any_cs)
973                 return varchar2 character set cvalue%charset is
974  begin return('<param name='||cname||' value= "'||cvalue||
975          '" >');
976  end;
977  
978  /* END SPECIAL HTML TAGS */
979  
980  /* SPECIAL FUNCTIONS */
981  function escape_sc(ctext in varchar2 character set any_cs)
982           return varchar2 character set ctext%charset is
983  begin return(replace(
984               replace(
985               replace(
986               replace(ctext, '&', '&' || 'amp;'),
987                              '"', '&' || 'quot;'),
988                              '<', '&' || 'lt;'),
989                              '>', '&' || 'gt;'));
990  end;
991  
992  function escape_url(p_url in varchar2 character set any_cs)
993                      return varchar2 character set p_url%charset is
994  begin
995          return replace(escape_sc(p_url), '%', '%25');
996  end;
997  /* END SPECIAL FUNCTIONS */
998  
999  /* END BODY ELEMENT tags */
1000  end;
1001  /

Package body created.

SQL> show errors package body htf
No errors.
SQL> 
SQL> REM Creating HTP package body...
SQL> create or replace package body htp as
  2  
  3     db_charset constant varchar2(30) :=
  4                           substr(userenv('LANGUAGE'),
  5                                  instr(userenv('LANGUAGE'),'.')+1);
  6     req_charset         varchar2(30) := null;
  7  /*
  8  **    Add these globals to cache the character set information
  9  **    used in setHTTPCharset(). The character set IDs are used
 10  **    for comparison to determine if conversion is required.
 11  */
 12     db_charset_ID  pls_integer := 0;
 13     nc_charset varchar2(30);
 14     nc_charset_ID  pls_integer := 0;
 15     ht_charset varchar2(30) := db_charset;
 16     ht_charset_ID  pls_integer := db_charset_ID;
 17     last_iana_charset varchar(40) := null;
 18     got_ht_charset boolean := FALSE;
 19  
 20     NL_CHAR   constant varchar2(10) := owa_cx.nl_char;
 21     NLNL_CHAR constant varchar2(10) := NL_CHAR||NL_CHAR;
 22  
 23     htcurline  varchar2(256) := ''; -- htbuf_arr element size
 24     htbuf      htbuf_arr;
 25     rows_in    pls_integer;
 26     rows_out   pls_integer;
 27     --
 28     -- pack_after :
 29     -- Legacy constant used by OAS to denote the line after which htbuf rows
 30     -- should be packed. This constant was being used to avoid packing multiple
 31     -- HTTP header lines in the same row. We now optimize such that we start
 32     -- packing as soon as we see the end of headers.
 33     -- Refer to bug#2609772 for more details on packing related issues
 34     --
 35     pack_after number := 60;
 36  
 37     htraws     htraw_arr;
 38     RAW_MAX    constant pls_integer := 256;
 39     bRawMode   boolean := false;
 40     contentLen pls_integer := 0;
 41  
 42     sContentType        constant varchar2(16) := 'CONTENT-TYPE:';
 43     sContentLength      constant varchar2(16) := 'CONTENT-LENGTH:';
 44     sLocation           constant varchar2(16) := 'LOCATION:';
 45     sStatus             constant varchar2(16) := 'STATUS:';
 46     sSetCookie          constant varchar2(16) := 'SET-COOKIE:';
 47     sTextHtml           constant varchar2(16) := 'text/html';
 48  
 49     nContentTypeLen     constant number := length(sContentType);
 50     nContentLengthLen   constant number := length(sContentLength);
 51     nLocationLen        constant number := length(sLocation);
 52     nStatusLen          constant number := length(sStatus);
 53     nSetCookieLen       constant number := length(sSetCookie);
 54  
 55     bAddDefaultHTMLHdr  boolean := TRUE;
 56     bHTMLPageReady      boolean := FALSE;
 57     bHasContentLength   boolean := FALSE;
 58     nEndOfHdrIx         pls_integer := -1;
 59     nContentLengthIx    binary_integer := -1;
 60  
 61     sDownloadFilesList     varchar2(256); -- for file download feature
 62     nCompressDownloadFiles binary_integer;
 63  
 64     bFirstCall          boolean := TRUE;
 65     nGatewayVersion     pls_integer := 0;       /* Unknown gateway */
 66  
 67     -- Forward declaration of local procedure
 68     procedure prn_raw(cbuf in varchar2 character set any_cs);
 69  
 70  /* STRUCTURE tags */
 71  procedure htmlOpen is
 72  begin p(htf.htmlOpen); end;
 73  
 74  procedure htmlClose is
 75  begin p(htf.htmlClose); end;
 76  
 77  procedure headOpen is
 78  begin p(htf.headOpen); end;
 79  
 80  procedure headClose is
 81  begin p(htf.headClose); end;
 82  
 83  procedure bodyOpen(cbackground in varchar2 DEFAULT NULL,
 84                     cattributes in varchar2 DEFAULT NULL) is
 85  begin p(htf.bodyOpen(cbackground,cattributes)); end;
 86  
 87  procedure bodyClose is
 88  begin p(htf.bodyClose); end;
 89  /* END STRUCTURE tags */
 90  
 91  /* HEAD Related elements tags */
 92  procedure title  (ctitle in varchar2 character set any_cs) is
 93  begin p(htf.title(ctitle)); end;
 94  
 95  procedure htitle(ctitle      in varchar2 character set any_cs,
 96                   nsize       in integer  DEFAULT 1,
 97                   calign      in varchar2 DEFAULT NULL,
 98                   cnowrap     in varchar2 DEFAULT NULL,
 99                   cclear      in varchar2 DEFAULT NULL,
100                   cattributes in varchar2 DEFAULT NULL) is
101  begin p(htf.htitle(ctitle,nsize,calign,cnowrap,cclear,cattributes)); end;
102  
103  procedure base(    ctarget     in varchar2 DEFAULT NULL,
104          cattributes    in varchar2 DEFAULT NULL) is
105  begin p(htf.base(ctarget,cattributes)); end;
106  
107  procedure isindex(cprompt in varchar2 character set any_cs DEFAULT NULL,
108                    curl    in varchar2  DEFAULT NULL) is
109  begin p(htf.isindex(cprompt, curl)); end;
110  
111  procedure linkRel(crel   in varchar2,
112                    curl   in varchar2,
113                    ctitle in varchar2 character set any_cs DEFAULT NULL) is
114  begin p(htf.linkRel(crel, curl, ctitle)); end;
115  
116  procedure linkRev(crev   in varchar2,
117                    curl   in varchar2,
118                    ctitle in varchar2 character set any_cs DEFAULT NULL) is
119  begin p(htf.linkRev(crev, curl, ctitle)); end;
120  
121  procedure meta(chttp_equiv in varchar2,
122                 cname       in varchar2,
123                 ccontent    in varchar2) is
124  begin p(htf.meta(chttp_equiv, cname, ccontent)); end;
125  
126  procedure nextid(cidentifier in varchar2) is
127  begin p(htf.nextid(cidentifier)); end;
128  
129  procedure style(cstyle in varchar2 character set any_cs) is
130  begin p(htf.style(cstyle)); end;
131  
132  procedure script(cscript     in varchar2,
133                   clanguage   in varchar2 DEFAULT NULL) is
134  begin p(htf.script(cscript, clanguage)); end;
135  
136  /* END HEAD Related elements tags */
137  
138  /* BODY ELEMENT tags */
139  procedure hr  (cclear      in varchar2 DEFAULT NULL,
140                 csrc        in varchar2 DEFAULT NULL,
141                 cattributes in varchar2 DEFAULT NULL) is
142  begin p(htf.hr(cclear, csrc, cattributes)); end;
143  
144  procedure line(cclear      in varchar2 DEFAULT NULL,
145                 csrc        in varchar2 DEFAULT NULL,
146                 cattributes in varchar2 DEFAULT NULL) is
147  begin htp.hr(cclear, csrc, cattributes); end;
148  
149  procedure nl  (cclear      in varchar2 DEFAULT NULL,
150                 cattributes in varchar2 DEFAULT NULL) is
151  begin p(htf.nl(cclear,cattributes)); end;
152  
153  procedure br  (cclear      in varchar2 DEFAULT NULL,
154                 cattributes in varchar2 DEFAULT NULL) is
155  begin htp.nl(cclear,cattributes); end;
156  
157  procedure header(nsize   in integer,
158                   cheader in varchar2 character set any_cs,
159                   calign  in varchar2 DEFAULT NULL,
160                   cnowrap in varchar2 DEFAULT NULL,
161                   cclear  in varchar2 DEFAULT NULL,
162                   cattributes in varchar2 DEFAULT NULL) is
163  begin p(htf.header(nsize,cheader,calign,cnowrap,cclear,cattributes)); end;
164  
165  procedure anchor(curl        in varchar2,
166                   ctext       in varchar2 character set any_cs,
167                   cname       in varchar2 DEFAULT NULL,
168                   cattributes in varchar2 DEFAULT NULL) is
169  begin p(htf.anchor(curl,ctext,cname,cattributes)); end;
170  
171  procedure anchor2(curl       in varchar2,
172                   ctext       in varchar2 character set any_cs,
173                   cname       in varchar2 DEFAULT NULL,
174                   ctarget     in varchar2 DEFAULT NULL,
175                   cattributes in varchar2 DEFAULT NULL) is
176  begin p(htf.anchor2(curl,ctext,cname,ctarget,cattributes)); end;
177  
178  procedure mailto(caddress    in varchar2,
179                   ctext       in varchar2 character set any_cs,
180                   cname       in varchar2 character set any_cs DEFAULT NULL,
181                   cattributes in varchar2 DEFAULT NULL) is
182  begin p(htf.mailto(caddress,ctext,cname,cattributes)); end;
183  
184  procedure img(curl        in varchar2,
185                calign      in varchar2 DEFAULT NULL,
186                calt        in varchar2 DEFAULT NULL,
187                cismap      in varchar2 DEFAULT NULL,
188                cattributes in varchar2 DEFAULT NULL) is
189  begin p(htf.img(curl,calign,calt,cismap,cattributes)); end;
190  
191  procedure img2(curl       in varchar2,
192                calign      in varchar2 DEFAULT NULL,
193                calt        in varchar2 DEFAULT NULL,
194                cismap      in varchar2 DEFAULT NULL,
195                cusemap     in varchar2 DEFAULT NULL,
196                cattributes in varchar2 DEFAULT NULL) is
197  begin p(htf.img2(curl,calign,calt,cismap,cusemap,cattributes)); end;
198  
199  procedure area(    ccoords  in varchar2,
200                    cshape    in varchar2 DEFAULT NULL,
201                    chref     in varchar2 DEFAULT NULL,
202                   cnohref    in varchar2 DEFAULT NULL,
203          ctarget in varchar2 DEFAULT NULL,
204          cattributes in varchar2 DEFAULT NULL) is
205  begin p(htf.area(ccoords,cshape,chref,cnohref,ctarget,cattributes));end;
206  
207  procedure mapOpen(cname    in varchar2,cattributes in varchar2 DEFAULT NULL) is
208  begin p(htf.mapOpen(cname,cattributes)); end;
209  procedure mapClose is
210  begin p(htf.mapClose); end;
211  
212  procedure bgsound(csrc    in varchar2,
213            cloop    in varchar2 DEFAULT NULL,
214            cattributes in varchar2 DEFAULT NULL) is
215  begin p(htf.bgsound(csrc,cloop,cattributes));end;
216  
217  procedure para is
218  begin p(htf.para); end;
219  
220  procedure paragraph(calign       in varchar2 DEFAULT NULL,
221                      cnowrap      in varchar2 DEFAULT NULL,
222                      cclear       in varchar2 DEFAULT NULL,
223                      cattributes  in varchar2 DEFAULT NULL) is
224  begin p(htf.paragraph(calign,cnowrap,cclear,cattributes)); end;
225  
226  procedure div(    calign       in varchar2 DEFAULT NULL,
227                  cattributes  in varchar2 DEFAULT NULL) is
228  begin p(htf.div(calign,cattributes)); end;
229  
230  procedure address(cvalue       in varchar2 character set any_cs,
231                    cnowrap      in varchar2 DEFAULT NULL,
232                    cclear       in varchar2 DEFAULT NULL,
233                    cattributes  in varchar2 DEFAULT NULL) is
234  begin p(htf.address(cvalue, cnowrap, cclear, cattributes)); end;
235  
236  procedure comment(ctext in varchar2 character set any_cs) is
237  begin p(htf.comment(ctext)); end;
238  
239  procedure preOpen(cclear      in varchar2 DEFAULT NULL,
240                    cwidth      in varchar2 DEFAULT NULL,
241                    cattributes in varchar2 DEFAULT NULL) is
242  begin p(htf.preOpen(cclear,cwidth,cattributes)); end;
243  
244  procedure preClose is
245  begin p(htf.preClose); end;
246  
247  procedure listingOpen is
248  begin p(htf.listingOpen); end;
249  procedure listingClose is
250  begin p(htf.listingClose); end;
251  
252  procedure nobr(ctext in varchar2 character set any_cs) is
253  begin p(htf.nobr(ctext)); end;
254  procedure wbr is
255  begin p(htf.wbr); end;
256  
257  procedure center(ctext in varchar2 character set any_cs) is
258  begin p(htf.center(ctext)); end;
259  
260  procedure centerOpen is
261  begin p(htf.centerOpen); end;
262  
263  procedure centerClose is
264  begin p(htf.centerClose); end;
265  
266  
267  
268  procedure blockquoteOpen(cnowrap      in varchar2 DEFAULT NULL,
269                           cclear       in varchar2 DEFAULT NULL,
270                           cattributes  in varchar2 DEFAULT NULL) is
271  begin p(htf.blockquoteOpen(cnowrap,cclear,cattributes)); end;
272  
273  procedure blockquoteClose is
274  begin p(htf.blockquoteClose); end;
275  
276  /* LIST tags */
277  procedure listHeader(ctext in varchar2 character set any_cs,
278                       cattributes in varchar2 DEFAULT NULL) is
279  begin p(htf.listHeader(ctext,cattributes)); end;
280  
281  procedure listItem(ctext       in varchar2 character set any_cs DEFAULT NULL,
282                     cclear      in varchar2 DEFAULT NULL,
283                     cdingbat    in varchar2 DEFAULT NULL,
284                     csrc        in varchar2 DEFAULT NULL,
285                     cattributes in varchar2 DEFAULT NULL) is
286  begin p(htf.listItem(ctext,cclear,cdingbat,csrc,cattributes)); end;
287  
288  procedure ulistOpen(cclear      in varchar2 DEFAULT NULL,
289                      cwrap       in varchar2 DEFAULT NULL,
290                      cdingbat    in varchar2 DEFAULT NULL,
291                      csrc        in varchar2 DEFAULT NULL,
292                      cattributes in varchar2 DEFAULT NULL) is
293  begin p(htf.ulistOpen(cclear,cwrap,cdingbat,csrc,cattributes)); end;
294  
295  procedure ulistClose is
296  begin p(htf.ulistClose); end;
297  
298  procedure olistOpen(cclear      in varchar2 DEFAULT NULL,
299                      cwrap       in varchar2 DEFAULT NULL,
300                      cattributes in varchar2 DEFAULT NULL) is
301  begin p(htf.olistOpen(cclear,cwrap,cattributes)); end;
302  
303  procedure olistClose is
304  begin p(htf.olistClose); end;
305  
306  procedure dlistOpen(cclear      in varchar2 DEFAULT NULL,
307                      cattributes in varchar2 DEFAULT NULL) is
308  begin p(htf.dlistOpen(cclear,cattributes)); end;
309  
310  procedure dlistTerm(ctext       in varchar2 character set any_cs DEFAULT NULL,
311                      cclear      in varchar2 DEFAULT NULL,
312                      cattributes in varchar2 DEFAULT NULL) is
313  begin p(htf.dlistTerm(ctext,cclear,cattributes)); end;
314  
315  procedure dlistDef(ctext       in varchar2 character set any_cs DEFAULT NULL,
316                     cclear      in varchar2 DEFAULT NULL,
317                     cattributes in varchar2 DEFAULT NULL) is
318  begin p(htf.dlistDef(ctext,cclear,cattributes)); end;
319  
320  procedure dlistClose is
321  begin p(htf.dlistClose); end;
322  
323  procedure menulistOpen is
324  begin p(htf.menulistOpen); end;
325  
326  procedure menulistClose is
327  begin p(htf.menulistClose); end;
328  
329  procedure dirlistOpen is
330  begin p(htf.dirlistOpen); end;
331  
332  procedure dirlistClose is
333  begin p(htf.dirlistClose); end;
334  /* END LIST tags */
335  
336  /* SEMANTIC FORMAT ELEMENTS */
337  procedure dfn(ctext in varchar2 character set any_cs,
338                 cattributes in varchar2 DEFAULT NULL) is
339  begin p(htf.dfn(ctext,cattributes)); end;
340  
341  procedure cite(ctext in varchar2 character set any_cs,
342                 cattributes in varchar2 DEFAULT NULL) is
343  begin p(htf.cite(ctext,cattributes)); end;
344  
345  procedure code(ctext in varchar2 character set any_cs,
346                 cattributes in varchar2 DEFAULT NULL) is
347  begin p(htf.code(ctext,cattributes)); end;
348  
349  procedure em(ctext  in varchar2 character set any_cs,
350               cattributes in varchar2 DEFAULT NULL) is
351  begin p(htf.em(ctext,cattributes)); end;
352  
353  procedure emphasis(ctext in varchar2 character set any_cs,
354                     cattributes in varchar2 DEFAULT NULL) is
355  begin p(htf.emphasis(ctext,cattributes)); end;
356  
357  procedure kbd(ctext in varchar2 character set any_cs,
358                cattributes in varchar2 DEFAULT NULL) is
359  begin p(htf.kbd(ctext,cattributes)); end;
360  
361  procedure keyboard(ctext in varchar2 character set any_cs,
362                     cattributes in varchar2 DEFAULT NULL) is
363  begin p(htf.keyboard(ctext,cattributes)); end;
364  
365  procedure sample(ctext in varchar2 character set any_cs,
366                   cattributes in varchar2 DEFAULT NULL) is
367  begin p(htf.sample(ctext,cattributes)); end;
368  
369  procedure strong (ctext  in varchar2 character set any_cs,
370                    cattributes in varchar2 DEFAULT NULL) is
371  begin p(htf.strong(ctext,cattributes)); end;
372  
373  procedure variable(ctext in varchar2 character set any_cs,
374                     cattributes in varchar2 DEFAULT NULL) is
375  begin p(htf.variable(ctext,cattributes)); end;
376  
377  procedure big(    ctext          in varchar2 character set any_cs,
378                    cattributes    in varchar2 DEFAULT NULL) is
379  begin p(htf.big(ctext,cattributes)); end;
380  
381  procedure small(ctext          in varchar2 character set any_cs,
382                  cattributes     in varchar2 DEFAULT NULL) is
383  begin p(htf.small(ctext,cattributes)); end;
384  
385  procedure sub(    ctext          in varchar2 character set any_cs,
386                    calign         in varchar2 DEFAULT NULL,
387                    cattributes    in varchar2 DEFAULT NULL) is
388  begin p(htf.sub(ctext,calign,cattributes)); end;
389  
390  procedure sup(    ctext         in varchar2 character set any_cs,
391                    calign        in varchar2 DEFAULT NULL,
392                    cattributes   in varchar2 DEFAULT NULL) is
393  begin p(htf.sup(ctext,calign,cattributes)); end;
394  
395  
396  /* END SEMANTIC FORMAT ELEMENTS */
397  
398  /* PHYSICAL FORMAT ELEMENTS */
399  procedure basefont(nsize in integer) is
400  begin p(htf.basefont(nsize));end;
401  
402  procedure fontOpen(ccolor    in varchar2 DEFAULT NULL,
403             cface    in varchar2 DEFAULT NULL,
404             csize     in varchar2 DEFAULT NULL,
405             cattributes    in varchar2 DEFAULT NULL) is
406  begin p(htf.fontOpen(ccolor,cface,csize,cattributes)); end;
407  
408  procedure fontClose is
409  begin p(htf.fontClose); end;
410  
411  procedure bold   (ctext  in varchar2 character set any_cs,
412                    cattributes in varchar2 DEFAULT NULL) is
413  begin p(htf.bold(ctext,cattributes)); end;
414  
415  procedure italic (ctext  in varchar2 character set any_cs,
416                    cattributes in varchar2 DEFAULT NULL) is
417  begin p(htf.italic(ctext,cattributes)); end;
418  
419  procedure teletype(ctext in varchar2 character set any_cs,
420                     cattributes in varchar2 DEFAULT NULL) is
421  begin p(htf.teletype(ctext,cattributes)); end;
422  
423  procedure plaintext(ctext  in varchar2 character set any_cs,
424                      cattributes in varchar2 DEFAULT NULL) is
425  begin p(htf.plaintext(ctext,cattributes)); end;
426  
427  procedure s(ctext  in varchar2 character set any_cs,
428              cattributes in varchar2 DEFAULT NULL) is
429  begin p(htf.s(ctext,cattributes)); end;
430  
431  procedure strike (ctext  in varchar2 character set any_cs,
432                    cattributes in varchar2 DEFAULT NULL) is
433  begin p(htf.strike(ctext,cattributes)); end;
434  
435  procedure underline (ctext  in varchar2 character set any_cs,
436                    cattributes in varchar2 DEFAULT NULL) is
437  begin p(htf.underline(ctext,cattributes)); end;
438  
439  /* END PHYSICAL FORMAT ELEMENTS */
440  
441  /* HTML FORMS */
442  
443  procedure formOpen(curl     in varchar2,
444                     cmethod  in varchar2 DEFAULT 'post',
445             ctarget  in varchar2 DEFAULT NULL,
446             cenctype in varchar2 DEFAULT NULL,
447             cattributes in varchar2 DEFAULT NULL) is
448  begin p(htf.formOpen(curl,cmethod,ctarget,cenctype,cattributes)); end;
449  
450  procedure formCheckbox(cname       in varchar2,
451                        cvalue      in varchar2 character set any_cs DEFAULT 'on',
452                         cchecked    in varchar2 DEFAULT NULL,
453                         cattributes in varchar2 DEFAULT NULL) is
454  begin p(htf.formCheckbox(cname,cvalue,cchecked,cattributes)); end;
455  
456  procedure formFile(cname       in varchar2,
457                     caccept     in varchar2 DEFAULT NULL,
458                     cattributes in varchar2 DEFAULT NULL) is
459  begin p(htf.formFile(cname,caccept,cattributes)); end;
460  
461  procedure formHidden(cname       in varchar2,
462                       cvalue      in varchar2 character set any_cs DEFAULT NULL,
463                       cattributes in varchar2 DEFAULT NULL) is
464  begin p(htf.formHidden(cname,cvalue,cattributes)); end;
465  
466  procedure formImage(cname       in varchar2,
467                      csrc        in varchar2,
468                      calign      in varchar2 DEFAULT NULL,
469                      cattributes in varchar2 DEFAULT NULL) is
470  begin p(htf.formImage(cname,csrc,calign,cattributes)); end;
471  
472  procedure formPassword(cname       in varchar2,
473                         csize       in varchar2 DEFAULT NULL,
474                         cmaxlength  in varchar2 DEFAULT NULL,
475                         cvalue      in varchar2 character set any_cs DEFAULT NULL,
476                         cattributes in varchar2 DEFAULT NULL) is
477  begin p(htf.formPassword(cname,csize,cmaxlength,cvalue,cattributes)); end;
478  
479  procedure formRadio(cname       in varchar2,
480                      cvalue      in varchar2 character set any_cs,
481                      cchecked    in varchar2 DEFAULT NULL,
482                      cattributes in varchar2 DEFAULT NULL) is
483  begin p(htf.formRadio(cname,cvalue,cchecked,cattributes)); end;
484  
485  procedure formReset(cvalue     in varchar2 character set any_cs DEFAULT 'Reset',
486                     cattributes in varchar2 DEFAULT NULL) is
487  begin p(htf.formReset(cvalue,cattributes)); end;
488  
489  procedure formSubmit(cname       in varchar2 DEFAULT NULL,
490                    cvalue      in varchar2 character set any_cs DEFAULT 'Submit',
491                    cattributes in varchar2 DEFAULT NULL) is
492  begin p(htf.formSubmit(cname,cvalue,cattributes)); end;
493  
494  procedure formText(cname       in varchar2,
495                     csize       in varchar2 DEFAULT NULL,
496                     cmaxlength  in varchar2 DEFAULT NULL,
497                     cvalue      in varchar2 character set any_cs DEFAULT NULL,
498                     cattributes in varchar2 DEFAULT NULL) is
499  begin p(htf.formText(cname,csize,cmaxlength,cvalue,cattributes)); end;
500  
501  procedure formSelectOpen(cname       in varchar2,
502                        cprompt     in varchar2 character set any_cs DEFAULT NULL,
503                           nsize       in integer  DEFAULT NULL,
504                           cattributes in varchar2 DEFAULT NULL) is
505  begin p(htf.formSelectOpen(cname,cprompt,nsize,cattributes)); end;
506  
507  procedure formSelectOption(cvalue      in varchar2 character set any_cs,
508                             cselected   in varchar2 DEFAULT NULL,
509                             cattributes in varchar2 DEFAULT NULL) is
510  begin p(htf.formSelectOption(cvalue,cselected,cattributes)); end;
511  
512  procedure formSelectClose is
513  begin p(htf.formSelectClose); end;
514  
515  procedure formTextarea(cname       in varchar2,
516                         nrows       in integer,
517                         ncolumns    in integer,
518                         calign      in varchar2 DEFAULT NULL,
519                         cattributes in varchar2 DEFAULT NULL) is
520  begin p(htf.formTextarea(cname,nrows,ncolumns,calign,cattributes)); end;
521  
522  
523  procedure formTextarea2(cname       in varchar2,
524                         nrows       in integer,
525                         ncolumns    in integer,
526                         calign      in varchar2 DEFAULT NULL,
527                         cwrap       in varchar2 DEFAULT NULL,
528                         cattributes in varchar2 DEFAULT NULL) is
529  begin p(htf.formTextarea2(cname,nrows,ncolumns,calign,cwrap,cattributes)); end;
530  
531  
532  procedure formTextareaOpen(cname       in varchar2,
533                             nrows       in integer,
534                             ncolumns    in integer,
535                             calign      in varchar2 DEFAULT NULL,
536                             cattributes in varchar2 DEFAULT NULL) is
537  begin p(htf.formTextareaOpen(cname,nrows,ncolumns,calign,cattributes)); end;
538  
539  
540  procedure formTextareaOpen2(cname       in varchar2,
541                             nrows       in integer,
542                             ncolumns    in integer,
543                             calign      in varchar2 DEFAULT NULL,
544                             cwrap       in varchar2 DEFAULT NULL,
545                             cattributes in varchar2 DEFAULT NULL) is
546  begin
547     p(htf.formTextareaOpen2(cname,nrows,ncolumns,calign,cwrap,cattributes));
548  end;
549  
550  procedure formTextareaClose is
551  begin p(htf.formTextareaClose); end;
552  
553  procedure formClose is
554  begin p(htf.formClose); end;
555  /* END HTML FORMS */
556  
557  /* HTML TABLES */
558  procedure tableOpen(cborder in varchar2 DEFAULT NULL,
559                     calign in varchar2 DEFAULT NULL,
560                     cnowrap in varchar2 DEFAULT NULL,
561                     cclear in varchar2 DEFAULT NULL,
562                     cattributes in varchar2 DEFAULT NULL) is
563  begin p(htf.tableOpen(cborder,calign,cnowrap,cclear,cattributes)); end;
564  
565  procedure tableCaption(ccaption    in varchar2 character set any_cs,
566                         calign      in varchar2 DEFAULT NULL,
567                         cattributes in varchar2 DEFAULT NULL) is
568  begin p(htf.tableCaption(ccaption,calign,cattributes)); end;
569  
570  procedure tableRowOpen(calign      in varchar2 DEFAULT NULL,
571                         cvalign     in varchar2 DEFAULT NULL,
572                         cdp         in varchar2 DEFAULT NULL,
573                         cnowrap     in varchar2 DEFAULT NULL,
574                         cattributes in varchar2 DEFAULT NULL) is
575  begin p(htf.tableRowOpen(calign,cvalign,cdp,cnowrap,cattributes)); end;
576  
577  procedure tableHeader(cvalue      in varchar2 character set any_cs DEFAULT NULL,
578                        calign      in varchar2 DEFAULT NULL,
579                        cdp         in varchar2 DEFAULT NULL,
580                        cnowrap     in varchar2 DEFAULT NULL,
581                        crowspan    in varchar2 DEFAULT NULL,
582                        ccolspan    in varchar2 DEFAULT NULL,
583                        cattributes in varchar2 DEFAULT NULL) is
584  begin p(htf.tableHeader(cvalue,calign,cdp,cnowrap,
585                          crowspan,ccolspan,cattributes)); end;
586  
587  procedure tableData(cvalue      in varchar2 character set any_cs DEFAULT NULL,
588                      calign      in varchar2 DEFAULT NULL,
589                      cdp         in varchar2 DEFAULT NULL,
590                      cnowrap     in varchar2 DEFAULT NULL,
591                      crowspan    in varchar2 DEFAULT NULL,
592                      ccolspan    in varchar2 DEFAULT NULL,
593                      cattributes in varchar2 DEFAULT NULL) is
594  begin p(htf.tableData(cvalue,calign,cdp,cnowrap,
595                        crowspan,ccolspan,cattributes)); end;
596  
597  procedure tableRowClose is
598  begin p(htf.tableRowClose); end;
599  
600  procedure tableClose is
601  begin p(htf.tableClose); end;
602  /* END HTML TABLES */
603  
604  /* BEGIN HTML FRAMES - Netscape Extensions FRAMESET, FRAME tags */
605  procedure framesetOpen(    crows    in varchar2 DEFAULT NULL,    /* row height value list */
606              ccols    in varchar2 DEFAULT NULL,
607              cattributes in varchar2 DEFAULT NULL) is    /* column width list */
608  begin
609   p(htf.framesetOpen( crows, ccols, cattributes ));
610  end framesetOpen;
611  
612  procedure framesetClose is
613  begin
614   p(htf.framesetClose);
615  end framesetClose;
616  
617  procedure frame(    csrc    in varchar2,                /* URL */
618              cname    in varchar2 DEFAULT NULL,        /* Window Name */
619              cmarginwidth     in varchar2 DEFAULT NULL,    /* Value in pixels */
620              cmarginheight    in varchar2 DEFAULT NULL,    /* Value in pixels */
621              cscrolling    in varchar2 DEFAULT NULL,    /* yes | no | auto */
622              cnoresize    in varchar2 DEFAULT NULL,
623              cattributes     in varchar2 DEFAULT NULL) is    /* Not resizable by user */
624  begin
625   p(htf.frame( csrc, cname, cmarginwidth, cmarginheight, cscrolling, cnoresize, cattributes ));
626  end frame;
627  
628  procedure noframesOpen is
629  begin
630   p(htf.noframesOpen);
631  end noframesOpen;
632  
633  procedure noframesClose is
634  begin
635   p(htf.noframesClose);
636  end noframesClose;
637  
638  /* END HTML FRAMES */
639  
640  /* SPECIAL HTML TAGS */
641  procedure appletOpen(    ccode        in varchar2,
642              cwidth        in integer,
643              cheight        in integer,
644              cattributes    in varchar2 DEFAULT NULL) is
645  begin p(htf.appletOpen(ccode,cwidth,cheight,cattributes));end;
646  
647  procedure param(    cname        in varchar2,
648              cvalue        in varchar2 character set any_cs) is
649  begin p(htf.param(cname,cvalue));end;
650  
651  procedure appletClose is
652  begin p(htf.appletClose);end;
653  
654  /* END SPECIAL HTML TAGS */
655  
656  
657  /* SPECIAL PROCEDURES */
658  
659  /* This procedure sets the value of CGI env var REQUEST_CHARSET in a global var */
660  procedure set_request_charset
661  is
662  begin
663      if (req_charset is null)
664      then
665          req_charset := owa_util.get_cgi_env('REQUEST_CHARSET');
666          if (req_charset is null)
667          then
668              -- set req_charset to match DB_CHARSET if not set
669              req_charset := db_charset;
670          end if;
671          req_charset := UPPER(req_charset);
672      end if;
673  end set_request_charset;
674  
675  function getContentLength return number is
676     len      pls_integer := 0;
677     nFromIx  pls_integer;
678  begin
679     -- Check to see if we have a BLOB download, and if so,
680     -- return the length of the BLOB
681     IF (wpg_docload.is_file_download)
682     THEN
683        RETURN wpg_docload.get_content_length;
684     END IF;
685     if (bRawMode) then
686        return contentLen ;
687     end if;
688  
689     nFromIx := nEndOfHdrIx + 1;
690     for nIx in nFromIx..rows_in loop
691       len := len + lengthb(htbuf(nIx)); -- use lengthb to get in bytes
692     end loop;
693     return(len);
694  end getContentLength;
695  
696  /* Start of OAS specific helper procedure */
697  function getContentLength_cs_convert ( charset in varchar2) return number is
698     len      binary_integer := 0;
699     nFromIx  binary_integer;
700  begin
701     nFromIx := nEndOfHdrIx + 1;
702     for nIx in nFromIx..rows_in
703     loop
704        len := len + lengthb( convert (htbuf(nIx), charset));
705     end loop;
706     return(len);
707  end getContentLength_cs_convert;
708  /* End of OAS specific helper procedure */
709  
710  procedure init is
711  begin
712     htcurline := '';
713     rows_in := 0;
714     rows_out := 0;
715     htbuf.delete;
716     pack_after := 60;             /* see comments on 'pack_after' */
717  
718     bAddDefaultHTMLHdr := TRUE;
719     bHTMLPageReady := FALSE;
720     bHasContentLength := FALSE;
721     nEndOfHdrIx := -1;
722     nContentLengthIx := -1;
723  
724     sDownloadFilesList := '';
725     nCompressDownloadFiles := 0;
726  
727     addDefaultHTMLHdr(TRUE);
728     htraws.delete;
729  
730     bRawMode := false;
731     contentLen := 0;
732     got_ht_charset := FALSE;
733  
734     bFirstCall := TRUE;
735     owa_cookie.init;
736     nGatewayVersion := 0;
737  end init;
738  
739  procedure flush_raw is
740  begin
741     if (not bHTMLPageReady)
742     then
743        if (nEndOfHdrIx < 0) -- how come?
744        then
745           nEndOfHdrIx := rows_in;
746        end if;
747        if (nContentLengthIx > 0)
748        then
749           htbuf(nContentLengthIx) := 'Content-length: '
750              || getContentLength || NL_CHAR;
751        end if;
752        bHTMLPageReady := TRUE;
753     end if;
754  end flush_raw;
755  
756  procedure flush is
757  begin
758     set_request_charset;
759     if (htcurline is not null)
760     then
761        rows_in := rows_in + 1;
762        htbuf(rows_in) := htcurline;
763        htcurline := '';
764     end if;
765     if (not bHTMLPageReady)
766     then
767        if (nEndOfHdrIx < 0) -- how come?
768        then
769           nEndOfHdrIx := rows_in;
770        end if;
771        if (nContentLengthIx > 0)
772        then
773           if (db_charset != req_charset)
774           then
775              htbuf(nContentLengthIx) := 'X-DB-Content-length: ' || getContentLength || NL_CHAR;
776           else
777              htbuf(nContentLengthIx) := 'Content-length: '
778                 || getContentLength || NL_CHAR;
779           end if;
780        end if;
781        bHTMLPageReady := TRUE;
782     end if;
783  end flush;
784  
785  /* Start of OAS specific helper procedure */
786  procedure flush_charset_convert ( charset in varchar2)  is
787  begin
788     if (htcurline is not null)
789     then
790        rows_in := rows_in + 1;
791        htbuf(rows_in) := htcurline;
792        htcurline := '';
793     end if;
794     if (not bHTMLPageReady)
795     then
796        if (nEndOfHdrIx < 0) -- how come?
797        then
798           nEndOfHdrIx := rows_in;
799        end if;
800        if (nContentLengthIx > 0)
801        then
802           htbuf(nContentLengthIx) := 'Content-length: '
803              || getContentLength_cs_convert ( charset) || NL_CHAR;
804        end if;
805        bHTMLPageReady := TRUE;
806     end if;
807  end flush_charset_convert;
808  /* End of OAS specific helper procedure */
809  
810  function get_line (irows out integer) return varchar2 is
811     cnt      number;
812  begin
813     flush;
814  
815     cnt := rows_in - rows_out;
816  
817     if (cnt > 1)
818     then
819        irows := 1;
820     else
821        irows := 0;
822        if (cnt < 1)
823        then
824           return(NULL);
825        end if;
826     end if;
827  
828     rows_out := rows_out + 1;
829     return(htbuf(rows_out));
830  end;
831  
832  procedure get_page (thepage     out NOCOPY htbuf_arr,
833                      irows    in out integer ) is
834    nrows       integer;
835    tmpbuf      varchar2(256);
836    num_headers pls_integer;
837    len         pls_integer;
838  begin
839  
840     --
841     -- Flush any remaining data from htcurline into htbuf and setup the
842     -- content-length
843     --
844     flush;
845  
846     if (db_charset != req_charset)
847     then
848        irows := least(irows, rows_in - rows_out);
849        if (irows = 0)
850        then
851           return;
852        end if;
853  
854        for i in 1..irows
855        loop
856           thepage(i) := htbuf(rows_out + i);
857        end loop;
858  
859        rows_out := rows_out + irows;
860     else
861        --
862        -- We can completely avoid packing response data in the following situations
863        --
864        -- 1. HTBUF_LEN was not reduced from its default value of 255 (single-byte
865        --    database)
866        --
867        -- 2. the user supplied buffer is large enough to hold the response (we
868        --    are aiming to achieve this by configuring the number of rows
869        --    in the user's buffer
870        --
871        -- This optimization will avoid some string manipulation/concatenation
872        -- operations and some lengthb calls as well
873        --
874        -- We should also avoid packing in situations where we are talking to the
875        -- older gateway (iversion <= 2)
876        --
877  
878        if ((HTBUF_LEN = 255) or (irows >= (rows_in - rows_out)) or
879            (nGatewayVersion <= 2)) then
880  
881           -- Rows to fetch = min (size of user supplied buffer, rows_left)
882           irows := least(irows, rows_in - rows_out);
883           if (irows = 0)
884           then
885              return;
886           end if;
887  
888           -- Transfer rows to user supplied buffer
889           for i in 1..irows
890           loop
891              thepage(i) := htbuf(rows_out + i);
892           end loop;
893  
894           -- Update rows_out for next fetch
895           rows_out := rows_out + irows;
896  
897           return;
898  
899        end if;
900  
901        --
902        -- We need to start packing lines in htbuf so that there are minimal
903        -- round trips from the client while making get_page calls
904        --
905        -- 1. We will not be packing response header lines due to dependencies
906        --    in the PL/SQL Gateway to expect each header line to start in a
907        --    new row
908        --
909        -- 2. Consecutive rows will be packed as long as the total size does
910        --    not exceed the width of a buffer row in bytes. No attempts will be
911        --    made to pack the row to the fullest.
912        --
913        -- 3. If a line is sufficiently packed (200 bytes), we will make no attempt
914        --    to pack anything else in it. The flip side is that we will flush
915        --    tmpbuf in such situations. So, some lines could end up with a
916        --    lot lesser packing.
917        --
918  
919        nrows := 0;
920        tmpbuf := '';
921  
922        -- Do not pack header lines
923        if (rows_out <= nEndOfHdrIx) then
924           num_headers := least (irows, nEndOfHdrIx - rows_out);
925           for i in 1..num_headers
926           loop
927              thepage(i) := htbuf(rows_out + i);
928           end loop;
929           rows_out := rows_out + num_headers;
930           nrows := num_headers;
931        end if;
932  
933        while (nrows < irows)
934        loop
935           if (rows_out = rows_in) then
936              -- No more data in internal buffer, write last row and return
937              if (tmpbuf is null) then
938                 irows := nrows;
939              else
940                 irows := nrows + 1;
941                 thepage(irows) := tmpbuf;
942              end if;
943              return;
944           end if;
945  
946           rows_out := rows_out + 1;
947  
948           len := lengthb (htbuf(rows_out));
949           if (len >= 200) then
950  
951              --
952              -- Make no attempt to pack sufficiently packed lines
953              -- 1. Copy exisiting data in tmpbuf to a new row in the response
954              -- 2. Copy current data row to the next row in the response
955              --
956  
957              -- Step 1
958              if (tmpbuf is not null) then
959                 nrows := nrows + 1;
960                 thepage(nrows) := tmpbuf;
961                 tmpbuf := '';
962                 if (nrows = irows) then
963                    rows_out := rows_out - 1;
964                    return;
965                 end if;
966              end if;
967  
968              -- Step 2
969              nrows := nrows + 1;
970              thepage(nrows) := htbuf(rows_out);
971  
972           elsif ((len + lengthb(tmpbuf)) > 255) then
973  
974              --
975              -- Concatenation would result in buffer overflow
976              -- 1. Move tmpbuf to a new row
977              -- 2. Setup tmpbuf to the current input row
978              --
979  
980              -- Step 1
981              nrows := nrows + 1;
982              thepage(nrows) := tmpbuf;
983              if (nrows = irows) then
984                rows_out := rows_out - 1;
985              else
986                -- Step 2
987                tmpbuf := htbuf(rows_out);
988              end if;
989           else
990  
991              --
992              -- Pack lines into tmpbuf
993              -- It is more efficient to pack data in a scalar as opposed to
994              -- doing it directly in the array. This is an artifact of how
995              -- arrays are implemented using BTree and there is a cost of
996              -- log(n) for array access. But, using scalars will add extra
997              -- cost while updating the response row with contents of tmpbuf
998              --
999              tmpbuf := tmpbuf || htbuf(rows_out);
1000  
1001           end if;
1002        end loop;
1003     end if;
1004  end;
1005  
1006  procedure get_page_raw (thepage     out NOCOPY htraw_arr,
1007                          irows    in out integer  ) is
1008    i       pls_integer;
1009    j       pls_integer;
1010    k       pls_integer;
1011    loc     pls_integer;
1012    len     pls_integer;
1013    tempraw raw(2000);
1014  begin
1015     flush_raw;
1016     irows := least(irows, rows_in - rows_out);
1017     if (irows > 0) then
1018       J := rows_out;
1019       I := 0;
1020       while (I < irows) loop
1021         J := J + 1;
1022         if (J > nEndOfHdrIx) then
1023            -- If transferring raw data, just copy it
1024            i := i + 1;
1025            thepage(i) := htraws(J);
1026         elsif (ht_charset_ID = db_charset_ID) then
1027            -- if transferring headers with identical charsets, cast it
1028            i := i + 1;
1029            thepage(i) := UTL_RAW.CAST_TO_RAW(htbuf(J));
1030         else
1031            -- otherwise, need to charset-convert the buffer
1032            tempraw := UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW(htbuf(J)),
1033                                       'AMERICAN_AMERICA.'||ht_charset,
1034                                       'AMERICAN_AMERICA.'||db_charset);
1035            len := UTL_RAW.LENGTH(tempraw);
1036            if (len <= RAW_MAX) then
1037              -- if the post-converted buffer will fit, then just copy it out
1038              i := i + 1;
1039              thepage(i) := tempraw;
1040            else
1041              -- otherwise, cut it into chunks and copy them up to irows max
1042              loc := 1;
1043              k := i;
1044              while (loc < len) loop
1045                k := k + 1;
1046                thepage(k) := UTL_RAW.SUBSTR(tempraw, loc, RAW_MAX);
1047                loc := loc + RAW_MAX;
1048                if (k = irows) then
1049                  exit;
1050                end if;
1051              end loop;
1052              if (loc < len) then
1053                while (i < irows) loop
1054                  i := i + 1;
1055                  thepage(i) := null;
1056                end loop;
1057                J := J - 1;
1058                exit;
1059              else
1060                i := k;
1061              end if;
1062            end if;
1063         end if;
1064       end loop;
1065       rows_out := j;
1066     end if;
1067  end;
1068  
1069  /* Start of OAS specific helper procedure */
1070  procedure get_page_charset_convert (thepage     out NOCOPY htbuf_arr,
1071                      irows    in out integer ,
1072                      charset  in     varchar2 ) is
1073  begin
1074     flush_charset_convert ( charset);
1075  
1076     irows := least(irows, rows_in - rows_out);
1077     if (irows = 0)
1078     then
1079        return;
1080     end if;
1081  
1082     for i in 1..irows
1083     loop
1084        thepage(i) := htbuf(rows_out + i);
1085     end loop;
1086  
1087     rows_out := rows_out + irows;
1088  end;
1089  /* End of OAS specific helper procedure */
1090  
1091  procedure showpage is
1092     dbms_buf_size integer;
1093     buffer   varchar2(510);    /* size = 255 * 2 */
1094     i        integer;
1095     sp_loc   integer;
1096     nl_loc   integer;
1097  begin
1098     -- On DB version 10.2 and above, dbms_output buffer size can be unlimited
1099     -- Bugfix 23633556 - assume DB version is 10.2 or above and removed
1100     -- flawed check.
1101     dbms_output.enable(buffer_size => NULL);
1102  
1103     /* Now, loop through, adding lines from htbuf, but   */
1104     /* never getting larger than 510 characters.         */
1105     /* If a newline is found, print everything and clear */
1106     /* the buffer, otherwise, break on the last space    */
1107     /* possible.  If the last space is past 255 chars,   */
1108     /* or there is no space at all, then break on 255.   */
1109     flush;
1110  
1111     buffer := NULL;
1112     i := rows_out + 1;
1113  
1114     while ((i <= rows_in) or (buffer is not null))
1115     loop
1116  
1117        /* Pick up the next row if it exists, and there is enough space */
1118        if ((i <= rows_in) and (nvl(length(buffer),0) <= 255))
1119        then
1120           buffer := buffer || htbuf(i);
1121           i := i + 1;
1122        end if;
1123  
1124        /* Search for the last newline character in the first 255 bytes */
1125        nl_loc := instr(substr(buffer,1,255), NL_CHAR, -1);
1126        if (nl_loc = 0)
1127        then
1128           /* Newline not found. Try searching for last space */
1129           sp_loc := instr(substr(buffer,1,255), ' ', -1);
1130           if (sp_loc = 0)
1131           then
1132              /* Space not found. Write out the first 255 bytes as-is */
1133              dbms_output.put_line(substr(buffer, 1, 255));
1134  
1135              /* Update buffer to contain remaining bytes */
1136              buffer := substr(buffer,256);
1137           else
1138              /* Space found. Write out bytes without the space */
1139              dbms_output.put_line(substr(buffer, 1, sp_loc - 1));
1140  
1141              /* Update buffer to contain remaining bytes */
1142              buffer := substr(buffer, sp_loc + 1);
1143           end if;
1144        else
1145           /* Always strip out the newlines */
1146           /* PUT_LINE will put them in.    */
1147  
1148           /* Newline found. Write out bytes without the newline */
1149           dbms_output.put_line(substr(buffer, 1, nl_loc - 1));
1150  
1151           /* Update buffer to contain remaining bytes */
1152           buffer := substr(buffer, nl_loc + 1);
1153        end if;
1154     end loop;
1155  
1156     rows_out := rows_in;
1157  end;
1158  
1159  procedure reset_get_page is
1160  begin
1161     /* Enhancement#5610575 : allow get_page to start over */
1162     rows_out := 0;
1163  end;
1164  
1165  procedure download_file(sFileName in varchar2,
1166     bCompress in boolean default false) is
1167  begin
1168     if (sDownloadFilesList is NULL)
1169     then
1170        sDownLoadFilesList := sFileName;
1171        if (bCompress)
1172        then
1173           nCompressDownloadFiles := 1;
1174        else
1175           nCompressDownloadFiles := 0;
1176        end if;
1177     end if;
1178  end;
1179  
1180  procedure get_download_files_list(sFilesList out varchar2,
1181     nCompress out binary_integer) is
1182  begin
1183     sFilesList := sDownloadFilesList;
1184     nCompress := nCompressDownloadFiles;
1185  end;
1186  
1187  function isHTMLHdr(cbuf in varchar2 character set any_cs) return boolean is
1188     len number := length(cbuf);
1189  begin
1190     return
1191        ((len >= nContentTypeLen
1192             and sContentType = substr(cbuf, 1, nContentTypeLen))
1193      or (len >= nContentLengthLen
1194             and sContentLength = substr(cbuf, 1, nContentLengthLen))
1195      or (len >= nLocationLen
1196             and sLocation = substr(cbuf, 1, nLocationLen))
1197      or (len >= nStatusLen
1198             and sStatus = substr(cbuf, 1, nStatusLen))
1199      or (len >= nSetCookieLen
1200             and sSetCookie = substr(cbuf, 1, nSetCookieLen))
1201        );
1202  end isHTMLHdr;
1203  
1204  procedure addDefaultHTMLHdr(bAddHTMLHdr boolean) is
1205  begin
1206     bAddDefaultHTMLHdr := bAddHTMLHdr;
1207  end addDefaultHTMLHdr;
1208  
1209  /* Enable raw mode transfers */
1210  procedure set_transfer_mode(tmode in varchar2) is
1211  begin
1212    if (lower(tmode) = 'raw')
1213    then
1214      bRawMode := true;
1215    end if;
1216  end set_transfer_mode;
1217  
1218  procedure setHTTPCharset(iana_charset in varchar2,
1219                           ora_charset varchar2 default NULL) is
1220    lower_cs varchar2(40);
1221  begin
1222  
1223    if (iana_charset is null)
1224    then
1225      last_iana_charset := null; -- Invalidate the cache.
1226      ht_charset_ID := NLS_CHARSET_ID(db_charset); -- Get ID for fast comparison
1227      ht_charset := db_charset;
1228      got_ht_charset := TRUE;
1229      return;
1230    end if;
1231  
1232    lower_cs := lower(iana_charset);
1233    if (last_iana_charset is not null) and (lower_cs = last_iana_charset)
1234    then
1235       got_ht_charset := TRUE;
1236       return;
1237    end if;
1238  
1239    if (ora_charset is not null) then ht_charset := ora_charset;
1240    elsif (lower_cs = 'iso-8859-1') then
1241      if (db_charset = 'WE8MSWIN1252')
1242      then ht_charset := db_charset;
1243      else ht_charset := 'WE8ISO8859P1';
1244      end if;
1245    elsif (lower_cs = 'utf-8') then
1246      if (db_charset = 'UTF8')
1247      then ht_charset := db_charset;
1248      else  ht_charset := 'AL32UTF8';
1249      end if;
1250    elsif (lower_cs = 'windows-1252') then
1251      if (db_charset = 'WE8ISO8859P1')
1252      then ht_charset := db_charset;
1253      else ht_charset := 'WE8MSWIN1252';
1254      end if;
1255    elsif (lower_cs = 'us-ascii') then      ht_charset := 'US7ASCII';
1256    elsif (lower_cs = 'iso-8859-2') then
1257      if (db_charset = 'EE8MSWIN1250')
1258      then ht_charset := db_charset;
1259      ht_charset := 'EE8ISO8859P2';
1260      end if;
1261    elsif (lower_cs = 'iso-8859-3') then ht_charset := 'SE8ISO8859P3';
1262    elsif (lower_cs = 'iso-8859-4') then
1263      if (db_charset = 'BLT8MSWIN1257')
1264      then ht_charset := db_charset;
1265      else ht_charset := 'NEE8ISO8859P4';
1266      end if;
1267    elsif (lower_cs = 'iso-8859-5') then
1268      if (db_charset = 'CL8MSWIN1251')
1269      then ht_charset := db_charset;
1270      else   ht_charset := 'CL8ISO8859P5';
1271      end if;
1272    elsif (lower_cs = 'iso-8859-6') then
1273      if (db_charset = 'AR8MSWIN1256')
1274      then ht_charset := db_charset;
1275      else ht_charset := 'AR8ISO8859P6';
1276      end if;
1277    elsif (lower_cs = 'iso-8859-7') then
1278      if (db_charset = 'EL8MSWIN1253')
1279      then ht_charset := db_charset;
1280      else ht_charset := 'EL8ISO8859P7';
1281      end if;
1282    elsif (lower_cs = 'iso-8859-8-i') then
1283      if (db_charset = 'IW8MSWIN1255')
1284      then ht_charset := db_charset;
1285      else ht_charset := 'IW8ISO8859P8';
1286      end if;
1287    elsif (lower_cs = 'iso-8859-9') then    ht_charset := 'WE9ISO8859P9';
1288    elsif (lower_cs = 'iso-8859-10') then   ht_charset := 'NE8ISO8859P10';
1289    elsif (lower_cs = 'shift_jis') then     ht_charset := 'JA16SJIS';
1290    elsif (lower_cs = 'gb2312') or (lower_cs = 'gbk') then
1291      if (db_charset = 'ZHS16CGB231280')
1292      then ht_charset := db_charset;
1293      else ht_charset := 'ZHS16GBK';
1294      end if;
1295    elsif (lower_cs = 'big5') then          ht_charset := 'ZHT16BIG5';
1296    elsif (lower_cs = 'ks_c_5601-1987') or (lower_cs = 'euc-kr') then
1297      if (db_charset = 'KO16MSWIN949')
1298      then ht_charset := db_charset;
1299      else ht_charset := 'KO16KSC5601';
1300      end if;
1301    elsif (lower_cs = 'tis-620') then       ht_charset := 'TH8TISASCII';
1302    elsif (lower_cs = 'euc-jp') then        ht_charset := 'JA16EUC';
1303    elsif (lower_cs = 'windows-1256') then  ht_charset := 'AR8MSWIN1256';
1304    elsif (lower_cs = 'windows-1257') then  ht_charset := 'BLT8MSWIN1257';
1305    elsif (lower_cs = 'windows-1251') then  ht_charset := 'CL8MSWIN1251';
1306    elsif (lower_cs = 'windows-1250') then  ht_charset := 'EE8MSWIN1250';
1307    elsif (lower_cs = 'windows-1253') then  ht_charset := 'EL8MSWIN1253';
1308    elsif (lower_cs = 'windows-1255') then  ht_charset := 'IW8MSWIN1255';
1309    elsif (lower_cs = 'windows-1254') then  ht_charset := 'TR8MSWIN1254';
1310    elsif (lower_cs = 'windows-1258') then  ht_charset := 'VN8MSWIN1258';
1311    elsif (lower_cs = 'windows-921') then   ht_charset := 'LT8MSWIN921';
1312    elsif (lower_cs = 'windows-936') then   ht_charset := 'ZHS16GBK';
1313    elsif (lower_cs = 'windows-950') then   ht_charset := 'ZHT16MSWIN950';
1314    elsif (lower_cs = 'windows-949') then   ht_charset := 'KO16MSWIN949';
1315    elsif (lower_cs = 'koi8-r') then   ht_charset := 'CL8KOI8R';
1316    elsif (lower_cs = 'koi8-u') then   ht_charset := 'CL8KOI8U';
1317    else
1318      ht_charset := db_charset; -- unknown
1319    end if;
1320    last_iana_charset := lower_cs; -- cache it.
1321    ht_charset_ID := NLS_CHARSET_ID(ht_charset); -- Get ID for fast comparison
1322    got_ht_charset := TRUE;
1323  end setHTTPCharset;
1324  
1325  procedure putraw(bbuf in raw, buflen pls_integer DEFAULT null) is
1326    blen pls_integer;
1327    bloc pls_integer;
1328    bcpy pls_integer;
1329  begin
1330    if (bbuf is not null) then
1331      if (buflen is not null) then
1332         blen := buflen;
1333      else
1334         blen := UTL_RAW.LENGTH(bbuf);
1335      end if;
1336      -- Transfer the contents to the raw array
1337      -- Not to pack the buffer since packing a RAW buffer is slow.
1338      contentLen := contentLen + blen;
1339      if (blen <= RAW_MAX) then
1340        rows_in := rows_in + 1;
1341        htraws(rows_in) := bbuf;
1342        htbuf(rows_in) := '';
1343        return;
1344      end if;
1345  
1346      bloc := 1;
1347      while (bloc <= blen) loop
1348        rows_in := rows_in + 1;
1349        bcpy := least((blen - bloc) + 1, RAW_MAX);
1350        htraws(rows_in) := UTL_RAW.SUBSTR(bbuf,bloc,bcpy);
1351        htbuf(rows_in) := '';
1352        bloc := bloc + bcpy;
1353      end loop;
1354    end if;
1355  end putraw;
1356  
1357  procedure per_request_init is
1358     cversion  varchar2(40);
1359  begin
1360     if (nGatewayVersion = 0) then
1361        /* Get the gateway version and cache it for this request */
1362        cversion := owa_util.get_cgi_env ('GATEWAY_IVERSION');
1363        if (cversion is not null)
1364        then
1365           begin
1366              nGatewayVersion := to_number (cversion);
1367  
1368              -- Reserve space for owa_cache headers
1369              if ((nGatewayVersion >= 2) AND (rows_in = 0))
1370              then
1371                 owa_cache.init(htbuf, rows_in);
1372              end if;
1373           exception
1374              when VALUE_ERROR then
1375                 null;
1376           end;
1377        end if;
1378     end if;
1379  end per_request_init;
1380  
1381  procedure check_request_charset is
1382    nIx      pls_integer;
1383    loc      pls_integer;
1384    ccharset VARCHAR2(256);
1385    bbuf     varchar2(2000);
1386  begin
1387    -- Scan for Content-Type and get character set to compare with DB
1388    for nIx in 1..nEndOfHdrIx loop
1389      if (nIx <> nContentLengthIx) then
1390        bbuf := htbuf(nIx);
1391        if (length(bbuf) > nContentTypeLen) and
1392           (upper(substr(bbuf, 1, nContentTypeLen)) = sContentType) then
1393          loc := instr(bbuf, 'charset=');
1394          if (loc > 0) then
1395            ccharset := substr(bbuf, loc + 8);
1396            loc := instr(ccharset, NL_CHAR);
1397            if (loc > 0) then
1398              ccharset := substr(ccharset, 1, loc - 1);
1399            end if;
1400            setHTTPCharset(ccharset);
1401          end if;
1402          exit;
1403        end if;
1404      end if;
1405    end loop;
1406    if (NOT got_ht_charset) then
1407      setHTTPCharset(null); -- force it to have some value
1408    end if;
1409  end check_request_charset;
1410  
1411  procedure prn (cbuf in varchar2 character set any_cs DEFAULT NULL) is
1412     loc          pls_integer;
1413     len          pls_integer;
1414     len4         pls_integer;
1415     tlen         pls_integer;
1416     ccharset     varchar2(40);
1417     bHasHTMLHdr  boolean;
1418     bUseSubstr   boolean := true; -- use simple substr() function
1419  begin
1420     if (cbuf is NULL)
1421     then
1422        return;
1423     end if;
1424  
1425     if (bRawMode) then
1426         prn_raw(cbuf);
1427         return;
1428     end if;
1429  
1430     --
1431     -- We used to have a separate prn_char procedure for CHAR mode processing,
1432     -- analogous to prn_raw. We now embed the code directly in prn in order
1433     -- to avoid the extra fn call overhead.
1434     --
1435     if (bFirstCall)
1436     then
1437        bFirstCall := FALSE;
1438        per_request_init;
1439  
1440        if (bAddDefaultHTMLHdr)
1441        then
1442           bHTMLPageReady := FALSE;
1443           bHasContentLength := FALSE;
1444           nEndOfHdrIx := -1;
1445           nContentLengthIx := -1;
1446           -- Check for HTML headers
1447           bHasHTMLHdr := isHTMLHdr(upper(cbuf));
1448           if (not bHasHTMLHdr)
1449           then
1450              -- add Content-type: text/html[; charset=<IANA_CHARSET_NAME> ]
1451              rows_in := rows_in + 1;
1452              ccharset := owa_util.get_cgi_env('REQUEST_IANA_CHARSET');
1453              if (ccharset is null) then
1454                 htbuf(rows_in) := 'Content-type: ' || stexthtml || NL_CHAR;
1455              else
1456                 htbuf(rows_in) := 'Content-type: ' || sTextHtml || '; charset='
1457                        || ccharset || NL_CHAR;
1458              end if;
1459  
1460              -- reserve space for Content-length: header
1461              rows_in := rows_in + 1;
1462              nContentLengthIx := rows_in;
1463              rows_in := rows_in + 1;
1464              htbuf(rows_in) := NL_CHAR;
1465              nEndOfHdrIx := rows_in;
1466              if (nGatewayVersion > 2) then
1467                 pack_after := nEndOfHdrIx;
1468              end if;
1469              bHasContentLength := TRUE;
1470           end if;
1471        else
1472           bHTMLPageReady := TRUE;
1473        end if;
1474     end if;
1475  
1476     len := length(cbuf);
1477     len4 := length4(cbuf);
1478     if len <> len4 then
1479        bUseSubstr := false;
1480     end if;
1481  
1482     if (not bHTMLPageReady)
1483     then
1484        -- We assume that 'pack_after' is sufficiently large that we won't be
1485        -- packing HTML headers.
1486        -- We also assume that end of headers request will be by itself
1487        if (nEndOfHdrIx < 0) -- we have not seen end of headers yet
1488        then
1489           if ((len >= nContentLengthLen) and
1490               (sContentLength = substr(upper(cbuf), 1, nContentLengthLen)))
1491           then
1492              bHasContentLength := TRUE;
1493           end if;
1494           if ((cbuf = NL_CHAR
1495                   and (rows_in > 0
1496                           and substr(htbuf(rows_in), length(htbuf(rows_in)), 1)
1497                                  = NL_CHAR)
1498               ) or (instr(cbuf, NLNL_CHAR, -1) != 0))
1499           then -- we now have seen!
1500              if (not bHasContentLength)
1501              then
1502                 -- reserve space for Content-length: header
1503                 rows_in := rows_in + 1;
1504                 nContentLengthIx := rows_in;
1505              end if;
1506              nEndOfHdrIx := (rows_in + 1);
1507              if (nGatewayVersion > 2) then
1508                 pack_after := nEndOfHdrIx;
1509              end if;
1510              bHasContentLength := TRUE;
1511              --
1512              --    cbuf should be inserted into the header buffer here.
1513              --
1514              rows_in := rows_in + 1;
1515              htbuf(rows_in) := cbuf;
1516              return;
1517           end if;
1518        end if;
1519     end if;
1520  
1521     if not bUseSubstr then
1522        len := len4;
1523     end if;
1524  
1525     loc := 0;
1526     if (rows_in < pack_after) then
1527        while ((len - loc) >= HTBUF_LEN)
1528        loop
1529           rows_in := rows_in + 1;
1530           if bUseSubstr then
1531               htbuf(rows_in) := substr(cbuf, loc + 1, HTBUF_LEN);
1532           else
1533               htbuf(rows_in) := substr4(cbuf, loc + 1, HTBUF_LEN);
1534           end if;
1535           loc := loc + HTBUF_LEN;
1536        end loop;
1537        if (loc < len)
1538        then
1539           rows_in := rows_in + 1;
1540           if bUseSubstr then
1541               htbuf(rows_in) := substr(cbuf, loc + 1);
1542           else
1543               htbuf(rows_in) := substr4(cbuf, loc + 1);
1544           end if;
1545        end if;
1546        return;
1547     end if;
1548  
1549     if (htcurline is null)
1550     then
1551        tlen := HTBUF_LEN;
1552     else
1553        if bUseSubstr then
1554            tlen := HTBUF_LEN - length(htcurline);
1555        else
1556            tlen := HTBUF_LEN - length4(htcurline);
1557        end if;
1558     end if;
1559  
1560     while (loc < len)
1561     loop
1562        if ((len - loc) <= tlen)
1563        then
1564           if (loc = 0)
1565           then
1566              htcurline := htcurline || cbuf;
1567           else
1568              if bUseSubstr then
1569                 htcurline := htcurline || substr(cbuf, loc + 1);
1570              else
1571                 htcurline := htcurline || substr4(cbuf, loc + 1);
1572              end if;
1573           end if;
1574           exit;
1575        end if;
1576        rows_in := rows_in + 1;
1577        if bUseSubstr then
1578           htbuf(rows_in) := htcurline || substr(cbuf, loc + 1, tlen);
1579        else
1580           htbuf(rows_in) := htcurline || substr4(cbuf, loc + 1, tlen);
1581        end if;
1582        htcurline := '';
1583        loc := loc + tlen;
1584        tlen := HTBUF_LEN; -- remaining buffer size
1585     end loop;
1586  end prn;
1587  
1588  procedure prn_raw(cbuf in varchar2 character set any_cs) is
1589     loc          pls_integer;
1590     len          pls_integer;
1591     ccharset     varchar2(40);
1592     bHasHTMLHdr  boolean;
1593  begin
1594     if (bFirstCall)
1595     then
1596        bFirstCall := FALSE;
1597  
1598        /*
1599        **   Get the NCHAR character set for later use by CONVERT.
1600        **    Unfortunately it's only available from a view, so we
1601        **    have to run SQL to get it.  Put it here rather than in
1602        **    init so that hopefully it only gets run once per
1603        **    database session.
1604        */
1605        select VALUE into nc_charset from V$NLS_PARAMETERS
1606            where PARAMETER = 'NLS_NCHAR_CHARACTERSET';
1607        nc_charset_ID := NLS_CHARSET_ID (nc_charset);
1608  
1609        -- Initialize ID here when we are in RAW mode
1610        db_charset_ID := NLS_CHARSET_ID(db_charset);
1611        ht_charset_ID := db_charset_ID;
1612  
1613        per_request_init;
1614  
1615        if (bAddDefaultHTMLHdr)
1616        then
1617           bHTMLPageReady := FALSE;
1618           bHasContentLength := FALSE;
1619           nEndOfHdrIx := -1;
1620           nContentLengthIx := -1;
1621           -- Check for HTML headers
1622           bHasHTMLHdr := isHTMLHdr(upper(cbuf));
1623           if (not bHasHTMLHdr)
1624           then
1625              -- add Content-type: text/html[; charset=<IANA_CHARSET_NAME> ]
1626              rows_in := rows_in + 1;
1627              ccharset := owa_util.get_cgi_env('REQUEST_IANA_CHARSET');
1628              if (ccharset is null) then
1629                 htbuf(rows_in) := 'Content-type: ' || stexthtml || NL_CHAR;
1630              else
1631                 htbuf(rows_in) := 'Content-type: ' || sTextHtml || '; charset='
1632                                    || ccharset || NL_CHAR;
1633              end if;
1634              setHTTPCharset(ccharset, owa_util.get_cgi_env('REQUEST_CHARSET'));
1635  
1636              -- reserve space for Content-length: header
1637              rows_in := rows_in + 1;
1638              nContentLengthIx := rows_in;
1639              rows_in := rows_in + 1;
1640              htbuf(rows_in) := NL_CHAR;
1641              nEndOfHdrIx := rows_in;
1642              if (nGatewayVersion > 2) then
1643                 pack_after := nEndOfHdrIx;
1644              end if;
1645              bHasContentLength := TRUE;
1646           end if;
1647        else
1648           bHTMLPageReady := TRUE;
1649        end if;
1650     end if;
1651  
1652     len := lengthb(cbuf);
1653     if (not bHTMLPageReady)
1654     then
1655        -- We assume that 'pack_after' is sufficiently large that we won't be
1656        -- packing HTML headers.
1657        -- We also assume that end of headers request will be by itself
1658        if (nEndOfHdrIx < 0) -- we have not seen end of headers yet
1659        then
1660           if ((len >= nContentLengthLen) and
1661               (sContentLength = substr(upper(cbuf), 1, nContentLengthLen)))
1662           then
1663              bHasContentLength := TRUE;
1664           end if;
1665           if ((cbuf = NL_CHAR
1666                   and (rows_in > 0
1667                           and substr(htbuf(rows_in), lengthb(htbuf(rows_in)), 1)
1668                                  = NL_CHAR)
1669               ) or (instr(cbuf, NLNL_CHAR, -1) != 0))
1670           then -- we now have seen!
1671              if (not bHasContentLength)
1672              then
1673                 -- reserve space for Content-length: header
1674                 rows_in := rows_in + 1;
1675                 nContentLengthIx := rows_in;
1676              end if;
1677              nEndOfHdrIx := rows_in + 1;
1678              if (nGatewayVersion > 2) then
1679                 pack_after := nEndOfHdrIx;
1680              end if;
1681              bHasContentLength := TRUE;
1682              --
1683              --    cbuf should be inserted into the header buffer here.
1684              --
1685              rows_in := rows_in + 1;
1686              htbuf(rows_in) := cbuf;
1687              return;
1688           end if;
1689        else
1690           if (not got_ht_charset) then
1691              check_request_charset;
1692           end if;
1693        end if;
1694     end if;
1695  
1696     if (nEndOfHdrIx >= 0) or (rows_in >= pack_after) then
1697        if (isnchar(cbuf))
1698        then
1699           if (nc_charset_ID <> ht_charset_ID) then
1700              putraw(UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW(cbuf),
1701                             'AMERICAN_AMERICA.'||ht_charset,
1702                             'AMERICAN_AMERICA.'||nc_charset));
1703           else
1704              if (len > RAW_MAX) then
1705                putraw(UTL_RAW.CAST_TO_RAW(cbuf), len);
1706              else
1707                rows_in := rows_in + 1;
1708                htraws(rows_in) := UTL_RAW.CAST_TO_RAW(cbuf);
1709                htbuf(rows_in) := '';
1710                contentlen := contentLen + len;
1711              end if;
1712           end if;
1713        else
1714           if (db_charset_ID <> ht_charset_ID) then
1715              putraw(UTL_RAW.CONVERT(UTL_RAW.CAST_TO_RAW(cbuf),
1716                         'AMERICAN_AMERICA.'||ht_charset,
1717                         'AMERICAN_AMERICA.'||db_charset));
1718           else
1719              if (len > RAW_MAX) then
1720                putraw(UTL_RAW.CAST_TO_RAW(cbuf),len);
1721              else
1722                rows_in := rows_in + 1;
1723                htraws(rows_in) := UTL_RAW.CAST_TO_RAW(cbuf);
1724                htbuf(rows_in) := '';
1725                contentlen := contentLen + len;
1726              end if;
1727           end if;
1728       end if;
1729       return;
1730     end if;
1731  
1732     len := length(cbuf);
1733     loc := 0;
1734     while ((len - loc) >= HTBUF_LEN)
1735     loop
1736        rows_in := rows_in + 1;
1737        htbuf(rows_in) := substr(cbuf, loc + 1, HTBUF_LEN);
1738        loc := loc + HTBUF_LEN;
1739     end loop;
1740     if (loc < len)
1741     then
1742        rows_in := rows_in + 1;
1743        htbuf(rows_in) := substr(cbuf, loc + 1);
1744     end if;
1745  end prn_raw;
1746  
1747  --
1748  -- Code for htp.p and htp.print is duplicated so that we avoid a
1749  -- procedure call overhead in the typical cases
1750  --
1751  procedure print (cbuf in varchar2 character set any_cs DEFAULT NULL) is
1752  begin
1753      prn(cbuf || NL_CHAR);
1754  end;
1755  
1756  procedure p (cbuf in varchar2 character set any_cs DEFAULT NULL) is
1757  begin
1758      prn(cbuf || NL_CHAR);
1759  end;
1760  
1761  procedure print (dbuf in date) is
1762  begin print(to_char(dbuf)); end;
1763  
1764  procedure print (nbuf in number) is
1765  begin print(to_char(nbuf)); end;
1766  
1767  procedure prn (dbuf in date) is
1768  begin prn(to_char(dbuf)); end;
1769  
1770  procedure prn (nbuf in number) is
1771  begin prn(to_char(nbuf)); end;
1772  
1773  procedure p (dbuf in date) is
1774  begin print(to_char(dbuf)); end;
1775  
1776  procedure p (nbuf in number) is
1777  begin print(to_char(nbuf)); end;
1778  
1779  procedure prints(ctext in varchar2 character set any_cs) is
1780  begin p(htf.escape_sc(ctext)); end;
1781  
1782  procedure ps(ctext in varchar2 character set any_cs) is
1783  begin p(htf.escape_sc(ctext)); end;
1784  
1785  procedure escape_sc(ctext in varchar2 character set any_cs) is
1786  begin p(htf.escape_sc(ctext)); end;
1787  
1788  procedure print_header (cbuf in varchar2, nline in number) is
1789  begin
1790     per_request_init;
1791     if (nGatewayVersion >= 2)
1792     then
1793        htbuf(nline) := cbuf || NL_CHAR;
1794     end if;
1795  end;
1796  /* END SPECIAL PROCEDURES */
1797  
1798  begin
1799     init;
1800  end;
1801  /

Package body created.

SQL> show errors package body htp
No errors.
SQL> 
SQL> @@privowa.sql
SQL> rem
SQL> rem
SQL> Rem  Copyright (c) 1995, 1996, 1997 by Oracle Corporation. All rights reserved.
SQL> Rem    NAME
SQL> Rem      owa.sql - package of procedures called directly from OWA
SQL> Rem    DESCRIPTION
SQL> Rem      This file contains one package:
SQL> Rem         owa     - These procedures are interface procedures for
SQL> Rem                     the Oracle Web Agent.  These procedures should
SQL> Rem                     not be called by an end-user.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      The Oracle Web Agent is needed to use these facilities.
SQL> Rem      The package htp is needed to use these facilities.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     vtropash   12/02/15 - 22100462
SQL> Rem     pkapasi    10/18/06 - Enhancement Request#5610575(add reset_get_page)
SQL> Rem     pkapasi    07/25/02 - Use NOCOPY for performance (bug#2482024)
SQL> Rem     ehlee      10/12/01 - Add 32k cookie support (bug#1936565)
SQL> Rem     skwong     07/20/01 - Add RAW support to GET_PAGE interfaces
SQL> Rem     pkapasi    06/12/01 - Merge OAS specific helper functions
SQL> Rem     rdasarat   01/22/98 - Overload init_cgi_env procedure
SQL> Rem     rdasarat   10/31/97 - Moving version to 4.0
SQL> Rem     rdasarat   08/09/97 - Replaced OWA_INIT with OWA_CUSTOM
SQL> Rem     mpal       07/09/97 - Replaced OWA_INIT with OWA_CUSTOM
SQL> Rem     mpal       04/23/97 - Changed Minor Version to 1 (Fixing bug# 482019)
SQL> Rem     rpang      01/27/97 - Restored PRAGMA RESTRICT_REFERENCES (bug#439474)
SQL> Rem     rpang      01/27/97 - Added initialize procedure
SQL> Rem     rpang      07/03/96 - Added initialzation section to touch OWA_INIT
SQL> Rem     mbookman   07/09/95 - Creation
SQL> 
SQL> REM Creating OWA package body...
SQL> create or replace package body OWA is
  2  
  3       /********************************************/
  4      /* Initialize the CGI environment variables */
  5     /********************************************/
  6     procedure init_cgi_env (param_val in vc_arr) is
  7        num_params number := param_val.count;
  8        ix         number;
  9        nameIx     number;
 10        var_name   vc_arr;
 11     begin
 12        /* Initialize cgi names */
 13        /* Keep this list in the same order as in ndwoa.h file */
 14        var_name(1) := 'SERVER_SOFTWARE';
 15        var_name(2) := 'SERVER_NAME';
 16        var_name(3) := 'GATEWAY_INTERFACE';
 17        var_name(4) := 'REMOTE_HOST';
 18        var_name(5) := 'REMOTE_ADDR';
 19        var_name(6) := 'AUTH_TYPE';
 20        var_name(7) := 'REMOTE_USER';
 21        var_name(8) := 'REMOTE_IDENT';
 22        var_name(9) := 'HTTP_ACCEPT';
 23        var_name(10) := 'HTTP_USER_AGENT';
 24        var_name(11) := 'SERVER_PROTOCOL';
 25        var_name(12) := 'SERVER_PORT';
 26        var_name(13) := 'SCRIPT_NAME';
 27        var_name(14) := 'PATH_INFO';
 28        var_name(15) := 'PATH_TRANSLATED';
 29        var_name(16) := 'HTTP_REFERER';
 30        var_name(17) := 'HTTP_COOKIE';
 31  
 32        nameIx := 0;
 33        ix := 0;
 34        for i in 1..num_params
 35        loop
 36           nameIx := nameIx + 1;
 37           if (param_val(i) is NOT NULL)
 38           then
 39              ix := ix + 1;
 40              cgi_var_name(ix)  := var_name(nameIx);
 41              cgi_var_val(ix)  := param_val(i);
 42           end if;
 43        end loop;
 44        num_cgi_vars := ix;
 45     end;
 46  
 47     procedure init_cgi_env (num_params in number,
 48                             param_name in vc_arr,
 49                             param_val  in vc_arr) is
 50        j      number := 0;
 51        cookie varchar2(32000) := '';
 52        found  boolean := FALSE;
 53     begin
 54  
 55        for i in 1..num_params
 56        loop
 57           if (param_name(i) = 'HTTP_COOKIE')
 58           then
 59              found := TRUE;
 60              cookie := cookie || param_val(i);
 61           else
 62              j := j + 1;
 63              cgi_var_name(j) := param_name(i);
 64              cgi_var_val(j)  := param_val(i);
 65           end if;
 66        end loop;
 67  
 68        if (found)
 69        then
 70           j := j + 1;
 71           cgi_var_name(j) := 'HTTP_COOKIE';
 72           cgi_var_val(j) := cookie;
 73        end if;
 74  
 75        num_cgi_vars := j;
 76     end;
 77  
 78       /*****************************************/
 79      /* Get the output from the user's PL/SQL */
 80     /*****************************************/
 81     function get_line (irows out integer) return varchar2 is
 82     begin
 83        return(htp.get_line(irows));
 84     end;
 85  
 86     procedure get_page (thepage     out NOCOPY htp.htbuf_arr,
 87                         irows    in out integer ) is
 88     begin
 89        htp.get_page(thepage, irows);
 90     end;
 91  
 92     /* Start of OAS specific helper procedure */
 93     procedure get_page_charset_convert (thepage     out NOCOPY htp.htbuf_arr,
 94                         irows    in out integer,
 95                         charset  in     varchar2 ) is
 96     begin
 97        htp.get_page_charset_convert(thepage, irows, charset);
 98     end;
 99     /* End of OAS specific helper procedure */
100  
101     /* Add here to match the new HTP.GET_PAGE_RAW interface */
102     procedure get_page_raw (thepage     out NOCOPY htp.htraw_arr,
103                             irows    in out integer ) is
104     begin
105        htp.get_page_raw(thepage, irows);
106     end;
107  
108     procedure reset_get_page is
109     begin
110        htp.reset_get_page;
111     end;
112  
113     /* Added to set package global safely */
114     procedure set_user_id(usr in varchar2) is
115     begin
116        IF 128 < LENGTH(usr) THEN
117           raise_application_error(-20567, '128 < LENGTH(usr)');
118        END IF;
119        user_id := usr;
120     end set_user_id;
121  
122     /* Added to set package global safely */
123     procedure set_password(pwd in varchar2) is
124     begin
125        password := pwd;
126     end set_password;
127  
128     /* Added to set package global safely */
129     procedure set_transfer_mode (tmode in varchar2) is
130     begin
131        HTP.set_transfer_mode(tmode);
132     end set_transfer_mode;
133  
134         /*******************************************************************/
135        /* Initialize function -                                           */
136       /*    This function is called when a DCD is invoked for the first  */
137      /*   time when PL/SQL Agent starts up.                             */
138     /*******************************************************************/
139     function initialize return integer is
140       dummy number;
141       majVersion number;
142       minVersion number;
143     begin
144  
145       -- Please ensure you update major, minor versions for every release
146       majVersion := 4;
147       minVersion := 0;
148  
149       auth_scheme := OWA_SEC.NO_CHECK;
150       dummy := owa_custom.dbms_server_gmtdiff;
151  
152       return (majVersion*256+minVersion);
153     end;
154  end;
155  /

Package body created.

SQL> show errors package body OWA
No errors.
SQL> 
SQL> @@privutil.sql
SQL> rem
SQL> rem
SQL> Rem Copyright (c) 1995, 2017, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem    NAME
SQL> Rem      privutil.sql - package of various OWA utility procedures
SQL> Rem    DESCRIPTION
SQL> Rem      This file contains one package:
SQL> Rem         owa_util    - Utitility procedures/functions for use
SQL> Rem                       with the Oracle Web Agent
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      The Oracle Web Agent is needed to use these facilities.
SQL> Rem      The package owa is needed to use these facilities.
SQL> Rem      The packages htp and htf are needed to use these facilities.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     cvanes     01/17/17 - 23633556 Bump the version number to 11.2.0.0.1
SQL> Rem     vtropash   08/26/15 - 21683691
SQL> Rem     cvanes     01/23/12 - 13619141 Bump main version to 11.2.0.0.0
SQL> Rem     cvanes     06/14/11 - Bump version number to 10.1.2.2.0
SQL> Rem     cvanes     05/31/11 - 12607131: Update version number to 10.1.2.0.10
SQL> Rem     klrice     07/22/10 - fixing bug # 9774695
SQL> Rem     mmuppago   04/07/09 - bumping up version
SQL> Rem     aimmanue    02/05/08 - Bump up owa version for next release
SQL> Rem     pkapasi     11/03/06 - Bump up owa version for next release
SQL> Rem     pkapasi     10/12/06 - Increment version number
SQL> Rem     mmuppago    04/27/06 - bumping up ship version
SQL> Rem     mmuppago   03/21/06  - bumping up version
SQL> Rem     akatti     12/20/05  - Bug 4739895 handle other types in who_called_me
SQL> Rem     akatti     11/07/05  - Bug fix 4722130 validate before writing http
SQL> Rem                            headers
SQL> Rem     mmuppago   10/03/05 -  Bump up the version for  bug fix 4608020
SQL> Rem     aarat      07/12/05  - Bug fix 4457390
SQL> Rem     ehlee      04/25/05  - Change version to release version
SQL> Rem     akatti     01/19/05  - Mixed case vars in get_cgi_env (bug#3188606)
SQL> Rem     ehlee      09/02/04 -  Bump up version
SQL> Rem     dnonkin    09/01/04 -  Bump up version
SQL> Rem     pkapasi    11/27/03 -  Fix bug#3284896 and bump up version number
SQL> Rem     pkapasi    05/29/03 -  Fix bug#2980038 and bump up version number
SQL> Rem     ehlee      03/03/03 -  Fix get_procedure to handle flex (bug#2807392)
SQL> Rem     ehlee      11/01/02 -  Bump up version
SQL> Rem     ehlee      10/31/02 -  Bump up version
SQL> Rem     pkapasi    10/09/02 -  Bump up version
SQL> Rem     pkapasi    08/06/02 -  Bump up version
SQL> Rem     ihonda     06/10/02 -  Fix bug#1892633 and bump up version
SQL> Rem     ehlee      12/03/01 -  Bump up version
SQL> Rem     ehlee      12/03/01 -  Workaround for bug#2129672
SQL> Rem     ehlee      11/12/01 -  Add skwong's mime_header charset fix
SQL> Rem     ehlee      10/30/01 -  Fix bug#2087553
SQL> Rem     ehlee      10/17/01 -  Move version number to here
SQL> Rem     pkapasi    09/28/01 -  Merge fix for bug#1785301
SQL> Rem     pkapasi    08/21/01 -  Fix bug#1930471
SQL> Rem     ehlee      08/16/01 -  Fix issues with column name overflow for describe
SQL> Rem     skwong     07/20/01 -  Enable NCHAR support using ANY_CS
SQL> Rem     skwong     06/15/01 -  Get NewLine character in portable manner
SQL> Rem     ehlee      08/08/01 -  Fix who_called_me function to parse correctly
SQL> Rem     ehlee      09/15/00 -  Fix bug#1401472 (add version number)
SQL> Rem     pkapasi    09/07/00 -  Fix bug#1399906 (dynamic cursor not freed)
SQL> Rem     pkapasi    09/02/00 -  Merge in fix from OAS code line(bug#960427)
SQL> Rem     ehlee      08/30/00 -  Fix not set charset if not there (bug#1375531)
SQL> Rem     pkapasi    07/03/00 -  Change PLSQL Cartridge to PL/SQL Web ToolKit
SQL> Rem     ehlee      06/28/00 -  Fix bug where charset arg is ignored #1340072
SQL> Rem     ehlee      05/08/00 -  Fix bug where charset is set for non-text types
SQL> Rem     ehlee      01/14/00 -  Add default charset support
SQL> Rem     rdasarat   11/03/98 -  Fix 755477
SQL> Rem     rdasarat   10/27/98 -  Fix 718865
SQL> Rem     rdasarat   10/26/98 -  Fix 735061
SQL> Rem     rdasarat   07/23/98 -  Fix 704045
SQL> Rem     rdasarat   07/23/98 -  Fix 704077
SQL> Rem     rdasarat   06/18/98 -  Fix 665515
SQL> Rem     rdasarat   03/12/98 -  Fix 591932
SQL> Rem     rdasarat   12/02/97 -  Fix 591932
SQL> Rem     rdasarat   10/17/97 -  Add ccharset to mime_header
SQL> Rem     rdasarat   09/11/97 -  Fix 514444 - Parse column list properly
SQL> Rem     rdasarat   07/09/97 -  Implement COMMON schema; optimize code
SQL> Rem     mpal       05/13/97 -  Fix bug# 481120 to support multibyte characters
SQL> Rem     mpal       03/18/97 -  Fix bug# 466514
SQL> Rem     mpal       11/12/96 -  Fix bug# 412612 change default nrow_max to 500
SQL> Rem     mpal       11/12/96 -  Fix bug# 409849
SQL> Rem     rpang      07/03/96 -  Added get_procedure
SQL> Rem     mpal       06/24/96 -  Add new utilities for 2.1
SQL> Rem     mbookman   03/04/96 -  get_cgi_env and print_cgi_env now use
SQL> Rem                            owa.num_cgi_vars (314403)
SQL> Rem     mbookman   01/24/96 -  Add "bclose_header" field to HTTP header calls
SQL> Rem     mbookman   01/24/96 -  Remove HTTP_HEADER_OPEN
SQL> Rem     mbookman   01/12/96 -  Add REDIRECT_URL and STATUS_LINE
SQL> Rem     mbookman   12/13/95 -  Add HTTP_HEADER_OPEN, HTTP_HEADER_CLOSE
SQL> Rem     mbookman   08/08/95 -  tablePrint now re-sizes narrow empty tables
SQL> Rem     mbookman   07/09/95 -  Creation
SQL> 
SQL> REM Creating OWA_UTIL package body...
SQL> create or replace package body OWA_UTIL is
  2  
  3     owa_version CONSTANT varchar2(64) := '11.2.0.0.1';
  4  
  5     table_border char(1);
  6  
  7     /* datatypes for procedure calendarprint */
  8     type dateArray is table of date index by binary_integer;
  9     type vcArray   is table of varchar2(2000) index by binary_integer;
 10     type ncArray   is table of nvarchar2(2000) index by binary_integer;
 11  
 12     /*  NL_CHAR can be computed from a Unicode string in a portable manner. */
 13     NL_CHAR constant varchar2(10) := owa_cx.nl_char;
 14     /* Constant is set here instead of owachars to avoid invalid objects */
 15     CR_CHAR constant varchar2(10) := chr(13);
 16  
 17     colTblSz binary_integer;
 18     colTbl   dbms_utility.uncl_array;
 19  
 20       /************************************************************************/
 21      /* Function to validate strings that gets set in HTTP header,cookie etc */
 22     /************************************************************************/
 23     function validate_arg(
 24         param in varchar2 character set any_cs
 25     ) return varchar2 is
 26         valid_param varchar2(32767);
 27     begin
 28         if (param is NULL)
 29         then
 30             return param;
 31         end if;
 32  
 33         valid_param := param;
 34         if instr(valid_param,(NL_CHAR)) > 0
 35         then
 36            valid_param := substr(valid_param,1,instr(valid_param,(NL_CHAR)) - 1);
 37         end if;
 38         if instr(valid_param,(CR_CHAR)) > 0
 39         then
 40            valid_param := substr(valid_param,1,instr(valid_param,(CR_CHAR)) - 1);
 41         end if;
 42  
 43         return valid_param;
 44     end;
 45  
 46       /*********************************************************************/
 47      /* Function to check if the given object is a table in user's schema */
 48     /*********************************************************************/
 49     function is_table(
 50        item_owner in varchar2,
 51        item_name in varchar2
 52     ) return boolean is
 53        stmt_cursor number;       -- stmt cursor
 54        rc          number;       -- return code
 55        found       number;
 56     begin
 57        found := 0;
 58        stmt_cursor := dbms_sql.open_cursor;
 59        sys.dbms_sql.parse(stmt_cursor,
 60           'begin
 61               select 1
 62                 into :found
 63                 from all_tables
 64                where table_name = upper(:item_name)
 65                  and owner      = upper(:item_owner);
 66            exception
 67               when others then
 68                  :found := 0;
 69            end;', dbms_sql.v7);
 70        dbms_sql.bind_variable(stmt_cursor, ':item_owner', item_owner);
 71        dbms_sql.bind_variable(stmt_cursor, ':item_name', item_name);
 72        dbms_sql.bind_variable(stmt_cursor, ':found', found);
 73        rc := dbms_sql.execute(stmt_cursor);
 74        dbms_sql.variable_value(stmt_cursor, ':found', found);
 75        dbms_sql.close_cursor(stmt_cursor);
 76        return(found <> 0);
 77     end is_table;
 78  
 79       /********************************************************************/
 80      /* Function to check if the given object is a view in user's schema */
 81     /********************************************************************/
 82     function is_view(
 83        item_owner in varchar2,
 84        item_name in varchar2
 85     ) return boolean is
 86        stmt_cursor number;       -- stmt cursor
 87        rc          number;       -- return code
 88        found       number;
 89     begin
 90        found := 0;
 91        stmt_cursor := dbms_sql.open_cursor;
 92        sys.dbms_sql.parse(stmt_cursor,
 93           'begin
 94               select 1
 95                 into :found
 96                 from all_views
 97                where view_name = upper(:item_name)
 98                  and owner     = upper(:item_owner);
 99            exception
100               when others then
101                  :found := 0;
102            end;', dbms_sql.v7);
103        dbms_sql.bind_variable(stmt_cursor, ':item_owner', item_owner);
104        dbms_sql.bind_variable(stmt_cursor, ':item_name', item_name);
105        dbms_sql.bind_variable(stmt_cursor, ':found', found);
106        rc := dbms_sql.execute(stmt_cursor);
107        dbms_sql.variable_value(stmt_cursor, ':found', found);
108        dbms_sql.close_cursor(stmt_cursor);
109        return(found <> 0);
110     end is_view;
111  
112       /**************************************/
113      /* Function to get synonym definition */
114     /**************************************/
115     function get_synonym_defn(
116        csynonym  in varchar2,
117        cschema   in varchar2,
118        o_name    out all_synonyms.table_name%type,
119        o_owner   out all_synonyms.table_owner%type,
120        o_db_link out all_synonyms.db_link%type
121     ) return boolean is
122        stmt_cursor number;       -- stmt cursor
123        rc          number;       -- return code
124        name        all_synonyms.table_name%type;
125        owner       all_synonyms.table_owner%type;
126        db_link     all_synonyms.db_link%type;
127     begin
128        stmt_cursor := dbms_sql.open_cursor;
129        sys.dbms_sql.parse(stmt_cursor,
130           'begin
131               select table_name, table_owner, db_link
132                 into :name, :owner, :db_link
133                 from all_synonyms
134                where synonym_name = upper(:csynonym)
135                  and        owner = upper(:cschema);
136            exception
137               when others then
138                  :name := NULL;
139                  :owner := NULL;
140                  :db_link := NULL;
141            end;', dbms_sql.v7);
142        dbms_sql.bind_variable(stmt_cursor, ':csynonym', csynonym);
143        dbms_sql.bind_variable(stmt_cursor, ':cschema', cschema);
144        dbms_sql.bind_variable(stmt_cursor, ':name', name, 2000);
145        dbms_sql.bind_variable(stmt_cursor, ':owner', owner, 2000);
146        dbms_sql.bind_variable(stmt_cursor, ':db_link', db_link, 2000);
147        rc := dbms_sql.execute(stmt_cursor);
148        dbms_sql.variable_value(stmt_cursor, ':name', name);
149        dbms_sql.variable_value(stmt_cursor, ':owner', owner);
150        dbms_sql.variable_value(stmt_cursor, ':db_link', db_link);
151        dbms_sql.close_cursor(stmt_cursor);
152        o_name := name;
153        o_owner := owner;
154        o_db_link := db_link;
155        return(name is NOT NULL or owner is NOT NULL or db_link is NOT NULL);
156     exception
157        when others then
158            if dbms_sql.is_open(stmt_cursor) then
159                dbms_sql.close_cursor(stmt_cursor);
160            end if;
161  
162            raise;
163     end get_synonym_defn;
164  
165       /************************************/
166      /* Procedure to resolve object name */
167     /************************************/
168     procedure name_resolve(
169        cname in varchar2,
170        o_procowner out varchar2,
171        o_procname out varchar2
172     ) is
173        stmt_cursor number;       -- stmt cursor
174        rc          number;       -- return code
175        procownerl  constant number := 255;
176        procowner   varchar2(255);
177        procnamel   constant number := 255;
178        procname    varchar2(255);
179     begin
180        stmt_cursor := dbms_sql.open_cursor;
181        /* resolve name and compose the real package.procedure */
182        sys.dbms_sql.parse(stmt_cursor,
183           'declare
184               part1         varchar2(255);
185               part2         varchar2(255);
186               dblink        varchar2(255);
187               part1_type    number;
188               object_number number;
189            begin
190               dbms_utility.name_resolve(:cname, 1,
191                  :procowner, part1, part2, dblink, part1_type, object_number);
192               if part1_type in (7, 8)
193               then
194                  :procname := part2;
195               else
196                  if (part2 is null)
197                  then
198                     :procname := part1;
199                  else
200                     :procname := part1 || ''.'' || part2;
201                  end if;
202               end if;
203            exception
204               when others then
205                  :procowner := NULL;
206                  :procname := NULL;
207            end;', dbms_sql.v7
208        );
209        dbms_sql.bind_variable(stmt_cursor, ':cname', cname);
210        dbms_sql.bind_variable(stmt_cursor, ':procowner', procowner, procownerl);
211        dbms_sql.bind_variable(stmt_cursor, ':procname', procname, procnamel);
212        rc := dbms_sql.execute(stmt_cursor);
213        dbms_sql.variable_value(stmt_cursor, ':procowner', procowner);
214        dbms_sql.variable_value(stmt_cursor, ':procname', procname);
215        dbms_sql.close_cursor(stmt_cursor);
216        o_procowner := procowner;
217        o_procname  := procname;
218     end name_resolve;
219  
220       /***********************************************************************/
221      /* Function to open cursor for all_source to get definition of proc/fn */
222     /***********************************************************************/
223     function open_source_cursor(
224        o in varchar2,    -- procowner
225        n in varchar2     -- procname
226     ) return number is
227        stmt_cursor number;       -- stmt cursor
228        rc          number;       -- return code
229        nm          varchar2(255);
230        line        all_source.line%type;
231        text        all_source.text%type;
232     begin
233        rc := instr(n, '.');
234        if (rc > 0)
235        then
236           nm := substr(n, 1, (rc - 1));
237        else
238           nm := n;
239        end if;
240        stmt_cursor := dbms_sql.open_cursor;
241        sys.dbms_sql.parse(stmt_cursor,
242           'select line, text
243              from all_source
244             where name  = upper(:n)
245               and owner = upper(:o)
246             order by type, line', dbms_sql.v7);
247        dbms_sql.bind_variable(stmt_cursor, ':o', o);
248        dbms_sql.bind_variable(stmt_cursor, ':n', nm);
249        dbms_sql.define_column(stmt_cursor, 1, line);
250        dbms_sql.define_column(stmt_cursor, 2, text, 2000);
251        rc := dbms_sql.execute(stmt_cursor);
252        return(stmt_cursor);
253     end open_source_cursor;
254  
255       /************************************************************************/
256      /* Function to fetch cursor for all_source to get definition of proc/fn */
257     /************************************************************************/
258     function fetch_source_cursor(
259        stmt_cursor in number,
260        line        out number,
261        text        out varchar2
262     ) return number is
263     begin
264        if (stmt_cursor >= 0 and dbms_sql.fetch_rows(stmt_cursor) > 0)
265        then
266           dbms_sql.column_value(stmt_cursor, 1, line);
267           dbms_sql.column_value(stmt_cursor, 2, text);
268           return(0);
269        else
270           return(-1);
271        end if;
272     end fetch_source_cursor;
273  
274       /*******************************************/
275      /* Function to close cursor for all_source */
276     /*******************************************/
277     procedure close_source_cursor(stmt_cursor in out number) is
278     begin
279        dbms_sql.close_cursor(stmt_cursor);
280     end close_source_cursor;
281  
282       /******************************************************************/
283      /* Procedure to link back to the PL/SQL source for your procedure */
284     /******************************************************************/
285     procedure showsource(cname in varchar2) is
286        procname  varchar2(255);
287        procowner varchar2(255);
288  
289        stmt_cursor number;       -- stmt cursor
290  
291        line1s integer := 0;
292        line   all_source.line%type;
293        text   all_source.text%type;
294     begin
295  
296        name_resolve(cname, procowner, procname);
297  
298        htp.header(1,'Source code for ' || procname);
299        htp.preOpen;
300  
301        stmt_cursor := open_source_cursor(procowner, procname);
302        while (fetch_source_cursor(stmt_cursor, line, text) >= 0)
303        loop
304           if (line = 1)
305           then
306              line1s := line1s + 1;
307              if (line1s = 2)
308              then
309                 htp.print;
310              end if;
311           end if;
312           htp.prints(translate(text,NL_CHAR,' '));
313        end loop;
314        close_source_cursor(stmt_cursor);
315  
316        htp.preClose;
317        signature;
318     end;
319  
320       /**************************************************/
321      /* Procedures for printing out an OWA "signature" */
322     /**************************************************/
323     procedure signature is
324     begin
325        htp.line;
326        htp.p('This page was produced by the ');
327        htp.p(htf.bold('PL/SQL Web ToolKit')||' on '||
328              to_char(sysdate,'Month DD, YYYY HH12:MI PM')||htf.nl);
329     end;
330  
331     procedure signature(cname in varchar2 character set any_cs) is
332     begin
333        signature;
334        htp.anchor(owa_util.get_owa_service_path||
335                   'owa_util.showsource?cname='||cname,
336                   'View PL/SQL source code');
337     end;
338  
339        /******************************************************/
340       /* Procedure for printing a page generated by htp/htf */
341      /* in SQL*Plus or SQL*DBA                             */
342     /******************************************************/
343     procedure showpage is
344     begin
345        htp.showpage;
346     end;
347  
348       /**************************************************************/
349      /* Procedure/function for accessing CGI environment variables */
350     /**************************************************************/
351     function get_cgi_env(param_name in varchar2) return varchar2 is
352        upper_param_name varchar2(2000) := upper(param_name);
353     begin
354        for i in 1..owa.num_cgi_vars
355        loop
356           if (upper(owa.cgi_var_name(i)) = upper_param_name)
357             then return(owa.cgi_var_val(i));
358           end if;
359        end loop;
360  
361        return NULL;
362     end;
363  
364     procedure print_cgi_env is
365     begin
366        for i in 1..owa.num_cgi_vars
367        loop
368           htp.print(owa.cgi_var_name(i)||' = '||owa.cgi_var_val(i)||htf.nl);
369        end loop;
370     end;
371  
372     function get_owa_service_path return varchar2 is
373        script_name varchar2(2000) := get_cgi_env('SCRIPT_NAME');
374     begin
375        if (substr(script_name,-1) = '/')
376        then
377           return script_name;
378        else
379           return script_name||'/';
380        end if;
381     end;
382  
383     procedure mime_header(ccontent_type in varchar2 DEFAULT 'text/html',
384                           bclose_header in boolean  DEFAULT TRUE,
385                           ccharset      in varchar2 DEFAULT 'MaGiC_KeY')
386     is
387        charset varchar2(40) := null;
388        l_ccontent_type varchar2(32767);
389        l_ccharset      varchar2(32767);
390     begin
391        -- Validate parameters
392        l_ccontent_type := validate_arg(ccontent_type);
393        l_ccharset := validate_arg(ccharset);
394  
395        -- Check if ccharset is passed in
396        if (l_ccharset = 'MaGiC_KeY')
397        then
398           -- Check the ccontent_type is of type 'text'
399           if (upper(l_ccontent_type) like 'TEXT%')
400           then
401              charset := owa_util.get_cgi_env('REQUEST_IANA_CHARSET');
402              if (charset is null)
403              then
404                 htp.prn('Content-type: '||l_ccontent_type||NL_CHAR);
405              else
406                 htp.prn('Content-type: '||l_ccontent_type
407                    ||'; charset='||charset||NL_CHAR);
408              end if;
409           else
410              htp.prn('Content-type: '||l_ccontent_type||NL_CHAR);
411           end if;
412           htp.setHTTPCharset(charset, owa_util.get_cgi_env('REQUEST_CHARSET'));
413        else
414           -- Just output what was passed in without check for type 'text'
415           if (l_ccharset is null) then
416              htp.prn('Content-type: '||l_ccontent_type||NL_CHAR);
417              htp.setHTTPCharset(l_ccharset, owa_util.get_cgi_env('REQUEST_CHARSET'));
418           else
419              htp.prn('Content-type: '||l_ccontent_type
420                 ||'; charset='||l_ccharset||NL_CHAR);
421              htp.setHTTPCharset(l_ccharset);
422           end if;
423        end if;
424  
425        if (bclose_header)
426           then http_header_close;
427        end if;
428     end;
429  
430     procedure redirect_url(curl          in varchar2 character set any_cs,
431                            bclose_header in boolean  DEFAULT TRUE)
432        is
433        l_url varchar2(32767);
434     begin
435  
436        l_url := validate_arg(curl);
437  
438        htp.prn('Location: '||l_url||NL_CHAR);
439  
440        if (bclose_header)
441           then http_header_close;
442        end if;
443     end;
444  
445     procedure status_line(nstatus       in integer,
446                           creason       in varchar2 character set any_cs DEFAULT NULL,
447                           bclose_header in boolean  DEFAULT TRUE)
448        is
449        l_creason varchar2(32767);
450     begin
451        -- validate parameter
452        l_creason := validate_arg(creason);
453  
454        htp.prn('Status: '||nstatus||' '||l_creason||NL_CHAR);
455  
456        if (bclose_header)
457           then http_header_close;
458        end if;
459     end;
460  
461     procedure http_header_close is
462     begin
463        htp.prn(NL_CHAR);
464     end;
465  
466       /**********************************************/
467      /* A couple of handy routines used internally */
468     /**********************************************/
469     function get_next_col(
470        col_list in  varchar2 character set any_cs,
471        inDB     in  boolean,
472        loc_in   in  integer,
473        loc_out  out number,
474        isExpr   out boolean
475     ) return varchar2 character set col_list%charset is
476        ix          number;
477        len         number := length(col_list);
478        parenCnt    number;
479        inQuote     boolean;
480        nxt_ch      varchar2(1) character set col_list%charset;
481     begin
482        if (inDB)
483        then
484           if (loc_in = 1)
485           then
486              colTbl.delete;
487              dbms_utility.comma_to_table(col_list, colTblSz, colTbl);
488           end if;
489           if (loc_in <= colTblSz)
490           then
491              if (loc_in < colTblSz)
492              then
493                 loc_out := loc_in;
494              else
495                 loc_out := -1;
496              end if;
497              isExpr := (instr(colTbl(loc_in), '(') > 0);
498              return(colTbl(loc_in));
499           end if;
500           loc_out := -1;
501           isExpr := false;
502           return(NULL);
503        end if;
504  
505        isExpr := false;
506        parenCnt := 0;
507        inQuote := false;
508        ix := loc_in;
509        while (ix <= len)
510        loop
511           nxt_ch := substr(col_list, ix, 1);
512           if (nxt_ch = ',')
513           then
514              if (parenCnt = 0 and (not inQuote))
515              then
516                 exit;
517              end if;
518           elsif (nxt_ch = '(')
519           then
520              isExpr := true;
521              if (not inQuote)
522              then
523                 parenCnt := parenCnt + 1;
524              end if;
525           elsif (nxt_ch = ')')
526           then
527              isExpr := true;
528              if (not inQuote)
529              then
530                 parenCnt := parenCnt - 1;
531              end if;
532           elsif (nxt_ch = '''')
533           then
534              isExpr := true;
535              inQuote := (not inQuote);
536           end if;
537           ix := ix + 1;
538        end loop;
539        if (ix > len)
540        then
541           loc_out := -1;
542           return(ltrim(rtrim(substr(col_list, loc_in))));
543        else
544           loc_out := ix;
545           return(ltrim(rtrim(substr(col_list, loc_in, ix - loc_in))));
546        end if;
547     end get_next_col;
548  
549     /* NCHAR version of comma_to_ident_arr */
550     procedure comma_to_ident_arr(list    in varchar2 character set any_cs,
551                                  arr    out ident_narr,
552                                  lenarr out num_arr,
553                                  arrlen out integer) is
554        tok_counter number;
555        tok_loc_out number;
556        isExpr      boolean;
557     begin
558        if (list is null)
559        then
560           arrlen := 0;
561           return;
562        end if;
563        tok_counter := 0;
564        tok_loc_out := 0;
565        while (tok_loc_out >= 0) loop
566           tok_counter := tok_counter + 1;
567           arr(tok_counter) :=
568              substr(get_next_col(list, FALSE,
569                                  (tok_loc_out + 1), tok_loc_out, isExpr),
570                     1, 30);
571           lenarr(tok_counter) := length (arr(tok_counter));
572        end loop;
573        arrlen := tok_counter;
574     end;
575  
576     procedure comma_to_ident_arr(list    in varchar2 character set any_cs,
577                                  arr    out ident_arr,
578                                  lenarr    out num_arr,
579                                  arrlen out integer) is
580        tok_counter number;
581        tok_loc_out number;
582        isExpr      boolean;
583     begin
584        if (list is null)
585        then
586           arrlen := 0;
587           return;
588        end if;
589        tok_counter := 0;
590        tok_loc_out := 0;
591        while (tok_loc_out >= 0) loop
592           tok_counter := tok_counter + 1;
593           arr(tok_counter) :=
594              substr(get_next_col(list, FALSE,
595                                  (tok_loc_out + 1), tok_loc_out, isExpr),
596                                  1, 30);
597           lenarr(tok_counter) := lengthb (arr(tok_counter));
598        end loop;
599        arrlen := tok_counter;
600     end;
601  
602     function align(cdata        in     varchar2,
603                    ncolumn_size in     integer,
604                    calign       in     varchar2 DEFAULT 'left') return varchar2
605      is
606        lalign     integer;
607        align_type char(1);
608     begin
609        align_type := upper(substr(calign,1,1));
610        if (align_type = 'L')
611        then
612           lalign := 1 + nvl(lengthb(cdata),0);
613        else
614           if (align_type = 'R')
615           then
616              lalign := ncolumn_size+1;
617           else /* align_type = 'C' */
618              lalign := 1 + ceil((ncolumn_size - nvl(lengthb(cdata),0))/2)
619                          + nvl(lengthb(cdata),0);
620           end if;
621        end if;
622  
623        return (rpad(lpad(nvl(cdata,' '), lalign), ncolumn_size+2)||table_border);
624     end;
625  
626       /******************************************************************/
627      /* Procedures and functions for building HTML and non-HTML tables */
628     /******************************************************************/
629     /* This is just a function prototype */
630     procedure resolve_synonym(csynonym in varchar2,
631                               cschema  in varchar2,
632                               resolved_name    out varchar2,
633                               resolved_owner   out varchar2,
634                               resolved_db_link out varchar2);
635  
636     procedure resolve_table(
637        cobject          in varchar2,
638        cschema          in varchar2,
639        resolved_name    out varchar2,
640        resolved_owner   out varchar2,
641        resolved_db_link out varchar2
642     ) is
643        stmt_cursor number;       -- stmt cursor
644        rc          number;       -- return code
645        al          constant number := 255;
646        a           varchar2(255);
647        bl          constant number := 255;
648        b           varchar2(255);
649        cl          constant number := 255;
650        c           varchar2(255);
651        dblinkl     constant number := 255;
652        dblink      varchar2(255);
653        next_pos    binary_integer;
654  
655        item_name varchar2(255);
656        item_owner varchar2(255);
657  
658        dummy char(1);
659     begin
660        stmt_cursor := dbms_sql.open_cursor;
661        sys.dbms_sql.parse(stmt_cursor,
662           'begin
663               dbms_utility.name_tokenize(:cobject,
664                  :a, :b, :c, :dblink, :next_pos);
665            end;', dbms_sql.v7);
666        dbms_sql.bind_variable(stmt_cursor, ':cobject', cobject);
667        dbms_sql.bind_variable(stmt_cursor, ':a', a, al);
668        dbms_sql.bind_variable(stmt_cursor, ':b', b, bl);
669        dbms_sql.bind_variable(stmt_cursor, ':c', c, cl);
670        dbms_sql.bind_variable(stmt_cursor, ':dblink', dblink, dblinkl);
671        dbms_sql.bind_variable(stmt_cursor, ':next_pos', next_pos);
672        rc := dbms_sql.execute(stmt_cursor);
673        dbms_sql.variable_value(stmt_cursor, ':a', a);
674        dbms_sql.variable_value(stmt_cursor, ':b', b);
675        dbms_sql.variable_value(stmt_cursor, ':c', c);
676        dbms_sql.variable_value(stmt_cursor, ':dblink', dblink);
677        dbms_sql.variable_value(stmt_cursor, ':next_pos', next_pos);
678        dbms_sql.close_cursor(stmt_cursor);
679  
680        if (c is not null)
681        then
682           /* For a table, we should see AT MOST owner.table */
683           /* If c has a value, we've got owner.table.column */
684           /* or owner.package.procedure                     */
685           raise_application_error(-20000,
686              'Value '||cobject||' passed to resolve_table is invalid');
687        end if;
688  
689        if (b is not null)
690        then
691           item_owner := a;
692           item_name := b;
693        else
694           item_owner := cschema;
695           item_name := a;
696        end if;
697  
698        if (is_table(item_owner, item_name) or is_view(item_owner, item_name))
699        then
700           resolved_name    := item_name;
701           resolved_owner   := item_owner;
702           resolved_db_link := dblink;
703        else
704           resolve_synonym(item_name, item_owner,
705                           resolved_name, resolved_owner, resolved_db_link);
706        end if;
707     end;
708  
709     procedure resolve_synonym(csynonym in varchar2,
710                               cschema  in varchar2,
711                               resolved_name    out varchar2,
712                               resolved_owner   out varchar2,
713                               resolved_db_link out varchar2) is
714        name    varchar2(255);
715        owner   varchar2(255);
716        db_link varchar2(128);
717        is_also_syn number;
718     begin
719        if (get_synonym_defn(csynonym, cschema, name, owner, db_link)
720               or get_synonym_defn(csynonym, 'PUBLIC', name, owner, db_link))
721        then
722           if (db_link is null)
723           then
724              resolve_table(name, owner,
725                            resolved_name, resolved_owner, resolved_db_link);
726           else
727              raise_application_error(-20002,
728                 'Cannot resolve remote object ' || csynonym);
729           end if;
730        else
731           raise_application_error(-20001, 'Cannot resolve object ' || csynonym);
732        end if;
733     end;
734  
735     /* DESCRIBE_COLS returns the column_names and datatypes as */
736     /* arrays for passing to calc_col_sizes                    */
737     procedure describe_cols(
738                             ctable       in varchar2,
739                             ccolumns     in varchar2,
740                             col_names   out ident_arr,
741                             col_dtypes  out ident_arr,
742                             nnum_cols   out integer
743                            )
744      is
745       col_cursor    integer;
746       col_name      varchar2(255);
747       col_charset   varchar(40);
748       col_dtype     varchar2(9);
749       col_counter   number;
750       new_row       boolean;
751       col_num       number;
752  
753       col_loc_out   number;
754       next_col      varchar2(255);
755       col_decode    varchar2(2000);
756       col_in_clause varchar2(2000);
757  
758       table_resolved   varchar2(255);
759       owner_resolved   varchar2(255);
760       db_link_resolved varchar2(255);
761  
762       ignore     integer;
763       isExpr     boolean;
764     begin
765        /* There's no dynamic describe unfortunately. */
766        /* We will need to parse out the owner, etc. */
767        resolve_table(ctable,USER,
768                      table_resolved,owner_resolved,db_link_resolved);
769  
770        col_counter := 0;
771        if (ccolumns = '*')
772        then
773           col_cursor := dbms_sql.open_cursor;
774           sys.dbms_sql.parse(col_cursor,
775                        'select column_name, data_type, character_set_name '||
776                             'from all_tab_columns '||
777                             'where table_name = :t '||
778                             '  and owner = :o '||
779                             'order by column_id',
780                          dbms_sql.v7);
781  
782           dbms_sql.define_column(col_cursor, 1, col_name, 255);
783           dbms_sql.define_column(col_cursor, 2, col_dtype, 9);
784           dbms_sql.define_column(col_cursor, 3, col_charset, 40);
785  
786           dbms_sql.bind_variable(col_cursor, ':t', upper(table_resolved));
787           dbms_sql.bind_variable(col_cursor, ':o', upper(owner_resolved));
788  
789           ignore := dbms_sql.execute(col_cursor);
790  
791           loop
792              if (dbms_sql.fetch_rows(col_cursor) > 0)
793              then
794                 dbms_sql.column_value(col_cursor, 3, col_charset);
795                 dbms_sql.column_value(col_cursor, 2, col_dtype);
796                 dbms_sql.column_value(col_cursor, 1, col_name);
797  
798                 col_counter := col_counter + 1;
799                 if ((col_dtype = 'VARCHAR2') or (col_dtype = 'CHAR')) and
800                    (col_charset = 'NCHAR_CS')
801                 then
802                     col_dtypes(col_counter) := 'N' || col_dtype;
803                 else
804                     col_dtypes(col_counter) := col_dtype;
805                 end if;
806                 col_names(col_counter) := col_name;
807              else
808                 exit;
809              end if;
810           end loop;
811           dbms_sql.close_cursor(col_cursor);
812        else
813           col_decode := '';
814           col_in_clause := '';
815           col_loc_out := 0;
816           while (col_loc_out >= 0) loop
817              next_col :=
818                 upper(get_next_col(ccolumns, FALSE,
819                          (col_loc_out + 1), col_loc_out, isExpr));
820              col_counter := col_counter + 1;
821              col_names(col_counter) := next_col;
822              if (not isExpr)
823              then
824                 col_decode := col_decode || ',''' || next_col
825                                          || ''',' || col_counter;
826                 col_in_clause := col_in_clause || '''' || next_col || ''',';
827              end if;
828           end loop;
829           if (col_in_clause is null)
830           then
831              for i in 1..col_counter
832              loop
833                 col_dtypes(i) := 'VARCHAR2';
834              end loop;
835           else
836              -- remove trailing ',' from col_in_clause
837              col_in_clause := substr(col_in_clause, 1, length(col_in_clause)-1);
838  
839              col_cursor := dbms_sql.open_cursor;
840              sys.dbms_sql.parse(col_cursor,
841                         'select column_name, data_type, character_set_name, '||
842                             'decode(column_name'||col_decode||') '||
843                             'from all_tab_columns '||
844                             'where table_name = '''||upper(table_resolved)||''' '||
845                             '  and owner = '''||upper(owner_resolved)||''' '||
846                             '  and column_name in ('||col_in_clause||') '||
847                             'order by 3',
848                          dbms_sql.v7);
849  
850              dbms_sql.define_column(col_cursor, 1, col_name, 255);
851              dbms_sql.define_column(col_cursor, 2, col_dtype, 9);
852              dbms_sql.define_column(col_cursor, 3, col_charset, 40);
853              dbms_sql.define_column(col_cursor, 4, col_num, 9);
854  
855              ignore := dbms_sql.execute(col_cursor);
856  
857              new_row := (dbms_sql.fetch_rows(col_cursor) > 0);
858              for i in 1..col_counter
859              loop
860                 if (new_row) AND (i = col_num)
861                 then
862                    dbms_sql.column_value(col_cursor, 2, col_dtype);
863                    dbms_sql.column_value(col_cursor, 3, col_charset);
864                    if ((col_dtype = 'VARCHAR2') or (col_dtype = 'CHAR')) and
865                      (col_charset = 'NCHAR_CS')
866                    then
867                      col_dtypes(i) := 'N' || col_dtype;
868                    else
869                        col_dtypes(i) := col_dtype;
870                    end if;
871                    new_row := (dbms_sql.fetch_rows(col_cursor) > 0);
872                 else
873                    col_dtypes(i) := 'VARCHAR2';
874                 end if;
875              end loop;
876              dbms_sql.close_cursor(col_cursor);
877           end if;
878        end if;
879  
880        nnum_cols := col_counter;
881  
882     end;
883  
884     procedure eliminate_longs(
885        col_names   in out ident_arr,
886        col_aliases in out ident_arr,
887        col_dtypes  in out ident_arr,
888        num_cols    in out integer,
889        num_aliases in out integer
890     ) is
891        col_dtype     varchar2(2000);
892     begin
893  
894        for i in 1..num_cols
895        loop
896           col_dtype := col_dtypes(i);
897           if (col_dtype = 'LONG' OR col_dtype = 'LONG RAW')
898           then
899              num_cols := num_cols - 1;
900  
901              if (i < num_aliases)
902              then
903                 num_aliases := num_aliases - 1;
904              end if;
905  
906              for j in i..num_cols
907              loop
908                 col_dtypes(j) := col_dtypes(j + 1);
909                 col_names(j) := col_names(j + 1);
910  
911                 if (j <= num_aliases)
912                 then
913                    col_aliases(j) := col_aliases(j + 1);
914                 end if;
915              end loop;
916  
917              /* To be totally clean, let's null the last values */
918              col_names(num_cols+1) := NULL;
919              col_dtypes(num_cols+1) := NULL;
920              col_aliases(num_aliases+1) := NULL;
921  
922              /* Since there is only one LONG allowed in a table, exit */
923              exit;
924           end if;
925        end loop;
926  
927     end;
928  
929     /* CALC_COL_SIZES will calculate the necessary column sizes   */
930     /* for a table.  If an ntable_type = HTML_TABLE, then it      */
931     /* merely builds an array of NULLs, one entry for each column */
932     /* This is necessary for calls to print_headings.             */
933     /* For PRE_TABLEs, CALC_COL_SIZES must scan the table up to   */
934     /* the nrow_max-th to determine the widest values.  If        */
935     /* nrow_max is NULL, then the entire table is scanned.        */
936     procedure calc_col_sizes(ctable      in     varchar2,
937                              ntable_type in     integer,
938                              ccolumns    in     varchar2,
939                              col_names   in     ident_arr,
940                              col_dtypes  in     ident_arr,
941                              nnum_cols   in     integer,
942                              col_aliases_len in num_arr,
943                              num_aliases in     integer DEFAULT 0,
944                              cclauses    in     varchar2 DEFAULT NULL,
945                              nrow_min    in     integer DEFAULT NULL,
946                              nrow_max    in     integer DEFAULT NULL,
947                              col_sizes   in out num_arr,
948                              table_empty    out boolean) is
949       crsr     integer;
950       ignore   integer;
951  
952       col_counter integer;
953       col_dtype   varchar2(2000);
954  
955       vc_var     varchar2(2000);
956       number_var number;
957       date_var   date;
958       long_var   varchar2(32767);
959       raw_var    raw(255);
960  
961       col_size integer;
962  
963       row_count number;
964     begin
965        if ntable_type = HTML_TABLE
966        then
967           for i in 1..nnum_cols
968           loop
969              col_sizes(i) := NULL;
970           end loop;
971        else
972           crsr := dbms_sql.open_cursor;
973           sys.dbms_sql.parse(crsr,
974                          'select '||ccolumns||' from '||ctable||' '||cclauses,
975                          dbms_sql.v7);
976  
977           for col_counter in 1..nnum_cols
978           loop
979              if (col_counter <= num_aliases)
980              then
981                 col_sizes(col_counter):= nvl(col_aliases_len(col_counter),0);
982              else
983                 col_sizes(col_counter):= nvl(lengthb(col_names(col_counter)),0);
984              end if;
985  
986              col_dtype := col_dtypes(col_counter);
987              if (col_dtype = 'VARCHAR2' OR col_dtype = 'CHAR')
988              then
989                 dbms_sql.define_column(crsr, col_counter, vc_var, 2000);
990              else if (col_dtype = 'NUMBER')
991                   then
992                      dbms_sql.define_column(crsr,
993                                             col_counter, number_var);
994                   else if (col_dtype = 'DATE')
995                        then
996                           dbms_sql.define_column(crsr,
997                                                  col_counter, date_var);
998                        else if (col_dtype = 'LONG')
999                             then
1000                                dbms_sql.define_column(crsr, col_counter,
1001                                                       long_var, 32767);
1002                             else if (col_dtype = 'RAW')
1003                                  then
1004                                     dbms_sql.define_column_raw(crsr, col_counter,
1005                                                                raw_var, 255);
1006                                  end if;
1007                             end if;
1008                        end if;
1009                   end if;
1010              end if;
1011           end loop;
1012  
1013           ignore := dbms_sql.execute(crsr);
1014  
1015           row_count := 0;
1016           if (nrow_min is NOT NULL)
1017           then
1018              while (row_count < nrow_min - 1)
1019              loop
1020                 if (dbms_sql.fetch_rows(crsr) > 0)
1021                    then row_count := row_count+1;
1022                    else exit;
1023                 end if;
1024              end loop;
1025           end if;
1026  
1027           while (nrow_max is NULL) or (row_count < nrow_max)
1028           loop
1029  
1030              if dbms_sql.fetch_rows(crsr) > 0
1031              then
1032                 row_count := row_count+1;
1033  
1034                 for col_counter in 1..nnum_cols
1035                 loop
1036                    col_dtype := col_dtypes(col_counter);
1037                    if (col_dtype = 'VARCHAR2' OR col_dtype = 'CHAR')
1038                    then
1039                       dbms_sql.column_value(crsr, col_counter, vc_var);
1040                       col_size := nvl(lengthb(vc_var),0);
1041                    else if (col_dtype = 'NUMBER')
1042                         then
1043                            dbms_sql.column_value(crsr, col_counter,
1044                                                  number_var);
1045                            col_size := nvl(lengthb(number_var),0);
1046                         else if (col_dtype = 'DATE')
1047                              then
1048                                 dbms_sql.column_value(crsr, col_counter,
1049                                                       date_var);
1050                                 col_size := nvl(lengthb(date_var),0);
1051                              else if (col_dtype = 'LONG')
1052                                   then
1053                                      dbms_sql.column_value(crsr, col_counter,
1054                                                            long_var);
1055                                      col_size := nvl(lengthb(long_var),0);
1056                                   else if (col_dtype = 'RAW')
1057                                        then
1058                                           dbms_sql.column_value_raw(crsr,
1059                                                            col_counter,
1060                                                            raw_var);
1061                                           col_size := nvl(lengthb(raw_var),0);
1062                                        else
1063                                           col_size := length('Not Printable');
1064                                        end if;
1065                                   end if;
1066                              end if;
1067                         end if;
1068                    end if;
1069  
1070                    if (col_size > col_sizes(col_counter))
1071                    then
1072                       col_sizes(col_counter) := col_size;
1073                    end if;
1074  
1075                 end loop;
1076  
1077              else
1078                 if row_count = 0
1079                 then
1080                    table_empty := true;
1081                 else
1082                    table_empty := false;
1083                 end if;
1084                 exit;
1085              end if;
1086           end loop;
1087  
1088           dbms_sql.close_cursor(crsr);
1089        end if;
1090     end;
1091  
1092     /* PRINT_HEADINGS will print the column headings for a table. */
1093     /* If ccol_aliases is populated, it will use them, else it    */
1094     /* will use ccol_names.                                       */
1095     /* skwong:
1096     **    need to add support for NCHAR in ident_arr.
1097     */
1098     procedure print_headings(
1099                           ccol_aliases in     ident_narr,
1100                           num_aliases  in     integer,
1101                           ccol_names   in     ident_arr,
1102                           ccol_sizes   in     num_arr,
1103                           nnum_cols    in     integer,
1104                           ntable_width in out integer,
1105                           ntable_type  in     integer
1106                          ) is
1107    row_string varchar2(32000);
1108    begin
1109     tableHeaderRowOpen(row_string, ntable_width, ntable_type);
1110  
1111     for i in 1..nnum_cols
1112     loop
1113        if (i <= num_aliases)
1114        then
1115           tableHeader(ccol_aliases(i), ccol_sizes(i), 'center',
1116                       row_string, ntable_width, ntable_type);
1117        else
1118           tableHeader(ccol_names(i), ccol_sizes(i), 'center',
1119                       row_string, ntable_width, ntable_type);
1120        end if;
1121     end loop;
1122  
1123     tableHeaderRowClose(row_string, ntable_width, ntable_type);
1124     end;
1125  
1126     procedure print_headings(
1127                              ccol_aliases in     ident_arr,
1128                              num_aliases  in     integer,
1129                              ccol_names   in     ident_arr,
1130                              ccol_sizes   in     num_arr,
1131                              nnum_cols    in     integer,
1132                              ntable_width in out integer,
1133                              ntable_type  in     integer
1134                             ) is
1135       row_string varchar2(32000);
1136     begin
1137        tableHeaderRowOpen(row_string, ntable_width, ntable_type);
1138  
1139        for i in 1..nnum_cols
1140        loop
1141           if (i <= num_aliases)
1142           then
1143              tableHeader(ccol_aliases(i), ccol_sizes(i), 'center',
1144                          row_string, ntable_width, ntable_type);
1145           else
1146              tableHeader(ccol_names(i), ccol_sizes(i), 'center',
1147                          row_string, ntable_width, ntable_type);
1148           end if;
1149        end loop;
1150  
1151        tableHeaderRowClose(row_string, ntable_width, ntable_type);
1152     end;
1153  
1154     /* PRINT_ROWS will print the requested rows (nrow_min, nrow_max, */
1155     /* cclauses) and columns (ccolumns) from the table (ctable)      */
1156     /* in the specified format (ntable_type).                        */
1157     /* DESCRIBE_COLS (or a functional equivalent) must be called     */
1158     /* before calling PRINT_ROWS to populate col_dtypes, col_sizes.  */
1159     /* PRINT_ROWS returns TRUE if there are more rows (beyond        */
1160     /* nrow_max) to print.  False otherwise.                         */
1161     function print_rows(
1162                         ctable       in varchar2,
1163                         ntable_type  in integer DEFAULT HTML_TABLE,
1164                         ccolumns     in varchar2 DEFAULT '*',
1165                         cclauses     in varchar2 DEFAULT NULL,
1166                         col_dtypes   in ident_arr,
1167                         col_sizes    in num_arr,
1168                         nnum_cols    in integer,
1169                         ntable_width in integer,
1170                         nrow_min     in integer DEFAULT 0,
1171                         nrow_max     in integer DEFAULT NULL
1172                        ) return boolean
1173      is
1174       table_cursor integer;
1175  
1176       col_counter integer;
1177       col_dtype   varchar2(2000);
1178  
1179       vc_var     varchar2(2000);
1180       nc_var     nvarchar2(2000);
1181       number_var number;
1182       date_var   date;
1183       long_var   varchar2(32767);
1184       raw_var    raw(255);
1185  
1186       ignore     integer;
1187  
1188       row_string varchar2(32000);
1189  
1190       row_count number;
1191       more_rows boolean := TRUE;
1192     begin
1193        table_cursor := dbms_sql.open_cursor;
1194        sys.dbms_sql.parse(table_cursor,
1195                       'select '||ccolumns||' from '||ctable||' '||cclauses,
1196                       dbms_sql.v7);
1197  
1198        for col_counter in 1..nnum_cols
1199        loop
1200           col_dtype := col_dtypes(col_counter);
1201           if (col_dtype = 'VARCHAR2' OR col_dtype = 'CHAR') then
1202              dbms_sql.define_column(table_cursor, col_counter, vc_var, 2000);
1203           elsif (col_dtype = 'NVARCHAR2' OR col_dtype = 'NCHAR') then
1204              dbms_sql.define_column(table_cursor, col_counter, nc_var, 2000);
1205           elsif (col_dtype = 'NUMBER') then
1206              dbms_sql.define_column(table_cursor, col_counter, number_var);
1207           elsif (col_dtype = 'DATE') then
1208              dbms_sql.define_column(table_cursor, col_counter, date_var);
1209           elsif (col_dtype = 'LONG') then
1210              dbms_sql.define_column(table_cursor, col_counter, long_var, 32767); /* Kelly: not sure over 2000 is valid */
1211           elsif (col_dtype = 'RAW') then
1212              dbms_sql.define_column_raw(table_cursor, col_counter, raw_var, 32767);
1213           end if;
1214        end loop;
1215  
1216        ignore := dbms_sql.execute(table_cursor);
1217  
1218        row_count := 0;
1219        if (nrow_min is NOT NULL)
1220        then
1221           while (row_count < nrow_min - 1)
1222           loop
1223              if (dbms_sql.fetch_rows(table_cursor) > 0)
1224                 then row_count := row_count+1;
1225                 else exit;
1226              end if;
1227           end loop;
1228        end if;
1229  
1230        while (nrow_max is NULL) or (row_count < nrow_max)
1231        loop
1232  
1233           if dbms_sql.fetch_rows(table_cursor) > 0
1234           then
1235              row_count := row_count+1;
1236  
1237              tableRowOpen(row_string, ntable_type);
1238  
1239              for col_counter in 1..nnum_cols
1240              loop
1241                 col_dtype := col_dtypes(col_counter);
1242                 if (col_dtype = 'VARCHAR2' OR col_dtype = 'CHAR') then
1243                    dbms_sql.column_value(table_cursor, col_counter, vc_var);
1244                    tableData(vc_var, col_sizes(col_counter), 'left', row_string, ntable_type);
1245                 elsif  (col_dtype = 'NVARCHAR2' OR col_dtype = 'NCHAR') then
1246                    dbms_sql.column_value(table_cursor, col_counter, nc_var);
1247                    tableData(nc_var, col_sizes(col_counter), 'left', row_string, ntable_type);
1248                 elsif (col_dtype = 'NUMBER') then
1249                    dbms_sql.column_value(table_cursor, col_counter,number_var);
1250                    tableData(number_var, col_sizes(col_counter), 'left', row_string, ntable_type);
1251                 elsif (col_dtype = 'DATE') then
1252                    dbms_sql.column_value(table_cursor, col_counter, date_var);
1253                    tableData(to_nchar(date_var), col_sizes(col_counter), 'left', row_string, ntable_type);
1254                 elsif (col_dtype = 'LONG') then
1255                    dbms_sql.column_value(table_cursor, col_counter,long_var);
1256                    tableData(long_var, col_sizes(col_counter),'left', row_string, ntable_type);
1257                 elsif (col_dtype = 'RAW') then
1258                    dbms_sql.column_value_raw(table_cursor, col_counter, raw_var);
1259                    tableData(raw_var, col_sizes(col_counter), 'left', row_string, ntable_type);
1260                 else
1261                    tableData('Not Printable', col_sizes(col_counter),'left', row_string, ntable_type);
1262                 end if;
1263  
1264              end loop;
1265  
1266              tableRowClose(row_string, ntable_type);
1267           else
1268              more_rows := FALSE;
1269              exit;
1270           end if;
1271        end loop;
1272  
1273        if (row_count < nrow_min)
1274        then
1275           tableRowOpen(row_string, ntable_type);
1276           tableNoData('left', row_string, nnum_cols, ntable_width, ntable_type);
1277           tableRowClose(row_string, ntable_type);
1278        else
1279           if (more_rows)
1280              then more_rows := dbms_sql.fetch_rows(table_cursor) > 0;
1281           end if;
1282        end if;
1283  
1284        dbms_sql.close_cursor(table_cursor);
1285  
1286        return more_rows;
1287     end;
1288  
1289     procedure show_query_columns(ctable in varchar2) is
1290        ignore           integer;
1291        cols_cursor      integer;
1292        table_resolved   varchar2(255);
1293        owner_resolved   varchar2(255);
1294        db_link_resolved varchar2(255);
1295        col_name         varchar2(2000);
1296     begin
1297        /* There's no dynamic describe unfortunately. */
1298        /* We will need to parse out the owner, etc. */
1299        resolve_table(ctable,USER,
1300                      table_resolved,owner_resolved,db_link_resolved);
1301  
1302        htp.formHidden('ctable', ctable);
1303        htp.formHidden('COLS', 'DUMMY');
1304  
1305        cols_cursor := dbms_sql.open_cursor;
1306        sys.dbms_sql.parse(cols_cursor,
1307               'select column_name from all_tab_columns where table_name = upper(:t)
1308                   and owner = upper(:o)',
1309               dbms_sql.v7);
1310        dbms_sql.bind_variable(cols_cursor, ':t', table_resolved);
1311        dbms_sql.bind_variable(cols_cursor, ':o', owner_resolved);
1312        dbms_sql.define_column(cols_cursor, 1, col_name, 2000);
1313        ignore := dbms_sql.execute(cols_cursor);
1314        loop
1315           if (dbms_sql.fetch_rows(cols_cursor) > 0)
1316           then
1317              dbms_sql.column_value(cols_cursor, 1, col_name);
1318              htp.formCheckbox('COLS', col_name);
1319              htp.print(col_name);
1320              htp.nl;
1321           else
1322              exit;
1323           end if;
1324        end loop;
1325        dbms_sql.close_cursor(cols_cursor);
1326        htp.formSubmit(NULL,'Execute Query');
1327     end;
1328  
1329     function tablePrint(ctable       in varchar2,
1330                         cattributes  in varchar2 DEFAULT NULL,
1331                         ntable_type  in integer  DEFAULT HTML_TABLE,
1332                         ccolumns     in varchar2 DEFAULT '*',
1333                         cclauses     in varchar2 DEFAULT NULL,
1334                         ccol_aliases in varchar2 character set any_cs DEFAULT NULL,
1335                         nrow_min     in number DEFAULT 0,
1336                         nrow_max     in number DEFAULT 500) return boolean
1337      is
1338       col_names   ident_arr;
1339       col_aliases ident_arr;
1340       col_aliases_nchar ident_narr;
1341       col_aliases_len num_arr;
1342       num_aliases integer;
1343       col_dtypes  ident_arr;
1344       col_sizes   num_arr;
1345  
1346       nnum_cols    integer;
1347       ntable_width integer;
1348  
1349       no_data_len integer;
1350       inc_len     integer;
1351       amt_left    integer;
1352  
1353       table_empty boolean;
1354       more_rows   boolean;
1355       nchar_path  boolean;
1356     begin
1357  
1358        if (ccol_aliases is not null) then
1359          if (isnchar(ccol_aliases)) then
1360            nchar_path := TRUE;
1361            comma_to_ident_arr(ccol_aliases, col_aliases_nchar, col_aliases_len, num_aliases);
1362          else
1363            nchar_path := FALSE;
1364            comma_to_ident_arr(to_char(ccol_aliases), col_aliases, col_aliases_len, num_aliases);
1365          end if;
1366        else
1367          num_aliases := 0;
1368        end if;
1369  
1370        describe_cols(ctable, ccolumns, col_names, col_dtypes, nnum_cols);
1371  
1372        calc_col_sizes(ctable, ntable_type, ccolumns, col_names, col_dtypes,
1373                 nnum_cols, col_aliases_len, num_aliases, cclauses,
1374                 nrow_min, nrow_max, col_sizes, table_empty);
1375  
1376        if (table_empty)
1377        then
1378           ntable_width := 1;
1379           for i in 1..nnum_cols
1380           loop
1381              ntable_width := ntable_width + col_sizes(i) + 3;
1382           end loop;
1383  
1384           no_data_len := length('  No Data Found  ');
1385  
1386           if (ntable_width < no_data_len)
1387           then
1388              amt_left := no_data_len - ntable_width;
1389              inc_len := ceil(amt_left/nnum_cols);
1390  
1391              for i in 1..nnum_cols
1392              loop
1393                 if amt_left > inc_len
1394                 then
1395                    col_sizes(i) := col_sizes(i) + inc_len;
1396                    amt_left := amt_left - inc_len;
1397                 else
1398                    col_sizes(i) := col_sizes(i) + amt_left;
1399                    amt_left := 0;
1400                 end if;
1401              end loop;
1402           end if;
1403        end if;
1404  
1405        tableOpen(cattributes, ntable_type);
1406        if (nchar_path)  then
1407          print_headings(col_aliases_nchar, num_aliases, col_names, col_sizes,
1408                       nnum_cols, ntable_width, ntable_type);
1409        else
1410          print_headings(col_aliases, num_aliases, col_names, col_sizes,
1411               nnum_cols, ntable_width, ntable_type);
1412        end if;
1413  
1414        more_rows := print_rows(ctable, ntable_type, ccolumns, cclauses,
1415                                col_dtypes, col_sizes, nnum_cols, ntable_width,
1416                                nrow_min, nrow_max);
1417  
1418        tableClose(ntable_width, ntable_type);
1419  
1420        return(more_rows);
1421     end;
1422  
1423     procedure tableOpen(cattributes in varchar2 DEFAULT NULL,
1424                         ntable_type in integer DEFAULT HTML_TABLE)
1425      is
1426     begin
1427        if (ntable_type = HTML_TABLE)
1428        then
1429           htp.tableOpen(NULL, NULL, NULL, NULL, cattributes);
1430        else
1431           if (cattributes is not null)
1432           then
1433              table_border := '|';
1434           else
1435              table_border := ' ';
1436           end if;
1437           htp.print('<pre>');
1438        end if;
1439     end;
1440  
1441     procedure tableCaption(ccaption    in varchar2 character set any_cs,
1442                            calign      in varchar2 DEFAULT 'center',
1443                            ntable_type in integer  DEFAULT HTML_TABLE) is
1444     begin
1445        if (ntable_type = HTML_TABLE)
1446        then
1447           htp.tableCaption(ccaption, calign);
1448        else
1449           htp.print(ccaption);
1450        end if;
1451     end;
1452  
1453     procedure tableHeaderRowOpen(crowstring  in out varchar2,
1454                                  ntable_type in     integer DEFAULT HTML_TABLE)
1455      is
1456     begin
1457        if (ntable_type = HTML_TABLE)
1458        then
1459           htp.tableRowOpen;
1460        else
1461           crowstring := table_border;
1462        end if;
1463     end;
1464  
1465     procedure tableHeaderRowOpen(crowstring   in out varchar2,
1466                                  ntable_width    out integer,
1467                                  ntable_type  in     integer DEFAULT HTML_TABLE)
1468      is
1469     begin
1470        if (ntable_type = HTML_TABLE)
1471        then
1472           htp.tableRowOpen;
1473        else
1474           ntable_width := 1;
1475           crowstring := table_border;
1476        end if;
1477     end;
1478  
1479     procedure tableHeader(ccolumn_name in     varchar2 character set any_cs,
1480                           ncolumn_size in     integer,
1481                           calign       in     varchar2 DEFAULT 'center',
1482                           crowstring   in out varchar2,
1483                           ntable_type  in     integer DEFAULT HTML_TABLE)
1484      is
1485     begin
1486        if (ntable_type = HTML_TABLE)
1487        then
1488           htp.tableHeader(ccolumn_name);
1489        else
1490           crowstring := crowstring||align(ccolumn_name,ncolumn_size,calign);
1491        end if;
1492     end;
1493  
1494     procedure tableHeader(ccolumn_name in     varchar2 character set any_cs,
1495                           ncolumn_size in     integer,
1496                           calign       in     varchar2 DEFAULT 'center',
1497                           crowstring   in out varchar2,
1498                           ntable_width in out integer,
1499                           ntable_type  in     integer DEFAULT HTML_TABLE)
1500      is
1501     begin
1502        if (ntable_type = HTML_TABLE)
1503        then
1504           htp.tableHeader(ccolumn_name);
1505        else
1506           ntable_width := ntable_width+ncolumn_size+3;
1507           crowstring := crowstring||align(ccolumn_name,ncolumn_size,calign);
1508        end if;
1509     end;
1510  
1511     procedure tableHeaderRowClose(crowstring  in out varchar2,
1512                                   ntable_type in     integer DEFAULT HTML_TABLE)
1513      is
1514     begin
1515        if (ntable_type = HTML_TABLE)
1516        then
1517           htp.tableRowClose;
1518        else
1519           htp.print(crowstring);
1520        end if;
1521     end;
1522  
1523     procedure tableHeaderRowClose(crowstring   in out varchar2,
1524                                   ntable_width in     integer,
1525                                   ntable_type  in     integer DEFAULT HTML_TABLE)
1526      is
1527     begin
1528        if (ntable_type = HTML_TABLE)
1529        then
1530           htp.tableRowClose;
1531        else
1532           if (table_border = '|')
1533           then
1534              htp.print(rpad('-',ntable_width,'-'));
1535              htp.print(crowstring);
1536              htp.print(rpad('-',ntable_width,'-'));
1537           else
1538              htp.print(' ');
1539              htp.print(crowstring);
1540              htp.print(' ');
1541           end if;
1542        end if;
1543     end;
1544  
1545     procedure tableRowOpen(crowstring  in out varchar2,
1546                            ntable_type in     integer DEFAULT HTML_TABLE)
1547      is
1548     begin
1549        if (ntable_type = HTML_TABLE)
1550        then
1551           htp.tableRowOpen;
1552        else
1553           crowstring := table_border;
1554        end if;
1555     end;
1556  
1557     procedure tableData(cdata        in     varchar2 character set any_cs,
1558                         ncolumn_size in     integer,
1559                         calign       in     varchar2 DEFAULT 'left',
1560                         crowstring   in out varchar2,
1561                         ntable_type  in     integer DEFAULT HTML_TABLE)
1562      is
1563     begin
1564        if (ntable_type = HTML_TABLE)
1565        then
1566           htp.tableData(cdata, calign);
1567        else
1568           crowstring := crowstring||align(translate(cdata,NL_CHAR,' '),
1569                                                     ncolumn_size, calign);
1570        end if;
1571     end;
1572  
1573     procedure tableNoData(calign       in     varchar2 DEFAULT 'left',
1574                           crowstring   in out varchar2,
1575                           nnum_cols    in     integer,
1576                           ntable_width in     integer,
1577                           ntable_type  in     integer DEFAULT HTML_TABLE)
1578      is
1579     begin
1580        if (ntable_type = HTML_TABLE)
1581        then
1582           htp.tableData('No data found', ccolspan=>nnum_cols);
1583        else
1584           crowstring := crowstring||align('No data found',ntable_width-4,calign);
1585        end if;
1586     end;
1587  
1588     procedure tableRowClose(crowstring  in out varchar2,
1589                             ntable_type in     integer DEFAULT HTML_TABLE)
1590      is
1591     begin
1592        if (ntable_type = HTML_TABLE)
1593        then
1594           htp.tableRowClose;
1595        else
1596           htp.print(crowstring);
1597        end if;
1598     end;
1599  
1600     procedure tableClose(ntable_type in     integer DEFAULT HTML_TABLE)
1601      is
1602     begin
1603        if (ntable_type = HTML_TABLE)
1604        then
1605           htp.tableClose;
1606        else
1607           htp.print('</pre>');
1608        end if;
1609     end;
1610  
1611     procedure tableClose(ntable_width in integer,
1612                          ntable_type  in integer DEFAULT HTML_TABLE)
1613      is
1614     begin
1615        if (ntable_type = HTML_TABLE)
1616        then
1617           htp.tableClose;
1618        else
1619           if (table_border = '|')
1620           then
1621              htp.print(rpad('-',ntable_width,'-'));
1622           else
1623              htp.print(' ');
1624           end if;
1625  
1626           htp.print('</pre>');
1627        end if;
1628     end;
1629  
1630       /******************************************************************/
1631      /* Procedures and functions for new utilities for 2.1             */
1632     /******************************************************************/
1633  
1634       /******************************************************************/
1635      /* Function macro for if then else -- ite                         */
1636     /******************************************************************/
1637  
1638          function ite( tf in boolean, yes in varchar2, no in varchar2 )
1639                  return varchar2
1640           is
1641          begin
1642          if ( tf ) then
1643          return yes;
1644          else
1645          return no;
1646          end if;
1647          end ite;
1648  
1649       /******************************************************************/
1650      /* Internal procedures for new utilities                          */
1651     /******************************************************************/
1652  
1653          procedure bv( c in integer, n in varchar2,
1654                        v in varchar2 character set any_cs )
1655           is
1656          begin
1657          if ( n is NOT NULL ) then
1658          dbms_sql.bind_variable( c, n, v );
1659          end if;
1660          end bv;
1661  
1662  
1663          function tochar( d in number, f in varchar2 ) return varchar2
1664           is
1665          begin
1666          return nvl(ltrim(to_char(d,f)), '(null)');
1667          end tochar;
1668  
1669  
1670  
1671          procedure format_cell(
1672             columnValue in varchar2 character set any_cs,
1673             format_numbers in varchar2
1674          ) is
1675          begin
1676             htp.p(htf.format_cell(columnValue, format_numbers));
1677          end format_cell;
1678  
1679          function bind_outputs( p_theCursor in integer,
1680                                 colCnt in number,
1681                                 rec_tab in dbms_sql.desc_tab2 ) return number
1682          is
1683              columnValue        varchar2(1);
1684              ncolumnValue       nvarchar2(1);
1685              status            integer;
1686          begin
1687              for i in 1 .. colCnt loop
1688              begin
1689                if (rec_tab(i).col_charsetform = 2) or (rec_tab(i).col_type = 12)
1690                then
1691                   dbms_sql.define_column( p_theCursor, i, ncolumnValue,2000);
1692                else
1693                   dbms_sql.define_column( p_theCursor, i, columnValue, 2000 );
1694                end if;
1695                  exception
1696                      when others then
1697                          if ( sqlcode = -1007 ) then
1698                              exit;
1699                          else
1700                              raise;
1701                          end if;
1702                  end;
1703              end loop;
1704              status := dbms_sql.execute(p_theCursor);
1705              return colCnt;
1706          end bind_outputs;
1707  
1708          function path_to_me return varchar2
1709          is
1710                  o       varchar2(50);
1711                  n       varchar2(50);
1712                  l       number;
1713                  t       varchar2(50);
1714          begin
1715                  who_called_me( o, n, l, t );
1716  
1717                  return owa_util.get_cgi_env( 'SCRIPT_NAME' ) || '/' || n;
1718          end path_to_me;
1719  
1720  
1721       /******************************************************************/
1722      /* Procedure to get owner and name of the PL/SQL procedure        */
1723     /******************************************************************/
1724  
1725          procedure who_called_me( owner      out varchar2,
1726                                   name       out varchar2,
1727                                   lineno     out number,
1728                                   caller_t   out varchar2 )
1729          as
1730              call_stack  varchar2(4096) default dbms_utility.format_call_stack;
1731              n           number;
1732              found_stack BOOLEAN default FALSE;
1733              line        varchar2(255);
1734              t           varchar2(255);
1735              cnt         number := 0;
1736          begin
1737          --
1738              loop
1739                  n := instr( call_stack, NL_CHAR );
1740                  exit when ( cnt = 3 or n is NULL or n = 0 );
1741          --
1742                  line := ltrim(substr( call_stack, 1, n-1 ));
1743                  call_stack := substr( call_stack, n+1 );
1744          --
1745                  if ( NOT found_stack ) then
1746                      if ( line like '%handle%number%name%' ) then
1747                          found_stack := TRUE;
1748                      end if;
1749                  else
1750                      cnt := cnt + 1;
1751                      -- cnt = 1 is ME
1752                      -- cnt = 2 is MY Caller
1753                      -- cnt = 3 is Their Caller
1754                      if ( cnt = 3 ) then
1755                          -- Fix 718865
1756                          --lineno := to_number(substr( line, 13, 6 ));
1757                          --line   := substr( line, 21 );
1758                          n := instr(line, ' ');
1759                          if (n > 0)
1760                          then
1761                              t := ltrim(substr(line, n));
1762                              n := instr(t, ' ');
1763                          end if;
1764                          if (n > 0)
1765                          then
1766                             lineno := to_number(substr(t, 1, n - 1));
1767                             line := ltrim(substr(t, n));
1768                          else
1769                              lineno := 0;
1770                          end if;
1771                          if ( line like 'pr%' ) then
1772                              n := length( 'procedure ' );
1773                          elsif ( line like 'fun%' ) then
1774                              n := length( 'function ' );
1775                          elsif ( line like 'package body%' ) then
1776                              n := length( 'package body ' );
1777                          elsif ( line like 'pack%' ) then
1778                              n := length( 'package ' );
1779                          elsif ( line like 'anon%' ) then
1780                              n := length( 'anonymous block ' );
1781                          else
1782                              n:=0;
1783                          end if;
1784  
1785                          if (n = 0) then
1786                              -- could be a trigger or a type body
1787                              caller_t := ltrim(rtrim(upper(substr(line, n+1))));
1788                          else
1789                              caller_t := ltrim(rtrim(upper(substr(line,1,n-1))));
1790                          end if;
1791  
1792                          line := substr( line, n );
1793                          n := instr( line, '.' );
1794                          owner := ltrim(rtrim(substr( line, 1, n-1 )));
1795                          name  := ltrim(rtrim(substr( line, n+1 )));
1796                      end if;
1797                  end if;
1798              end loop;
1799          end;
1800  
1801  
1802       /******************************************************************/
1803      /* Function to initialize the shared dynamic SQL                  */
1804     /******************************************************************/
1805  
1806          function bind_variables
1807          (   theQuery in varchar2,
1808              bv1Name  in varchar2 default NULL,
1809              bv1Value in varchar2 character set any_cs default NULL,
1810              bv2Name  in varchar2 default NULL,
1811              bv2Value in varchar2 character set any_cs default NULL,
1812              bv3Name  in varchar2 default NULL,
1813              bv3Value in varchar2 character set any_cs default NULL,
1814              bv4Name  in varchar2 default NULL,
1815              bv4Value in varchar2 character set any_cs default NULL,
1816              bv5Name  in varchar2 default NULL,
1817              bv5Value in varchar2 character set any_cs default NULL,
1818              bv6Name  in varchar2 default NULL,
1819              bv6Value in varchar2 character set any_cs default NULL,
1820              bv7Name  in varchar2 default NULL,
1821              bv7Value in varchar2 character set any_cs default NULL,
1822              bv8Name  in varchar2 default NULL,
1823              bv8Value in varchar2 character set any_cs default NULL,
1824              bv9Name  in varchar2 default NULL,
1825              bv9Value in varchar2 character set any_cs default NULL,
1826              bv10Name  in varchar2 default NULL,
1827              bv10Value in varchar2 character set any_cs default NULL,
1828              bv11Name  in varchar2 default NULL,
1829              bv11Value in varchar2 character set any_cs default NULL,
1830              bv12Name  in varchar2 default NULL,
1831              bv12Value in varchar2 character set any_cs default NULL,
1832              bv13Name  in varchar2 default NULL,
1833              bv13Value in varchar2 character set any_cs default NULL,
1834              bv14Name  in varchar2 default NULL,
1835              bv14Value in varchar2 character set any_cs default NULL,
1836              bv15Name  in varchar2 default NULL,
1837              bv15Value in varchar2 character set any_cs default NULL,
1838              bv16Name  in varchar2 default NULL,
1839              bv16Value in varchar2 character set any_cs default NULL,
1840              bv17Name  in varchar2 default NULL,
1841              bv17Value in varchar2 character set any_cs default NULL,
1842              bv18Name  in varchar2 default NULL,
1843              bv18Value in varchar2 character set any_cs default NULL,
1844              bv19Name  in varchar2 default NULL,
1845              bv19Value in varchar2 character set any_cs default NULL,
1846              bv20Name  in varchar2 default NULL,
1847              bv20Value in varchar2 character set any_cs default NULL,
1848              bv21Name  in varchar2 default NULL,
1849              bv21Value in varchar2 character set any_cs default NULL,
1850              bv22Name  in varchar2 default NULL,
1851              bv22Value in varchar2 character set any_cs default NULL,
1852              bv23Name  in varchar2 default NULL,
1853              bv23Value in varchar2 character set any_cs default NULL,
1854              bv24Name  in varchar2 default NULL,
1855              bv24Value in varchar2 character set any_cs default NULL,
1856              bv25Name  in varchar2 default NULL,
1857              bv25Value in varchar2 character set any_cs default NULL )
1858          return integer
1859          is
1860              theCursor    integer;
1861          begin
1862              if ( upper( substr( ltrim( theQuery ), 1, 6 ) ) <> 'SELECT' ) then
1863                  raise INVALID_QUERY;
1864              end if;
1865          --
1866              theCursor := dbms_sql.open_cursor;
1867              sys.dbms_sql.parse( theCursor, theQuery, dbms_sql.native );
1868          --
1869              bv( theCursor, bv1Name, bv1Value );
1870              bv( theCursor, bv2Name, bv2Value );
1871              bv( theCursor, bv3Name, bv3Value );
1872              bv( theCursor, bv4Name, bv4Value );
1873              bv( theCursor, bv5Name, bv5Value );
1874              bv( theCursor, bv6Name, bv6Value );
1875              bv( theCursor, bv7Name, bv7Value );
1876              bv( theCursor, bv8Name, bv8Value );
1877              bv( theCursor, bv9Name, bv9Value );
1878              bv( theCursor, bv10name, bv10Value );
1879              bv( theCursor, bv11name, bv11Value );
1880              bv( theCursor, bv12name, bv12Value );
1881              bv( theCursor, bv13name, bv13Value );
1882              bv( theCursor, bv14name, bv14Value );
1883              bv( theCursor, bv15name, bv15Value );
1884              bv( theCursor, bv16name, bv16Value );
1885              bv( theCursor, bv17name, bv17Value );
1886              bv( theCursor, bv18name, bv18Value );
1887              bv( theCursor, bv19name, bv19Value );
1888              bv( theCursor, bv20name, bv20Value );
1889              bv( theCursor, bv21name, bv21Value );
1890              bv( theCursor, bv22name, bv22Value );
1891              bv( theCursor, bv23name, bv23Value );
1892              bv( theCursor, bv24name, bv24Value );
1893              bv( theCursor, bv25name, bv25Value );
1894          --
1895              return theCursor;
1896          end bind_variables;
1897  
1898  
1899       /******************************************************************/
1900      /* Procedure to print cells from a table                          */
1901     /******************************************************************/
1902  
1903          function cellsprint_fn( p_theCursor         in integer,
1904                                  p_max_rows          in number   default 100,
1905                                  p_format_numbers    in varchar2 default NULL,
1906                                  p_skip_rec          in number   default 0,
1907                                  p_reccnt           out number)
1908          return boolean is
1909              columnValue varchar2(2000);
1910              ncolumnValue nvarchar2(2000);
1911              colCnt      number default 0;
1912              tmpcursor   number default p_theCursor;
1913              recIx       number default 0;
1914              recCnt      number default 0;
1915              rec_tab     dbms_sql.desc_tab2;
1916          begin
1917          --
1918              dbms_sql.describe_columns2(p_theCursor, colCnt, rec_tab);
1919              colCnt := bind_outputs(p_theCursor, colcnt, rec_tab);
1920          --
1921              while (recCnt < p_max_rows)
1922              loop
1923                  exit when (dbms_sql.fetch_rows(p_theCursor) <= 0);
1924                  recIx := recIx + 1;
1925                  if (recIx > p_skip_rec)
1926                  then
1927                      recCnt := recCnt + 1;
1928                      htp.tableRowOpen;
1929                      for i in 1..colCnt
1930                      loop
1931                         if (rec_tab(i).col_charsetform= 2) or
1932                            (rec_tab(i).col_type = 12)
1933                         then
1934                          dbms_sql.column_value(p_theCursor, i, ncolumnValue);
1935                          format_cell(ncolumnValue, p_format_numbers);
1936                         else
1937                          dbms_sql.column_value(p_theCursor, i, columnValue);
1938                          format_cell(columnValue, p_format_numbers);
1939                         end if;
1940                      end loop;
1941                      htp.tableRowClose;
1942                  end if;
1943              end loop;
1944              dbms_sql.close_cursor(tmpCursor);
1945              p_reccnt := recCnt;
1946              return(recCnt >= p_max_rows);
1947          exception
1948              when others then
1949                  if dbms_sql.is_open(p_theCursor) then
1950                      dbms_sql.close_cursor(tmpCursor);
1951                  end if;
1952                  raise;
1953          end cellsprint_fn;
1954  
1955          procedure cellsprint(p_colCnt         in integer,
1956                               p_resultTbl      in vc_arr,
1957                               p_format_numbers in varchar2 default NULL)
1958          is
1959              recMax number;
1960              colRec number;
1961          begin
1962              if (p_colCnt < 1)
1963              then
1964                 return;
1965              end if;
1966              recMax := p_resultTbl.count / p_colCnt;
1967              colRec := 0;
1968              for recIx in 1..recMax
1969              loop
1970                 htp.tableRowOpen;
1971                 for i in 1..p_colCnt
1972                 loop
1973                    colRec := colRec + 1;
1974                    format_cell(p_resultTbl(colRec), p_format_numbers);
1975                 end loop;
1976                 htp.tableRowClose;
1977              end loop;
1978          end cellsprint;
1979  
1980          procedure cellsprint(p_colCnt         in integer,
1981                               p_resultTbl      in nc_arr,
1982                               p_format_numbers in varchar2 default NULL)
1983          is
1984              recMax number;
1985              colRec number;
1986          begin
1987              if (p_colCnt < 1)
1988              then
1989                 return;
1990              end if;
1991              recMax := p_resultTbl.count / p_colCnt;
1992              colRec := 0;
1993              for recIx in 1..recMax
1994              loop
1995                 htp.tableRowOpen;
1996                 for i in 1..p_colCnt
1997                 loop
1998                    colRec := colRec + 1;
1999                    format_cell(p_resultTbl(colRec), p_format_numbers);
2000                 end loop;
2001                 htp.tableRowClose;
2002              end loop;
2003          end cellsprint;
2004  
2005          procedure cellsprint( p_theQuery          in varchar2,
2006                                p_max_rows          in number default 100,
2007                                p_format_numbers    in varchar2 default NULL )
2008          is
2009              l_theCursor    integer default bind_variables(p_theQuery);
2010              l_more_data    boolean;
2011              reccnt         number;
2012          begin
2013              l_more_data := cellsprint_fn(
2014                                  l_theCursor, p_max_rows,  p_format_numbers,
2015                                  0, reccnt);
2016          end;
2017  
2018          procedure cellsprint( p_theCursor         in integer,
2019                                p_max_rows          in number  default 100,
2020                                p_format_numbers    in varchar2 default NULL )
2021          is
2022              l_more_data    boolean;
2023              reccnt         number;
2024          begin
2025              l_more_data := cellsprint_fn(
2026                                  p_theCursor, p_max_rows,  p_format_numbers,
2027                                  0, reccnt);
2028          end;
2029  
2030          procedure cellsprint( p_theQuery          in varchar2,
2031                                p_max_rows          in number default 100,
2032                                p_format_numbers    in varchar2 default NULL,
2033                                p_skip_rec          in number default 0,
2034                                p_more_data        out boolean )
2035          is
2036              l_theCursor    integer default bind_variables(p_theQuery);
2037              reccnt         number;
2038          begin
2039              p_more_data := cellsprint_fn(
2040                                  l_theCursor, p_max_rows,  p_format_numbers,
2041                                  p_skip_rec, reccnt);
2042          end cellsprint;
2043  
2044          procedure cellsprint( p_theCursor         in integer,
2045                                p_max_rows          in number   default 100,
2046                                p_format_numbers    in varchar2 default NULL,
2047                                p_skip_rec          in number   default 0,
2048                                p_more_data        out boolean)
2049          is
2050              reccnt         number;
2051          begin
2052              p_more_data := cellsprint_fn(
2053                                  p_theCursor, p_max_rows,  p_format_numbers,
2054                                  p_skip_rec, reccnt);
2055          end cellsprint;
2056  
2057          procedure cellsprint( p_theQuery          in varchar2,
2058                                p_max_rows          in number default 100,
2059                                p_format_numbers    in varchar2 default NULL,
2060                                p_reccnt           out number )
2061          is
2062              l_theCursor    integer default bind_variables(p_theQuery);
2063              l_more_data    boolean;
2064          begin
2065              l_more_data := cellsprint_fn(
2066                                  l_theCursor, p_max_rows,  p_format_numbers,
2067                                  0, p_reccnt);
2068          end;
2069  
2070          procedure cellsprint( p_theCursor         in integer,
2071                                p_max_rows          in number  default 100,
2072                                p_format_numbers    in varchar2 default NULL,
2073                                p_reccnt           out number )
2074          is
2075              l_more_data    boolean;
2076          begin
2077              l_more_data := cellsprint_fn(
2078                                  p_theCursor, p_max_rows,  p_format_numbers,
2079                                  0, p_reccnt);
2080          end;
2081  
2082          procedure cellsprint( p_theQuery          in varchar2,
2083                                p_max_rows          in number default 100,
2084                                p_format_numbers    in varchar2 default NULL,
2085                                p_skip_rec          in number default 0,
2086                                p_more_data        out boolean,
2087                                p_reccnt           out number )
2088          is
2089              l_theCursor    integer default bind_variables(p_theQuery);
2090          begin
2091              p_more_data := cellsprint_fn(
2092                                  l_theCursor, p_max_rows,  p_format_numbers,
2093                                  p_skip_rec, p_reccnt);
2094          end cellsprint;
2095  
2096          procedure cellsprint( p_theCursor         in integer,
2097                                p_max_rows          in number   default 100,
2098                                p_format_numbers    in varchar2 default NULL,
2099                                p_skip_rec          in number   default 0,
2100                                p_more_data        out boolean,
2101                                p_reccnt           out number )
2102          is
2103          begin
2104              p_more_data := cellsprint_fn(
2105                                  p_theCursor, p_max_rows,  p_format_numbers,
2106                                  p_skip_rec, p_reccnt);
2107          end cellsprint;
2108  
2109       /******************************************************************/
2110      /* Procedure to print a list from a query                         */
2111     /******************************************************************/
2112  
2113          procedure listprint( p_theCursor in integer,
2114                               p_cname     in varchar2,
2115                               p_nsize     in number,
2116                               p_multiple  in boolean default FALSE )
2117          is
2118              colCnt       number;
2119              value        varchar2(2000);
2120              visible      varchar2(2000);
2121              nc_visible   nvarchar2(2000);
2122              nc_value     nvarchar2(2000);
2123              selected     varchar2(2000);
2124              rec_tab      dbms_sql.desc_tab2;
2125              status       integer;
2126              csform       number;
2127          begin
2128              dbms_sql.describe_columns2(p_theCursor, colCnt, rec_tab);
2129              if (rec_tab(1).col_charsetform = 2 or
2130                  rec_tab(2).col_charsetform = 2)
2131              then
2132                  dbms_sql.define_column(p_theCursor, 1, nc_value, 2000);
2133                  dbms_sql.define_column(p_theCursor, 2, nc_visible, 2000);
2134                  csform := 2;
2135              else
2136                  dbms_sql.define_column(p_theCursor, 1, value, 2000);
2137                  dbms_sql.define_column(p_theCursor, 2, visible, 2000);
2138                  csform := 1;
2139              end if;
2140              dbms_sql.define_column(p_theCursor, 3, selected, 2000);
2141  
2142              status := dbms_sql.execute(p_theCursor);
2143  
2144              htp.formSelectOpen( cname => p_cname,
2145                     nsize => p_nsize,
2146                     cattributes => ite( p_multiple,'multiple',NULL));
2147              loop
2148                  exit when ( dbms_sql.fetch_rows(p_theCursor) <= 0 );
2149                  if (csform = 2)
2150                  then
2151                    dbms_sql.column_value( p_theCursor, 1, nc_value );
2152                    dbms_sql.column_value( p_theCursor, 2, nc_visible );
2153                    dbms_sql.column_value( p_theCursor, 3, selected );
2154                    htp.formSelectOption( cvalue => nc_visible,
2155                       cselected => ite( selected IS NULL, NULL, 'select'),
2156                       cattributes => 'value="' || nc_value || '"' );
2157                  else
2158                    dbms_sql.column_value( p_theCursor, 1, value );
2159                    dbms_sql.column_value( p_theCursor, 2, visible );
2160                    dbms_sql.column_value( p_theCursor, 3, selected );
2161                    htp.formSelectOption( cvalue => visible,
2162                      cselected => ite( selected IS NULL, NULL, 'select'),
2163                      cattributes => 'value="' || value || '"' );
2164                  end if;
2165              end loop;
2166              htp.formSelectClose;
2167          end listprint;
2168  
2169          procedure listprint( p_theQuery  in varchar2,
2170                               p_cname     in varchar2,
2171                               p_nsize     in number,
2172                               p_multiple  in boolean default FALSE )
2173          is
2174              theCursor    integer default bind_variables( p_theQuery );
2175          begin
2176              listprint( theCursor, p_cname, p_nsize, p_multiple );
2177          end listprint;
2178  
2179       /******************************************************************/
2180      /* Procedure to choose a date using HTML forms                    */
2181     /******************************************************************/
2182  
2183          procedure choose_date( p_name in varchar2, p_date in date default sysdate)
2184          is
2185                  l_day           number default to_number(to_char(p_date,'DD'));
2186                  l_mon           number default to_number(to_char(p_date,'MM'));
2187                  l_year          number default to_number(to_char(p_date,'YYYY'));
2188          begin
2189              htp.formSelectOpen( cname => p_name, nsize => 1 );
2190                  for i in 1 .. 31 loop
2191                  htp.formSelectOption( cvalue => i,
2192                                        cselected => ite( i=l_day, 'selected', NULL ),
2193                                        cattributes => 'value="' ||
2194                                                                                          ltrim(to_char(i,'00')) || '"' );
2195                  end loop;
2196                  htp.formSelectClose;
2197                  htp.p( '-' );
2198              htp.formSelectOpen( cname => p_name, nsize => 1 );
2199                  for i in 1 .. 12 loop
2200                  htp.formSelectOption( cvalue => to_nchar( to_date( i, 'MM' ), N'MON' ),
2201                                        cselected => ite( i=l_mon, 'selected', NULL ),
2202                                        cattributes => 'value="' ||
2203                                                                                          ltrim(to_char(i,'00')) || '"' );
2204                  end loop;
2205                  htp.formSelectClose;
2206                  htp.p( '-' );
2207              htp.formSelectOpen( cname => p_name, nsize => 1 );
2208                  for i in l_year-5 .. l_year+5 loop
2209                  htp.formSelectOption( cvalue => i,
2210                                        cselected => ite( i=l_year, 'selected', NULL ),
2211                                        cattributes => 'value="' ||
2212                                                                                          ltrim(to_char(i,'0000')) || '"' );
2213                  end loop;
2214                  htp.formSelectClose;
2215          end;
2216  
2217          function todate( p_dateArray in dateType ) return date
2218          is
2219          begin
2220                  return to_date( p_dateArray(1) || '-' || p_dateArray(2) || '-' ||
2221                                                  p_dateArray(3), 'DD-MM-YYYY' );
2222          exception
2223                  when no_data_found then
2224                          return NULL;
2225                  when others then
2226                          return last_day( to_date( p_dateArray(2) || '-' || p_dateArray(3),
2227                                                                          'MM-YYYY' ) );
2228          end todate;
2229  
2230  
2231       /******************************************************************/
2232      /* Procedure to print calender in HTML formats                    */
2233     /******************************************************************/
2234  
2235       /******************************************************************/
2236      /* Internal procedures                                            */
2237     /******************************************************************/
2238  
2239  
2240          function is_weekend( d in date ) return boolean
2241          is
2242          begin
2243                  if (  to_char(d,'DY','NLS_DATE_LANGUAGE=AMERICAN') in ( 'SAT', 'SUN' ) ) then
2244                          return true;
2245                  else
2246                          return false;
2247                  end if;
2248          end is_weekend;
2249  
2250  
2251          procedure show_internal( p_mf_only in varchar2,
2252                                                           p_start in date,
2253                                                           p_dates in dateArray,
2254                                                           p_text  in vcArray,
2255                                                           p_link  in vcArray,
2256                                                           p_cnt   in number,
2257                                                           p_ntext in ncArray,
2258                                                           p_nlink in ncArray,
2259                                                           nchar_path boolean)
2260          as
2261                  l_start date default trunc(p_start,'month');
2262                  l_magic_date date default to_date('12111111','ddmmyyyy' );
2263                  l_cnt        number default 0;
2264                  l_width          varchar2(25) default 'width="15%"';
2265                  l_loop_start             number default 0;
2266                  l_loop_stop      number default 6;
2267                  l_mf_only        boolean default upper(p_mf_only) = 'Y';
2268          begin
2269                  if ( l_mf_only ) then
2270                          l_width := 'width="20%"';
2271                          l_loop_start := 1;
2272                          l_loop_stop := 5;
2273                  end if;
2274  
2275                  htp.tableOpen( cborder=>'border', cattributes=>'width="100%"' );
2276                  htp.tableCaption( to_nchar( l_start, N'Month YYYY' ) );
2277  
2278                  for i in l_loop_start .. l_loop_stop loop
2279                      htp.tableHeader( cvalue => to_nchar( l_magic_date+i, N'Day' ), cattributes => l_width );
2280                  end loop;
2281                  htp.tableRowOpen;
2282                  loop
2283                          exit when to_nchar( l_magic_date, N'DY' ) = to_nchar(l_start, N'DY');
2284                          if ( not l_mf_only or not is_weekend(l_magic_date) ) then
2285                                  htp.tableData( htf.br );
2286                          end if;
2287                          l_magic_date := l_magic_date+1;
2288                  end loop;
2289  
2290                  loop
2291                          exit when ( to_nchar( p_start, N'MON') <> to_nchar( l_start, N'MON') );
2292  
2293                          if ( not l_mf_only or not is_weekend(l_start) ) then
2294                                  htp.p( '<td valign="TOP" '  || l_width || '>' );
2295                                  htp.p( htf.italic(htf.bold(to_nchar(l_start,N'DD'))) || htf.br );
2296                          end if;
2297  
2298                          while(l_cnt < p_cnt AND to_nchar(l_start) = to_nchar(p_dates(l_cnt)) )
2299                          loop
2300                                  if ( not l_mf_only or not is_weekend(l_start) ) then
2301                                          htp.p( '&#187;' );
2302                                          if (nchar_path) then
2303                                             if ( p_nlink(l_cnt) is NULL ) then
2304                                                htp.p( p_ntext(l_cnt) );
2305                                             else
2306                                                htp.anchor( p_nlink(l_cnt), p_ntext(l_cnt) );
2307                                             end if;
2308                                          else
2309                                             if ( p_link(l_cnt) is NULL ) then
2310                                                htp.p( p_text(l_cnt) );
2311                                             else
2312                                                htp.anchor( p_link(l_cnt), p_text(l_cnt) );
2313                                             end if;
2314                                          end if;
2315                                          htp.br;
2316                                  end if;
2317                                  l_cnt := l_cnt+1;
2318                          end loop;
2319                          if ( not l_mf_only or not is_weekend( l_start ) ) then
2320                                  htp.p( '</td>' );
2321                          end if;
2322  
2323                          if ( to_char(l_start,'DY','NLS_DATE_LANGUAGE=AMERICAN') = 'SAT' ) then
2324                                  htp.tableRowClose;
2325                                  if ( l_start <> last_day(l_start) ) then
2326                                          htp.tableRowOpen;
2327                                  end if;
2328                          end if;
2329                          l_start := l_start+1;
2330                  end loop;
2331                  if ( to_char(l_start ,'DY','NLS_DATE_LANGUAGE=AMERICAN') <> 'SUN' ) then
2332                          loop
2333                                  if ( not l_mf_only or not is_weekend( l_start ) ) then
2334                                          htp.tableData( htf.br );
2335                                  end if;
2336                                  exit when ( to_char(l_start,'DY','NLS_DATE_LANGUAGE=AMERICAN') = 'SAT' );
2337                                  l_start := l_start+1;
2338                          end loop;
2339                          htp.tableRowClose;
2340                  end if;
2341                  htp.tableClose;
2342  
2343          end show_internal;
2344  
2345  
2346       /******************************************************************/
2347      /* Procedure calendarprint                                       */
2348     /******************************************************************/
2349  
2350      procedure calendarprint( p_query in varchar2, p_mf_only in varchar2 default 'N' )
2351      is
2352          l_cursor integer default owa_util.bind_variables( p_query );
2353      begin
2354          calendarprint( l_cursor, p_mf_only );
2355          dbms_sql.close_cursor(l_cursor);
2356      exception
2357         when others then
2358              if dbms_sql.is_open(l_cursor) then
2359                 dbms_sql.close_cursor(l_cursor);
2360              end if;
2361              raise;
2362      end calendarprint;
2363  
2364  
2365          procedure calendarprint( p_cursor in integer, p_mf_only in varchar2 default 'N' )
2366          is
2367                  l_dates         dateArray;
2368                  l_text          vcArray;
2369                  l_ntext         ncArray;
2370                  l_link          vcArray;
2371                  l_nlink         ncArray;
2372                  l_cnt           number;
2373                  l_yyyymon       varchar2(7) default NULL;
2374                  l_curr_date     date;
2375                  csform          number;
2376                  rec_tab         dbms_sql.desc_tab2;
2377                  l_colcnt        number;
2378          begin
2379                  l_dates(0) := NULL;
2380                  l_text(0)  := NULL;
2381                  l_link(0)  := NULL;
2382                  l_ntext(0) := NULL;
2383                  l_nlink(0) := NULL;
2384                  l_colcnt:= 3;
2385  
2386                  dbms_sql.describe_columns2(p_cursor, l_colcnt, rec_tab);
2387                  dbms_sql.define_column( p_cursor, 1, l_dates(0) );
2388                  if (rec_tab(2).col_charsetform = 2)
2389                  then
2390                     csform := 2;
2391                     dbms_sql.define_column( p_cursor, 2, l_ntext(0), 2000 );
2392                     dbms_sql.define_column( p_cursor, 3, l_nlink(0), 2000 );
2393                  else
2394                     dbms_sql.define_column( p_cursor, 2, l_text(0), 2000 );
2395                     dbms_sql.define_column( p_cursor, 3, l_link(0), 2000 );
2396                     csform := 1;
2397                  end if;
2398                  l_cnt := dbms_sql.execute( p_cursor );
2399                  l_cnt := 0;
2400  
2401                  loop
2402                          exit when ( dbms_sql.fetch_rows( p_cursor ) <= 0 );
2403                          dbms_sql.column_value( p_cursor, 1, l_curr_date );
2404                          if (l_yyyymon is null)
2405                          then
2406                             l_yyyymon := to_char(l_curr_date, 'YYYYMON', 'NLS_DATE_LANGUAGE = AMERICAN');
2407                          end if;
2408  
2409                          if (to_char(l_curr_date, 'YYYYMON', 'NLS_DATE_LANGUAGE = AMERICAN') <> l_yyyymon)
2410                          then
2411                             show_internal( p_mf_only, l_dates(0), l_dates,
2412                                  l_text, l_link, l_cnt, l_ntext, l_nlink,
2413                                  (csform = 2) );
2414                             l_cnt := 0;
2415                             l_yyyymon := to_char(l_curr_date, 'YYYYMON', 'NLS_DATE_LANGUAGE = AMERICAN');
2416                          end if;
2417                          l_dates(l_cnt) := l_curr_date;
2418                          if (csform = 2) then
2419                             dbms_sql.column_value( p_cursor, 2, l_ntext(l_cnt) );
2420                             dbms_sql.column_value( p_cursor, 3, l_nlink(l_cnt) );
2421                          else
2422                             dbms_sql.column_value( p_cursor, 2, l_text(l_cnt) );
2423                             dbms_sql.column_value( p_cursor, 3, l_link(l_cnt) );
2424                          end if;
2425                          l_cnt := l_cnt+1;
2426                  end loop;
2427  
2428                  if (l_cnt > 0)
2429                  then
2430                    show_internal(p_mf_only, l_dates(0), l_dates, l_text,
2431                                  l_link, l_cnt, l_ntext, l_nlink, (csform = 2));
2432                  end if;
2433          end calendarprint;
2434  
2435       /**********************************************************************/
2436      /* Function to obtain the procedure being invoked by the PL/SQL Agent */
2437     /**********************************************************************/
2438     function get_procedure return varchar2 is
2439        path_info  varchar2(255);
2440        procname   varchar2(255);
2441        procowner  varchar2(255);
2442     begin
2443        /* get PATH_INFO without the first '/' */
2444        path_info := get_cgi_env('PATH_INFO');
2445        --if (path_info like '/%') then
2446        --need to check if this is a flexible parameter so that we can take out
2447        if (substr(path_info, 1, 2) = '/!')
2448        then
2449           path_info := substr(path_info, 3);
2450        else
2451          if (substr(path_info, 1, 1) = '/')
2452          then
2453             path_info := substr(path_info, 2);
2454          end if;
2455        end if;
2456  
2457        /* resolve name and compose the real package.procedure */
2458        name_resolve(path_info, procowner, procname);
2459        return(procname);
2460     end;
2461  
2462       /**********************************************************************/
2463      /* Function to obtain the version number                              */
2464     /**********************************************************************/
2465     function get_version return varchar2 is
2466     begin
2467        return(owa_version);
2468     end;
2469  
2470       /**********************************************************************/
2471      /* Procedure to print the version number                              */
2472     /**********************************************************************/
2473     procedure print_version is
2474     begin
2475        htp.print('Current OWA toolkit version is '||owa_version);
2476     end;
2477  end;
2478  /

Package body created.

SQL> Show errors
No errors.
SQL> @@privtext.sql
SQL> rem
SQL> rem
SQL> Rem  Copyright (c) 1995, 1996, 1997 by Oracle Corporation. All rights reserved.
SQL> Rem    NAME
SQL> Rem      privtext.sql
SQL> Rem    DESCRIPTION
SQL> Rem      This file contains one package:
SQL> Rem         owa_text - Utitility procedures/functions for manipulating
SQL> Rem                       large amounts of text.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     mbookman   11/29/95 -  Creation
SQL> 
SQL> create or replace package body OWA_TEXT is
  2  
  3     NL_CHAR constant varchar2(1) := '
  4  ';
  5  
  6     function new_multi return multi_line
  7        is
  8       new multi_line;
  9     begin
 10        new.num_rows := 0;
 11        new.partial_row := FALSE;
 12  
 13        return new;
 14     end;
 15  
 16     procedure new_multi(mline out multi_line)
 17        is
 18     begin
 19        mline := new_multi;
 20     end;
 21  
 22     procedure stream2multi(stream in varchar2, mline out multi_line)
 23      is
 24        temp_multi multi_line;
 25     begin
 26        /* Initialize the structure */
 27        temp_multi := new_multi;
 28  
 29        if (stream is not null)
 30        then
 31           /* Add the new stream */
 32           add2multi(stream, temp_multi, FALSE);
 33        end if;
 34  
 35        mline := temp_multi;
 36     end;
 37  
 38     procedure add2multi(stream   in     varchar2,
 39                         mline    in out multi_line,
 40                         continue in     boolean DEFAULT TRUE)
 41      is
 42        row_start integer;
 43        row_end   integer;
 44  
 45        prev_partial boolean;
 46     begin
 47        /* Save the previous value of partial_row */
 48        prev_partial := mline.partial_row;
 49  
 50        /* Get the boundaries of the first row to add */
 51        row_start := 1;
 52        row_end := instr(stream, NL_CHAR, row_start);
 53        mline.partial_row := (row_end = 0);
 54  
 55        /* If the previous last row was incomplete, */
 56        /* handle first new as a special case       */
 57        if ( (prev_partial = TRUE) AND (continue = TRUE) )
 58        then
 59           /* Check the length to avoid "PL/SQL numeric or value error" */
 60           if ( (length(mline.rows(mline.num_rows)) + (row_end - row_start))
 61                 > 32767 ) -- MAX_VC_LEN
 62           then
 63              raise_application_error(-20000, 'Cannot create row larger than 32767 bytes');
 64           end if;
 65  
 66           /* Length is okay, so append it. */
 67           if (mline.partial_row = TRUE)
 68           then
 69              mline.rows(mline.num_rows) := mline.rows(mline.num_rows) ||
 70                                                       substr(stream, row_start);
 71              /* We're done, just exit */
 72              return;
 73           else
 74              mline.rows(mline.num_rows) := mline.rows(mline.num_rows) ||
 75                                  substr(stream, row_start, row_end - row_start);
 76  
 77              /* Get the next chunk */
 78              row_start := row_end + 1;
 79              row_end := instr(stream, NL_CHAR, row_start);
 80              if ( (row_end = 0) AND (row_start <= length(stream)) )
 81              then
 82                 mline.partial_row := TRUE;
 83              end if;
 84           end if;
 85        end if;
 86  
 87        /* Loop through pulling out the lines */
 88        while ( (row_end >= row_start) AND (mline.partial_row = FALSE) )
 89        loop
 90           mline.num_rows := mline.num_rows + 1;
 91           mline.rows(mline.num_rows) := substr(stream, row_start,
 92                                                row_end - row_start);
 93           row_start := row_end + 1;
 94           row_end := instr(stream, NL_CHAR, row_start);
 95           if ( (row_end = 0) AND (row_start <= length(stream)) )
 96           then
 97              mline.partial_row := TRUE;
 98           end if;
 99        end loop;
100  
101        /* Get the last line if it is partial */
102        if (mline.partial_row = TRUE)
103        then
104           mline.num_rows := mline.num_rows + 1;
105           mline.rows(mline.num_rows) := substr(stream, row_start);
106        end if;
107     end;
108  
109     procedure print_multi(mline in multi_line)
110        is
111     begin
112        for i in 1..mline.num_rows
113        loop
114           htp.print(mline.rows(i));
115        end loop;
116     end;
117  
118     function  new_row_list return row_list
119         is
120        new row_list;
121     begin
122        new.num_rows := 0;
123        return new;
124     end;
125  
126     procedure new_row_list(rlist out row_list)
127        is
128     begin
129        rlist := new_row_list;
130     end;
131  
132     procedure print_row_list(rlist in row_list)
133        is
134     begin
135        for i in 1..rlist.num_rows
136        loop
137           htp.print(rlist.rows(i));
138        end loop;
139     end;
140  
141     /* Just a debugging routine */
142     procedure print_debug(mline in multi_line)
143        is
144     begin
145        htp.print(mline.num_rows);
146        if mline.partial_row
147           then htp.print('PARTIAL ROW');
148           else htp.print('NO PARTIAL ROW');
149        end if;
150  
151        for i in 1..mline.num_rows
152        loop
153           htp.print(mline.rows(i));
154        end loop;
155     end;
156  end;
157  /

Package body created.

SQL> show errors
No errors.
SQL> @@privpat.sql
SQL> rem
SQL> rem
SQL> Rem  Copyright (c) 1995, 1996, 1997 by Oracle Corporation. All rights reserved.
SQL> Rem    NAME
SQL> Rem      privpat.sql
SQL> Rem    DESCRIPTION
SQL> Rem      This file contains one package:
SQL> Rem         owa_pattern - Utitility procedures/functions for matching
SQL> Rem                       and changing values in text strings.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This packages is dependent on the package OWA_TEXT.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     pkapasi    09/01/00 -  Fix bug# 1395850
SQL> Rem     rdasarat   03/04/98 -  Fix bug# 611104
SQL> Rem     mpal       03/19/97 -  Fix bug# 466482 - changed char(1) to varchar2(5)
SQL> Rem                                              5 is chosen because the max number of
SQL> Rem                                              bytes per Oracle's NLS charset is 5
SQL> Rem     mbookman   11/29/95 -  Creation
SQL> 
SQL> create or replace package body OWA_PATTERN is
  2  
  3     subtype substitution is pattern;
  4  
  5     -- MAX_VC_LEN constant number := 32767;
  6     -- PL/SQL doesn't allow one to use constant values in variable declarations,
  7     -- like 'vc varchar2(MAX_VC_LEN), so this is really just here as a reminder
  8     -- to always use value(MAX_VC_LEN) for declarations.
  9  
 10     BOL         constant varchar2(1) := '^';
 11     EOL         constant varchar2(1) := '$';
 12     CCL         constant varchar2(1) := '[';
 13     CCLEND      constant varchar2(1) := ']';
 14     QUANT       constant varchar2(1) := '{';
 15     QUANTEND    constant varchar2(1) := '}';
 16     BR          constant varchar2(1) := '(';
 17     BREND       constant varchar2(1) := ')';
 18     ANY_CHAR    constant varchar2(1) := '.';
 19     ESCAPE      constant varchar2(1) := '\';
 20     DASH        constant varchar2(1) := '-';
 21     NOT_CHAR    constant varchar2(1) := '^';
 22     CLOSURE     constant varchar2(1) := '*';
 23     ONE_OR_MORE constant varchar2(1) := '+';
 24     ZERO_OR_ONE constant varchar2(1) := '?';
 25  
 26     AMP       constant varchar2(1) := '&';
 27  
 28     /* The following line should be broken to represent a NEWLINE */
 29     NEWLINE constant varchar2(1) := '
 30  ';
 31     /* The following character is a true "tab" */
 32     TAB     constant varchar2(1) := '    ';
 33     SPACE   constant varchar2(1) := ' ';
 34  
 35     NCCL      constant varchar2(4) := 'NCCL';
 36     CHARCHAR  constant varchar2(4) := 'CHAR';
 37     DITTO     constant varchar2(4) := 'DTTO';
 38     BREF      constant varchar2(4) := 'BREF';
 39     EOP       constant varchar2(4) := 'EOP';
 40  
 41     CLOSIZE constant integer := 6;
 42     BRSIZE  constant integer := 4;
 43  
 44     DIGITS constant VARCHAR2(10) := '0123456789';
 45     LOWLET constant VARCHAR2(26) := 'abcdefghijklmnopqrstuvwxyz';
 46     UPPLET constant VARCHAR2(26) := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
 47     UNDERBAR constant VARCHAR2(1) := '_';
 48  
 49     WORD_CHARS  constant VARCHAR2(63) := DIGITS||LOWLET||UNDERBAR||UPPLET;
 50     SPACE_CHARS constant VARCHAR2(3)  := SPACE||TAB||NEWLINE;
 51  
 52     DIG_ESCAPE_CHAR       constant varchar2(1) := 'd'; -- [0-9]
 53     NON_DIG_ESCAPE_CHAR   constant varchar2(1) := 'D'; -- [^0-9]
 54     WORD_ESCAPE_CHAR      constant varchar2(1) := 'w'; -- [0-9a-z_A-Z]
 55     NON_WORD_ESCAPE_CHAR  constant varchar2(1) := 'W'; -- [^0-9a-z_A-Z]
 56     SPACE_ESCAPE_CHAR     constant varchar2(1) := 's'; -- [ \t\n]
 57     NON_SPACE_ESCAPE_CHAR constant varchar2(1) := 'S'; -- [^ \t\n]
 58     BOUND_ESCAPE_CHAR     constant varchar2(1) := 'b';
 59     NON_BOUND_ESCAPE_CHAR constant varchar2(1) := 'B';
 60  
 61     DIG_ESCAPE       constant varchar2(2) := ESCAPE||DIG_ESCAPE_CHAR;
 62     NON_DIG_ESCAPE   constant varchar2(2) := ESCAPE||NON_DIG_ESCAPE_CHAR;
 63     WORD_ESCAPE      constant varchar2(2) := ESCAPE||WORD_ESCAPE_CHAR;
 64     NON_WORD_ESCAPE  constant varchar2(2) := ESCAPE||NON_WORD_ESCAPE_CHAR;
 65     SPACE_ESCAPE     constant varchar2(2) := ESCAPE||SPACE_ESCAPE_CHAR;
 66     NON_SPACE_ESCAPE constant varchar2(2) := ESCAPE||NON_SPACE_ESCAPE_CHAR;
 67     BOUND_ESCAPE     constant varchar2(2) := ESCAPE||BOUND_ESCAPE_CHAR;
 68     NON_BOUND_ESCAPE constant varchar2(2) := ESCAPE||NON_BOUND_ESCAPE_CHAR;
 69  
 70     COUNT_IND  constant integer := 1;
 71     PREVCL_IND constant integer := 2;
 72     START_IND  constant integer := 3;
 73     MIN_IND    constant integer := 4;
 74     MAX_IND    constant integer := 5;
 75  
 76     PREVBR_IND  constant integer := 1;
 77     LOC_IND     constant integer := 2;
 78     BRNO_IND    constant integer := 3;
 79     OPENBR_IND  constant integer := 3;
 80  
 81     in_b boolean;
 82  
 83     function ind(str in varchar2, i in integer) return varchar2
 84        is
 85     begin
 86        return substr(str,i,1);
 87     end;
 88  
 89     function line_len(line in varchar2) return integer
 90        is
 91     begin
 92        if (line is null)
 93        then
 94           return 1;
 95        else
 96           return length(line);
 97        end if;
 98     end;
 99  
100     function get_int(arg  in     varchar2,
101                      loc  in out integer,
102                      digs in     varchar2 DEFAULT DIGITS) return integer is
103        start_loc integer;
104     begin
105        start_loc := loc;
106  
107        while (instr(digs, ind(arg,loc)) != 0)
108        loop
109           loc := loc + 1;
110        end loop;
111  
112        return substr(arg, start_loc, loc-start_loc);
113     end;
114  
115     function base_convert(str in varchar2, base in integer) return integer
116       is
117        acc integer;
118        len integer;
119     begin
120        len := length(str);
121        if (len is NULL)
122        then
123           return NULL;
124        end if;
125  
126        acc := 0;
127        for i in 1..len
128        loop
129           if (instr('abcdefABCDEF', ind(str,i)) != 0)
130           then
131              acc := acc*base + ascii(convert(lower(ind(str,i)), 'US7ASCII')) - 87;
132           else
133              acc := acc*base + ind(str,i);
134           end if;
135        end loop;
136  
137        return acc;
138     end;
139  
140     procedure addpat(ch in varchar2, pat in out pattern, j in out integer)
141        is
142     begin
143        pat(j) := ch;
144        j := j + 1;
145     end;
146  
147     function patsize(pat in pattern, n in integer) return integer is
148     begin
149        if (pat(n) = CHARCHAR)
150        then return 2;
151        end if;
152        if (pat(n) in (BOL, EOL, ANY_CHAR,
153                       DIG_ESCAPE, NON_DIG_ESCAPE,
154                       WORD_ESCAPE, NON_WORD_ESCAPE,
155                       SPACE_ESCAPE, NON_SPACE_ESCAPE,
156                       BOUND_ESCAPE, NON_BOUND_ESCAPE))
157        then return 1;
158        end if;
159        if (pat(n) in (CCL, NCCL))
160        then return pat(n+1) + 2;
161        end if;
162        if (pat(n) = CLOSURE)
163        then return CLOSIZE;
164        end if;
165        if (pat(n) in (BR, BREND))
166        then return BRSIZE;
167        end if;
168  
169        raise_application_error(-20002,'in patsize: shouldn''t happen');
170     end;
171  
172     procedure copypat(pat in out pattern,
173                       j   in out integer,
174                       loc in     integer) is
175        pat_size integer;
176        k    integer;
177     begin
178        pat_size := patsize(pat,loc);
179        for k in loc..loc+pat_size-1
180        loop
181           addpat(pat(k), pat, j);
182        end loop;
183     end;
184  
185     function esc(arg in varchar2, i in out integer) return varchar2
186        is
187        NL_ESCAPE  constant varchar2(1) := 'n';
188        TAB_ESCAPE constant varchar2(1) := 't';
189  
190        arg_i varchar2(5); -- MAX NO OF BYTES FOR NLS CHARSET
191     begin
192        arg_i := ind(arg,i);
193        if (arg_i != ESCAPE)
194        then
195           return arg_i;
196        end if;
197  
198        if (i = length(arg))
199        then
200           return arg_i;
201        end if;
202  
203        i := i+1;
204        arg_i := ind(arg,i);
205        if (arg_i = NL_ESCAPE)
206        then
207           return NEWLINE;
208        end if;
209  
210        if (arg_i = TAB_ESCAPE)
211        then
212           return TAB;
213        end if;
214  
215        return arg_i;
216     end;
217  
218     procedure dodash(valid_chars in varchar2,
219                      arg         in varchar2,
220                      i           in out integer,
221                      pat         in out pattern,
222                      j           in out integer) is
223        limit integer;
224        k     integer;
225     begin
226        i := i + 1;
227        j := j - 1;
228  
229        limit := instr(valid_chars, esc(arg,i));
230        k := instr(valid_chars, pat(j));
231        while (k <= limit)
232        loop
233           addpat(ind(valid_chars,k), pat, j);
234           k := k+1;
235        end loop;
236     end;
237  
238     procedure filset(delim in     varchar2,
239                      arg   in     varchar2,
240                      i     in out integer,
241                      pat   in out pattern,
242                      j     in out integer) is
243        arglen integer;
244        ch     varchar2(5); -- MAX NO OF BYTES FOR NLS CHARSET
245     begin
246        arglen := length(arg);
247  
248        ch := ind(arg,i);
249        while (ch != delim) AND (i <= arglen)
250        loop
251           if (ch = ESCAPE)
252           then
253              addpat(esc(arg,i), pat,j);
254           else if (ch != DASH)
255           then
256              addpat(ch, pat, j);
257           else if (j <= 1) OR (i+1 >= arglen)
258           then
259              addpat(DASH, pat, j);
260           else if (instr(DIGITS,pat(j-1)) > 0)
261           then
262              dodash(DIGITS, arg, i, pat, j);
263           else if (instr(LOWLET, pat(j-1)) > 0)
264           then
265              dodash(LOWLET, arg, i, pat, j);
266           else if (instr(UPPLET, pat(j-1)) > 0)
267           then
268              dodash(UPPLET, arg, i, pat, j);
269           else
270              addpat(DASH, pat, j);
271           end if;
272           end if;
273           end if;
274           end if;
275           end if;
276           end if;
277  
278           i := i + 1;
279           ch := ind(arg,i);
280        end loop;
281     end;
282  
283     procedure getccl(arg in     varchar2,
284                      i   in out integer,
285                      pat in out pattern,
286                      j   in out integer) is
287        jstart integer;
288     begin
289        i := i + 1; -- Skip over the "["
290  
291        if (ind(arg,i) = NOT_CHAR)
292        then
293           addpat(NCCL, pat, j);
294           i := i + 1;
295        else
296           addpat(CCL, pat, j);
297        end if;
298  
299        jstart := j;
300        addpat(0, pat, j);
301        filset(CCLEND, arg, i, pat, j);
302        pat(jstart) := j - jstart - 1;
303        if (ind(arg,i) != CCLEND)
304        then
305           raise_application_error(-20000, 'Error in getccl');
306        end if;
307     end;
308  
309     -- stmin_max returns FALSE if a string beginning with a '{' is not
310     -- a proper {n,m} quantifier
311     function stmin_max(arg     in     varchar2,
312                        i       in out integer,
313                        min_val    out integer,
314                        max_val    out integer) return boolean
315       is
316        COMMA constant varchar2(1) := ',';
317  
318        arg_i varchar2(5); -- MAX NO OF BYTES FOR NLS CHARSET
319        i1    integer;
320        i2    integer;
321  
322        min_v integer;
323     begin
324        arg_i := ind(arg,i);
325        if (arg_i = CLOSURE)
326        then
327           min_val := 0;
328           max_val := NULL;
329        else if (arg_i = ONE_OR_MORE)
330        then
331           min_val := 1;
332           max_val := NULL;
333        else if (arg_i = ZERO_OR_ONE)
334        then
335           min_val := 0;
336           max_val := 1;
337        else if (arg_i = QUANT)
338        then
339           i1 := i + 1;
340           i2 := i1;
341  
342           while (instr(DIGITS, ind(arg,i2)) != 0)
343           loop
344              i2 := i2 + 1;
345           end loop;
346  
347           min_v := substr(arg, i1, i2-i1);
348           if (min_v is null) then return FALSE; end if;
349  
350           if (ind(arg,i2) = QUANTEND)
351           then
352              max_val := min_v;
353           else if (ind(arg,i2) = COMMA)
354           then
355              i1 := i2 + 1;
356              i2 := i1;
357  
358              while (instr(DIGITS, ind(arg,i2)) != 0)
359              loop
360                 i2 := i2 + 1;
361              end loop;
362  
363              if (ind(arg,i2) = QUANTEND)
364              then
365                 max_val := substr(arg, i1, i2-i1);
366              else
367                 return FALSE;
368              end if;
369           else
370              return FALSE;
371           end if;
372           end if;
373  
374           min_val := min_v;
375           i := i2;
376        else
377           raise_application_error(-20001, 'In stmin_max: illegal pattern');
378        end if;
379        end if;
380        end if;
381        end if;
382  
383        return TRUE;
384     end;
385  
386     function stclos(pat     in out pattern,
387                     j       in out integer,
388                     lastj   in out integer,
389                     lastcl  in     integer,
390                     min_val in     integer,
391                     max_val in     integer) return integer is
392        jp         integer;
393        jt         integer;
394        return_val integer;
395     begin
396        for jp in REVERSE lastj..j-1
397        loop
398           jt := jp + CLOSIZE;
399           addpat(pat(jp), pat, jt);
400        end loop;
401  
402        j := j + CLOSIZE;
403        return_val := lastj;
404  
405        addpat(CLOSURE, pat, lastj);
406        addpat(0,       pat, lastj);
407        addpat(lastcl,  pat, lastj);
408        addpat(0,       pat, lastj);
409        addpat(min_val, pat, lastj);
410        addpat(max_val, pat, lastj);
411  
412        return return_val;
413     end;
414  
415     procedure stbr(brtype  in     varchar2,
416                    pat     in out pattern,
417                    j       in out integer,
418                    lastbr  in out integer,
419                    var     in out integer) is
420        -- "var" will be either "brno" if we are on a "("
421        --   or it will be "openbr" if we are on a ")"
422     begin
423        addpat(brtype, pat, j);
424        addpat(lastbr, pat, j);
425        addpat(0,      pat, j);
426  
427        -- var is "brno" increment it before inserting the value.
428        if (brtype = BR)
429        then
430           var := var + 1;
431        end if;
432  
433        addpat(var, pat, j);
434        lastbr := j - BRSIZE;
435  
436        -- var is "openbr" - find the last unmatched openbr.
437        if (brtype = BREND)
438        then
439           var := pat(var + PREVBR_IND);
440  
441           while (var > 0) AND (pat(var) != BR)
442           loop
443              var := pat(var + OPENBR_IND);
444              var := pat(var + PREVBR_IND);
445           end loop;
446        end if;
447     end;
448  
449     /* ESCPAT is an enhancement to Kernighan's algorithms.  It allows */
450     /* more "short-cut" tags in the pattern, such as using '\d' for   */
451     /* [0-9].  This is to extend the algorithms to support more of    */
452     /* Perl's regular expression patterns.                            */
453     procedure escpat(arg in     varchar2,
454                      i   in out integer,
455                      pat in out pattern,
456                      j   in out integer) is
457        HEXCHAR   constant varchar2(1) := 'x';
458        HEXDIGITS constant varchar2(22) := DIGITS||'abcdefABCDEF';
459        OCTDIGITS constant varchar2(8) := '01234567';
460     begin
461        if (ind(arg,i) != ESCAPE)
462        then
463           addpat(CHARCHAR, pat, j);
464           addpat(ind(arg,i), pat, j);
465        else if (ind(arg,i+1) in (DIG_ESCAPE_CHAR, NON_DIG_ESCAPE_CHAR,
466                                  WORD_ESCAPE_CHAR, NON_WORD_ESCAPE_CHAR,
467                                  SPACE_ESCAPE_CHAR, NON_SPACE_ESCAPE_CHAR,
468                                  BOUND_ESCAPE_CHAR, NON_BOUND_ESCAPE_CHAR))
469        then
470           addpat(ESCAPE||ind(arg,i+1), pat, j);
471           i := i + 1;
472        else if ((ind(arg,i+1) = HEXCHAR) AND
473                 (instr(HEXDIGITS, ind(arg,i+2)) != 0) AND
474                 (instr(HEXDIGITS, ind(arg,i+3)) != 0)
475                )
476        then
477           addpat(CHARCHAR, pat, j);
478           addpat(chr(base_convert(substr(arg,i+2,2), 16)), pat, j);
479           i := i + 3;
480        else if ((instr(OCTDIGITS, ind(arg,i+1)) != 0) AND
481                 (instr(OCTDIGITS, ind(arg,i+2)) != 0)
482                )
483        then
484           if (instr(OCTDIGITS, ind(arg,i+3)) != 0)
485           then
486              addpat(CHARCHAR, pat, j);
487              addpat(chr(base_convert(substr(arg,i+1,3), 8)), pat, j);
488              i := i + 3;
489           else
490              addpat(CHARCHAR, pat, j);
491              addpat(chr(base_convert(substr(arg,i+1,2), 8)), pat, j);
492              i := i + 2;
493           end if;
494        else
495           addpat(CHARCHAR, pat, j);
496           addpat(esc(arg,i), pat, j);
497        end if;
498        end if;
499        end if;
500        end if;
501     end;
502  
503     /* GETPAT is a merge of the "getpat" and "makpat" functions which */
504     /* Kernighan details.  The additional level of abstraction which  */
505     /* makpat provides is unnecessary in this implementation.         */
506     procedure getpat(arg in varchar2, pat in out pattern) is
507        arglen integer;
508  
509        i integer;
510        j integer;
511  
512        lastcl integer;
513        lastj  integer;
514        lj     integer;
515  
516        lastbr integer;
517        openbr integer;
518        brno   integer;
519  
520        arg_i varchar2(5); -- MAX NO OF BYTES FOR NLS CHARSET
521  
522        min_val integer;
523        max_val integer;
524     begin
525        arglen := length(arg);
526  
527        j := 1;
528        lastj  := 1;
529        lastcl := 0;
530        lastbr := 0;
531        openbr := 0;
532        brno   := 0;
533  
534        i := 1;
535        while (i <= arglen)
536        loop
537           lj := j;
538  
539           arg_i := ind(arg,i);
540           if (arg_i = ANY_CHAR)
541           then
542              addpat(ANY_CHAR, pat, j);
543           else if (arg_i = BOL) AND (i = 1)
544           then
545              addpat(BOL, pat, j);
546           else if (arg_i = EOL) AND (i = arglen)
547           then
548              addpat(EOL, pat, j);
549           else if (arg_i = CCL)
550           then
551              getccl(arg, i, pat, j);
552           else if (arg_i in (CLOSURE, ZERO_OR_ONE,
553                              ONE_OR_MORE, QUANT)) AND (i > 1)
554           then
555              lj := lastj;
556              if (pat(lj) NOT in (BOL, EOL, CLOSURE, ZERO_OR_ONE,
557                                            ONE_OR_MORE, QUANT))
558              then
559                 if (stmin_max(arg, i, min_val, max_val))
560                 then
561                    lastcl := stclos(pat, j, lastj, lastcl, min_val, max_val);
562                 else
563                    escpat(arg, i, pat, j);
564                 end if;
565              else
566                 raise_application_error(-20000,arg||': nested *?+ in regular expression');
567              end if;
568           else if (arg_i = BR)
569           then
570              openbr := j;
571              stbr(BR, pat, j, lastbr, brno);
572           else if (arg_i = BREND)
573           then
574              if (openbr = 0)
575              then
576                 raise_application_error(-20000,arg||': unmatched () in regular expression');
577              end if;
578  
579              stbr(BREND, pat, j, lastbr, openbr);
580           else
581              escpat(arg, i, pat, j);
582           end if;
583           end if;
584           end if;
585           end if;
586           end if;
587           end if;
588           end if;
589  
590           lastj := lj;
591           i := i+1;
592        end loop;
593  
594        if (openbr != 0)
595        then
596           raise_application_error(-20000,arg||': unmatched () in regular expression');
597        end if;
598  
599        addpat(EOP, pat, j);
600     end;
601  
602     procedure printpat(pat in pattern) is
603        i integer;
604     begin
605        i := 1;
606        while pat(i) != EOP
607        loop
608           dbms_output.put_line('pat('||i||') = '||pat(i));
609           i := i+1;
610        end loop;
611     end;
612  
613     /* LOCATE - Determine if character 'ch' is in the character class */
614     /*          found at pat(offset).                                 */
615     function locate(ch in varchar2, pat    in pattern,
616                                     offset in integer) return boolean is
617     begin
618        -- Fix 611104
619        --   pat(offset) has #of chars in character class
620        for i in REVERSE (offset + 1)..offset+pat(offset)
621        loop
622           if (ch = pat(i))
623           then
624              return TRUE;
625           end if;
626        end loop;
627  
628        return FALSE;
629     end;
630  
631     function is_word_char(ch in varchar2) return boolean
632       is
633     begin
634        return (instr (DIGITS||LOWLET||'_'||UPPLET, ch) != 0);
635     end;
636  
637     function omatch(line  in     varchar2,
638                     i     in out integer,
639                     pat   in     pattern,
640                     j     in     integer,
641                     flags in     varchar2 DEFAULT NULL) return boolean is
642        bump   integer;
643        line_i varchar2(5); -- MAX NO OF BYTES FOR NLS CHARSET
644        pat_j  varchar2(4);
645  
646        save_i integer;
647     begin
648        bump := -1;
649        line_i := ind(line,i);
650        pat_j  := pat(j);
651  
652        if (pat_j = CHARCHAR)
653        then
654           /* Here is a simple extension to add case-insensitive searches. */
655           /* This is the easiest place to put this, although it may not   */
656           /* be the most efficient location for it.                       */
657           if /* (flags is not null) AND */ (instr(flags,'i') != 0)
658           then
659              if (lower(line_i) = lower(pat(j+1)))
660              then
661                 bump := 1;
662                 in_b := FALSE;
663              end if;
664           else
665              if (line_i = pat(j+1))
666              then
667                 bump := 1;
668                 in_b := FALSE;
669              end if;
670           end if;
671        else if (pat_j = BOL)
672        then
673           if ( (i = 1) OR (ind(line,i-1) = NEWLINE) )
674           then
675              bump := 0;
676              in_b := FALSE;
677           end if;
678        else if (pat_j = ANY_CHAR)
679        then
680           if (line_i != NEWLINE)
681           then
682              bump := 1;
683              in_b := FALSE;
684           end if;
685        else if (pat_j = EOL)
686        then
687           if (line_i = NEWLINE) OR (i > length(line))
688           then
689              bump := 0;
690              in_b := FALSE;
691           end if;
692        else if (pat_j = BOUND_ESCAPE)
693        then
694           if ( i = 1 ) OR (i > length(line))
695           then
696              bump := 0;
697              in_b := TRUE;
698           else
699           if ( ( is_word_char(line_i) AND
700                  NOT is_word_char(ind(line,i-1)) )
701              OR
702                ( is_word_char(ind(line,i-1)) AND
703                  NOT is_word_char(line_i) ) )
704           then
705              bump := 0;
706              in_b := TRUE;
707           end if;
708           end if;
709        else if (pat_j = DIG_ESCAPE)
710        then
711           if (instr(DIGITS, line_i) != 0)
712           then
713              bump := 1;
714              in_b := FALSE;
715           end if;
716        else if (pat_j = NON_DIG_ESCAPE)
717        then
718           if (instr(DIGITS, line_i) = 0)
719           then
720              bump := 1;
721              in_b := FALSE;
722           end if;
723        else if (pat_j = WORD_ESCAPE)
724        then
725           if (instr(WORD_CHARS, line_i) != 0)
726           then
727              bump := 1;
728              in_b := FALSE;
729           end if;
730        else if (pat_j = NON_WORD_ESCAPE)
731        then
732           if (instr(WORD_CHARS, line_i) = 0)
733           then
734              bump := 1;
735              in_b := FALSE;
736           end if;
737        else if (pat_j = SPACE_ESCAPE)
738        then
739           if (instr(SPACE_CHARS, line_i) != 0)
740           then
741              bump := 1;
742              in_b := FALSE;
743           end if;
744        else if (pat_j = NON_SPACE_ESCAPE)
745        then
746           if (instr(SPACE_CHARS, line_i) = 0)
747           then
748              bump := 1;
749              in_b := FALSE;
750           end if;
751        else if (pat_j = CCL)
752        then
753           if (locate(line_i, pat, j+1) = TRUE)
754           then
755              bump := 1;
756              in_b := FALSE;
757           end if;
758        else if (pat_j = NCCL)
759        then
760           if (line_i != NEWLINE) AND (locate(line_i, pat, j+1) = FALSE)
761           then
762              bump :=1;
763              in_b := FALSE;
764           end if;
765        else
766           raise_application_error(-20001,'In omatch: illegal pattern found');
767        end if;
768        end if;
769        end if;
770        end if;
771        end if;
772        end if;
773        end if;
774        end if;
775        end if;
776        end if;
777        end if;
778        end if;
779        end if;
780  
781        if (bump >= 0)
782        then
783           i := i + bump;
784           return TRUE;
785        else
786           /* We just validated a word-boundary match the last time through. */
787           /* Here we chew up as much whitespace as is necessary.            */
788           if (in_b)
789           then
790              if (NOT is_word_char(ind(line,i)))
791              then
792                 save_i := i;
793                 i := i + 1;
794                 if (omatch(line, i, pat, j, flags) = TRUE)
795                 then
796                    in_b := FALSE;
797                    return TRUE;
798                 else
799                    i := save_i;
800                    in_b := FALSE;
801                    return FALSE;
802                 end if;
803              end if;
804              in_b := FALSE;
805           end if;
806        end if;
807  
808        return FALSE;
809     end;
810  
811     procedure clo_backoff(pat    in out pattern,
812                           j      in out integer,
813                           stack  in out integer,
814                           offset in out integer) is
815     begin
816        while (stack > 0) AND
817              (pat(stack+COUNT_IND) <= pat(stack+MIN_IND))
818        loop
819           stack := pat(stack + PREVCL_IND);
820        end loop;
821  
822        if (stack > 0)
823        then
824           pat(stack + COUNT_IND) := pat(stack + COUNT_IND) - 1;
825           j := stack + CLOSIZE;
826           offset := pat(stack + START_IND) + pat(stack + COUNT_IND);
827        end if;
828     end;
829  
830     procedure br_backoff(pat    in out pattern,
831                          j      in     integer,
832                          lastbr in out integer) is
833     begin
834        while (lastbr > j)
835        loop
836           pat(lastbr + LOC_IND) := 0;
837           lastbr := pat(lastbr + PREVBR_IND);
838        end loop;
839     end;
840  
841     function amatch(line     in     varchar2,
842                     from_loc in     integer,
843                     pat      in out pattern,
844                     backrefs    out owa_text.vc_arr,
845                     flags    in     varchar2 DEFAULT NULL) return integer is
846        i      integer;
847        j      integer;
848        offset integer;
849        stack  integer;
850  
851        openbr integer;
852        lastbr integer;
853     begin
854        lastbr := 0;
855        stack := 0;
856        offset := from_loc;
857  
858        j := 1;
859        while (pat(j) != EOP)
860        loop
861           if (pat(j) = CLOSURE)
862           then
863              stack := j;
864              j := j + CLOSIZE;
865  
866              i := offset;
867              if (pat(stack + MAX_IND) is NULL)
868              then
869                 while (i <= length(line)) AND
870                       (omatch(line, i, pat, j, flags) = TRUE)
871                 loop null;
872                 end loop;
873              else
874                 while (i <= length(line)) AND
875                       (i - offset < pat(stack + MAX_IND)) AND
876                       (omatch(line, i, pat, j, flags) = TRUE)
877                 loop null;
878                 end loop;
879              end if;
880  
881              -- Check if we matched enough values.  If not, then back off.
882              if ((i - offset) >= pat(stack + MIN_IND))
883              then
884                 pat(stack + COUNT_IND) := i - offset;
885                 pat(stack + START_IND) := offset;
886                 offset := i;
887              else
888                 j := stack;
889                 stack := pat(stack + PREVCL_IND);
890  
891                 clo_backoff(pat, j, stack, offset);
892                 br_backoff(pat, j, lastbr);
893                 if (stack <= 0) then return 0; end if;
894             end if;
895           else if (pat(j) in (BR, BREND))
896           then
897              pat(j + LOC_IND) := offset;
898              lastbr := j;
899           else if (omatch(line, offset, pat, j, flags) = FALSE)
900           then
901              clo_backoff(pat, j, stack, offset);
902              br_backoff(pat, j, lastbr);
903              if (stack <= 0) then return 0; end if;
904           end if;
905           end if;
906           end if;
907  
908           j := j + patsize(pat,j);
909        end loop;
910  
911        while (lastbr > 0)
912        loop
913           if (pat(lastbr) = BREND)
914           then
915              openbr := pat(lastbr + OPENBR_IND);
916  
917              backrefs(pat(openbr+BRNO_IND)) :=
918                 substr(line, to_number(pat(openbr+LOC_IND)),
919                              to_number(pat(lastbr+LOC_IND))
920                              - to_number(pat(openbr+LOC_IND)));
921           end if;
922  
923           lastbr := pat(lastbr+PREVBR_IND);
924        end loop;
925  
926        return offset;
927     end;
928  
929     function amatch(line     in     varchar2,
930                     from_loc in     integer,
931                     pat      in     varchar2,
932                     backrefs    out owa_text.vc_arr,
933                     flags    in     varchar2 DEFAULT NULL) return integer is
934        p pattern;
935     begin
936        getpat(pat, p);
937        return amatch(line, from_loc, p, backrefs, flags);
938     end;
939  
940     function amatch(line     in     varchar2,
941                     from_loc in     integer,
942                     pat      in out pattern,
943                     flags    in     varchar2 DEFAULT NULL) return integer is
944        backrefs owa_text.vc_arr;
945     begin
946        return amatch(line, from_loc, pat, backrefs, flags);
947     end;
948  
949     function amatch(line     in varchar2,
950                     from_loc in integer,
951                     pat      in varchar2,
952                     flags    in varchar2 DEFAULT NULL) return integer is
953        p pattern;
954     begin
955        getpat(pat, p);
956        return amatch(line, from_loc, p, flags);
957     end;
958  
959     function match(line     in     varchar2,
960                    pat      in out pattern,
961                    backrefs    out owa_text.vc_arr,
962                    flags    in     varchar2 DEFAULT NULL) return boolean is
963     begin
964        for i in 1..line_len(line)
965        loop
966           if (amatch(line, i, pat, backrefs, flags) > 0)
967           then return TRUE;
968           end if;
969        end loop;
970  
971        return FALSE;
972     end;
973  
974     function match(line     in     varchar2,
975                    pat      in     varchar2,
976                    backrefs    out owa_text.vc_arr,
977                    flags    in     varchar2 DEFAULT NULL) return boolean is
978        p pattern;
979     begin
980        getpat(pat, p);
981        return match(line, p, backrefs, flags);
982     end;
983  
984     function match(line  in     varchar2,
985                    pat   in out pattern,
986                    flags in     varchar2 DEFAULT NULL) return boolean is
987        backrefs owa_text.vc_arr;
988     begin
989        return match(line, pat, backrefs, flags);
990     end;
991  
992     function match(line  in varchar2,
993                    pat   in varchar2,
994                    flags in varchar2 DEFAULT NULL) return boolean is
995        p pattern;
996     begin
997        getpat(pat, p);
998        return match(line, p, flags);
999     end;
1000  
1001     function match(mline  in     owa_text.multi_line,
1002                    pat    in out pattern,
1003                    rlist     out owa_text.row_list,
1004                    flags  in     varchar2 DEFAULT NULL) return boolean is
1005        temp_rlist owa_text.row_list;
1006     begin
1007        temp_rlist := owa_text.new_row_list;
1008  
1009        for i in 1..mline.num_rows
1010        loop
1011           if match(mline.rows(i), pat, flags)
1012           then
1013              temp_rlist.num_rows := temp_rlist.num_rows + 1;
1014              temp_rlist.rows(temp_rlist.num_rows) := i;
1015           end if;
1016        end loop;
1017  
1018        rlist := temp_rlist;
1019  
1020        return temp_rlist.num_rows > 0;
1021     end;
1022  
1023     function match(mline in     owa_text.multi_line,
1024                    pat   in     varchar2,
1025                    rlist    out owa_text.row_list,
1026                    flags in     varchar2 DEFAULT NULL) return boolean is
1027        p pattern;
1028     begin
1029        getpat(pat,p);
1030        return match(mline, p, rlist, flags);
1031     end;
1032  
1033  
1034     procedure catsub(line     in     varchar2,
1035                      from_loc in     integer,
1036                      to_loc   in     integer,
1037                      sub      in     substitution,
1038                      backrefs in     owa_text.vc_arr,
1039                      new      in out varchar2) is
1040        i integer;
1041        j integer;
1042     begin
1043        i := 1;
1044        while (sub(i) != EOP)
1045        loop
1046           if (sub(i) = DITTO)
1047           then
1048              new := new||substr(line,from_loc,to_loc - from_loc);
1049           else if (sub(i) = BREF)
1050           then
1051              i := i + 1;
1052              new := new||backrefs(sub(i));
1053           else
1054              new := new||sub(i);
1055           end if;
1056           end if;
1057  
1058           i := i + 1;
1059        end loop;
1060     end;
1061  
1062     procedure escsub(arg in     varchar2,
1063                      i   in out integer,
1064                      sub in out substitution,
1065                      j   in out integer) is
1066     begin
1067        if (ind(arg,i) != ESCAPE)
1068        then
1069           addpat(ind(arg,i), sub, j);
1070        else if (instr(DIGITS, ind(arg,i+1)) != 0)
1071        then
1072           addpat(BREF, sub, j);
1073           i := i + 1;
1074           addpat(get_int(arg, i), sub, j);
1075           i := i - 1; -- get_int puts i up past the last digit.
1076        else
1077           addpat(esc(arg,i), sub, j);
1078        end if;
1079        end if;
1080     end;
1081  
1082     procedure getsub(arg in varchar2, sub out substitution)  is
1083        i integer;
1084        j integer;
1085        s substitution;
1086     begin
1087        j := 1;
1088        i := 1;
1089        while (i <= length(arg))
1090        loop
1091           if ind(arg,i) = AMP
1092           then
1093              addpat(DITTO, s, j);
1094           else
1095              escsub(arg, i, s, j);
1096           end if;
1097  
1098           i := i + 1;
1099        end loop;
1100  
1101        addpat(EOP, s, j);
1102        sub := s;
1103     end;
1104  
1105     function change(line     in out varchar2,
1106                     from_str in     varchar2,
1107                     to_str   in     varchar2,
1108                     flags    in     varchar2 DEFAULT NULL) return integer is
1109        p     pattern;
1110        s     substitution;
1111        i     integer;
1112        m     integer;
1113        lastm integer;
1114        new   varchar2(32767); -- MAX_VC_LEN
1115  
1116        backrefs owa_text.vc_arr;
1117  
1118        num_matches integer;
1119     begin
1120        getpat(from_str,p);
1121        getsub(to_str,s);
1122  
1123        num_matches := 0;
1124        lastm := 0;
1125        i := 1;
1126        while (i <= line_len(line))
1127        loop
1128           m := amatch(line, i , p, backrefs, flags);
1129           if (m > 0) AND (lastm != m)
1130           then
1131              num_matches := num_matches + 1;
1132              catsub(line, i, m, s, backrefs, new);
1133  
1134              /* New code make the default behavior to be change 1st match. */
1135              /* Enhancement to Kernighan's code.                           */
1136              if (flags IS NULL) OR (instr(flags,'g') = 0)
1137              then
1138                 new := new||substr(line,m);
1139                 exit;
1140              end if;
1141              /* End enhancement code */
1142  
1143              lastm := m;
1144           end if;
1145  
1146           if (m in (0,i))
1147           then
1148              new := new||ind(line,i);
1149              i := i + 1;
1150           else
1151              i := m;
1152           end if;
1153        end loop;
1154  
1155        line := new;
1156        return num_matches;
1157     end;
1158  
1159     procedure change(line     in out varchar2,
1160                      from_str in     varchar2,
1161                      to_str   in     varchar2,
1162                      flags    in     varchar2 DEFAULT NULL) is
1163        ignore integer;
1164     begin
1165        ignore := change(line, from_str, to_str, flags);
1166     end;
1167  
1168     function change(mline    in out owa_text.multi_line,
1169                     from_str in     varchar2,
1170                     to_str   in     varchar2,
1171                     flags    in     varchar2 DEFAULT NULL) return integer is
1172        num_matches integer;
1173     begin
1174        num_matches := 0;
1175  
1176        for i in 1..mline.num_rows
1177        loop
1178           num_matches := num_matches +
1179                            change(mline.rows(i), from_str, to_str, flags);
1180        end loop;
1181  
1182        return num_matches;
1183     end;
1184  
1185     procedure change(mline     in out owa_text.multi_line,
1186                      from_str in     varchar2,
1187                      to_str   in     varchar2,
1188                      flags    in     varchar2 DEFAULT NULL) is
1189        ignore integer;
1190     begin
1191        ignore := change(mline, from_str, to_str, flags);
1192     end;
1193  
1194  end;
1195  /

Package body created.

SQL> show errors
No errors.
SQL> @@privimg.sql
SQL> rem
SQL> rem
SQL> Rem  Copyright (c) 1995, 1996, 1997 by Oracle Corporation. All rights reserved.
SQL> Rem    NAME
SQL> Rem      privimg.sql
SQL> Rem    DESCRIPTION
SQL> Rem      This file contains one package:
SQL> Rem         owa_image - Utitility procedures/functions for handling image
SQL> Rem                     map (x,y) coordinates.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     mbookman   03/13/96 -  Add NULL_POINT
SQL> Rem     mbookman   12/14/95 -  Creation
SQL> 
SQL> create or replace package body OWA_IMAGE is
  2  
  3     function get_x(p in point) return integer is
  4     begin
  5        return(p(1));
  6     end;
  7  
  8     function get_y(p in point) return integer is
  9     begin
 10        return(p(2));
 11     end;
 12  
 13  /* Package initialization */
 14  begin
 15     NULL_POINT(1) := NULL;
 16     NULL_POINT(2) := NULL;
 17  end;
 18  /

Package body created.

SQL> show errors
No errors.
SQL> @@privcook.sql
SQL> Rem Copyright (c) 1995, 2014, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem   NAME
SQL> Rem     privcook.sql - Wrappers for passing HTTP_COOKIES using
SQL> Rem                    the Oracle Web Agent.
SQL> Rem   PURPOSE
SQL> Rem
SQL> Rem   NOTES
SQL> Rem
SQL> Rem   HISTORY
SQL> Rem     cvanes     07/09/12 -  Fix Bug#13803509 Expire cookie in Arabic
SQL> Rem     akatti     10/06/08 -  Fix bug#7433906 Add httponly support for cookie
SQL> Rem     mmuppago   03/21/06 -  Fix bug#4879467 to validate value of cookie
SQL> Rem     akatti     11/23/05 -  Fix bug#4722130 validate args of send
SQL> Rem     ehlee      10/16/01 -  Fix parsing problem for cookie (bug#1819121)
SQL> Rem     pkapasi    09/24/01 -  Fix bug#1423101
SQL> Rem     pkapasi    01/11/01 -  Fix bug#1580414
SQL> Rem     ehlee      10/11/00 -  Fix NLS bug in remove (bug#1455428)
SQL> Rem     rdasarat   01/21/98 -  Fix 607222
SQL> Rem     mpal       07/09/97 -  Implementing CUSTOM scheme
SQL> Rem     mpal       10/25/96 -  Fix bug #414830
SQL> Rem     mpal       10/03/96 -  Fix bug #355403
SQL> Rem     mbookman   02/06/96 -  Creation
SQL> Rem
SQL> 
SQL> create or replace package body OWA_COOKIE is
  2  
  3     cookie_names vc_arr;
  4     cookie_vals  vc_arr;
  5     cookie_num_vals integer;
  6  
  7     cookies_parsed boolean;
  8  
  9     /* Constant is set here instead of owachars to avoid invalid objects */
 10     SC_CHAR constant varchar2(10) := chr(59); /* SemiColon */
 11  
 12     function validate_cookie_val(
 13         param in varchar2
 14     ) return varchar2 is
 15         valid_param varchar2(32767);
 16     begin
 17         if (param is NULL)
 18         then
 19             return param;
 20         end if;
 21  
 22         valid_param := param;
 23         if instr(valid_param,(SC_CHAR)) > 0
 24         then
 25            valid_param := owa_util.validate_arg(
 26                           substr(valid_param,1,instr(valid_param,(SC_CHAR)) - 1));
 27         end if;
 28  
 29         return valid_param;
 30     end;
 31  
 32     procedure init is
 33     begin
 34        cookies_parsed := FALSE;
 35     end init;
 36  
 37     function IFNOTNULL(val1 in varchar2,
 38                        val2 in varchar2) return varchar2 is
 39     begin
 40        if (val1 is not null)
 41        then
 42           return val2;
 43        else
 44           return NULL;
 45        end if;
 46     end;
 47  
 48     procedure http_cookie2array(names    out vc_arr,
 49                                 vals     out vc_arr,
 50                                 num_vals out integer) is
 51        http_cookie varchar2(32767);
 52  
 53        start_loc  integer;
 54        end_loc    integer;
 55        equal_sign integer;
 56  
 57        val_counter integer;
 58     begin
 59        http_cookie := owa_util.get_cgi_env('HTTP_COOKIE');
 60  
 61        val_counter := 0;
 62  
 63        /* If the last character is a ';', trim it out */
 64        if (substr(http_cookie, -1) = ';')
 65        then
 66           http_cookie := substr(http_cookie, 1, length(http_cookie)-1);
 67        end if;
 68  
 69        if (http_cookie is not NULL)
 70        then
 71           start_loc := 1;
 72           end_loc := instr(http_cookie, ';', start_loc);
 73           while (end_loc != 0)
 74           loop
 75              val_counter := val_counter+1;
 76              equal_sign := instr(http_cookie, '=', start_loc);
 77  
 78              -- If the equal sign is beyond this cookie, set the value to null
 79              if (equal_sign = 0 or equal_sign > end_loc)
 80              then
 81                 names(val_counter) := ltrim(substr(http_cookie, start_loc,
 82                                                    end_loc - start_loc));
 83                 vals(val_counter) := null;
 84              else
 85                 names(val_counter) := ltrim(substr(http_cookie, start_loc,
 86                                                    equal_sign-start_loc));
 87                 vals(val_counter) := substr(http_cookie, equal_sign+1,
 88                                             end_loc - equal_sign - 1);
 89              end if;
 90  
 91              start_loc := end_loc + 1;
 92              end_loc := instr(http_cookie, ';', start_loc);
 93           end loop;
 94  
 95           val_counter := val_counter + 1;
 96           equal_sign := instr(http_cookie, '=', start_loc);
 97  
 98           -- If there is no equal sign in last cookie, set the value to null
 99           if (equal_sign = 0)
100           then
101              names(val_counter) := ltrim(substr(http_cookie, start_loc));
102              vals(val_counter) := null;
103           else
104              names(val_counter) := ltrim(substr(http_cookie, start_loc,
105                                                 equal_sign-start_loc));
106              vals(val_counter) := substr(http_cookie, equal_sign+1);
107           end if;
108  
109        end if;
110  
111        num_vals := val_counter;
112     end;
113  
114     procedure send(name     in varchar2,
115                    value    in varchar2,
116                    expires  in date     DEFAULT NULL,
117                    path     in varchar2 DEFAULT NULL,
118                    domain   in varchar2 DEFAULT NULL,
119                    secure   in varchar2 DEFAULT NULL,
120                    httponly in varchar2 DEFAULT NULL) is
121        expires_gmt date;
122        l_name      varchar2(32767);
123        l_value     varchar2(32767);
124        l_path      varchar2(32767);
125        l_domain    varchar2(32767);
126        l_secure    varchar2(32767);
127        l_httponly  varchar2(32767);
128     begin
129        -- Validate parameters
130        l_name := owa_util.validate_arg(name);
131        l_value := validate_cookie_val(value);
132        l_path := owa_util.validate_arg(path);
133        l_domain := owa_util.validate_arg(domain);
134        l_secure := owa_util.validate_arg(secure);
135        l_httponly := owa_util.validate_arg(httponly);
136  
137        if (OWA_CUSTOM.DBMS_SERVER_GMTDIFF is not NULL)
138        then
139           expires_gmt := expires-(OWA_CUSTOM.DBMS_SERVER_GMTDIFF/24);
140        else
141           expires_gmt := new_time(expires,OWA_CUSTOM.DBMS_SERVER_TIMEZONE,'GMT');
142        end if;
143  
144        -- When setting the cookie expiration header
145        -- we need to set the nls date language to AMERICAN
146        -- since the cookie line needs to be in English.
147        -- If the NLS_LANGUAGE of the database is other than
148        -- English, the expires tag is not understood by the browser.
149        htp.print('Set-Cookie: '||l_name||'='||l_value||';'||
150                   IFNOTNULL(expires_gmt, ' expires='||
151                      rtrim(to_char(expires_gmt,'Dy',
152                          'NLS_DATE_LANGUAGE=American NLS_CALENDAR=Gregorian'))||
153                      to_char
154                      (
155                          expires_gmt,
156                          ', DD-Mon-YYYY HH24:MI:SS',
157                          'NLS_DATE_LANGUAGE=American NLS_CALENDAR=Gregorian'
158                      )||' GMT;')||
159                   IFNOTNULL(l_path,     ' path='||l_path||';')||
160                   IFNOTNULL(l_domain,   ' domain='||l_domain||';')||
161                   IFNOTNULL(l_secure,   ' secure;')||
162                   IFNOTNULL(l_httponly, ' HttpOnly'));
163     end;
164  
165     function make_cookie(name in varchar2 DEFAULT NULL) return cookie is
166        choc_chip cookie;
167     begin
168        choc_chip.num_vals := 0;
169        choc_chip.name := name;
170  
171        return choc_chip;
172     end;
173  
174     function get(name in varchar2) return cookie is
175        choc_chip cookie;
176     begin
177        if (NOT cookies_parsed)
178        then
179           http_cookie2array(cookie_names, cookie_vals, cookie_num_vals);
180           cookies_parsed := TRUE;
181        end if;
182  
183        choc_chip := make_cookie(name);
184  
185        /* This is not the most efficient thing to do. */
186        /* should probably have cookie2array sort */
187        /* then we could do binary search here.   */
188        for i in 1..cookie_num_vals
189        loop
190           if (cookie_names(i) = name)
191           then
192              choc_chip.num_vals := choc_chip.num_vals + 1;
193              choc_chip.vals(choc_chip.num_vals) := cookie_vals(i);
194           end if;
195        end loop;
196  
197        return choc_chip;
198     end;
199  
200     procedure remove(name in varchar2,
201                      val  in varchar2,
202                      path in varchar2 DEFAULT NULL) is
203     begin
204        send(name, val, to_date('01-01-1990','DD-MM-YYYY'));
205     end;
206  
207     procedure get_all(names    out vc_arr,
208                       vals     out vc_arr,
209                       num_vals out integer) is
210     begin
211        if (NOT cookies_parsed)
212        then
213           http_cookie2array(cookie_names, cookie_vals, cookie_num_vals);
214           cookies_parsed := TRUE;
215        end if;
216        names := cookie_names;
217        vals := cookie_vals;
218        num_vals := cookie_num_vals;
219     end;
220  
221  begin
222     cookies_parsed := FALSE;
223  end;
224  /

Package body created.

SQL> show errors
No errors.
SQL> @@privoolk.sql
SQL> Rem
SQL> Rem
SQL> Rem Copyright (c) 1995, 2017, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem    NAME
SQL> Rem      privoolk.sql - package of various OWA OPTIMISTIC LOCKING procedures
SQL> Rem    DESCRIPTION
SQL> Rem      This file contains one package:
SQL> Rem         owa_opt_lock    - Utitility procedures/functions for use
SQL> Rem                           with the Oracle Web Agent
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      The Oracle Web Agent is needed to use these facilities.
SQL> Rem      The package owa is needed to use these facilities.
SQL> Rem      The package owa_util is needed to use these facilities.
SQL> Rem      The packages htp and htf are needed to use these facilities.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     cvanes     05/09/17  - 25973075: unqualified reference in dynamic sql
SQL> Rem     vtropash   04/27/16  - bug 23185746 fix
SQL> Rem     vtropash   12/02/15  - 22100537
SQL> Rem     vtropash   08/26/15  - 21683691
SQL> Rem     vtropash   07/16/15  - Bug 20289384
SQL> Rem     howu       05/08/08  - add DBMS_ASSERT.ENQUOTE_NAME to prevent SQL
SQL> Rem                            injection
SQL> Rem     howu       05/08/08  - XbranchMerge
SQL> Rem                            rpang_bug-5844738_10.1.2.0.0rdbms.6.1 from
SQL> Rem                            st_www_101200rdbms
SQL> Rem     howu       06/28/07  - add DBMS_ASSERT to prevent SQL injection.
SQL> Rem     akatti     11/22/04  - [3927257]:wrap XMLTYPE column value with
SQL> Rem                            getclobval
SQL> Rem     pkapasi    08/21/04 -  Fix 3878775. Remove tabs
SQL> Rem     ehlee      10/17/01 -  Fix 1690540
SQL> Rem     rdasarat   01/05/99 -  Fix 789868
SQL> Rem     rdasarat   08/06/98 -  Fix 711814
SQL> Rem     mpal       07/09/97 -  Implement COMMON schema
SQL> Rem     mpal       06/24/96 -  Creation
SQL> 
SQL> REM Creating OWA_OPT_LOCK package...
SQL> create or replace package body owa_opt_lock
  2  as
  3  
  4     last_column      exception;
  5     pragma exception_init( last_column, -1007 );
  6  
  7     /******************************************************************/
  8     /* Function to check if the argument is a valid object            */
  9     /******************************************************************/
 10     procedure validate_object_name (p_owner in varchar2, p_object in varchar2)
 11     is
 12        stmt_cursor number;
 13        rc          number;
 14        found       number := 0;
 15        p_schema    varchar2(1111) := upper(p_owner);
 16        p_obj       varchar2(1111) := upper(p_object);
 17     begin
 18        stmt_cursor := dbms_sql.open_cursor;
 19        sys.dbms_sql.parse(stmt_cursor,
 20           'begin
 21               select count(*)
 22                 into :found
 23                 from sys.all_objects
 24               where owner = :p_schema
 25               and object_name = :p_obj;
 26            exception
 27                when others then
 28                   :found := 0;
 29            end;', dbms_sql.v7);
 30        dbms_sql.bind_variable(stmt_cursor, ':p_schema', p_schema);
 31        dbms_sql.bind_variable(stmt_cursor, ':p_obj', p_obj);
 32        dbms_sql.bind_variable(stmt_cursor, ':found', found);
 33        rc := dbms_sql.execute(stmt_cursor);
 34        dbms_sql.variable_value(stmt_cursor, ':found', found);
 35        dbms_sql.close_cursor(stmt_cursor);
 36  
 37        if (found = 0) then
 38           raise_application_error(-20001, 'Cannot resolve object');
 39        end if;
 40     end;
 41  
 42     /******************************************************************/
 43     /* Function to calculate checksum                                 */
 44     /******************************************************************/
 45     function checksum( p_buff in varchar2 ) return number
 46     is
 47        l_sum       number default 0;
 48        l_n         number;
 49        l_nu        number;
 50        l_nl        number;
 51     begin
 52        for i in 1 .. trunc(length(p_buff||'x')/2) loop
 53           if ascii(substr(p_buff||'x', 1+(i-1)*2, 1))>255 then
 54              --2byte char + (1byte char or 2byte char)
 55              l_nu:=0;
 56              l_nl:=ascii(substr(p_buff||'x', 1+(i-1)*2, 1));
 57              l_n := l_nl;
 58              l_sum := mod( l_sum+l_n, 4294967296);
 59  
 60              if ascii(substr(p_buff||'x', 2+(i-1)*2, 1))>255 then
 61                 --2byte char + 2byte char
 62                 l_nu:=0;
 63                 l_nl:=ascii(substr(p_buff||'x', 2+(i-1)*2, 1));
 64                 l_n := l_nl;
 65                 l_sum := mod( l_sum+l_n, 4294967296);
 66              else
 67                 --2byte char + 1byte char
 68                 l_nu:=ascii(substr(p_buff||'x', 2+(i-1)*2, 1));
 69                 l_nl:=ascii('x');
 70                 l_n := l_nu*256 + l_nl;
 71                 l_sum := mod( l_sum+l_n, 4294967296);
 72              end if;
 73  
 74              elsif ascii(substr(p_buff||'x', 2+(i-1)*2, 1))>255 then
 75                 --1byte char + 2byte char
 76                 l_nu:=0;
 77                 l_nl:=ascii(substr(p_buff||'x', 2+(i-1)*2, 1));
 78                 l_n := l_nl;
 79                 l_sum := mod( l_sum+l_n, 4294967296);
 80  
 81                 l_nu:=ascii('x');
 82                 l_nl:=ascii(substr(p_buff||'x', 2+(i-1)*2, 1));
 83                 l_n := l_nu*256 + l_nl;
 84                 l_sum := mod( l_sum+l_n, 4294967296);
 85  
 86              else
 87                 --1byte char + 1byte char
 88                 l_nu:=ascii(substr(p_buff||'x', 1+(i-1)*2, 1));
 89                 l_nl:=ascii(substr(p_buff||'x', 2+(i-1)*2, 1));
 90                 l_n := l_nu*256 + l_nl;
 91                 l_sum := mod( l_sum+l_n, 4294967296);
 92  
 93                 -- dbms_output.put_line('l_n : '||l_n);
 94              end if;
 95           end loop;
 96  
 97           -- dbms_output.put_line('l_sum : '||l_sum);
 98  
 99           while ( l_sum > 65536 ) loop
100              -- l_sum := bitand( l_sum, 65535 ) + trunc(l_sum/65536);
101              l_sum := mod( l_sum, 65536 ) + trunc(l_sum/65536);
102           end loop;
103        return l_sum;
104     end checksum;
105  
106     function checksum( p_owner in varchar2,
107                        p_tname in varchar2,
108                        p_rowid in rowid ) return number
109     is
110        l_theQuery     varchar2(4096) default NULL;
111        l_cursor       integer;
112        l_variable     number;
113        l_status       number;
114        l_column_name  varchar2(255);
115        l_data_type    varchar2(106);
116        p_schema       varchar2(1111) := upper(p_owner);
117        p_obj          varchar2(1111) := upper(p_tname);
118     begin
119        -- Verify that there is no SQL injection
120        validate_object_name (p_schema, p_obj);
121  
122        l_cursor := dbms_sql.open_cursor;
123  
124        -- Fix 789868 - Common schema may not have access to this info.
125        sys.dbms_sql.parse(
126                 l_cursor,
127                 'select column_name, data_type
128                    from sys.all_tab_columns
129                  where owner = :p_schema
130                  and table_name = :p_obj
131                  order by column_id', dbms_sql.native);
132        dbms_sql.bind_variable(l_cursor, ':p_schema', p_schema);
133        dbms_sql.bind_variable(l_cursor, ':p_obj', p_obj);
134        dbms_sql.define_column(l_cursor, 1, l_column_name, 255);
135        dbms_sql.define_column(l_cursor, 2, l_data_type, 106);
136  
137        l_status := dbms_sql.execute(l_cursor);
138        loop
139           l_status := dbms_sql.fetch_rows(l_cursor);
140           if (l_status <= 0) then
141              exit;
142            end if;
143            dbms_sql.column_value(l_cursor, 1, l_column_name);
144            dbms_sql.column_value(l_cursor, 2, l_data_type);
145            if (l_theQuery is NULL) then
146               l_theQuery := 'select owa_opt_lock.checksum(';
147            else
148               l_theQuery := l_theQuery || '||';
149            end if;
150            -- if the column type is XMLTYPE, then we cannot concatenate
151            -- just the l_column_name, as it undergoes xml2char conversion
152            -- which has a limitation for converted length that it cannot
153            -- exceed 4000, otherwise it throws ORA-19011,
154            -- instead, we need to wrap xml column with xmltype.getclobval
155            if (l_data_type != 'XMLTYPE') then
156                l_theQuery := l_theQuery || DBMS_ASSERT.ENQUOTE_NAME(l_column_name);
157            else
158              l_theQuery := l_theQuery || 'xmltype.getclobval(' ||
159                            DBMS_ASSERT.ENQUOTE_NAME(l_column_name) || ')';
160            end if;
161        end loop;
162        dbms_sql.close_cursor(l_cursor);
163  
164        l_theQuery := l_theQuery || ') from ' || DBMS_ASSERT.ENQUOTE_NAME(p_schema) || '.' || DBMS_ASSERT.ENQUOTE_NAME(p_obj) ||
165                      ' where rowid = :x1 for update';
166  
167        l_cursor := dbms_sql.open_cursor;
168        sys.dbms_sql.parse( l_cursor, l_theQuery, dbms_sql.v7);
169        dbms_sql.bind_variable( l_cursor, ':x1', p_rowid );
170        dbms_sql.define_column( l_cursor, 1, l_variable );
171  
172        l_status := dbms_sql.execute(l_cursor);
173        l_status := dbms_sql.fetch_rows(l_cursor);
174        dbms_sql.column_value( l_cursor, 1, l_variable );
175        dbms_sql.close_cursor( l_cursor );
176  
177        return l_variable;
178     end;
179  
180     /******************************************************************/
181     /* Procedure to store values before modifying values              */
182     /******************************************************************/
183     procedure store_values( p_owner in varchar2,
184                             p_tname in varchar2,
185                             p_rowid in rowid )
186     is
187        l_theQuery    varchar2(4096);
188        l_cursor      integer;
189        l_variable    varchar2(2000);
190        l_status      number;
191        l_col_cnt     number default 0;
192        p_schema      varchar2(1111) := upper(p_owner);
193        p_obj         varchar2(1111) := upper(p_tname);
194     begin
195        -- Verify that there is no SQL injection
196        validate_object_name (p_schema, p_obj);
197  
198        l_theQuery := 'select rowid, a.* from ' || DBMS_ASSERT.ENQUOTE_NAME(p_schema) || '.' || DBMS_ASSERT.ENQUOTE_NAME(p_obj) ||
199                    ' a where rowid = :x1';
200  
201        l_cursor := dbms_sql.open_cursor;
202  
203        sys.dbms_sql.parse( l_cursor, l_theQuery, dbms_sql.v7 );
204        dbms_sql.bind_variable( l_cursor, ':x1', p_rowid );
205        for i in 1 .. 255 loop
206           begin
207              dbms_sql.define_column( l_cursor, i, l_variable, 2000 );
208              l_col_cnt := l_col_cnt + 1;
209           exception
210              when last_column then exit;
211           end;
212        end loop;
213  
214        l_status := dbms_sql.execute(l_cursor);
215        l_status := dbms_sql.fetch_rows(l_cursor);
216  
217        htp.formHidden( 'old_' || p_tname, htf.escape_sc(p_owner) );
218        htp.formHidden( 'old_' || p_tname, htf.escape_sc(p_tname) );
219        for i in 1 .. l_col_cnt loop
220           dbms_sql.column_value( l_cursor, i, l_variable );
221           htp.formHidden( 'old_'||p_tname, htf.escape_sc(l_variable) );
222        end loop;
223  
224        dbms_sql.close_cursor( l_cursor );
225     end;
226  
227     /******************************************************************/
228     /* Function to verify stored values                               */
229     /******************************************************************/
230     function verify_values( p_old_values in vcArray ) return boolean
231     is
232        l_theQuery    varchar2(4096);
233        l_cursor      integer;
234        l_variable    varchar2(2000);
235        l_status      number;
236        l_col_cnt     number default 0;
237        l_return_val  boolean default TRUE;
238        p_schema      varchar2(1111) := upper(p_old_values(1));
239        p_obj         varchar2(1111) := upper(p_old_values(2));
240     begin
241        -- Verify that there is no SQL injection
242        validate_object_name (p_schema, p_obj);
243  
244        l_theQuery := 'select * from ' || DBMS_ASSERT.ENQUOTE_NAME(p_schema) || '.' || DBMS_ASSERT.ENQUOTE_NAME(p_obj) ||
245                      ' where rowid = :x1 for update';
246  
247        l_cursor := dbms_sql.open_cursor;
248  
249        sys.dbms_sql.parse( l_cursor, l_theQuery, dbms_sql.v7 );
250        dbms_sql.bind_variable( l_cursor, ':x1', p_old_values(3) );
251        for i in 1 .. 255 loop
252           begin
253              dbms_sql.define_column( l_cursor, i, l_variable, 2000 );
254              l_col_cnt := l_col_cnt + 1;
255           exception
256              when last_column then exit;
257           end;
258        end loop;
259  
260        l_status := dbms_sql.execute(l_cursor);
261        l_status := dbms_sql.fetch_rows(l_cursor);
262  
263        for i in 1 .. l_col_cnt loop
264           dbms_sql.column_value( l_cursor, i, l_variable );
265           if ( l_variable <> p_old_values(i+3) AND
266               l_variable is not null          AND
267               p_old_values(i+3) is not null ) then
268                 l_return_val := FALSE;
269                 exit;
270           end if;
271        end loop;
272  
273        dbms_sql.close_cursor( l_cursor );
274        return l_return_val;
275     end;
276  
277     /******************************************************************/
278     /* Internal function used by verify_values                        */
279     /******************************************************************/
280     function get_rowid( p_old_values in vcArray ) return rowid
281     is
282     begin
283        return p_old_values(3);
284     end;
285  
286  end;
287  /

Package body created.

SQL> show errors
No errors.
SQL> 
SQL> @@privsec.sql
SQL> rem
SQL> rem
SQL> Rem Copyright (c) 1996, 2009, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem    NAME
SQL> Rem      privsec.sql
SQL> Rem    DESCRIPTION
SQL> Rem      This file contains one package:
SQL> Rem         owa_sec - Utitility procedures/functions to provide security
SQL> Rem                     to procedures accessed via the PL/SQL Agent.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     akatti     11/22/05 -  Bug fix#4722130 validate arguments of
SQL> Rem                            set_protection_realm
SQL> Rem     rpang      06/29/96 -  Creation
SQL> Rem
SQL> 
SQL> create or replace package body OWA_SEC is
  2  
  3     /*  NL_CHAR can be computed from a Unicode string in a portable manner. */
  4     NL_CHAR constant varchar2(10) := owa_cx.nl_char;
  5     /* Constant is set here instead of owachars to avoid invalid objects */
  6     CR_CHAR constant varchar2(10) := chr(13);
  7  
  8       /*******************************************************************/
  9      /* Procedure to specify the PL/SQL Agent's authorization scheme    */
 10     /*******************************************************************/
 11     procedure set_authorization(scheme in integer) is
 12     begin
 13        owa.auth_scheme := scheme;
 14     end;
 15  
 16       /*******************************************************************/
 17      /* Functions to obtain the Web client's authentication information */
 18     /*******************************************************************/
 19     function get_user_id return varchar2 is
 20     begin
 21        return owa.user_id;
 22     end;
 23  
 24     function get_password return varchar2 is
 25     begin
 26        return owa.password;
 27     end;
 28  
 29     function get_client_ip return owa_util.ip_address is
 30     begin
 31        return owa.ip_address;
 32     end;
 33  
 34     function get_client_hostname return varchar2 is
 35     begin
 36        return owa.hostname;
 37     end;
 38  
 39       /*******************************************************************/
 40      /* Procedure to specify the dynamic page's protection realm        */
 41     /*******************************************************************/
 42     procedure set_protection_realm(realm in varchar2) is
 43        l_realm varchar2(32767);
 44     begin
 45        -- validate argument
 46        l_realm := owa_util.validate_arg(realm);
 47        owa.protection_realm := l_realm;
 48     end;
 49  
 50  end;
 51  /

Package body created.

SQL> show errors
No errors.
SQL> @@privcach.sql
SQL> Rem  Copyright (c) 1999, 2000 by Oracle Corp.  All Rights Reserved.
SQL> Rem
SQL> Rem   NAME
SQL> Rem     privcach.sql - PRIVate CACHe package
SQL> Rem   PURPOSE
SQL> Rem     Provide cache functions for caching PL/SQL generated contents
SQL> Rem   NOTES
SQL> Rem     This file is used to implement PL/SQL caching in the PL/SQL Gateway.
SQL> Rem     This script should be run by the owner of the OWA packages.
SQL> Rem   MODIFIED   (MM/DD/YY)
SQL> Rem    akatti     08/16/07 - increase max len of Surrogate-Control to 236
SQL> Rem                          Bug 6336258
SQL> Rem    ehlee      09/28/01 - increase max len of Surrogate-Control to 200
SQL> Rem    skwong     07/20/01 - Get NewLine character in portable manner
SQL> Rem    ehlee      07/16/01 - fix not reserving the Surrogate-Control header
SQL> Rem    ehlee      07/11/01 - adding Surrogate-Control reserve header
SQL> Rem    ehlee      06/20/00 - adding Expires model support
SQL> Rem    ehlee      05/11/00 - add check for GATEWAY_IVERSION
SQL> Rem    ehlee      05/02/00 - creation
SQL> Rem
SQL> 
SQL> CREATE OR replace PACKAGE BODY owa_cache
  2  AS
  3  
  4    --
  5    -- Private types and global variables
  6    --
  7    v_nstatusidx  NUMBER := 1;       -- the htbuf line index for status header
  8    v_netagidx    NUMBER := 2;       -- the htbuf line index for etag header
  9    v_nexpiresidx NUMBER := 2;       -- the htbuf line index for expires header
 10    v_nlevelidx   NUMBER := 3;       -- the htbuf line index for level header
 11    v_nsurridx    NUMBER := 4;       -- the htbuf line index for surr-con header
 12    v_nendlineidx NUMBER := 5;       -- the htbuf line index for end line
 13  
 14    --
 15    -- Constants
 16    --
 17    NL_CHAR constant varchar2(10) := owa_cx.nl_char;
 18    expires_header constant VARCHAR2(18) := 'X-ORACLE-EXPIRES: ';
 19    etag_header  constant VARCHAR2(6) := 'ETag: ';
 20    level_header constant VARCHAR2(15) := 'Cache-Control: ';
 21    ignore_header constant VARCHAR2(23) := 'X-ORACLE-IGNORE: IGNORE';
 22    read_header constant VARCHAR2(20) := 'X-ORACLE-CACHE: READ';
 23    write_header constant VARCHAR2(21) := 'X-ORACLE-CACHE: WRITE';
 24    surrcon_header constant VARCHAR2(19) := 'Surrogate-Control: ';
 25  
 26    stored_etag   VARCHAR2(100) := 'MaGiC_KeY_728374';
 27    stored_level  VARCHAR2(100) := 'MaGiC_KeY_728374';
 28  
 29    -- Bug 6336258, each element size in htbuf array is 256 bytes
 30    -- For Surrogate-Control header, the break-up is as follows
 31    -- (19[for header] + 236[max len for the value] + 1[NL_CHAR]) = 256
 32    max_surrcon_len constant NUMBER := 236;
 33    max_cache_len constant NUMBER := 55;
 34    --
 35    -- PROCEDURE:
 36    --   init
 37    -- DESCRIPTION:
 38    --   Reserve header spaces
 39    -- PARAMS:
 40    --   p_htbuf    IN/OUT: the buffer to reserve the headers in
 41    --   p_rows_in  IN/OUT: the current row number in that buffer
 42    -- NOTE:
 43    --   Should only be called before any data is written to the htbuf
 44    --
 45    PROCEDURE init(p_htbuf IN OUT NOCOPY htp.htbuf_arr, p_rows_in IN OUT number)
 46    IS
 47    BEGIN
 48      -- Reserve four header spaces
 49      p_htbuf(v_nstatusidx) := ignore_header || NL_CHAR;
 50      p_htbuf(v_netagidx) := ignore_header || NL_CHAR;
 51      p_htbuf(v_nlevelidx) := ignore_header || NL_CHAR;
 52      p_htbuf(v_nsurridx) := ignore_header || NL_CHAR;
 53      p_htbuf(v_nendlineidx) := NL_CHAR;
 54      p_rows_in := 4;
 55    END init;
 56  
 57    --
 58    -- PROCEDURE:
 59    --   disable
 60    -- DESCRIPTION:
 61    --   Disables the cache
 62    --
 63    PROCEDURE disable
 64    IS
 65    BEGIN
 66       htp.print_header(ignore_header, v_nstatusidx);
 67       htp.print_header(ignore_header, v_netagidx);
 68       htp.print_header(ignore_header, v_nlevelidx);
 69       htp.print_header(ignore_header, v_nsurridx);
 70    END disable;
 71  
 72  
 73    --
 74    -- PROCEDURE:
 75    --   set_expires
 76    -- DESCRIPTION:
 77    --   Sets up the cache headers
 78    -- PARAMS:
 79    --   p_expires  IN: number of minutes this cached item is fresh
 80    --   p_level    IN: the caching level for it (USER or SYSTEM for now)
 81    -- EXCEPTIONS:
 82    --   VALUE_ERROR : If p_expires is negative or zero, or p_level is not
 83    --                 'USER' or 'SYSTEM', this exception is thrown
 84    --                 If p_expires is > 525600 (1 year), this exception is thrown
 85    --
 86    PROCEDURE set_expires(p_expires IN number, p_level IN varchar2)
 87    IS
 88    BEGIN
 89       -- Check for negative numbers or zero
 90       IF (p_expires <= 0) THEN
 91          raise VALUE_ERROR;
 92       END IF;
 93  
 94       -- Check for > 525600
 95       IF (p_expires > 525600) THEN
 96          raise VALUE_ERROR;
 97       END IF;
 98  
 99       -- Check for invalid levels
100       IF (p_level IS NULL) THEN
101          raise VALUE_ERROR;
102       END IF;
103  
104       IF (p_level <> 'SYSTEM' AND p_level <> 'USER') THEN
105          raise VALUE_ERROR;
106       END IF;
107  
108       htp.print_header(write_header, v_nstatusidx);
109       htp.print_header(expires_header || p_expires, v_nexpiresidx);
110       htp.print_header(level_header || p_level, v_nlevelidx);
111    END set_expires;
112  
113  
114    --
115    -- PROCEDURE:
116    --   set_cache
117    -- DESCRIPTION:
118    --   Sets up the cache headers
119    -- PARAMS:
120    --   p_etag     IN: the ETag associated with this content
121    --   p_level    IN: the caching level for it (USER or SYSTEM for now)
122    -- EXCEPTIONS:
123    --   VALUE_ERROR : If p_etag is greater than max_cache_len in length or
124    --                 p_level is not 'USER' or 'SYSTEM', this exception is thrown
125    --
126    PROCEDURE set_cache(p_etag IN varchar2, p_level IN varchar2)
127    IS
128    BEGIN
129       -- Check for the etag length
130       IF (p_etag IS NULL OR length(p_etag) > max_cache_len) THEN
131          raise VALUE_ERROR;
132       END IF;
133  
134       -- Check for invalid levels
135       IF (p_level IS NULL) THEN
136          raise VALUE_ERROR;
137       END IF;
138  
139       IF (p_level <> 'SYSTEM' AND p_level <> 'USER') THEN
140          raise VALUE_ERROR;
141       END IF;
142  
143       htp.print_header(write_header, v_nstatusidx);
144       htp.print_header(etag_header || p_etag, v_netagidx);
145       htp.print_header(level_header || p_level, v_nlevelidx);
146    END set_cache;
147  
148  
149    --
150    -- PROCEDURE:
151    --   set_not_modified
152    -- DESCRIPTION:
153    --   Sets up the headers for a not modified cache hit
154    -- EXCEPTIONS:
155    --   VALUE_ERROR : If the ETag or Cache-Control wasn't passed in,
156    --                 this exception is thrown
157    --
158    PROCEDURE set_not_modified
159    IS
160    BEGIN
161       IF (get_etag IS NULL OR get_level IS NULL) THEN
162          raise VALUE_ERROR;
163       END IF;
164  
165       htp.print_header(read_header, v_nstatusidx);
166       htp.print_header(ignore_header, v_netagidx);
167       htp.print_header(ignore_header, v_nlevelidx);
168    END set_not_modified;
169  
170  
171    --
172    -- PROCEDURE:
173    --   set_surrogate_control
174    -- DESCRIPTION:
175    --   Sets up the headers for a surrogate-control header for web cache
176    -- PARAMS:
177    --   p_value    IN: value to be passed as the Surrogate-Control header
178    -- EXCEPTIONS:
179    --   VALUE_ERROR : If p_value is greater than max_surrcon_len in length
180    --
181    PROCEDURE set_surrogate_control(p_value IN varchar2)
182    IS
183    BEGIN
184       -- Check for the value length
185       IF (p_value IS NULL OR length(p_value) > max_surrcon_len) THEN
186         raise VALUE_ERROR;
187       END IF;
188  
189       htp.print_header(surrcon_header || p_value, v_nsurridx);
190    END set_surrogate_control;
191  
192    --
193    -- FUNCTION:
194    --   get_level
195    -- DESCRIPTION:
196    --   Returns the caching level
197    -- PARAMS:
198    --   none
199    -- RETURN:
200    --   The caching level string (USER or SYSTEM for now)
201    --
202    FUNCTION get_level
203      RETURN VARCHAR2
204    IS
205    BEGIN
206       IF (stored_level = 'MaGiC_KeY_728374') THEN
207          stored_level := owa_util.get_cgi_env('HTTP_CACHE_CONTROL');
208       END IF;
209       RETURN stored_level;
210    END get_level;
211  
212    --
213    -- FUNCTION:
214    --   get_etag
215    -- DESCRIPTION:
216    --   Returns the caching etag
217    -- PARAMS:
218    --   none
219    -- RETURN:
220    --   The caching etag string
221    --
222    FUNCTION get_etag
223      RETURN VARCHAR2
224    IS
225    BEGIN
226       IF (stored_etag = 'MaGiC_KeY_728374') THEN
227          stored_etag := owa_util.get_cgi_env('HTTP_IF_MATCH');
228       END IF;
229       RETURN stored_etag;
230    END get_etag;
231  END owa_cache;
232  /

Package body created.

SQL> 
SQL> show errors package body owa_cache
No errors.
SQL> 
SQL> 
SQL> @@privmat.sql
SQL> Rem  Copyright (c) 2004, Oracle. All rights reserved.
SQL> Rem    NAME
SQL> Rem      privmat.sql - package of various OWA utility procedures
SQL> Rem    DESCRIPTION
SQL> Rem      This file contains one package:
SQL> Rem         owa_match   - Utitility procedures/functions for use
SQL> Rem                       with the Oracle Web Agent
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      The Oracle Web Agent is needed to use these facilities.
SQL> Rem      The package owa_match is needed to use these facilities.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     dnonkin    08/12/04 -  Creation
SQL> 
SQL> create or replace package body owa_match
  2  
  3  as
  4  
  5      --- Special characters list, note 1 space in the beginning and
  6      --- a single quote escaped at the end.
  7      SPECIAL_CHARS constant varchar2(27) := ' @*()+-/=\<>;:"|&?{}[]'''
  8          || chr(9)   -- tab
  9          || chr(10)  -- new line
 10          || chr(12)  -- form feed
 11          || chr(13); -- cr
 12  
 13      TRANS_CHARS   constant varchar2(27) := '***************************';
 14  
 15      function match_pattern
 16      (
 17          p_string            in varchar2,
 18          p_simple_pattern    in owa_util.vc_arr default empty_vc_arr,
 19          p_complex_pattern   in owa_util.vc_arr default empty_vc_arr,
 20          p_use_special_chars in boolean         default true
 21      )
 22      return boolean is
 23          l_string        varchar2(512) := upper(p_string);
 24          l_count         integer := p_simple_pattern.count;
 25      begin
 26  
 27          if (p_use_special_chars) then
 28              --- First, check the string for any special characters,
 29              --- use translate function to replace any special character
 30              --- in the list with a '*'.
 31              --- Look for any '*' in the string, this means a special character
 32              --- has been found and the check failed.
 33              if (instr(translate(l_string, SPECIAL_CHARS, TRANS_CHARS),'*') > 0) then
 34                  return true;
 35              end if;
 36          end if;
 37  
 38          --- Second, check the incoming string against default
 39          --- exclusions list
 40          for i in 1..l_count loop
 41              if (l_string like upper(p_simple_pattern(i)) escape '\') then
 42                  return true;
 43              end if;
 44          end loop;
 45  
 46          --- Finally, check if we have any dynamic exclusions passed to us.
 47          --- If so, check the string against those exclusions as well.
 48          --- This is very slow, so should be used as the last resort, when
 49          --- cannot be covered by other checks.
 50          l_count := p_complex_pattern.count;
 51          if (l_count > 0) then
 52              for i in 1..l_count loop
 53                  --- Use owa_pattern to do case-insensitive search
 54                  if (owa_pattern.match(
 55                         line  => l_string,
 56                         pat   => upper(p_complex_pattern(i)),
 57                         flags => 'i'))
 58                  then
 59                      return true;
 60                  end if;
 61              end loop;
 62          end if;
 63  
 64          return false;
 65  
 66      end match_pattern;
 67  
 68  end owa_match;
 69  
 70  /

Package body created.

SQL> 
SQL> show errors package body owa_match
No errors.
SQL> 
SQL> 
SQL> @@wpgdocb.sql
SQL> Rem
SQL> Rem $Header: wwg_src_1/admin/owa/wpgdocb.sql /main/14 2015/04/13 15:41:00 vtropash Exp $
SQL> Rem
SQL> Rem wpgdocb.sql
SQL> Rem
SQL> Rem Copyright (c) 1998, 2015, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem     wpgdocb.sql - PL/SQL Gateway Document upload/download package Body
SQL> Rem
SQL> Rem    NOTES
SQL> Rem     This file is used to implement document upload and download
SQL> Rem     features in the PL/SQL Gateway.
SQL> Rem    **IMPORTANT**
SQL> Rem     When making changes to this file, please remember to update
SQL> Rem     the v7 version of this file (wpgdocb7.sql) as well.
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     vtropash   06/18/14 - co bug 17892420
SQL> Rem     akatti     03/22/05 - fix bug#3119039 define get_download_file_raw
SQL> Rem     ehlee      08/31/04 - Increase filename length to 256 (bug#3840547)
SQL> Rem     pkapasi    11/06/01 - Fix latch contention (bug#2086519). Detabify
SQL> Rem     ehlee      02/08/01 - Fix NLS download problem (bug#1584353)
SQL> Rem     gcook      12/08/00 - Fixed cache file download bug (bug#1493770)
SQL> Rem     ehlee      09/06/00 - Fix last-modified date (bug#1398250)
SQL> Rem     ehlee      08/31/00 - Fix for freeing temporary blobs (bug#1377860)
SQL> Rem     kmuthukk   04/19/00 - schema qualify dbms_sql calls since
SQL> Rem                           this package may be installed in OWA_PUBLIC.
SQL> Rem     rdecker    02/14/00 - fix for handling old listeners
SQL> Rem     kmuthukk   01/20/99 - update name/comments above.
SQL> Rem     rdecker    11/19/99 - fix null blob download bug
SQL> Rem     rdecker    11/18/99 - add bfile download support
SQL> Rem     rdecker    11/16/99 - add blob download support
SQL> Rem     rdecker    10/13/99 - fix parts table
SQL> Rem     rdecker    10/11/99 - enable/disable browser caching
SQL> Rem     rdecker    09/30/99 - http 1.1 browser caching support
SQL> Rem     rdecker    09/22/99 - phase 2 blob upload support
SQL> Rem     rdecker    09/14/99 - Created
SQL> Rem
SQL> 
SQL> CREATE OR replace PACKAGE BODY wpg_docload
  2  AS
  3  
  4    --
  5    -- Private types and global variables
  6    --
  7    -- Warning: If you change the constraint values of any of the
  8    -- following global variables, be sure to make the corresponding
  9    -- change in pgdocs.sql
 10    v_filename VARCHAR2(256);
 11    v_bcaching BOOLEAN;
 12    v_blob     blob;
 13    v_bfile    bfile;
 14  
 15    --
 16    -- PROCEDURE:
 17    --   download_file
 18    -- DESCRIPTION:
 19    --   Set the name of the file to be downloaded
 20    -- PARAMS:
 21    --   p_filename     IN: name of the file to be downloaded
 22    --   p_bcaching     IN: browser caching enabled?
 23    --
 24    PROCEDURE download_file(p_filename IN VARCHAR2, p_bcaching IN BOOLEAN)
 25    IS
 26    BEGIN
 27       v_blob := NULL;
 28       v_bfile := NULL;
 29       v_filename := p_filename;
 30       v_bcaching := p_bcaching;
 31    END download_file;
 32  
 33    --
 34    -- PROCEDURE:
 35    --   download_file
 36    -- DESCRIPTION:
 37    --   Set the blob to be downloaded
 38    -- PARAMS:
 39    --   p_filename     IN: the blob to be downloaded
 40    -- NOTES: Because downloading BLOBs is more of a "self-service" operation,
 41    --        automatic browser caching is not a feature, like it is for
 42    --        document table downloads, therefore, no p_bcaching parameter.
 43    --
 44    PROCEDURE download_file(p_blob IN OUT NOCOPY blob)
 45    IS
 46       e_invalid_lobloc EXCEPTION;
 47       PRAGMA EXCEPTION_INIT(e_invalid_lobloc, -22275);
 48    BEGIN
 49       IF (p_blob IS NULL)
 50       THEN
 51         RAISE e_invalid_lobloc;
 52       END IF;
 53  
 54       v_blob := p_blob;
 55       v_bfile := NULL;
 56       v_filename := NULL;
 57       v_bcaching := NULL;
 58    END download_file;
 59  
 60    --
 61    -- PROCEDURE:
 62    --   download_file
 63    -- DESCRIPTION:
 64    --   Set the bfile to be downloaded
 65    -- PARAMS:
 66    --   p_filename     IN: the bfile to be downloaded
 67    -- NOTES: Because downloading BFILEs is more of a "self-service" operation,
 68    --        automatic browser caching is not a feature, like it is for
 69    --        document table downloads, therefore, no p_bcaching parameter.
 70    --
 71    PROCEDURE download_file(p_bfile IN OUT bfile)
 72    IS
 73       dir_alias VARCHAR2(30) := NULL;
 74       fname VARCHAR2(2000) := NULL;
 75       len pls_integer;
 76    BEGIN
 77       dbms_lob.fileopen(p_bfile);
 78       v_bfile := p_bfile;
 79       v_blob := NULL;
 80       v_filename := NULL;
 81       v_bcaching := NULL;
 82    EXCEPTION
 83       WHEN OTHERS
 84       THEN
 85         v_bfile := NULL;
 86         v_blob := NULL;
 87         v_filename := NULL;
 88         v_bcaching := NULL;
 89         RAISE;
 90    END download_file;
 91  
 92    --
 93    -- FUNCTION:
 94    --   encode_parameter
 95    -- DESCRIPTION:
 96    --   Endcode the given parameters to be decoded by the gateway
 97    -- PARAMS:
 98    --   p_encode_param           IN: parameter to encode
 99    -- RETURN:
100    --   encoded parameter string
101    FUNCTION encode_parameter(p_encode_param IN VARCHAR2)
102                 RETURN VARCHAR2
103    IS
104       param_size pls_integer;
105    BEGIN
106       param_size := LENGTHB(p_encode_param);
107       IF (param_size IS NULL) THEN
108        param_size := 0;
109       END IF;
110       RETURN param_size||'X'||p_encode_param||'X';
111  
112    END encode_parameter;
113  
114    --
115    -- PROCEDURE:
116    --   get_content_length
117    -- DESCRIPTION:
118    --   Return the length of a lob to be downloaded
119    -- PARAMS:
120    --   none.
121    -- RETURN:
122    --   lob length
123    --
124    FUNCTION get_content_length
125      RETURN pls_integer
126    IS
127    BEGIN
128       IF (v_blob IS NOT NULL)
129       THEN
130          RETURN dbms_lob.getlength(v_blob);
131       ELSIF (v_bfile IS NOT NULL)
132       THEN
133          RETURN dbms_lob.getlength(v_bfile);
134       ELSE
135          RETURN NULL;
136       END IF;
137    END;
138  
139    --
140    -- PROCEDURE:
141    --   get_download_blob
142    -- DESCRIPTION:
143    --   Return a BLOB to be downloaded to a browser.
144    -- PARAMS:
145    --   p_blob   OUT: The blob to be downloaded
146    --
147    PROCEDURE get_download_blob(p_blob OUT NOCOPY blob)
148    IS
149    BEGIN
150       p_blob := v_blob;
151       IF dbms_lob.istemporary(v_blob) = 1 THEN
152          dbms_lob.freetemporary(v_blob);
153       END IF;
154       v_blob := NULL;
155    END;
156  
157      --
158    -- PROCEDURE:
159    --   get_download_bfile
160    -- DESCRIPTION:
161    --   Return a BFILE to be downloaded to a browser.
162    -- PARAMS:
163    --   p_blob   OUT: The bfile to be downloaded
164    --
165    PROCEDURE get_download_bfile(p_bfile OUT bfile)
166    IS
167    BEGIN
168       p_bfile := v_bfile;
169       v_bfile := NULL;
170    END;
171  
172    --
173    -- PROCEDURE:
174    --   get_download_file
175    -- DESCRIPTION:
176    --   Get the name,mimetype,etc. of the file to be downloaded.
177    --   For BLOB downloads, p_doc_info is just set to 'B'.
178    -- PARAMS:
179    --   p_doc_info  OUT: encoded string containing:
180    --                    filename, last_updated,mime_type,content_type,
181    --                    dad_charset and doc_size for document table docs.
182    --                    For BLOB downloads, it is set to 'B'.
183    --
184    PROCEDURE get_download_file(p_doc_info OUT VARCHAR2)
185    IS
186      e_missing_column EXCEPTION;
187      PRAGMA exception_init(e_missing_column, -904);
188      cursor_handle INTEGER;
189      retval INTEGER;
190      sql_stmt VARCHAR2(1024);
191      new_cols VARCHAR2(60);
192      old_cols VARCHAR2(25);
193      last_updated DATE;
194      mime_type VARCHAR2(48);
195      content_type VARCHAR2(128);
196      dad_charset VARCHAR2(256);
197      doc_size NUMBER;
198      mod_date DATE;
199      mod_since VARCHAR2(256);
200      pos pls_integer;
201      lpos pls_integer;
202      mod_len pls_integer;
203      last_updated_str VARCHAR2(128);
204      p_doctable VARCHAR2(316);
205  
206    BEGIN
207      -- If we are being called by an old listener, just return the filename
208      IF (owa_util.get_cgi_env('GATEWAY_IVERSION') IS NULL)
209      THEN
210         p_doc_info := v_filename;
211         RETURN;
212      END IF;
213  
214      -- For blob downloads, all we need to do is set p_doc_info to 'B'
215      IF (v_blob IS NOT NULL)
216      THEN
217         p_doc_info := 'B';
218         RETURN;
219      -- For bfile downloads, p_doc_info is set to 'F'
220      ELSIF (v_bfile IS NOT NULL)
221      THEN
222         p_doc_info := 'F';
223         RETURN;
224      END IF;
225  
226      new_cols := 'LAST_UPDATED,MIME_TYPE,CONTENT_TYPE,DAD_CHARSET,DOC_SIZE';
227      old_cols := 'MIME_TYPE,DOC_SIZE';
228  
229      cursor_handle := sys.dbms_sql.open_cursor;
230  
231      p_doctable := owa_util.get_cgi_env('DOCUMENT_TABLE');
232      IF (p_doctable IS NULL) THEN
233         p_doctable := 'wwv_document';
234      END IF;
235  
236      sql_stmt := 'select '||new_cols||' from '||dbms_assert.qualified_sql_name(p_doctable)||
237        ' where NAME=:docname';
238  
239      sys.dbms_sql.parse(cursor_handle, sql_stmt, dbms_sql.v7);
240  
241      sys.dbms_sql.define_column(cursor_handle, 1, last_updated);
242      sys.dbms_sql.define_column(cursor_handle, 2, mime_type, 48);
243      sys.dbms_sql.define_column(cursor_handle, 3, content_type, 128);
244      sys.dbms_sql.define_column(cursor_handle, 4, dad_charset, 256);
245      sys.dbms_sql.define_column(cursor_handle, 5, doc_size);
246      sys.dbms_sql.bind_variable(cursor_handle, ':docname', v_filename);
247  
248      retval := sys.dbms_sql.execute_and_fetch(cursor_handle,TRUE);
249  
250      sys.dbms_sql.column_value(cursor_handle, 1, last_updated);
251      sys.dbms_sql.column_value(cursor_handle, 2, mime_type);
252      sys.dbms_sql.column_value(cursor_handle, 3, content_type);
253      sys.dbms_sql.column_value(cursor_handle, 4, dad_charset);
254      sys.dbms_sql.column_value(cursor_handle, 5, doc_size);
255  
256      sys.dbms_sql.close_cursor(cursor_handle);
257  
258  
259      -- Determine if document has been modified
260      mod_since := owa_util.get_cgi_env('HTTP_IF_MODIFIED_SINCE');
261  
262      IF (mod_since IS NOT NULL AND v_bcaching = true) THEN
263         pos := instr(mod_since, ';');
264         IF (pos > 0) THEN
265            lpos := instr(substr(mod_since,pos), 'length=');
266            IF (lpos > 0) THEN
267               mod_len := substr(mod_since,lpos+pos+6);
268            END IF;
269            mod_since := substr(mod_since,1,pos-1);
270         END IF;
271  
272         BEGIN
273            mod_date := to_date(mod_since, 'Dy, DD Mon YYYY HH24:MI:SS "GMT"');
274         EXCEPTION
275           WHEN OTHERS THEN
276           BEGIN
277              mod_date := to_date(mod_since, 'Day, DD-Mon-YY HH24:MI:SS "GMT"');
278              EXCEPTION
279                 WHEN OTHERS THEN
280                 BEGIN
281                    mod_date := to_date(mod_since, 'Day Mon DD HH24:MI:SS YYYY');
282                    EXCEPTION
283                       WHEN OTHERS THEN
284                    NULL;
285                 END;
286              END;
287         END;
288  
289         IF (mod_date = last_updated) THEN
290           IF (mod_len IS NULL OR mod_len = doc_size) THEN
291              last_updated_str := 'NOT_MODIFIED';
292           ELSE
293              last_updated_str := to_char(last_updated,
294                 'Dy, DD Mon YYYY HH24:MI:SS "GMT"',
295                 'NLS_DATE_LANGUAGE = American');
296           END IF;
297         ELSE
298           last_updated_str := to_char(last_updated,
299              'Dy, DD Mon YYYY HH24:MI:SS "GMT"',
300              'NLS_DATE_LANGUAGE = American');
301         END IF;
302      ELSE
303         IF (v_bcaching = TRUE) THEN
304           last_updated_str := to_char(last_updated,
305               'Dy, DD Mon YYYY HH24:MI:SS "GMT"',
306           'NLS_DATE_LANGUAGE = American');
307         ELSE
308           last_updated_str := NULL;
309         END IF;
310      END IF;
311  
312  
313      -- Set the doc_info string
314      p_doc_info := encode_parameter(v_filename);
315      p_doc_info := p_doc_info||encode_parameter(last_updated_str);
316      p_doc_info := p_doc_info||encode_parameter(mime_type);
317      p_doc_info := p_doc_info||encode_parameter(content_type);
318      p_doc_info := p_doc_info||encode_parameter(dad_charset);
319      p_doc_info := p_doc_info||encode_parameter(doc_size);
320  
321      -- Clear the filename
322      v_filename := NULL;
323  
324    EXCEPTION
325       -- looks like we have an old style document table
326       WHEN e_missing_column THEN
327         last_updated := NULL;
328         content_type := NULL;
329         dad_charset := NULL;
330  
331         sql_stmt := 'select '||old_cols||' from '||
332              dbms_assert.qualified_sql_name(p_doctable) ||
333              ' where NAME=:docname';
334         sys.dbms_sql.parse(cursor_handle, sql_stmt, dbms_sql.v7);
335  
336         sys.dbms_sql.define_column(cursor_handle, 1, mime_type, 48);
337         sys.dbms_sql.define_column(cursor_handle, 2, doc_size);
338         sys.dbms_sql.bind_variable(cursor_handle, ':docname', v_filename);
339  
340         retval := sys.dbms_sql.execute_and_fetch(cursor_handle,TRUE);
341         sys.dbms_sql.column_value(cursor_handle, 1, mime_type);
342         sys.dbms_sql.column_value(cursor_handle, 2, doc_size);
343  
344         sys.dbms_sql.close_cursor(cursor_handle);
345  
346         -- Set the doc_info string
347         p_doc_info := encode_parameter(v_filename);
348         p_doc_info := p_doc_info||encode_parameter(last_updated);
349         p_doc_info := p_doc_info||encode_parameter(mime_type);
350         p_doc_info := p_doc_info||encode_parameter(content_type);
351         p_doc_info := p_doc_info||encode_parameter(dad_charset);
352         p_doc_info := p_doc_info||encode_parameter(doc_size);
353  
354         -- Clear the filename
355         v_filename := NULL;
356  
357       WHEN OTHERS THEN
358        v_filename := NULL;
359        p_doc_info := NULL;
360        sys.dbms_sql.close_cursor(cursor_handle);
361  
362    END get_download_file;
363  
364    --
365    -- PROCEDURE:
366    --   get_download_file_raw
367    -- DESCRIPTION:
368    --   Bug 3119039 This API is used to return doc_info as RAW type
369    --   to bypass any character set conversion.
370    --   Get the name,mimetype,etc. of the file to be downloaded.
371    --   For BLOB downloads, p_doc_info is just set to 'B'.
372    -- PARAMS:
373    --   p_doc_info  OUT: encoded string containing:
374    --                    filename, last_updated,mime_type,content_type,
375    --                    dad_charset and doc_size for document table docs.
376    --                    For BLOB downloads, it is set to 'B'.
377    --
378    PROCEDURE get_download_file_raw(p_doc_info OUT raw)
379    IS
380      t_doc_info VARCHAR2(4000);
381  
382    BEGIN
383      get_download_file(t_doc_info);
384  
385      p_doc_info := UTL_RAW.CAST_TO_RAW(t_doc_info);
386  
387    END get_download_file_raw;
388  
389    --
390    -- FUNCTION:
391    --   is_file_download
392    -- DESCRIPTION:
393    --   Is there a file to download?
394    -- PARAMS:
395    --   none.
396    -- RETURNS:
397    --   TRUE if there is a pending file download, FALSE otherwise.
398    --
399    FUNCTION is_file_download
400      RETURN  BOOLEAN
401    IS
402    BEGIN
403       RETURN v_filename IS NOT NULL OR v_blob IS NOT NULL OR
404         v_bfile IS NOT NULL;
405    END is_file_download;
406  
407  END wpg_docload;
408  /

Package body created.

SQL> 
SQL> show errors
No errors.
SQL> 
SQL> prompt Granting execute privs to public
Granting execute privs to public
SQL> grant execute on OWA to public;

Grant succeeded.

SQL> grant execute on HTF to public;

Grant succeeded.

SQL> grant execute on HTP to public;

Grant succeeded.

SQL> grant execute on OWA_COOKIE to public;

Grant succeeded.

SQL> grant execute on OWA_IMAGE to public;

Grant succeeded.

SQL> grant execute on OWA_OPT_LOCK to public;

Grant succeeded.

SQL> grant execute on OWA_PATTERN to public;

Grant succeeded.

SQL> grant execute on OWA_SEC to public;

Grant succeeded.

SQL> grant execute on OWA_TEXT to public;

Grant succeeded.

SQL> grant execute on OWA_UTIL to public;

Grant succeeded.

SQL> grant execute on OWA_CACHE to public;

Grant succeeded.

SQL> grant execute on OWA_MATCH to public;

Grant succeeded.

SQL> grant execute on WPG_DOCLOAD to public;

Grant succeeded.

SQL> prompt Done granting execute privs to public
Done granting execute privs to public
SQL> 
SQL> REM CREATE PUBLIC owa synonyms
SQL> @@owacsyn
SQL> Rem Copyright (c) 1995, 2005, Oracle. All rights reserved.
SQL> Rem
SQL> Rem   NAME
SQL> Rem     owacsyn.sql - OWA Create public SYNonyms
SQL> Rem   PURPOSE
SQL> Rem     Create the public OWA synonyms needed to run the PL/SQL
SQL> Rem     gateway.
SQL> Rem   NOTES
SQL> Rem     This script must be run as a user which has create public
SQL> REM     synonym privileges.
SQL> Rem   history
SQL> Rem     mmuppago   12/09/05 - 3434804:OWA packages should not overwrite
SQL> Rem                           customers OWA_CUSTOM packages
SQL> Rem     dnonkin    08/31/04 - added "..or replace.." option
SQL> Rem     rdecker    07/21/00 -  split off from owacomm.sql
SQL> Rem
SQL> 
SQL> create or replace public synonym OWA for OWA;

Synonym created.

SQL> create or replace public synonym HTF for HTF;

Synonym created.

SQL> create or replace public synonym HTP for HTP;

Synonym created.

SQL> create or replace public synonym OWA_COOKIE for OWA_COOKIE;

Synonym created.

SQL> create or replace public synonym OWA_IMAGE for OWA_IMAGE;

Synonym created.

SQL> create or replace public synonym OWA_OPT_LOCK for OWA_OPT_LOCK;

Synonym created.

SQL> create or replace public synonym OWA_PATTERN for OWA_PATTERN;

Synonym created.

SQL> create or replace public synonym OWA_SEC for OWA_SEC;

Synonym created.

SQL> create or replace public synonym OWA_TEXT for OWA_TEXT;

Synonym created.

SQL> create or replace public synonym OWA_UTIL for OWA_UTIL;

Synonym created.

SQL> create or replace public synonym OWA_INIT for OWA_CUSTOM;

Synonym created.

SQL> create or replace public synonym OWA_CACHE for OWA_CACHE;

Synonym created.

SQL> create or replace public synonym OWA_MATCH for OWA_MATCH;

Synonym created.

SQL> create or replace public synonym WPG_DOCLOAD for WPG_DOCLOAD;

Synonym created.

SQL> 
SQL> 
SQL> @@&privcust_var;
SQL> Rem Copyright (c) 1996, 2008, Oracle. All rights reserved.
SQL> Rem
SQL> Rem   NAME
SQL> Rem     privcust.sql - Oracle Web Agent PL/SQL customization package.
SQL> Rem   PURPOSE
SQL> Rem     Set up some values to be used by Web Agent packages.
SQL> Rem   NOTES
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem     ehanks     01/18/08 - Changing "grant all" to "grant execute" for
SQL> Rem                           security bug #6596784.
SQL> Rem     mmuppago   12/09/05 - Fix for 3434804: OWA packages should
SQL> Rem                           not overwrite customers OWA_CUSTOM packages
SQL> Rem     mpal       07/09/97 -  Creation
SQL> Rem
SQL> 
SQL> create or replace package body OWA_CUSTOM is
  2  
  3          /*********************************************************************/
  4         /*  Global PLSQL Agent Authorization callback function -             */
  5        /*     It is used when PLSQL Agent's authorization scheme is set to  */
  6       /*      GLOBAL or CUSTOM when there is overriding OWA_CUSTOM package.*/
  7      /*       This is a default implementation. User should modify.       */
  8     /*********************************************************************/
  9     function authorize return boolean is
 10     begin
 11        owa_sec.set_protection_realm('To-be-defined realm');
 12        return FALSE;
 13     end;
 14  
 15  begin /* OWA_CUSTOM package customization */
 16  
 17     /*******************************************************************/
 18     /* Set the PL/SQL Agent's authorization scheme --                  */
 19     /*   This should be modified to reflect the authorization need of  */
 20     /*   your PLSQL Agent                                              */
 21     /*******************************************************************/
 22     owa_sec.set_authorization(OWA_SEC.NO_CHECK);
 23  
 24  end;
 25  /

Package body created.

SQL> show errors
No errors.
SQL> 
SQL> prompt Granting execute on owa_custom to public
Granting execute on owa_custom to public
SQL> grant execute on OWA_CUSTOM to public;

Grant succeeded.

SQL> 
SQL> prompt Creating owa_custom synonym
Creating owa_custom synonym
SQL> create or replace public synonym OWA_CUSTOM for OWA_CUSTOM;

Synonym created.

SQL> 
SQL> prompt Creating owa_global synonym
Creating owa_global synonym
SQL> create or replace public synonym OWA_GLOBAL for OWA_CUSTOM;

Synonym created.

SQL> 
SQL> alter session set events '10520 trace name context off';

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem Initialization for ILM
SQL> Rem
SQL> @@catilmini.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catilmini.sql /main/19 2017/09/25 10:44:30 sgdelgad Exp $
SQL> Rem
SQL> Rem catilmini.sql
SQL> Rem
SQL> Rem Copyright (c) 2011, 2017, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catilmini.sql - <one-line expansion of the name>
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      <short description of component this file declares/defines>
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catilmini.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catilmini.sql
SQL> Rem SQL_PHASE: CATILMINI
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    sgdelgad    09/18/17 - Bug 26081503: Insert row used to serialize AIM
SQL> Rem                           RAC operations.
SQL> Rem    hlakshma    06/26/17 - (Bug-26353947): Insert row used to serialize AIM
SQL> Rem                           configuration operations
SQL> Rem    hlakshma    02/18/15 - Project# 45958 : Add new column values to
SQL> Rem                           status row in heat_map_stat$
SQL> Rem    hlakshma    02/27/14 - Initialize the value of the ADO parameter
SQL> Rem                           policy_time (bug-17833609)
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    hlakshma    12/05/13 - Initialize purge interval
SQL> Rem    hlakshma    05/14/13 - Backport fixes in 12.1 to MAIN
SQL> Rem    vradhakr    01/21/13 - XbranchMerge vradhakr_bug-16067485 from
SQL> Rem                           st_rdbms_12.1.0.1
SQL> Rem    vradhakr    01/06/13 - Bug 16067485: Add status row to heat_map_stat$.
SQL> Rem    maba        11/26/12 - log error for bug 14615619
SQL> Rem    hlakshma    06/18/12 - Provide reasonable defaults for storage tiering
SQL> Rem                           related ILM constants
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    hlakshma    01/03/12 - Add initializations for customizing ILM
SQL> Rem                           environment
SQL> Rem    hlakshma    11/11/11 - Insert entries for concurrency control
SQL> Rem    hlakshma    02/07/11 - ILM initialization
SQL> Rem    hlakshma    02/07/11 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> REM Add entires for controling ILM runtime environment
SQL> 
SQL> DECLARE
  2    attribute_exists       EXCEPTION;
  3    PRAGMA                EXCEPTION_INIT(attribute_exists, -00001);
  4  
  5  BEGIN
  6    /* ILM concurrency control */
  7    begin
  8      insert into SYS.ILM_CONCURRENCY$ (last_exec_time, attribute)
  9                            values (systimestamp-1,1);
 10    exception
 11      when attribute_exists then
 12         null;
 13    end;
 14  
 15    /* ILM RAC concurrency control for DBIM */
 16    begin
 17      insert into SYS.ILM_CONCURRENCY$ (last_exec_time, attribute)
 18                            values (systimestamp-1,5);
 19    exception
 20      when attribute_exists then
 21         null;
 22    end;
 23  
 24    /* ILM runtime related initialization */
 25    begin
 26      insert into SYS.ILM_PARAM$ (param#, param_name, param_value)
 27                          values (DBMS_ILM_ADMIN.enabled,
 28                                  'ENABLED', DBMS_ILM_ADMIN.ILM_ENABLED);
 29    exception
 30      when attribute_exists then
 31         null;
 32    end;
 33  
 34    begin
 35      insert into SYS.ILM_PARAM$ (param#, param_name, param_value)
 36                          values (DBMS_ILM_ADMIN.RETENTION_TIME,
 37                                  'RETENTION TIME',
 38                                  DBMS_ILM_ADMIN. ILM_RETENTION_TIME);
 39    exception
 40      when attribute_exists then
 41         null;
 42    end;
 43  
 44    begin
 45      insert into SYS.ILM_PARAM$ (param#, param_name, param_value)
 46                          values (DBMS_ILM_ADMIN.JOBLIMIT,
 47                                  'JOB LIMIT',
 48                                  DBMS_ILM_ADMIN.ILM_LIMIT_DEF);
 49    exception
 50      when attribute_exists then
 51         null;
 52    end;
 53  
 54  
 55    begin
 56      insert into SYS.ILM_PARAM$ (param#, param_name, param_value)
 57                          values (DBMS_ILM_ADMIN.EXECUTION_MODE,
 58                                  'EXECUTION MODE',
 59                                  DBMS_ILM_ADMIN.ILM_EXECUTION_ONLINE);
 60    exception
 61      when attribute_exists then
 62         null;
 63    end;
 64  
 65    begin
 66      insert into SYS.ILM_PARAM$ (param#, param_name, param_value)
 67                          values (DBMS_ILM_ADMIN.EXECUTION_INTERVAL,
 68  
 69                                  'EXECUTION INTERVAL', 15);
 70    exception
 71      when attribute_exists then
 72         null;
 73    end;
 74  
 75    begin
 76      insert into SYS.ILM_PARAM$ (param#, param_name               , param_value)
 77                          values (DBMS_ILM_ADMIN.TBS_PERCENT_USED , 'TBS PERCENT USED' , 85 );
 78    exception
 79      when attribute_exists then
 80        null;
 81    end;
 82  
 83    begin
 84      insert into SYS.ILM_PARAM$ (param#, param_name               , param_value)
 85                          values (DBMS_ILM_ADMIN.TBS_PERCENT_FREE , 'TBS PERCENT FREE', 25 );
 86    exception
 87      when attribute_exists then
 88        null;
 89    end;
 90  
 91     begin
 92      insert into SYS.ILM_PARAM$ (param#, param_name  , param_value)
 93                          values (DBMS_ILM_ADMIN.POLICY_TIME , 'POLICY TIME',
 94                                  DBMS_ILM_ADMIN.ILM_POLICY_IN_DAYS);
 95    exception
 96      when attribute_exists then
 97        null;
 98    end;
 99  
100  END;
101  /

PL/SQL procedure successfully completed.

SQL> 
SQL> REM Add subscriber to the scheduler event queue
SQL> 
SQL> DECLARE
  2    subscriber_exists     EXCEPTION;
  3    PRAGMA                EXCEPTION_INIT(subscriber_exists, -24034);
  4    subs                  SYS.AQ$_AGENT;
  5  
  6  BEGIN
  7  
  8     subs := SYS.AQ$_AGENT('ILM_AGENT', NULL, NULL);
  9     DBMS_AQADM.ADD_SUBSCRIBER('SYS.SCHEDULER$_EVENT_QUEUE', subs);
 10  
 11  EXCEPTION
 12    WHEN subscriber_exists THEN
 13      NULL;
 14  
 15  END;
 16  /

PL/SQL procedure successfully completed.

SQL> 
SQL> REM Register ILM callback
SQL> 
SQL> DECLARE
  2  
  3  BEGIN
  4  
  5  DBMS_AQ.REGISTER (
  6            SYS.AQ$_REG_INFO_LIST(
  7               SYS.AQ$_REG_INFO(
  8                 'SYS.SCHEDULER$_EVENT_QUEUE:ILM_AGENT',
  9                  DBMS_AQ.NAMESPACE_AQ,
 10                  'plsql://SYS.PRVT_ILM.ILM_CALLBACK',
 11                  HEXTORAW('FF')
 12                  )
 13               ),
 14           1
 15           );
 16  exception
 17    when others then
 18      if sqlcode = -04063 then
 19        dbms_system.ksdwrt(1, 'Error-04063: scheduler$_event_queue will be re-validated');
 20      else
 21        raise;
 22      end if;
 23  
 24  END;
 25  /

PL/SQL procedure successfully completed.

SQL> 
SQL> REM Insert status row in heat_map_stat$
SQL> 
SQL> DECLARE
  2    v_rows number;
  3  BEGIN
  4    select count(*) into v_rows from heat_map_stat$ where obj#=-1;
  5    if (v_rows = 0) then
  6      insert into heat_map_stat$ (obj#, dataobj#, ts#, track_time,
  7                                  segment_access, flag, spare1, spare2,
  8                                  spare3, n_write, n_fts,n_lookup)
  9      values (-1, -1, -1, sysdate, 0, 1, NULL,NULL,NULL, 0, 0, 0);
 10      commit;
 11    end if;
 12  END;
 13  /

PL/SQL procedure successfully completed.

SQL> 
SQL> REM Initialize sys.ado_imparam$ with special row to serialize parameter insert/
SQL> REM update
SQL> 
SQL> DECLARE
  2    v_rows number;
  3  BEGIN
  4  -- param# = 0 is a special row that is used to serialize configuration of
  5  -- AIM parameters
  6  
  7    select count(*) into v_rows
  8     from sys.ado_imparam$
  9    where param#=0;
 10  
 11    if (v_rows = 0) then
 12      insert into sys.ado_imparam$ (param#, param_name, param_value)
 13       values (0,'AIM CONFIG SERIALIZATION', 0);
 14      commit;
 15    end if;
 16  END;
 17  /

PL/SQL procedure successfully completed.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem OCM integration
SQL> Rem
SQL> @@execocm.sql
SQL> Rem
SQL> Rem $Header: emll/admin/scripts/execocm.sql /st_emll_12.1.2.0.1/5 2018/09/26 11:35:30 verangan Exp $
SQL> Rem
SQL> Rem execocm.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      execocm.sql - EXECute Oracle Configuration Manager job.
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script submits and runs the database configuration collection
SQL> Rem      job as part of database creation.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      Create directory object for use by the job to create the configuration
SQL> Rem      file at.
SQL> Rem      This script should be run while connected as "SYS".
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    verangan    09/10/18 - fix for bug 28134318
SQL> Rem    dkuhn       09/03/15 - XbranchMerge dkuhn_pdbcheck from main
SQL> Rem    dkuhn       08/11/15 - XbranchMerge dkuhn_bug-21456791 from main
SQL> Rem    dkuhn       06/29/15 - XbranchMerge dkuhn_fixgrant from main
SQL> Rem    dkuhn       09/01/15 - Don't execute code if connected to PDB
SQL> Rem    dkuhn       08/05/15 - bug 21456791: Add grant
SQL> Rem    dkuhn       06/17/15 - Fix grant
SQL> Rem    dkuhn       10/23/14 - bug 19840940: Don't run collect job immediately
SQL> Rem    dkuhn       09/16/14 - fixtrans
SQL> Rem    dkuhn       09/08/14 - add pdb check
SQL> Rem    dkuhn       05/14/14 - Fix error checking
SQL> Rem    jsutton     10/10/13 - make sure oracle_ocm exists
SQL> Rem    jsutton     10/08/13 - add privs
SQL> Rem    jsutton     09/24/12 - use enquote_literal for acl name
SQL> Rem    jsutton     01/18/12 - grant restricted session
SQL> Rem    ckalivar    01/09/12 - bug 11069555: add DBMS_SQL execute permissions to
SQL> Rem                           ORACLE_OCM user, incase public user dont have it
SQL> Rem    jsutton     09/21/11 - check if in upgrade mode, skip acl stuff if so
SQL> Rem    jsutton     09/19/11 - add grants
SQL> Rem    jsutton     08/15/11 - check view validity
SQL> Rem    jsutton     07/11/11 - Fix for upgrade path
SQL> Rem    jsutton     07/06/11 - Ensure ACL set up for access to UTL_INADDR
SQL> Rem    jsutton     07/20/09 - Add priv grants for utl_inaddr
SQL> Rem    glavash     08/20/08 - grant required prives to user
SQL> Rem    dkapoor     07/31/07 - remove stats job
SQL> Rem    dkapoor     05/04/07 - stop old job
SQL> Rem    dkapoor     01/04/07 - drop job before creating one
SQL> Rem    dkapoor     09/20/06 - give priv only if not given to public
SQL> Rem    dkapoor     09/13/06 - grant execute on dbms_scheduler
SQL> Rem    dkapoor     07/26/06 - do not use define
SQL> Rem    dkapoor     07/21/06 - use create_replace_dir
SQL> Rem    dkapoor     06/06/06 - move directory creation after installing the
SQL> Rem                           packages
SQL> Rem    dkapoor     05/23/06 - Created
SQL> Rem
SQL> 
SQL> -- If connected to a CDB database, then _oracle_script should be set to TRUE
SQL> DECLARE
  2    l_is_cdb VARCHAR2(5) := 'NO';
  3  BEGIN
  4    execute immediate 'SELECT UPPER(CDB) FROM V$DATABASE' into l_is_cdb;
  5    IF l_is_cdb = 'YES' THEN
  6      execute immediate 'ALTER SESSION SET "_oracle_script" = TRUE';
  7    END IF;
  8  EXCEPTION
  9    WHEN OTHERS THEN null;
 10  END;
 11  /

PL/SQL procedure successfully completed.

SQL> 
SQL> DECLARE
  2    l_vers v$instance.version%TYPE;
  3  BEGIN
  4    SELECT LPAD(version,10,'0') INTO l_vers FROM v$instance;
  5    IF l_vers >= '12.1.0.0.0' THEN
  6      -- This privilege is necessary in 12c when making calls to
  7      -- ORACLE_OCM.MGMT_CONFIG_UTL.create_replace_dir_obj. The create_replace_dir_obj
  8      -- procedure should only be called from within execocm.sql.
  9      execute immediate 'GRANT INHERIT PRIVILEGES ON USER SYS TO ORACLE_OCM';
 10    END IF;
 11  END;
 12  /

PL/SQL procedure successfully completed.

SQL> 
SQL> DECLARE
  2    l_vers            v$instance.version%TYPE;
  3    l_dirobj_priv_cnt NUMBER;
  4    l_user_cnt        NUMBER;
  5    l_pkg_cnt         NUMBER;
  6    l_priv_cnt        NUMBER;
  7    l_comp_cnt        NUMBER;
  8    l_acl_count       NUMBER;
  9    l_acl_priv        NUMBER;
 10    l_acl_name        VARCHAR2(4000);
 11    l_stat            VARCHAR2(4000);
 12    l_is_cdb          VARCHAR2(4) := 'NO';
 13    l_con_id          NUMBER;
 14  BEGIN
 15   -- The following code was added to ensure OCM code is not executed while connected
 16   -- to a PDB database. The associated bug number is 19792374.
 17   -- This next select returns information required to determine if connected to a PDB or not.
 18   BEGIN
 19     execute immediate 'SELECT UPPER(CDB), SYS_CONTEXT(''USERENV'', ''CON_ID'') FROM V$DATABASE' into l_is_cdb, l_con_id;
 20   EXCEPTION
 21     WHEN OTHERS THEN
 22       null;
 23   END;
 24   -- The pseudo logic is do nothing if connected to a PDB, all other scenarios run the code.
 25   -- YES and con_id = 1, means connected to root container.
 26   -- YES and con_id > 1, means connected to a PDB.
 27   -- NO or NULL means connected to a normal (non-container/PDB) database.
 28   IF l_is_cdb = 'YES' and l_con_id > 1  THEN
 29     -- Inside PDB, do nothing.
 30     NULL;
 31   ELSE
 32     -- If not connected to a PDB, then execute the code.
 33  
 34    BEGIN
 35  
 36      select count(*) into l_user_cnt from dba_users where username = 'ORACLE_OCM';
 37      IF l_user_cnt <> 0 THEN
 38  
 39        select count(*) into l_priv_cnt from dba_tab_privs where
 40          GRANTEE ='ORACLE_OCM' and TABLE_NAME='UTL_FILE' and
 41          upper(PRIVILEGE) = 'EXECUTE';
 42        IF l_priv_cnt = 0 THEN
 43          -- Grant priv only if its not already given.
 44          execute immediate 'GRANT EXECUTE ON SYS.UTL_FILE TO ORACLE_OCM';
 45        END IF;
 46  
 47        select count(*) into l_priv_cnt from dba_tab_privs where
 48          GRANTEE ='ORACLE_OCM' and TABLE_NAME='DBMS_SCHEDULER' and
 49          upper(PRIVILEGE) = 'EXECUTE';
 50        IF l_priv_cnt = 0 THEN
 51          -- Grant priv only if its not given.
 52          execute immediate 'GRANT EXECUTE ON SYS.DBMS_SCHEDULER TO ORACLE_OCM';
 53        END IF;
 54  
 55        select count(*) into l_priv_cnt from dba_tab_privs where
 56          GRANTEE ='ORACLE_OCM' and TABLE_NAME='UTL_INADDR' and
 57          upper(PRIVILEGE) = 'EXECUTE';
 58        IF l_priv_cnt = 0 THEN
 59          -- Grant priv only if its not given.
 60          execute immediate 'GRANT EXECUTE ON SYS.UTL_INADDR TO ORACLE_OCM';
 61        END IF;
 62  
 63        select count(*) into l_priv_cnt from dba_tab_privs where
 64           GRANTEE ='ORACLE_OCM' and TABLE_NAME='DBMS_SQL' and
 65           upper(PRIVILEGE) = 'EXECUTE';
 66        IF l_priv_cnt = 0 THEN
 67           -- Grant priv only if its not given to public.
 68           execute immediate 'GRANT EXECUTE ON SYS.DBMS_SQL TO ORACLE_OCM';
 69        END IF;
 70  
 71        -- Grant RESTRICTED SESSION
 72        execute immediate 'GRANT RESTRICTED SESSION TO ORACLE_OCM';
 73  
 74        -- need to set up ACL if DB version > 11
 75        select LPAD(version,10,'0') into l_vers from v$instance;
 76        -- Grant privilege to use UTL_INADDR via ACL if necessary
 77        IF l_vers >= '11.0.0.0.0' THEN
 78          -- Skip over ACL/XML DB steps if in UPGRADE mode
 79          select status into l_stat from dba_registry where comp_id='CATPROC';
 80          if l_stat <> 'UPGRADING' then
 81            -- check for XML DB installed
 82            execute immediate 'select count(*) from dba_registry '||
 83              'where COMP_NAME = ''Oracle XML Database'' and STATUS = ''VALID'''into l_comp_cnt ;
 84            IF l_comp_cnt > 0 THEN
 85              BEGIN
 86                -- make sure DBA_NETWORK_ACLS view exists (may not in upgrade path)
 87                execute immediate 'select count(*) from dba_objects '||
 88                  'where object_type=''VIEW'' and object_name=''DBA_NETWORK_ACLS'' and STATUS=''VALID'''
 89                  into l_comp_cnt;
 90                IF l_comp_cnt > 0 THEN
 91                  -- check for ACL assigned to localhost
 92                  execute immediate 'select count(*) from dba_network_acls where host=''localhost''' into l_acl_count;
 93                  IF (l_acl_count = 0) THEN
 94                    -- create ACL and assign to localhost
 95                    execute immediate
 96                      'BEGIN '||
 97                      '  DBMS_NETWORK_ACL_ADMIN.CREATE_ACL(''oracle-sysman-ocm-Resolve-Access.xml'', ' ||
 98                         '''OCM User Resolve Network Access using UTL_INADDR'', ''ORACLE_OCM'', TRUE, ''resolve'');' ||
 99                      '  DBMS_NETWORK_ACL_ADMIN.ASSIGN_ACL(''oracle-sysman-ocm-Resolve-Access.xml'', ''localhost'');' ||
100                      '  COMMIT;' ||
101                      'END;';
102                  ELSE
103                    -- ACL for localhost exists
104                    -- check for resolve privilege for OCM user
105                    execute immediate
106                      'SELECT acl, DBMS_NETWORK_ACL_ADMIN.CHECK_PRIVILEGE_ACLID(aclid, ''ORACLE_OCM'', ''resolve'') ' ||
107                      '  FROM dba_network_acls WHERE host = ''localhost'''
108                      INTO l_acl_name, l_acl_priv;
109                    IF (l_acl_priv IS NULL OR l_acl_priv = 0) THEN
110                      -- add resolve privilege
111                      execute immediate
112                        'BEGIN ' ||
113                        '  DBMS_NETWORK_ACL_ADMIN.ADD_PRIVILEGE(' || DBMS_ASSERT.ENQUOTE_LITERAL(l_acl_name) || ', ' ||
114                          '''ORACLE_OCM'', TRUE, ''resolve'');' ||
115                        '  COMMIT;' ||
116                        'END;';
117                    END IF;
118                  END IF;
119                END IF;
120              EXCEPTION
121                WHEN OTHERS THEN NULL;
122              END;
123            END IF;
124          END IF;
125        END IF;
126      END IF;
127  
128      SELECT count(*) into l_pkg_cnt from dba_objects
129        where owner = 'ORACLE_OCM' and object_type='PACKAGE BODY' and object_name='MGMT_CONFIG_UTL';
130  
131      IF l_pkg_cnt <> 0 THEN
132        ORACLE_OCM.MGMT_CONFIG_UTL.create_replace_dir_obj;
133        select count(*) into l_dirobj_priv_cnt from dba_tab_privs
134          where GRANTEE ='ORACLE_OCM' and TABLE_NAME='ORACLE_OCM_CONFIG_DIR' and upper(PRIVILEGE) = 'READ';
135        IF l_dirobj_priv_cnt = 0 THEN
136          execute immediate 'GRANT READ ON DIRECTORY ORACLE_OCM_CONFIG_DIR TO ORACLE_OCM';
137        END IF;
138        select count(*) into l_dirobj_priv_cnt from dba_tab_privs
139          where GRANTEE ='ORACLE_OCM' and TABLE_NAME='ORACLE_OCM_CONFIG_DIR' and upper(PRIVILEGE) = 'WRITE';
140        IF l_dirobj_priv_cnt = 0 THEN
141          execute immediate 'GRANT WRITE ON DIRECTORY ORACLE_OCM_CONFIG_DIR TO ORACLE_OCM';
142        END IF;
143        -- add grants for 2nd directory
144        select count(*) into l_dirobj_priv_cnt from dba_tab_privs
145          where GRANTEE ='ORACLE_OCM' and TABLE_NAME='ORACLE_OCM_CONFIG_DIR2' and upper(PRIVILEGE) = 'READ';
146         IF l_dirobj_priv_cnt = 0 THEN
147          execute immediate 'GRANT READ ON DIRECTORY ORACLE_OCM_CONFIG_DIR2 TO ORACLE_OCM';
148         END IF;
149         select count(*) into l_dirobj_priv_cnt from dba_tab_privs
150           where GRANTEE ='ORACLE_OCM' and TABLE_NAME='ORACLE_OCM_CONFIG_DIR2' and upper(PRIVILEGE) = 'WRITE';
151         IF l_dirobj_priv_cnt = 0 THEN
152           execute immediate 'GRANT WRITE ON DIRECTORY ORACLE_OCM_CONFIG_DIR2 TO ORACLE_OCM';
153         END IF;
154  
155        COMMIT;
156      END IF;
157  
158      EXCEPTION
159      WHEN OTHERS THEN
160        raise_application_error(-20007,SQLERRM);
161    END;
162   END IF; -- IF connected to a PDB or not.
163  END;
164  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- remove old dba jobs, if exists
SQL> DECLARE
  2  job_num NUMBER;
  3  CURSOR job_cursor is
  4      SELECT job
  5      FROM dba_jobs
  6      WHERE schema_user = 'ORACLE_OCM'
  7      AND (what like 'ORACLE_OCM.MGMT_CONFIG.%'
  8       OR what like 'ORACLE_OCM.MGMT_DB_LL_METRICS.%');
  9  BEGIN
 10     FOR r in job_cursor LOOP
 11       sys.DBMS_IJOB.REMOVE(r.job);
 12       COMMIT;
 13     END LOOP;
 14  END;
 15  /

PL/SQL procedure successfully completed.

SQL> 
SQL> DECLARE
  2    l_user_cnt        NUMBER;
  3    l_is_cdb          VARCHAR2(4) := 'NO';
  4    l_con_id          NUMBER;
  5  BEGIN
  6    -- The following code was added to ensure OCM code is not executed while connected
  7    -- to a PDB database. The associated bug number is 19792374.
  8    -- This next select returns information required to determine if connected to a PDB or not.
  9    BEGIN
 10      execute immediate 'SELECT UPPER(CDB), SYS_CONTEXT(''USERENV'', ''CON_ID'') FROM V$DATABASE' into l_is_cdb, l_con_id;
 11    EXCEPTION
 12      WHEN OTHERS THEN
 13        null;
 14    END;
 15    -- The pseudo logic is do nothing if connected to a PDB, all other scenarios run the code.
 16    -- YES and con_id = 1, means connected to root container.
 17    -- YES and con_id > 1, means connected to a PDB.
 18    -- NO or NULL means connected to a normal (non-container/PDB) database.
 19    IF l_is_cdb = 'YES' and l_con_id > 1  THEN
 20      -- Inside PDB, do nothing.
 21      NULL;
 22    ELSE
 23      -- If not connected to a PDB, then execute the code.
 24      select count(*) into l_user_cnt from dba_users where username = 'ORACLE_OCM';
 25      IF l_user_cnt <> 0 THEN
 26        execute immediate 'GRANT MANAGE SCHEDULER TO ORACLE_OCM';
 27      END IF;
 28    END IF; -- IF connected to a PDB or not.
 29  END;
 30  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- stop the job
SQL> DECLARE
  2    l_pkg_cnt        NUMBER;
  3  BEGIN
  4    SELECT count(*) into l_pkg_cnt from dba_objects
  5      where owner = 'ORACLE_OCM' and object_type='PACKAGE BODY' and object_name='MGMT_CONFIG';
  6    IF l_pkg_cnt <> 0 THEN
  7      BEGIN
  8        -- call to stop the job
  9        ORACLE_OCM.MGMT_CONFIG.stop_job;
 10      EXCEPTION
 11        WHEN OTHERS THEN
 12          -- ignore any exception
 13          null;
 14      END;
 15    END IF;
 16  END;
 17  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- submit the job and run now
SQL> DECLARE
  2    l_pkg_cnt        NUMBER;
  3    l_is_cdb         VARCHAR2(4) := 'NO';
  4    l_con_id         NUMBER;
  5  BEGIN
  6     -- Check first to see if connected to a PDB.
  7     BEGIN
  8       execute immediate 'SELECT UPPER(CDB), SYS_CONTEXT(''USERENV'', ''CON_ID'') FROM V$DATABASE' into l_is_cdb, l_con_id;
  9     EXCEPTION
 10       WHEN OTHERS THEN
 11          null;
 12     END;
 13    -- Pseudo logic is do nothing if connected to a PDB, all other scenarios submit the job.
 14    -- YES and con_id = 1, means connected to root container.
 15    -- YES and con_id > 1, means connected to a PDB
 16    -- NO or NULL means connected to a normal (non-container/PDB) database.
 17    IF l_is_cdb = 'YES' and l_con_id > 1  THEN
 18      NULL;
 19    ELSE
 20      SELECT count(*) into l_pkg_cnt from dba_objects
 21        where owner = 'ORACLE_OCM' and object_type='PACKAGE BODY' and object_name='MGMT_CONFIG';
 22      IF l_pkg_cnt <> 0 THEN
 23        ORACLE_OCM.MGMT_CONFIG.submit_job;
 24        -- Do NOT run the collection job immediately when creating data dictionary objects.
 25        -- ORACLE_OCM.MGMT_CONFIG.run_now;
 26      END IF;
 27    END IF; -- IF connected to a PDB or not.
 28  END;
 29  /

PL/SQL procedure successfully completed.

SQL> 
SQL> DECLARE
  2    l_user_cnt        NUMBER;
  3    l_is_cdb          VARCHAR2(4) := 'NO';
  4    l_con_id          NUMBER;
  5  BEGIN
  6    -- The following code was added to ensure OCM code is not executed while connected
  7    -- to a PDB database. The associated bug number is 19792374.
  8    -- This next select returns information required to determine if connected to a PDB or not.
  9    BEGIN
 10      execute immediate 'SELECT UPPER(CDB), SYS_CONTEXT(''USERENV'', ''CON_ID'') FROM V$DATABASE' into l_is_cdb, l_con_id;
 11    EXCEPTION
 12      WHEN OTHERS THEN
 13        null;
 14    END;
 15    -- The pseudo logic is do nothing if connected to a PDB, all other scenarios run the code.
 16    -- YES and con_id = 1, means connected to root container.
 17    -- YES and con_id > 1, means connected to a PDB.
 18    -- NO or NULL means connected to a normal (non-container/PDB) database.
 19    IF l_is_cdb = 'YES' and l_con_id > 1  THEN
 20      -- Inside PDB, do nothing.
 21      NULL;
 22    ELSE
 23      -- If not connected to a PDB, then execute the code.
 24      select count(*) into l_user_cnt from dba_users where username = 'ORACLE_OCM';
 25      IF l_user_cnt <> 0 THEN
 26        execute immediate 'REVOKE MANAGE SCHEDULER FROM ORACLE_OCM';
 27        BEGIN
 28          execute immediate 'REVOKE RESTRICTED SESSION FROM ORACLE_OCM';
 29          EXCEPTION
 30            WHEN OTHERS THEN
 31            raise_application_error(-20007,SQLERRM);
 32        END;
 33      END IF; -- IF l_user_cnt <> 0
 34    END IF; -- IF connected to a PDB or not.
 35  END;
 36  /

PL/SQL procedure successfully completed.

SQL> 
SQL> DECLARE
  2    l_user_cnt NUMBER;
  3    l_vers     v$instance.version%TYPE;
  4  BEGIN
  5    SELECT lPAD(version,10,'0') INTO l_vers FROM v$instance;
  6    IF l_vers >= '12.1.0.0.0' THEN
  7      SELECT COUNT(*) INTO l_user_cnt FROM dba_users WHERE username = 'ORACLE_OCM';
  8      IF l_user_cnt <> 0 THEN
  9        -- Ensure this privilege is revoked, the privilege should only be in place
 10        -- while executing execocm.sql.
 11        BEGIN
 12        execute immediate 'REVOKE INHERIT PRIVILEGES ON USER SYS FROM ORACLE_OCM';
 13            EXCEPTION
 14            WHEN OTHERS THEN
 15              -- ignore any exception
 16              null;
 17         END;
 18      END IF;
 19    END IF;
 20  END;
 21  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- If connected to a CDB database, set _oracle_script to FALSE at end of script
SQL> DECLARE
  2    l_is_cdb VARCHAR2(5) := 'NO';
  3  BEGIN
  4    execute immediate 'SELECT UPPER(CDB) FROM V$DATABASE' into l_is_cdb;
  5    IF l_is_cdb = 'YES' THEN
  6      execute immediate 'ALTER SESSION SET "_oracle_script" = FALSE';
  7    END IF;
  8  EXCEPTION
  9    WHEN OTHERS THEN null;
 10  END;
 11  /

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem
SQL> Rem TSDP
SQL> Rem
SQL> @@exectsdp.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/exectsdp.sql /main/3 2014/02/20 12:45:37 surman Exp $
SQL> Rem
SQL> Rem exectsdp.sql
SQL> Rem
SQL> Rem Copyright (c) 2011, 2014, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      exectsdp.sql - EXECute anonymous pl/sql blocks for TSDP
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script is used to execute anonymous PL/SQL blocks.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      Called by catpexec.sql
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/exectsdp.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/exectsdp.sql
SQL> Rem SQL_PHASE: EXECTSDP
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    surman      04/12/12 - 13615447: Add Add SQL patching tags
SQL> Rem    dgraj       10/13/11 - Project 32079: Anonumous PL/SQL blocks for TSDP
SQL> Rem    dgraj       10/13/11 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> -- Create the default REDACT_AUDIT Policy
SQL> DECLARE
  2  radm_feature_options sys.dbms_TSDP_protect.FEATURE_OPTIONS;
  3  policy_conditions sys.dbms_TSDP_protect.POLICY_CONDITIONS;
  4  BEGIN
  5    radm_feature_options ('ORA$TSDP_DEFAULT') := 'ORA$TSDP_DEFAULT';
  6  
  7    begin
  8  
  9    sys.dbms_TSDP_protect.add_policy('REDACT_AUDIT', 0, radm_feature_options,
 10                                     policy_conditions);
 11  
 12    exception
 13      when others then
 14        null;
 15  
 16    end;
 17  
 18  END;
 19  /

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem Queryable patch inventory
SQL> @@execqopi.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/execqopi.sql /main/11 2017/06/15 23:27:08 prprprak Exp $
SQL> Rem
SQL> Rem execqopi.sql
SQL> Rem
SQL> Rem Copyright (c) 2012, 2017, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      execqopi.sql - Job creation
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Queryable patch inventory job creation
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      .
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/execqopi.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/execqopi.sql
SQL> Rem SQL_PHASE: EXECQOPI
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    prprprak    05/08/17 - #25991099 Put log directory outside ORACLE_HOME
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    dkoppar     09/17/13 - #17344263 add sanyty checks
SQL> Rem    dkoppar     08/26/13 - #17352756 add widnows platform 12
SQL> Rem    dkoppar     03/09/12 - create job only if needed
SQL> Rem    tbhukya     07/13/12 - Remove unnecessary code
SQL> Rem    tbhukya     05/24/12 - Enable job code
SQL> Rem    tbhukya     05/23/12 - Disbale job code
SQL> Rem    tbhukya     05/08/12 - Main job name for each nodes
SQL> Rem    surman      04/13/12 - 13615447: Add SQL patching tags
SQL> Rem    tbhukya     01/09/12 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> 
SQL> variable opatch_log_dir varchar2(1000);
SQL> variable opatch_script_dir varchar2(1000);
SQL> variable opatch_inst_dir varchar2(1000);
SQL> 
SQL> 
SQL> -- Create directories for log, script files with correct patch
SQL> DECLARE
  2    pf_id  NUMBER := 0;
  3    not_win BOOLEAN := TRUE;
  4  
  5    PLATFORM_WINDOWS32      CONSTANT BINARY_INTEGER := 7;
  6    PLATFORM_WINDOWSIA64    CONSTANT BINARY_INTEGER := 8;
  7    PLATFORM_WINDOWS64      CONSTANT BINARY_INTEGER := 12;
  8    PLATFORM_OPENVMS        CONSTANT BINARY_INTEGER := 15;
  9  BEGIN
 10    select value into :opatch_log_dir
 11                 from v$parameter
 12                 where name='user_dump_dest';
 13  
 14    SELECT platform_id INTO pf_id FROM v$database;
 15    dbms_system.get_env( 'ORACLE_HOME', :opatch_script_dir );
 16  
 17    IF pf_id = PLATFORM_WINDOWS32 THEN
 18      not_win := FALSE;
 19    ELSIF pf_id = PLATFORM_WINDOWSIA64 THEN
 20      not_win := FALSE;
 21    ELSIF pf_id = PLATFORM_WINDOWS64 THEN
 22      not_win := FALSE;
 23    END IF;
 24  
 25    :opatch_inst_dir := :opatch_script_dir;
 26    IF not_win THEN
 27      :opatch_script_dir := :opatch_script_dir || '/QOpatch';
 28      :opatch_inst_dir   := :opatch_inst_dir || '/OPatch';
 29    ELSE
 30      :opatch_script_dir := :opatch_script_dir || '\QOpatch';
 31      :opatch_inst_dir   := :opatch_inst_dir || '\OPatch';
 32    END IF;
 33  
 34  
 35    -- single quotes in :opatch_log_dir and :opatch_script_dir
 36    -- would need extra quoting
 37    execute immediate 'CREATE OR REPLACE directory opatch_log_dir AS ''' ||
 38                       :opatch_log_dir || '''';
 39    execute immediate 'CREATE OR REPLACE directory opatch_script_dir AS ''' ||
 40                       :opatch_script_dir || '''';
 41    execute immediate 'CREATE OR REPLACE directory opatch_inst_dir AS ''' ||
 42                       :opatch_inst_dir || '''';
 43  END;
 44  /

PL/SQL procedure successfully completed.

SQL> 
SQL> --
SQL> -- Create jobs on different RAC nodes if it is a RAC env
SQL> -- o.w. create job on current env.
SQL> --
SQL> 
SQL> 
SQL> DECLARE
  2    v_code  NUMBER;
  3    exist   NUMBER;
  4    v_errm  VARCHAR2(64);
  5    jobname VARCHAR2(128);
  6  BEGIN
  7  
  8    jobname := 'LOAD_OPATCH_INVENTORY';
  9  
 10    select count(*) into exist
 11        from   dba_scheduler_jobs
 12        where  job_name=jobname AND owner='SYS';
 13  
 14    if exist = 0 then
 15      -- Create job on current oracle home
 16      DBMS_SCHEDULER.CREATE_JOB (
 17        job_name        => 'Load_opatch_inventory',
 18        job_type        => 'PLSQL_BLOCK',
 19        job_action      => 'BEGIN dbms_qopatch.opatch_inv_refresh_job(); END;',
 20        start_date      => SYSTIMESTAMP,
 21        auto_drop       => FALSE,
 22        comments         => 'Load opatch inventory on request');
 23    end if;
 24  
 25     EXCEPTION
 26      WHEN OTHERS THEN
 27        ROLLBACK;
 28      v_code := SQLCODE;
 29      v_errm := SUBSTR(SQLERRM, 1, 64);
 30      DBMS_OUTPUT.PUT_LINE('Error code ' || v_code || ': ' || v_errm);
 31      raise;
 32  END;
 33  /

PL/SQL procedure successfully completed.

SQL> 
SQL> show errors
No errors.
SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> --CATCTL -R
SQL> --CATCTL -M
SQL> Rem proj-58146
SQL> Rem Execute actions for the remote scheduler agent
SQL> @@execrsa.plb
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> create or replace procedure remote_scheduler_agent.add_agent_certificate wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  320 1d6
 21  Vj9evIe80VqtGg7Q3GG6w+W8Z0Iwg3n3mEgVfI5A2sE+NPMUmSZNzWkbxiIvCvSkMdzVG9Ws
 22  oOApaX+bpTLRW3asHwz53JsP3AEhW8z9ytcIfRNPM/6KKM2aOtIQeyHB3y7n+g0yGI1nQE76
 23  dHJYk+upVwRJxPGCW4LD/R2XQn9LBFxHg5Z5RnJY17vI30po3F+JK3Yc72loqt35855yjEd0
 24  LUzBu+xWYFUfynqr7cKRWFr9ML7+LaTbKQXZwIKP8QhYXNtmTsxPeOSSNMt61pDDOJe5zfKR
 25  Y4Elm/9fNwnapV/HS5+VRqWEqRFbPuLl2WcbHmu3AlApyxGa2qTF6FTBzrZ+yGACs/hAFkBR
 26  sUh9VIQsk0ggkKH9RnbMMswv6DZhlCSYdsNkQZgnXIgmcUW0lHsLAiwyGfoGwDWzh+BlaNWB
 27  ghbaT69wV0CHqDDxBS7TudfrJEW8lXk=
 28  
 29  /

Procedure created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE FUNCTION remote_scheduler_agent.restrict_access wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  202 154
 21  XsN9swyBhTPY24gk97XhhnbPbBswgwL3r9xqfHRArf4+z9kbzSFKAAGQ2Wayv5ej4syxAtMh
 22  nhQpMBAl5Q4mS/8fuvnNcmFub4ldZu9Lg0L2xWSX5SX/6aYDkEfTcR/TlAiARknRt7Kc2a1a
 23  R5mhS5fCYsDhLdArzsoW0qbjjmAQrHDUcRIwgoftvCzDdXdBNAuZcCux1EJ5XJMe1APprs6a
 24  P+dyixqd8g/tccFWsDWcRnLfblX39ceKZ6qxNPv2EwiyVWWXOiXLCAIwJNeSfC7NoAD22RuX
 25  i+2nIMg/bUCqXcLdU64Gn9ALKkOorYWgy6oYjI+GmCAllkCj
 26  
 27  /

Function created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PROCEDURE remote_scheduler_agent.submit_job_results wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  4a1 2c5
 21  4MI/cbCNgiXZrkuo5Wavz9y+7K0wgxDxmiCDfC/G/kcPUhKeTTcC5SUh5QB1zvIJlZ8n2nOv
 22  bVzKuljhWNObPCQ/QOYVq90YihS/mphOVUmnFYDsWkbC7Dun/U5JT1hmYgp+Xp/acLHtBP0I
 23  28xIJMpdptCikvv3sUh5wUaocUsKkTS/3gWNGwn98iFBPNlG/brKs2uPsIo/bnWiqACcLGOO
 24  JaVG8MTqVxexztiuHulRhqIsdtx3Byi9xXnmI6OuFiqonbbB/APtOGs5EQUSL8UeZdShhb/i
 25  N0pbLXS+uXtRMJAXPk06ukVNwqCmWOKbLp7+OnSRDTkkD3PXJddlD9rtBf/cVdstoQ93qUpY
 26  ZWubHRpgZrarsggQwyelzPEx3NxR8mY7RQc+mMZO9doHwvZa7A+jBKRlBYgV4IywTMb9M7u9
 27  uyiqz/7dTmCYW+JhmOtNIpYHJSK2NLXgHzavgdfjAu9jZ67W90HCDPIcJqQrG2bP8ci9+Vmx
 28  nQMBOovSj+Wnk3ygDpfflEPv9EWySppAQcG+j4kpeg+WbkESK8dfEQxcHfz5B+C2O/tQAEDX
 29  AGbZOz7AeZsWJ7ufhSyzSgTeA6bl7HLrwuRcAQ+Q7TZPEF/EjbsdekSFNX2mY83CEGQeNHY6
 30  uTJYY217/En7b+mHX903/r9pKPftZdoawfXGsABr11XNnKoy5Wyf
 31  
 32  /

Procedure created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PROCEDURE remote_scheduler_agent.submit_job_results2 wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  283 1be
 21  aBZhb7Y3aa4JzGwDm1hEcyBnzrwwgxBp2UgVfC+KWGS0QeEJ2zcLrWz/pzbz2oF7EG5W5+Ly
 22  lFqNxvDQZKiyGmz8HORQiopH3GZEasqN51wDMbsnc5N+9d7lG2QKMTA2YTREwGOENfzSbVfd
 23  A0mTffpYEtScFbHTPkw+q9u+j3RrCrpuYwlBjuGu7i8Z/MeW1DgiYz92Jms6tuOFYc5T486+
 24  KsP6Iffz6guAiR5WeGcxBzHfvj417BDM/VRv/cjX+1QttZcu7dXL/5EiewNkx9h9/S4dJBuk
 25  85l/S/vb5mszBIRR3vah/vFY8GR/RYz/fmSvecfAqpXuM6fE0aMJIPS6A2cup1jlIyCbEsEH
 26  rGR0tpT0//gM43ZGnszTtLcPiuQkOlLt2dczZYEo+9nCFizdN4bzfd4CCdSQeijcKBKvZ9FO
 27  mCALu+i3
 28  
 29  /

Procedure created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PROCEDURE remote_scheduler_agent.submit_filewatch_results wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  1fb 199
 21  HcrTeYJ0/yTnDfDUfPx9AvradG4wgwLQ19xGZy9GAE6Ozb3ff3qpbnARkdP5bhyi3DYxMVa9
 22  4+5JhzPukEw84/T9wVAHJuLiZGX3ZdLHN3xiIBDa6gdhXk+BaHYKzC4MeK5wiKb0/QtDnu6n
 23  uEK8H16NDBxSk4Oz0JIOvw9oFprRmoNV+0lqaklBEV4Wgtq2evenWEoy6z4Oi00zDLBgL+Us
 24  yUQ3G9YGXzl+fSR7KsRqmL7HdHm1Ih1nbDGcotxWop3TBLAJSWVAot9Dh0cBlKXnmerCadmJ
 25  gPFfDacN3sLNa4T/mzmbrgQOY953IaSnuRk0MKWNOBtCRcKUqBvIly9EN0H6KoGaAzU7nf6L
 26  jQac+8ZSBCyvRuu9fa3mqAYqVwikhChTPbS++OFUDNAx
 27  
 28  /

Procedure created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PROCEDURE remote_scheduler_agent.filewatch_request_resend wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  23f 1c2
 21  2R065p0Kovm07Sd273ZjjceHgYcwg43ILUjWfC9A2k6OxPdaXEBKNaTndpXTtNvBifXm81fy
 22  FKvDdCcHes+yvXl7kX31PDrkEJ2Wt2bduO/zM8ajqrlFm2mgkoyx6AM9fV5EglvKbxpTT2am
 23  hqX82cozQ+t2BDGYFpa42Vrz2EZaUMFBAxUf1AcXxbqR8VIqx+mY1faywxz1PbFFRCaaE9yE
 24  kQ3IKIcFiO1hy4e/ua1vf2tIANkXBNqm0mBtuI0Jrxbjf1YU6OY47lv702Jmp3C5Csphc4E5
 25  oTHyhWox0qQKBBZWRTcKBDqNP7aql8mSwnfUiviSUmgEX9UdczIhkFJkelnntfBNq3mPd/Uf
 26  PCgYB98ZuNR5qVjgBtPRxD41tNib8QS5+JLrZFIV+YjbYXmDbFO4Ih07tollpMbYBcdApv4z
 27  fQDPHbm8jNA=
 28  
 29  /

Procedure created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PROCEDURE remote_scheduler_agent.unregister_agent wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  23c 19d
 21  tbm9XikCmhPktrBK+cs8OTgBeZwwgwLIJCAVfC+V2sFecbCpjgF9VBuGcVIa1Ny7bvlYURZT
 22  jj7h+sjwKJoUZxFrCQC0api/+e2ct/d1jkZQSDS6O78SwdknQ9/4oabKb015JnS6fXIKyiY2
 23  AKKMGulAePFW4yN/829kFHmgeqtIcfJLrLo+deaXkHrG6eXWh8zf0MfyDZBG1OoyhqkelsR+
 24  /cE10l1pblHOJ50ZSBUpVgRfnJSm5K9SZXJTWZPFWfIVR1RWAomFdh/sRZNhWkPIx8A+Zp5g
 25  2wxEs2RHs3/JIaL8IiTctd35bdNTO/bEBRBh1xAwZe6Y22joi3Rz6GnWLZ70a5iB45uaubAn
 26  VVNDU/6XrBkgc+9GuFemnXrvzJ85UPpQTP4VMkkDmCAaSY08
 27  
 28  /

Procedure created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PROCEDURE remote_scheduler_agent.check_agent_version wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  883 40e
 21  wiWNHkt98TxsjEiA4bz5rzWgM5gwg40rmvYFfC8ZA7UYEoifEauny6NaWq9KjaJZ918Uv823
 22  obrrQI1hFDFwyCQ/SbWJcXh8naKnvJj4udJVrfSOx9Ow8d1qx/ml1QV6Q2QHiq68BSCahx0o
 23  ynHT4gP9ZpSUdo8biU5cFpZAMI6AzSIiZj3/CC6FEXTXC0rvqAS9vnim5S/M1qt4DUJ8vHZZ
 24  AHo8v737jXzlgqR/oOGkYF+pVKC0ux/qnOrnu7jXMEVKuDHsrpgIkqhjH5cLwJmJ9sIUwGX9
 25  qoudQM+LaCJ4iGIJIrEb6mNsQ9lZbdhaPt3+Yc8vtmCx1/jdgpSJorDxxJFt11HIiziI8CDX
 26  ZjjFA6ynF1/FeSuQ5a+RyeOgV1mobADdqzd2o+HUU4dblBRmDJf2v+YUhwqp8airzEp/1vF3
 27  S4WgCA8aoE0OsaWy0hi4HtgGqdx0tzKXIVxTWkLMJUBf8u/V2zBUztosKG5XKwFZG0qhOLjU
 28  5w/8XGkJ9X69Xl213o3/JMjKxMPa/0Jf6U2/RxMmGjJEYDnOgkRk4VntRbkYfGXGYNiiU1qI
 29  gtOOkNyC8ongsvzc8NM+BvXiA75USay604BQcpSvMWmoqbMsNs8tBXo0XS8gyxP41yK1/BM8
 30  Z/FIWURxEY9T0XsxTmj0N2PABJQOwJGPs2bbkj8ZZGMnkDNSqYSqXU915wCLy0t/D+eTf03G
 31  +184IfwXKuCoxfoDkdDmy25SwFWuTaB2tKO1VL3qFg2iNDloUntYOEhDZX1j/VT0a2EMPoGz
 32  AwCBJSjYjlvWGLf67b+Hh/4lzS6H2aCWMujYFZ80cpIHS4YZUW1EYbvBdGTEveYjZOHcGekF
 33  CkPBO8oj5mJIzsd0IH954bEyS+ENSmsbyZPi9axM8Hkszms6DtZHT2H4akjH3WR7Vt8FnOSz
 34  ZNTIAmwJnkK8K9m9ick9taal0Mb/LDeGLYJqz7S57oHNpviau7sgmIT55/6q7qVfmFLDxsWw
 35  NRPjWHEP+ftCLHaH
 36  
 37  /

Procedure created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PROCEDURE remote_scheduler_agent.register_agent wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  134 124
 21  J82VR5HIRoI/JhUYAa1TucF7Y4AwgwHQmMsVfHTpWPiUMaManiZ0dMo5eH8uoqHIkBUEf8OU
 22  mR2ltWYhNBR6MXsz97tBbqI98xj2JG4g/vmr3ISqvh9YL4MtxEuE9/ymFCpQNF9aZkIDf9N6
 23  +WtK5zsoxS0PoFuLjO+UIUv5UX7FdBf666tsJ8GjNtWn9i03p1IqZVwHHdP9FyQH6Q11Ijjw
 24  8C2G0+7/QnRWMnQ9ZkQRBpYDV5d5/JrxZgwmm+Xs106bgA+8GQQ9EVyJ30BzumHseqbm9lnY
 25  
 26  
 27  /

Procedure created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PROCEDURE remote_scheduler_agent.register_agent2 wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  1c1 158
 21  NehrgObHEZUqahzh7P0xI0XbiWQwg3nIfyAVfC8C2sHqMO9azHcwfWl37uAsLelXjANr/JEy
 22  42mcy4m1ZOx1UE24txCaVRJyGS1eTf5fBiF2nT//aj4/HAe7A1aZqF9ON3BtZrH7VIhwk2wa
 23  yNZMukT7u1BBiD6ikDF2zd34v8Z7q6WLLMB22w/X860JzgSoJlOv0IAWDWTfv+dFDLwF2RvD
 24  VgKB6bnSK208vhw32x4TVIS7UiplVdQdwsRKSG0BTsI03W/aDIYvhjxEX4dY0r4AwHZiHvVc
 25  E89Bopdmwbohwkj8waPR5VjpMvBll+8pFGiTLBs1viOSRLSsJxg=
 26  
 27  /

Procedure created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PROCEDURE remote_scheduler_agent.register_agent3 wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  645 374
 21  qHYH/4DNWMQUKy+5p/cdOo4DLSIwg43DTCCDfI5Vgp0GMz4miag88h7Dd1u3cexN9Gp+6+Ku
 22  zDk5UQl18Q4NCT/kbpbjNzLsT+AsmhLQcgB4tm+DfVmI5sWcoafZIRicwLcPEwCmeF2s8aZr
 23  h9BGMdE46qesfpEV/RLf8zDhLoiExWaw1EVQRrj5jmVJwL2/0A7IvVfY0aKEJ4ZC5yakAI9O
 24  rVqkeAHcysAPmwWdio4jotTtyEFJqokvdna3Jpap3BCdv70cu418ZW+z3g7c1vPCOGTLCABb
 25  YDh972u4ElsLBsfYfxegZIPJ353P7Vav8xkSoEXbfOdEYGifXHLPkczpxGRhM4QazHgNkEQA
 26  zp0yDgsqoJb2QRkERzM2Rm2g+ooYoaoVesVZ71mGMaPhTztdz8SnPsglzN3F1mNSQX54S7To
 27  cIqhlAJgxBZfe9Rp6RMMW/MiL6xX3O+Exk/J9gsK1ebBrGOTPCVMJ1z/oCe2ozvuoMM769hK
 28  LcuTq1VKIXvvvZrXyWXZb5iBAi0oFSzf3EYlkU9dod7LawlBCOL5THI+Fwi7vKR7V4oOLOos
 29  xvqj/9qNE8nErbuPTj3EExOvUi5ilugp3+1EwjGL1T3+/K7hCHuNCOSkXRPlpzfljWTxdCsF
 30  VluMFvkGWYa/8WTKQELCVIWgl17JHp2Fv1QW5XvMw8fSKAlAwJM+bSNpDsYJgADSfTEbpqqL
 31  EBeOpYUKfm8qQe9h8G7+9C8EWaJdEjdJjmCX2rALYMObKxVt8mqvcA6u/704G4bA9Y8qP9bp
 32  Padg+qAFS1dyQx5keh4e8m4pA2/oibU+t9fTPAUxbW4s6R6jTUxzQlfRnXWr6dGDa5gcP5Id
 33  s3nwlw==
 34  
 35  /

Procedure created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PROCEDURE remote_scheduler_agent.reg_start wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  27d 1c6
 21  RA2TsoKeBtDtk7ykxdAChfF/zvEwg3nIf65qfC8CWE7VNCqN5hQYcBGVj7SxFCfgB9rEY7eV
 22  qbQMxvkw0Z8mXsqEGhL+uVUQHFDFULo2UuTO0g+w/oY+ckbIKgTBv6l3o+8GxLdNq/RtfhkJ
 23  36dMCukBeVsl40NtVNlKcJWkTExJqsmbB8E6tGYxvhTRQVGDe2cptK4m/lPnO7J2e3ydXZ78
 24  PLi2a8TLeiZA83tnLP/RvsP9qtbImsOVXdsG4dMok216icfuqwTq5/cCqoZAwN08U8+nyZyC
 25  UiKuwuY5hBxNd1yuvLKcOtlYCT7Kxfa454FLsV9gHU3Pz7dmADXz95aTt+16BrdiudyBtfl1
 26  lO2xcd+ss3SYl48ur3z/A2EX4DhY/T6zrpumswbtMTMM85t9DV4rapqVs7RekF9WgX52sWU0
 27  SUmzO7m8+7E/jHY=
 28  
 29  /

Procedure created.

SQL> show errors;
No errors.
SQL> CREATE OR REPLACE PROCEDURE remote_scheduler_agent.pingserver wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  36 71
 21  oVJDdB0vyVfPYCOXU/uExGeV4bowg5nnm7+fMr2ywFwWhUcMltxixQxiCaV0i8DAMv7Shglp
 22  pZmBCC2LwIHHzOel0scon7Kex7LCyaam7fwo2g==
 23  
 24  /

Procedure created.

SQL> show errors;
No errors.
SQL> ALTER AUDIT POLICY ORA_SECURECONFIG
  2    ADD ACTIONS EXECUTE ON remote_scheduler_agent.add_agent_certificate;

Audit policy altered.

SQL> update user$ set password=null,spare4=null where name='REMOTE_SCHEDULER_AGENT';

1 row updated.

SQL> commit;

Commit complete.

SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem Scheduler Load Balancing
SQL> Rem
SQL> @@execschlb.plb
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> CREATE OR REPLACE PROCEDURE sys.scheduler$ntfy_svc_metrics wrapped
  2  a000000
  3  1
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  743 3d5
 21  QchmkzgC02UHOXLWohTot6svmlYwgwLDTCATZy+Kgp0GxenhFB9sJqNc6eL1QA0QYmj37Wq9
 22  rrDfoQVaLiwGoAlj5M4ZW3DdGulhdEGQVe04n9WOiF0q4TEPqp3tOoGGM+5dwYaxJCO1+KOa
 23  miIiaEy7jKl11bZxr41mt5kpQxXu5/3UseAY2WAb0gai/VS6aFvByoIUXb5wWwPyvdLulHme
 24  NU4X9sQwf69CTOKmC+bhowpi2aEr7+HqRaepFHBluGwyAn5JwU0mvaaiN0VRWtk4WbzFY+KU
 25  1XUn8azr0yHpGi6r2NgvQFfy+T8py8FUZQWr+pnd22iRT/UslJUmwVgourcOjaLEJYBrzf3O
 26  0XFGardGf0K+FGv0dL1DvozpkZWJQuOSXZnqE74GoUBnjSl1eJKMVL6pdVb6JmSh492qTgyX
 27  KTnLSYiR4y6eDUS5XrKhWlg2YsjJRBFJ9vWfkpJ+f/G0oaZ6eOEaN5xmB9gO5ztS0SdNLqfy
 28  f69D7lxQbZGs3o178r0Jg8nVjpQO4MooiQt+l4Or8559c2+Q7fCA+4D5Kpq2VivlJs92H0Wy
 29  gVUVXDniNSjqWnhsAOT2QEY+07JUmZv85Nc6OtrqsRP23BhG66QFaRKaDQtZsaT112nl0QF7
 30  2XhyPN6txz50xIHmEUo722/iUcZyD/H4c8SY/SBTfBSurhqAVVAbYyHHQcZvf/vuA2Noxz7A
 31  VyeUa47aUHFdw7NC+WwBt+khj/0pViJyIVuJMt509klhF0X/gGn8KtFGTXukRb4bx+htrDh4
 32  vMkPFUzZKIfX/+/JuL9Wgqup5qf6uH+XfMFO32o2q06LRxmbSmt/Mkj6Sia3CcBq6NVCCZco
 33  rmgYOqrry5pRkzALnUUNjyDNP0tkGzL4a0+kB0yDVYJ2e5hfrEgKH+mYD4quG5cl/WNMIdYB
 34  lT1Fs8CcMruAsVzi1ByuHRPBlQ/c1lP8
 35  
 36  /

Procedure created.

SQL> show errors;
No errors.
SQL> grant execute on scheduler$ntfy_svc_metrics to public;

Grant succeeded.

SQL> begin
  2    dbms_aqadm.create_aq_agent(agent_name => 'SCHEDULER$_LBAGT');
  3  exception
  4    when others then
  5      if sqlcode = -24089 then null;
  6      else raise;
  7      end if;
  8  end;
  9  /

PL/SQL procedure successfully completed.

SQL> begin
  2    dbms_aqadm.enable_db_access('SCHEDULER$_LBAGT', 'SYS');
  3  end;
  4  /

PL/SQL procedure successfully completed.

SQL> DECLARE subscriber sys.aq$_agent;
  2  BEGIN
  3    subscriber := sys.aq$_agent('SCHEDULER$_LBAGT', NULL, NULL);
  4    dbms_aqadm.add_subscriber(queue_name => 'SYS.SYS$SERVICE_METRICS',
  5      subscriber => subscriber);
  6  EXCEPTION
  7    when others then
  8      if sqlcode = -24034 then null;
  9      else raise;
 10      end if;
 11  END;
 12  /

PL/SQL procedure successfully completed.

SQL> DECLARE
  2    reginfo sys.aq$_reg_info;
  3    reglist sys.aq$_reg_info_list;
  4  BEGIN
  5    reginfo := sys.aq$_reg_info('SYS.SYS$SERVICE_METRICS:"SCHEDULER$_LBAGT"',
  6        dbms_aq.namespace_aq,'plsql://SYS.SCHEDULER$NTFY_SVC_METRICS',NULL);
  7    reglist := sys.aq$_reg_info_list(reginfo);
  8    dbms_aq.register ( reglist, 1 );
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem PDB related code
SQL> Rem
SQL> @@execpdb.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/execpdb.sql /main/3 2017/03/17 08:00:27 sursridh Exp $
SQL> Rem
SQL> Rem execpdb.sql
SQL> Rem
SQL> Rem Copyright (c) 2016, 2017, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      execpdb.sql - Execute actions for PDB area.
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Execute actions for pdb area.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      <other useful comments, qualifications, etc.>
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/execpdb.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/execpdb.sql
SQL> Rem    SQL_PHASE: EXECPDB
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    SQL_CALLING_FILE: rdbms/admin/catpexec.sql
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    sursridh    03/06/17 - Bug 25683998: Remove events views.
SQL> Rem    sursridh    02/27/17 - Bug 25632095: Add retention to events queue
SQL> Rem    sursridh    12/23/16 - Support for PDB event notification.
SQL> Rem    sursridh    12/23/16 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> -- Payload event type.
SQL> create type pdb_mon_event_type$ as object (
  2    event_info clob
  3  );
  4  /

Type created.

SQL> show errors;
No errors.
SQL> 
SQL> -- Create/start queue for storing raw PDB events.
SQL> begin
  2    dbms_aqadm.create_queue_table (
  3      queue_table => 'pdb_mon_event_qtable$',
  4      queue_payload_type => 'pdb_mon_event_type$',
  5      multiple_consumers => true,
  6      storage_clause => 'tablespace sysaux',
  7      comment => 'Raw queue table containing event information'
  8    );
  9    dbms_aqadm.create_queue(
 10      queue_name => 'pdb_mon_event_queue$',
 11      queue_table =>'pdb_mon_event_qtable$',
 12      retention_time => 86400,
 13      comment => 'Queue for raw pdb event information'
 14    );
 15    dbms_aqadm.start_queue('pdb_mon_event_queue$');
 16  exception
 17    when others then
 18      if sqlcode = -24001 or sqlcode = -26001
 19      then
 20        null;
 21      else
 22        raise;
 23      end if;
 24  end;
 25  /

PL/SQL procedure successfully completed.

SQL> show errors;
No errors.
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> Rem *********************************************************************
SQL> Rem END catpexec.sql
SQL> Rem *********************************************************************
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> --CATCTL -R
SQL> --CATCTL -S  -D "Final Catproc scripts"     Final scripts
SQL> @@catpend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catpend.sql /main/39 2018/08/08 12:32:17 yinlu Exp $
SQL> Rem
SQL> Rem catpend.sql
SQL> Rem
SQL> Rem Copyright (c) 2006, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catpend.sql - CATProc END
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script runs the final actions for catproc.sqll
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This script must be run only as a subscript of catproc.sql.
SQL> Rem      It is run with catctl.pl as a  single process phase.
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catpend.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catpend.sql
SQL> Rem SQL_PHASE: CATPEND
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catproc.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    yinlu       08/02/18 - bug 28441363: invoke catqm_adw if _no_catalog=xdb
SQL> Rem    dcolello    05/11/18 - RTI 21252147: add GSMROOTUSER
SQL> Rem    akruglik    04/17/17 - Lrg 20215745: avoid using regular expression
SQL> Rem                           operator when checking for XDB being set in
SQL> Rem                           _no_catalog parameter as it can cause the server
SQL> Rem                           to hang
SQL> Rem    anupkk      03/30/17 - Bug 25406198: do not set 0x10 flag in ASTATUS
SQL> Rem                           column of user$ for users without passwords
SQL> Rem    akruglik    03/13/17 - XbranchMerge akruglik_noxdb from st_rdbms_pt-dwcs
SQL> Rem    raeburns    03/05/17 - Bug 25491041: Separate upgrade error checking
SQL> Rem                           from validation routines for CATALOG/CATPROC
SQL> Rem    akruglik    02/28/17 - do not run catqm.sql if XDB schema should not
SQL> Rem                           be created
SQL> Rem    nlee        02/22/17 - Bug 23294337: Add a new PL/SQL block to invoke
SQL> Rem                           'catclust.sql' if RAC is not loaded.
SQL> Rem    dcolello    11/15/15 - move prvtgwm.sql to catxrd.sql
SQL> Rem    yanchuan    09/10/15 - Bug 20366116: set 0x10 flag in ASTATUS column of
SQL> Rem                           user$ correctly for database fresh install
SQL> Rem    bnnguyen    04/11/15 - bug 20860190: Rename 'EXADIRECT' to 'DBSFWUSER'
SQL> Rem    jorgrive    03/23/15 - add catggshard
SQL> Rem    raeburns    03/11/15 - add EXADIRECT to ancillary schemas
SQL> Rem    raeburns    12/20/14 - Bug 20088724: complete CATPROC schemas
SQL> Rem    cderosa     12/03/14 - Add call to execlmnr.sql to set statistics
SQL> Rem                           preferences and gather initial stats on logminer
SQL> Rem                           dictionary tables.
SQL> Rem    jlingow     09/03/14 - proj-58146 adding remote_scheduler_agent schema
SQL> Rem    raeburns    08/20/14 - Always run XDB install after catproc completes
SQL> Rem    jerrede     03/10/14 - Move Validate CATPROC to end of file.
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    talliu      07/02/13 - bug 17024953: remove create_cdbviews
SQL> Rem    ssonawan    07/12/12 - bug 13843068: add changes required for Default
SQL> Rem                           Password Scanner tool
SQL> Rem    nbenadja    06/21/12 - Add prvtgwm.sql and catgwmcat.sql
SQL> Rem    gravipat    05/14/12 - create_cdbviews is now part of CDBView package
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    jerrede     02/10/12 - Fix lrg 6728115 Incorrectly marking RDBMS status
SQL> Rem                           during a create database
SQL> Rem    jerrede     11/02/11 - Fix bug 13252372
SQL> Rem    dgraj       10/30/11 - Project 32079: Add script for TSDP
SQL> Rem    cmlim       08/28/11 - mandatory xdb: invoke catqm.sql during install
SQL> Rem                           only
SQL> Rem    mjstewar    06/22/11 - Add GSM schema to schema list
SQL> Rem    gravipat    05/09/11 - DB Consolidation: create cdb views during db
SQL> Rem                           creation
SQL> Rem    jibyun      02/28/11 - Project 5687: Invoke catadmprvs.sql
SQL> Rem    pyoun       01/16/09 - bug 7653375 add random salt confounder
SQL> Rem    shiyer      03/26/08 - Remove TSMSYS schema
SQL> Rem    dsemler     02/07/08 - Add APPQOSSYS schema to schema list
SQL> Rem    achoi       02/01/08 - add DIP, ORACLE_OCM
SQL> Rem    rburns      01/19/07 - add package reset
SQL> Rem    rburns      08/28/06 - move sql_bind_capture
SQL> Rem    mzait       06/15/06 - add TSMSYS to the registry
SQL> Rem    rburns      05/22/06 - add timestamp
SQL> Rem    rburns      01/13/06 - split catproc for parallel upgrade
SQL> Rem    rburns      01/13/06 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> ------------------------------------------------------------------------------
SQL> 
SQL> Rem
SQL> Rem [g]v$sql_bind_capture
SQL> Rem   must be create here since it has a dependency with AnyData type
SQL> -- should be included in some other script
SQL> -- causes hang in catpdeps.sql
SQL> Rem
SQL> create or replace view v_$sql_bind_capture as select * from o$sql_bind_capture;

View created.

SQL> create or replace public synonym v$sql_bind_capture for v_$sql_bind_capture;

Synonym created.

SQL> grant select on v_$sql_bind_capture to select_catalog_role;

Grant succeeded.

SQL> 
SQL> create or replace view gv_$sql_bind_capture as select * from go$sql_bind_capture;

View created.

SQL> create or replace public synonym gv$sql_bind_capture for gv_$sql_bind_capture;

Synonym created.

SQL> grant select on gv_$sql_bind_capture to select_catalog_role;

Grant succeeded.

SQL> 
SQL> Rem Reset the package state of any packages used during catproc.sql
SQL> execute DBMS_SESSION.RESET_PACKAGE;

PL/SQL procedure successfully completed.

SQL> 
SQL> Rem
SQL> Rem add random salt confounder for bug 7653375
SQL> Rem
SQL> insert into props$
  2      (select 'NO_USERID_VERIFIER_SALT', RAWTOHEX(sys.DBMS_CRYPTO.RANDOMBYTES (16)),
  3  NULL from dual
  4       where 'NO_USERID_VERIFIER_SALT' NOT IN (select name from props$));

1 row created.

SQL> 
SQL> 
SQL> Rem
SQL> Rem Invoke catadmprvs.sql
SQL> Rem
SQL> @@catadmprvs.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catadmprvs.sql /main/12 2015/02/25 16:47:32 yulcho Exp $
SQL> Rem
SQL> Rem catadmprvs.sql
SQL> Rem
SQL> Rem Copyright (c) 2011, 2015, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catadmprvs.sql - Grant privileges to administrative users
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      This script grants the required privileges to the following
SQL> Rem      administrative users:
SQL> Rem      1. SYSBACKUP
SQL> Rem      2. SYSDG
SQL> Rem      3. SYSKM
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      Must be run connecting as SYS.
SQL> Rem
SQL> Rem      PLEASE RESPECT THE PRINCIPLE OF LEAST PRIVILEGE:
SQL> Rem      If you are modifying this script to grant more privileges, please
SQL> Rem      make sure that the additional privileges are absolutely necessary
SQL> Rem      for the target administrative user(s) to perform the intended tasks.
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catadmprvs.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catadmprvs.sql
SQL> Rem SQL_PHASE: CATADMPRVS
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpend.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    yulcho      02/23/15 - grant priv for dbms_dbcomp
SQL> Rem    molagapp    01/20/15 - Grant execute to dbms_preplugin_backup
SQL> Rem    sanbhara    09/17/14 - Bug 19631647 - adding select privilege on
SQL> Rem                           dba_procedures to sysrac.
SQL> Rem    sanbhara    08/19/14 - Bug 19467969 - more grants to SYSRAC.
SQL> Rem    sanbhara    06/13/14 - Project 46816 - adding support for SYSRAC.
SQL> Rem    surman      12/29/13 - 13922626: Update SQL metadata
SQL> Rem    rmir        06/16/12 - Bug 13734917, SYSKM to access V$CLIENT_SECRETS,
SQL> Rem                           V$ENCRYPTION_KEYS
SQL> Rem    surman      03/27/12 - 13615447: Add SQL patching tags
SQL> Rem    akruglik    10/27/11 - SYSBACKUP will be able to see all data from
SQL> Rem                           CONTAINER_DATA views and does not need an
SQL> Rem                           explicit CONTAINER_DATA predicate
SQL> Rem    akruglik    10/03/11 - (13056894): make it possible for sysbackup to see
SQL> Rem                           all data in CONTAINER_DATA objects in the Root
SQL> Rem    jibyun      05/15/11 - Project 5687: Grant the required privileges to
SQL> Rem                           administrative users
SQL> Rem    jibyun      03/16/11 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> alter session set "_ORACLE_SCRIPT"=true;

Session altered.

SQL> 
SQL> -----------------------------------------------------
SQL> -- Grant required privileges to administrative users
SQL> -----------------------------------------------------
SQL> 
SQL> -------------
SQL> -- SYSBACKUP
SQL> -------------
SQL> -- To perfrom backup and recovery tasks.
SQL> GRANT alter database                          TO sysbackup;

Grant succeeded.

SQL> GRANT alter session                           TO sysbackup;

Grant succeeded.

SQL> GRANT alter system                            TO sysbackup;

Grant succeeded.

SQL> GRANT alter tablespace                        TO sysbackup;

Grant succeeded.

SQL> GRANT audit any                               TO sysbackup;

Grant succeeded.

SQL> GRANT create any directory                    TO sysbackup;

Grant succeeded.

SQL> GRANT create any table                        TO sysbackup;

Grant succeeded.

SQL> GRANT create any cluster                      TO sysbackup;

Grant succeeded.

SQL> GRANT drop tablespace                         TO sysbackup;

Grant succeeded.

SQL> GRANT resumable                               TO sysbackup;

Grant succeeded.

SQL> GRANT unlimited tablespace                    TO sysbackup;

Grant succeeded.

SQL> GRANT select any dictionary                   TO sysbackup;

Grant succeeded.

SQL> GRANT select any transaction                  TO sysbackup;

Grant succeeded.

SQL> GRANT select_catalog_role                     TO sysbackup;

Grant succeeded.

SQL> 
SQL> GRANT execute on sys.dbms_rcvman              TO sysbackup;

Grant succeeded.

SQL> GRANT execute on sys.dbms_backup_restore      TO sysbackup;

Grant succeeded.

SQL> GRANT execute on sys.dbms_preplugin_backup    TO sysbackup;

Grant succeeded.

SQL> GRANT execute on sys.dbms_ir                  TO sysbackup;

Grant succeeded.

SQL> GRANT execute on sys.dbms_pipe                TO sysbackup;

Grant succeeded.

SQL> GRANT execute on sys.dbms_sys_error           TO sysbackup;

Grant succeeded.

SQL> GRANT execute on sys.dbms_tts                 TO sysbackup;

Grant succeeded.

SQL> GRANT execute on sys.dbms_tdb                 TO sysbackup;

Grant succeeded.

SQL> GRANT execute on sys.dbms_plugts              TO sysbackup;

Grant succeeded.

SQL> GRANT execute on sys.dbms_plugtsp             TO sysbackup;

Grant succeeded.

SQL> GRANT execute on sys.dbms_dbcomp              TO sysbackup;

Grant succeeded.

SQL> 
SQL> GRANT delete on sys.apply$_source_schema      TO sysbackup;

Grant succeeded.

SQL> GRANT insert on sys.apply$_source_schema      TO sysbackup;

Grant succeeded.

SQL> GRANT select on system.logstdby$parameters    TO sysbackup;

Grant succeeded.

SQL> GRANT delete on system.logstdby$parameters    TO sysbackup;

Grant succeeded.

SQL> GRANT insert on system.logstdby$parameters    TO sysbackup;

Grant succeeded.

SQL> GRANT select on appqossys.wlm_classifier_plan TO sysbackup;

Grant succeeded.

SQL> 
SQL> 
SQL> ---------
SQL> -- SYSDG
SQL> ---------
SQL> -- To administer primary and physical standby databases.
SQL> GRANT alter database                               TO sysdg;

Grant succeeded.

SQL> GRANT alter session                                TO sysdg;

Grant succeeded.

SQL> GRANT alter system                                 TO sysdg;

Grant succeeded.

SQL> GRANT select any dictionary                        TO sysdg;

Grant succeeded.

SQL> GRANT execute on sys.dbms_drs                      TO sysdg;

Grant succeeded.

SQL> GRANT execute on sys.dbms_dbcomp                   TO sysdg;

Grant succeeded.

SQL> GRANT select  on sys.dba_capture                   TO sysdg;

Grant succeeded.

SQL> GRANT select  on sys.dba_logstdby_events           TO sysdg;

Grant succeeded.

SQL> GRANT select  on sys.dba_logstdby_log              TO sysdg;

Grant succeeded.

SQL> GRANT select  on sys.dba_logstdby_history          TO sysdg;

Grant succeeded.

SQL> GRANT select  on appqossys.wlm_classifier_plan     TO sysdg;

Grant succeeded.

SQL> GRANT delete  on appqossys.wlm_classifier_plan     TO sysdg;

Grant succeeded.

SQL> 
SQL> ---------
SQL> -- SYSKM
SQL> ---------
SQL> -- To perform encryption key management.
SQL> GRANT administer key management               TO syskm WITH ADMIN OPTION;

Grant succeeded.

SQL> 
SQL> GRANT select on sys.v_$wallet                 TO syskm;

Grant succeeded.

SQL> GRANT select on sys.gv_$wallet                TO syskm;

Grant succeeded.

SQL> 
SQL> GRANT select on sys.v_$encryption_wallet      TO syskm;

Grant succeeded.

SQL> GRANT select on sys.gv_$encryption_wallet     TO syskm;

Grant succeeded.

SQL> 
SQL> GRANT select on sys.v_$encrypted_tablespaces  TO syskm;

Grant succeeded.

SQL> GRANT select on sys.gv_$encrypted_tablespaces TO syskm;

Grant succeeded.

SQL> 
SQL> GRANT select on sys.v_$database_key_info      TO syskm;

Grant succeeded.

SQL> GRANT select on sys.gv_$database_key_info     TO syskm;

Grant succeeded.

SQL> 
SQL> GRANT select on sys.v_$encryption_keys        TO syskm;

Grant succeeded.

SQL> GRANT select on sys.gv_$encryption_keys       TO syskm;

Grant succeeded.

SQL> 
SQL> GRANT select on sys.v_$client_secrets         TO syskm;

Grant succeeded.

SQL> GRANT select on sys.gv_$client_secrets        TO syskm;

Grant succeeded.

SQL> 
SQL> GRANT select on sys.dba_encrypted_columns     TO syskm;

Grant succeeded.

SQL> 
SQL> ---------
SQL> -- SYSRAC
SQL> ---------
SQL> -- To be used by CRS agent to administer DB instances.
SQL> GRANT alter database                       TO sysrac;

Grant succeeded.

SQL> GRANT alter session                        TO sysrac;

Grant succeeded.

SQL> GRANT alter system                         TO sysrac;

Grant succeeded.

SQL> 
SQL> GRANT select on sys.cdb_service$           TO sysrac;

Grant succeeded.

SQL> GRANT select on sys.dba_services           TO sysrac;

Grant succeeded.

SQL> GRANT select on sys.dba_procedures         TO sysrac;

Grant succeeded.

SQL> 
SQL> GRANT execute on sys.dbms_drs              TO sysrac;

Grant succeeded.

SQL> GRANT execute on sys.dbms_service          TO sysrac;

Grant succeeded.

SQL> GRANT execute on sys.dbms_service_prvt     TO sysrac;

Grant succeeded.

SQL> GRANT execute on sys.dbms_session          TO sysrac;

Grant succeeded.

SQL> GRANT execute on sys.dbms_ha_alerts_prvt   TO sysrac;

Grant succeeded.

SQL> 
SQL> GRANT execute on sys.dbms_server_alert     TO sysrac;

Grant succeeded.

SQL> GRANT execute on sys.sys$rlbtyp            TO sysrac;

Grant succeeded.

SQL> GRANT read on sys.recent_resource_incarnations$ TO sysrac;

Grant succeeded.

SQL> GRANT aq_administrator_role                TO sysrac;

Grant succeeded.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> SET SERVEROUTPUT ON
SQL> 
SQL> Rem
SQL> Rem Invoke catgwmcat.sql
SQL> Rem
SQL> @@catgwmcat.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catgwmcat.sql /st_rdbms_19/1 2018/12/11 14:22:56 lenovak Exp $
SQL> Rem
SQL> Rem catgwmcat.sql
SQL> Rem
SQL> Rem Copyright (c) 2011, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catgwmcat.sql - Catalog script for GSM on the catalog database
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Installation/upgrade script for GSM components on the cloud
SQL> Rem      catalog database.
SQL> Rem
SQL> Rem      Run the script like this:
SQL> Rem
SQL> Rem         catgwmcat.sql
SQL> Rem
SQL> Rem    NOTES
SQL> Rem
SQL> Rem
SQL> Rem
SQL> Rem BEGIN SQL_FILE_METADATA
SQL> Rem SQL_SOURCE_FILE: rdbms/admin/catgwmcat.sql
SQL> Rem SQL_SHIPPED_FILE: rdbms/admin/catgwmcat.sql
SQL> Rem SQL_PHASE: CATGWMCAT
SQL> Rem SQL_STARTUP_MODE: NORMAL
SQL> Rem SQL_IGNORABLE_ERRORS: NONE
SQL> Rem SQL_CALLING_FILE: rdbms/admin/catpend.sql
SQL> Rem END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    apfwkr      11/12/18 - Backport lenovak_bf_180831 from main
SQL> Rem    lenovak     10/19/18 - Bug 28803627-new grants
SQL> Rem    sdball      07/05/18 - Bug 28249859: remove grant on dbms_sys_sql
SQL> Rem    dcolello    06/18/18 - bug 28141063: restrict gsmuser privs
SQL> Rem    dcolello    06/18/18 - bug 28141060: restrict gsmadmin_internal privs
SQL> Rem    dcolello    06/18/18 - bug 28141062: restrict gsmcatuser privs
SQL> Rem    sdball      05/15/18 - Bug 27965298: New secure paradigm for create user
SQL> Rem    skayoor     03/14/18 - Bug 27168278: Add default to gsm_password
SQL> Rem    zzeng       02/14/18 - Bug 27476067: get table family id from service$
SQL> Rem    lenovak     01/31/18 - bug 27466515: add ddl_offset
SQL> Rem    zzeng       11/16/17 - Project 74510:multi-table family
SQL> Rem    dcolello    10/31/17 - project 74418: multiple PDB shards allowed in CDB
SQL> Rem    itaranov    08/28/17 - v$listener_networks grant
SQL> Rem    dcolello    08/23/17 - bug 26513341: add dbid to container_database
SQL> Rem    dmaniyan    08/04/17 - Bug 26546365: Add max_chunk_num to table_family
SQL> Rem    dmaniyan    06/27/17 - 25443435: Add new column - consistent
SQL> Rem    alestrel    06/12/17 - Bug 25992935. Replacing dbms_isched for
SQL> Rem                           dbms_isched_agent
SQL> Rem    nbenadja    05/05/17 - Fix bug#22145819: Add ddl_intcode for OGG.
SQL> Rem    lenovak     05/04/17 - Bug 25989904: grant drop index
SQL> Rem    saratho     04/12/17 - adding column database_flags in cloud table
SQL> Rem    sdball      03/31/17 - Add failover_restore to service
SQL> Rem    dmaniyan    03/22/17 - Bug 25476616:Add child_obj# column to TS_SET_TABLE
SQL> Rem    sdball      02/22/17 - Updated for PDB support
SQL> Rem    zzeng       01/12/17 - Fix SHARD_NAME for LOCAL_CHUNKS
SQL> Rem    sdball      11/02/16 - Update schema to support PDBs
SQL> Rem    arjusing    10/03/16 - Bug 23260076: grant select on sha_databases to
SQL> Rem                           gds_catalog_select
SQL> Rem    arjusing    09/15/16 - Bug 20878412: grant inherit any privileges to
SQL> Rem                           gsmadmin_internal
SQL> Rem    sdball      08/19/16 - Bug 24319952: grant exempt access to
SQL> Rem                           gsmadmin_internal
SQL> Rem    vidgovin    08/12/16 - XbranchMerge vidgovin_incrdep2 from
SQL> Rem                           st_rdbms_12.2.0.1.0
SQL> Rem    vidgovin    08/08/16 - Bug 24428345 - Add orig_ddl_text, ddl_flag to
SQL> Rem                           ddl_requests table
SQL> Rem    dmaniyan    08/08/16 - Bug 21535006: Grant gds_catalog_select to gsmuser
SQL> Rem    sdball      08/05/16 - LRG 19633236: remove constraint in cloud
SQL> Rem    itaranov    08/05/16 - XbranchMerge itaranov_bug-24328811 from
SQL> Rem                           st_rdbms_12.2.0.1.0
SQL> Rem    dmaniyan    07/20/16 - XbranchMerge dmaniyan_secbugs from main
SQL> Rem    dcolello    07/19/16 - XbranchMerge dcolello_shfix21 from main
SQL> Rem    itaranov    07/19/16 - bug 23740777: cr_gsm_requests dependency
SQL> Rem    dcolello    07/14/16 - allow gsmcatuser to use -agent_port
SQL> Rem                             on create shardcatalog
SQL> Rem    dcolello    06/24/16 - bug 22151011: move triggers after body creation
SQL> Rem    dmaniyan    06/15/16 - Bug 23505098 : Limit index priv on ddl requests
SQL> Rem    dcolello    06/01/16 - fix comments
SQL> Rem    lenovak     05/26/16 - remove user$ privilege
SQL> Rem    sdball      05/11/16 - new ps_order in partition_set
SQL> Rem    sdball      04/28/16 - Bug 23199869 : Fix idempotency issue
SQL> Rem    dmaniyan    04/10/16 - Bug 22485421 : Create all chunks table
SQL> Rem    vidgovin    04/06/16 - Bug 21533800
SQL> Rem    lenovak     04/05/16 - bugfix 23032790
SQL> Rem    sdball      03/09/16 - move ddl_requests to sys for security
SQL> Rem    itaranov    03/09/16 - shardspaceid to partitionset
SQL> Rem    lenovak     03/03/16 - RAC affinity schema changes
SQL> Rem    sdball      02/24/16 - Bug 22368133: remove delete action from
SQL> Rem                           cr_gsm_requests
SQL> Rem    lenovak     02/22/16 - gdsctloutput for catalog_requests
SQL> Rem    dcolello    02/17/16 - bug 22743674: add svcusercredential
SQL> Rem    dcolello    02/12/16 - add comment for new gdsctl warning message type
SQL> Rem    lenovak     02/08/16 - Bug 22669300 fix
SQL> Rem    sdball      02/05/16 - Add profile to gsmcatuser
SQL> Rem    lenovak     02/04/16 - add gdsctl messages
SQL> Rem    yunkzhan    01/28/16 - Change SHART_TS to create segment immediately
SQL> Rem                           to avoid ORA-08176 in flashback queries.
SQL> Rem    vidgovin    12/07/15 - Bug 22204627 - Add ddl_requests_pwd
SQL> Rem    sdball      12/03/15 - Bug 22288229: create views for opatchauto (and
SQL> Rem                           others)
SQL> Rem    nbenadja    11/25/15 - grant select on dictionary tables to
SQL> Rem                           gsmadmin_internal
SQL> Rem    dcolello    11/21/15 - VNCR table change for patching support
SQL> Rem    dcolello    11/20/15 - more grants for automatic scheduler setup
SQL> Rem    ditalian    11/18/15 - make shardspace_id in shard_ts nullable
SQL> Rem    dcolello    11/16/15 - remove old schema object names
SQL> Rem    ditalian    11/05/15 - make chunk_number in shard_ts nullable
SQL> Rem    dcolello    11/03/15 - bug 22145787: make response_info larger
SQL> Rem    dcolello    10/19/15 - object rename for production
SQL> Rem    lenovak     10/10/15 - new grants to gsmadmin_internal
SQL> Rem    sdball      09/25/15 - Bug 21304186: Revioke inherit privs
SQL> Rem    lenovak     09/16/15 - more extra privs to gsmadmin_internal
SQL> Rem    lenovak     08/31/15 - extra privs to gsmadmin_internal
SQL> Rem    sdball      08/10/15 - Bug 20884124: New grants for gsmadmin_role
SQL> Rem    dcolello    07/28/15 - add columns to CLOUD table for new syntax
SQL> Rem    itaranov    07/23/15 - 21482492 Localchunks def revisited
SQL> Rem    dmaniyan    07/14/15 - Bug 21095569: Drop tablespace set issue
SQL> Rem    ditalian    07/13/15 - bug #21338419: grant access to dba_tablespaces
SQL> Rem    nbenadja    06/26/15 - Add new a privilege to gsmadmin_internal.
SQL> Rem    itaranov    06/16/15 - Fix LOCAL_CHUNKS for OGG support
SQL> Rem    lenovak     06/15/15 - grant execute on dbms_utility
SQL> Rem    sdball      06/05/15 - Support for long identifiers
SQL> Rem    sdball      05/15/15 - New field orig_chunks
SQL> Rem    sdball      04/02/15 - ddl_num should default to 0 in database table for
SQL> Rem                           upgrade
SQL> Rem    sdball      03/31/15 - More updates for 12.2 sharding
SQL> Rem    lenovak     03/30/15 - grant dba_constraints to gsmadmin_internal
SQL> Rem    jorgrive    03/23/15 - add columns in table database
SQL> Rem    sdball      03/10/15 - Add targets to gsm_request
SQL> Rem    ditalian    03/09/15 - grant privileges for split
SQL> Rem    sdball      03/04/15 - More additions for 12.2 sharding
SQL> Rem    dcolello    12/10/14 - create database support
SQL> Rem    lenovak     12/10/14 - catalog region
SQL> Rem    itaranov    12/09/14 - After-merge chunks fix
SQL> Rem    skayoor     11/30/14 - Proj 58196: Change Select priv to Read Priv
SQL> Rem    sdball      10/17/14 - Sharding changes for 12.2
SQL> Rem    nbenadja    09/12/14 - Add the ts_set_tables.
SQL> Rem    ralekra     09/08/14 - Catalog changes required by OGG
SQL> Rem    nbenadja    08/04/14 - Add key_level to the sharkey_columns primary key.
SQL> Rem    pyam        05/27/14 - fix table column ordering
SQL> Rem    itaranov    06/20/14 - LOCAL_CHUNK related views
SQL> Rem    devghosh    04/08/14 - bug17709018: add grant
SQL> Rem    surman      01/23/14 - 13922626: Update SQL metadata
SQL> Rem    sdball      12/18/13 - Add tables for shard support
SQL> Rem    sdball      12/05/13 - Add ddl_requests for sharding
SQL> Rem    cechen      08/22/13 - add domains for PKI keys in database and cloud
SQL> Rem    sdball      08/15/13 - Add db_type field to database table
SQL> Rem    lenovak     07/29/13 - shard support
SQL> Rem    lenovak     07/11/13 - grant select from cloud to pooladmins
SQL> Rem    sdball      06/12/13 - Remove primary key requirement from gsm_requests
SQL> Rem    sdball      05/15/13 - Add data_vers to cloud
SQL> Rem    sdball      05/06/13 - Add weights to region
SQL> Rem    thbaby      05/06/13 - 16768773: remove creation of CDB_SERVICES
SQL> Rem    itaranov    04/24/13 - Grant killing sessions to gsmadmin_internal
SQL> Rem    nbenadja    04/22/13 - Add logoff trigger.
SQL> Rem    itaranov    03/25/13 - Grant privs to import
SQL> Rem    sdball      03/13/13 - Add instance fields and types for admin DBs
SQL> Rem    sdball      02/26/13 - Grant select on v_$version
SQL> Rem    nbenadja    02/21/13 - grant the use of dbms_server_alert package.
SQL> Rem    akruglik    02/05/13 - (bug 16194686) disambiguate reference to
SQL> Rem                           gv$active_services in ALTER USER SET
SQL> Rem                           CONTAINER_DATA statement
SQL> Rem    sdball      01/18/13 - Add versions and database parameters
SQL> Rem    sdball      01/11/13 - Grant select on sessions.
SQL> Rem    nbenadja    01/10/13 - Extend database table to store threshold values.
SQL> Rem    aikumar     11/27/12 - bug-15925294:Change dbms_lock_allocated_v2 back
SQL> Rem                           to dbms_lock_allocated
SQL> Rem    lenovak     11/07/12 - runtime status flags to the catalog
SQL> Rem    rpang       10/11/12 - Use new dbms_network_acl_admin API
SQL> Rem    nbenadja    10/11/12 - Add container_data for grants in CDB.
SQL> Rem    sdball      08/28/12 - Add ACLs for GSMADMIN_INTERNAL
SQL> Rem    sdball      08/03/12 - Add gds_catalog_select role
SQL> Rem    nbenadja    07/30/12 - Grant select on gv_$active_services.
SQL> Rem    nbenadja    06/23/12 - Fix multiple CDB returned from gv$_database.
SQL> Rem    sdball      06/13/12 - Support for number of instances
SQL> Rem    nbenadja    06/21/12 - Re-create cdb_services, in case it hasnt been
SQL> Rem                           created during an upgrade.
SQL> Rem    nbenadja    06/21/12 - Handle CDB databases.
SQL> Rem    nbenadja    06/15/12 - Grant select_catalog_role to gsmadmin_internal.
SQL> Rem    sdball      06/07/12 - grant gv$instance to gsmadmin_internal
SQL> Rem    sdball      06/04/12 - Support for non-unique service name
SQL> Rem    sdball      06/04/12 - Defer DBMS_RLS calls to catalog creation because
SQL> Rem                           they require EE (Bug 14143065)
SQL> Rem    nbenadja    05/09/12 - Hande services in PDBs.
SQL> Rem    sdball      05/08/12 - Create verify objects
SQL> Rem    sdball      04/16/12 - dbms_lock_allocated is now dbms_lock_allocated_v2
SQL> Rem    sdball      03/26/12 - move PLB and SQL to correct installers
SQL> Rem    sdball      03/12/12 - Remove packages to corret install location
SQL> Rem                           Remove gsm_admin user
SQL> Rem                           Grant privs on DBMS_LOCK
SQL> Rem    sdball      02/22/12 - grant gsm_change_message only to
SQL> Rem                           gsmadmin_internal
SQL> Rem    sdball      01/04/12 - Refferential integrity checks
SQL> Rem    sdball      12/13/11 - Checking parameters
SQL> Rem    sdball      12/05/11 - change pooladmin_role to gsm_pooladmin_role
SQL> Rem    sdball      11/29/11 - Autovncr functionality
SQL> Rem    sdball      11/09/11 - Add gv_$lock for RAC
SQL> Rem    sdball      10/28/11 - gsmadmin_internal needs select on dba_locks
SQL> Rem    sdball      10/28/11 - gsmadmin_internal needs CREATE JOB privilege
SQL> Rem    sdball      10/25/11 - Add date field to gsm_requests
SQL> Rem    sdball      10/19/11 - use v_$ rather than gv_$ tables.
SQL> Rem                           add mastergsm field to cloud table
SQL> Rem    lenovak     08/22/11 - grant ALTER SYSTEM to gsm_admin_role
SQL> Rem    lenovak     07/22/11 - vncr support
SQL> Rem    mjstewar    07/21/11 - Change region_sequence
SQL> Rem    mjstewar    04/25/11 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> -- SET ECHO ON
SQL> -- SPOOL catgwmcat.log
SQL> 
SQL> prompt

SQL> prompt

SQL> prompt Starting Oracle GSM Catalog DB Installation ...
Starting Oracle GSM Catalog DB Installation ...
SQL> prompt ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SQL> prompt

SQL> 
SQL> --*****************
SQL> -- Create GSM Roles
SQL> --*****************
SQL> 
SQL> ----------------
SQL> -- gsmadmin_role
SQL> ----------------
SQL> 
SQL> -- Create role for GSM cloud administrator
SQL> CREATE ROLE gsmadmin_role;

Role created.

SQL> GRANT connect to gsmadmin_role;

Grant succeeded.

SQL> 
SQL> GRANT execute on gsmadmin_internal.dbms_gsm_common to gsmadmin_role;

Grant succeeded.

SQL> 
SQL> -----------------
SQL> -- gsm_pooladmin_role
SQL> -----------------
SQL> 
SQL> -- Create role GSM pool administrator
SQL> CREATE ROLE gsm_pooladmin_role;

Role created.

SQL> GRANT connect to gsm_pooladmin_role;

Grant succeeded.

SQL> 
SQL> GRANT execute on gsmadmin_internal.dbms_gsm_common to gsm_pooladmin_role;

Grant succeeded.

SQL> /

Grant succeeded.

SQL> 
SQL> -- Create gds_catalog_select role
SQL> CREATE ROLE gds_catalog_select;

Role created.

SQL> GRANT gds_catalog_select to gsmuser_role;

Grant succeeded.

SQL> 
SQL> --*****************
SQL> -- Create GSM Users
SQL> --*****************
SQL> 
SQL> --------------------
SQL> -- gsmadmin_internal
SQL> --------------------
SQL> 
SQL> -- gsmadmin_internal user exists on all databases,
SQL> -- but we need to give it some more privileges on the cloud
SQL> -- catalog database.
SQL> 
SQL> -- So that dbms_gsm_cloudadmin can execute dbms_aqadm.add_subscriber()
SQL> grant execute on dbms_aqadm to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- So that dbms_gsm_cloudamdin can execute dbms_aq.enqueue()
SQL> grant execute on dbms_aq to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- So that we can grab locks
SQL> grant execute on dbms_lock to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- for environment variables
SQL> grant execute on dbms_system to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- So that we can use alerts
SQL> grant execute on sys.dbms_server_alert to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- So that we can create VPD policies in dbms_gsm_cloudadmin
SQL> grant execute on sys.dbms_rls to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- So that dbms_gsm_cloudadmin can execute dbms_aqadm.purge_table()
SQL> grant aq_administrator_role to gsmadmin_role;

Grant succeeded.

SQL> 
SQL> -- So the VPD routine can select from dba_role_privs
SQL> grant select on dba_role_privs to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- So that dbms_gsm_utility can get current RDBMS version
SQL> grant select on v_$version to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- So that LOCAL_CHUNKS had column info
SQL> grant select on sys.col$ to gsmadmin_internal with grant option;

Grant succeeded.

SQL> 
SQL> -- So that dbms_gsm_cloudadmin can check if spfile is set.
SQL> grant select on v_$parameter to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- so that we can check for GSM master lock
SQL> grant select on sys.dbms_lock_allocated to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- so that we can check for GSM master lock
SQL> grant select on sys.gv_$lock to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- for parameter checking
SQL> grant select on sys.dba_tab_columns to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- so that we can check for CDB database
SQL> grant select on sys.gv_$database to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- so we can check running instances
SQL> grant select on sys.gv_$instance to gsmadmin_internal;

Grant succeeded.

SQL> grant select on sys.v_$instance to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- so we can find and kill service sessions
SQL> grant select on sys.gv_$session to gsmadmin_internal;

Grant succeeded.

SQL> grant select on sys.v_$session to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- so we can access privilege table
SQL> grant select any dictionary to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- Bug 20878412: To enable shard ddl propagation
SQL> grant inherit privileges on user sys to gsmadmin_internal;

Grant succeeded.

SQL> grant inherit any privileges to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- So that we can assign users to the gsm_pooladmin_role
SQL> grant grant any role to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- So that gsm will be able to exec alter system register on catalog
SQL> grant alter system to gsmadmin_role;

Grant succeeded.

SQL> 
SQL> -- So we can set up the scheduler
SQL> grant execute on sys.dbms_isched_agent to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- So that we can create and update ACLs in dbms_gsm_cloudadmin.setupACLs
SQL> grant execute on dbms_network_acl_admin to gsmadmin_internal;

Grant succeeded.

SQL> grant select on dba_network_acls to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- Grant killing sessions to gsmadmin_internal (for import)
SQL> grant alter system to gsmadmin_internal;

Grant succeeded.

SQL> grant alter database to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- so that we can crerate jobs
SQL> grant create job to gsmadmin_internal;

Grant succeeded.

SQL> grant create any credential to gsmadmin_internal;

Grant succeeded.

SQL> grant select on dba_credentials to gsmadmin_internal;

Grant succeeded.

SQL> grant create external job to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- and monitor them
SQL> grant select on dba_scheduler_job_run_details to gsmadmin_internal;

Grant succeeded.

SQL> grant select on dba_scheduler_external_dests to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- For shard user creation.
SQL> grant grant any privilege to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- For CDB databases
SQL> grant select on sys.dba_services to gsmadmin_internal;

Grant succeeded.

SQL> grant select on sys.cdb_services to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> grant select on sys.gv_$active_services to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- so we can create dblinks for chunk moves
SQL> 
SQL> grant create database link to gsmadmin_internal;

Grant succeeded.

SQL> grant create any job to gsmadmin_internal;

Grant succeeded.

SQL> grant create any table to gsmadmin_internal;

Grant succeeded.

SQL> grant select any table to gsmadmin_internal;

Grant succeeded.

SQL> grant alter any table to gsmadmin_internal;

Grant succeeded.

SQL> grant alter any index to gsmadmin_internal;

Grant succeeded.

SQL> grant lock any table to gsmadmin_internal;

Grant succeeded.

SQL> grant unlimited tablespace to gsmadmin_internal;

Grant succeeded.

SQL> grant create tablespace to gsmadmin_internal;

Grant succeeded.

SQL> grant drop tablespace to gsmadmin_internal;

Grant succeeded.

SQL> grant DATAPUMP_EXP_FULL_DATABASE to gsmadmin_internal;

Grant succeeded.

SQL> grant DATAPUMP_IMP_FULL_DATABASE to gsmadmin_internal;

Grant succeeded.

SQL> grant select on dba_constraints to gsmadmin_internal;

Grant succeeded.

SQL> grant select on dba_tab_partitions to gsmadmin_internal;

Grant succeeded.

SQL> grant select on dba_tab_subpartitions to gsmadmin_internal;

Grant succeeded.

SQL> grant select on dba_part_tables to gsmadmin_internal;

Grant succeeded.

SQL> grant select on dba_part_indexes to gsmadmin_internal;

Grant succeeded.

SQL> grant select on dba_indexes to gsmadmin_internal;

Grant succeeded.

SQL> grant select on DBA_IND_PARTITIONS to gsmadmin_internal;

Grant succeeded.

SQL> grant select on DBA_IND_SUBPARTITIONS to gsmadmin_internal;

Grant succeeded.

SQL> grant alter tablespace to gsmadmin_internal;

Grant succeeded.

SQL> grant select on dba_constraints to gsmadmin_internal;

Grant succeeded.

SQL> grant select on sys.V_$RESTORE_POINT to GSMADMIN_INTERNAL;

Grant succeeded.

SQL> grant read on sys.V_$LISTENER_NETWORK to GSMADMIN_INTERNAL;

Grant succeeded.

SQL> grant execute on SYS.DBMS_PLUGTS to GSMADMIN_INTERNAL;

Grant succeeded.

SQL> -- gsmuser privileges for chunk move
SQL> grant read   on dba_tablespaces             to gsmuser_role;

Grant succeeded.

SQL> grant execute on dbms_metadata              to gsmuser_role;

Grant succeeded.

SQL> grant DATAPUMP_EXP_FULL_DATABASE            to gsmuser_role;

Grant succeeded.

SQL> grant read   on sys.ind$                    to gsmuser_role;

Grant succeeded.

SQL> grant read   on sys.secobj$                 to gsmuser_role;

Grant succeeded.

SQL> 
SQL> -- so we can move data under VPD restrictions
SQL> grant exempt access policy to gsmuser_role;

Grant succeeded.

SQL> 
SQL> grant execute on dbms_utility to gsmadmin_internal;

Grant succeeded.

SQL> -- SHARDMERGE_TODO: This grant does not work during upgrade
SQL> -- ORA-22930: directory does not exist
SQL> -- grant read,write on directory DATA_PUMP_DIR to gsmadmin_internal;
SQL> 
SQL> -- for remote query execution
SQL> grant execute on sys.dbms_gsm_fixed to sysdg;

Grant succeeded.

SQL> grant execute on UTL_RAW to gsmadmin_internal;

Grant succeeded.

SQL> grant alter session to gsmadmin_internal;

Grant succeeded.

SQL> grant execute on sys.dbms_pipe to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- data objectnumber generation
SQL> grant select on sys.obj$ to gsmadmin_internal;

Grant succeeded.

SQL> grant execute on sys.dbms_shared_pool to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- So that we can create SYS_SHARD_TS for move in user-defined sharding.
SQL> grant select on dba_tablespaces to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> --for affinity-based routing
SQL> grant select on sys.partcol$ to gsmadmin_internal;

Grant succeeded.

SQL> grant select on sys.col$ to gsmadmin_internal;

Grant succeeded.

SQL> grant select on sys.tabpart$ to gsmadmin_internal;

Grant succeeded.

SQL> grant read on GV_$GCSPFMASTER_INFO to gsmadmin_internal;

Grant succeeded.

SQL> grant read on GV_$GWM_RAC_AFFINITY to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> -- for shard view
SQL> grant select on v_$dg_broker_config to gsmadmin_internal with grant option;

Grant succeeded.

SQL> /

Grant succeeded.

SQL> 
SQL> alter session set "_oracle_script"=true;

Session altered.

SQL> 
SQL> DECLARE
  2   isCDB varchar2(3);
  3   stmt  varchar (1024);
  4  BEGIN
  5    select distinct CDB into isCDB from gv_$database;
  6    IF (isCDB = 'YES')
  7    THEN
  8       stmt := 'grant set container to gsmadmin_internal container = all';
  9       execute immediate stmt;
 10       stmt :=  'grant alter session to gsmadmin_internal container = all';
 11       execute immediate stmt;
 12       stmt := 'alter user gsmadmin_internal set container_data = all' ||
 13                '  for cdb_services container = current';
 14       execute immediate stmt;
 15       stmt := 'alter user gsmadmin_internal set container_data = all' ||
 16                '  for "PUBLIC".gv$active_services container = current';
 17       execute immediate stmt;
 18   END IF;
 19  
 20  END;
 21  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -------------
SQL> -- gsmcatuser
SQL> -------------
SQL> 
SQL> -- GSM process connects to GSM cloud catalog database as
SQL> -- gsmcatuser.  Password will be changed by GSM when first
SQL> -- GSM is added to the cloud.
SQL> 
SQL> CREATE USER gsmcatuser no authentication
  2    account lock;

User created.

SQL> 
SQL> DECLARE
  2    conId   NUMBER := 0;
  3  BEGIN
  4    begin
  5      execute immediate
  6        'select SYS_CONTEXT(''USERENV'', ''CON_ID'') from sys.dual'
  7        into conId;
  8    exception
  9      WHEN OTHERS THEN IF SQLCODE = -2003 THEN conId := 0; ELSE RAISE; END IF;
 10    end;
 11  
 12    IF conId = 0 THEN
 13      declare
 14        already_exists exception;
 15        pragma exception_init(already_exists,-02379);
 16      begin
 17        execute immediate
 18          'CREATE PROFILE gsm_prof LIMIT FAILED_LOGIN_ATTEMPTS 10000000';
 19      exception when already_exists then null;
 20      end;
 21      execute immediate 'ALTER USER gsmuser PROFILE gsm_prof';
 22    END IF;
 23  END;
 24  /

PL/SQL procedure successfully completed.

SQL> 
SQL> GRANT create session to gsmcatuser;

Grant succeeded.

SQL> 
SQL> -- So that gsmcatuser can call dbms_aq.dequeue(), dbms_aq.listen()
SQL> grant execute on dbms_aq to gsmcatuser;

Grant succeeded.

SQL> 
SQL> -- So that gsmcatuser can call dbms_aqadm.add_subscriber()
SQL> grant aq_administrator_role to gsmcatuser;

Grant succeeded.

SQL> 
SQL> -- revike inherit privs
SQL> declare
  2    already_revoked exception;
  3    pragma exception_init(already_revoked,-01927);
  4  begin
  5    execute immediate
  6      'REVOKE INHERIT PRIVILEGES ON USER gsmcatuser FROM public';
  7  exception
  8    when already_revoked then
  9      null;
 10  end;
 11  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- needed to allow 'create shardcatalog -agent_port ...' to
SQL> --  succeed if gsmcatuser is creating the catalog since
SQL> --  DBMS_GSM_XDB is invoker's rights
SQL> grant inherit privileges on user gsmcatuser to gsmadmin_internal;

Grant succeeded.

SQL> 
SQL> ALTER SESSION SET CURRENT_SCHEMA = gsmadmin_internal;

Session altered.

SQL> 
SQL> --****************************
SQL> -- Create Cloud Catalog Tables
SQL> --****************************
SQL> 
SQL> CREATE TABLE region (
  2     name         VARCHAR2(128) NOT NULL,
  3     num          NUMBER        NOT NULL,
  4     buddy_region NUMBER        DEFAULT NULL REFERENCES region(num),
  5     change_state CHAR(1)       DEFAULT NULL,
  6     weights      VARCHAR(500)  DEFAULT NULL,
  7     CS_WEIGHT    NUMBER ,      -- region weight for cross-shard ops
  8     PRIMARY KEY (name),
  9     CONSTRAINT num_unique UNIQUE (num)
 10   )
 11  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> -- region_sequence is used for generating region.num.
SQL> -- GSM listener requires that region.num be in the range 0-9
SQL> CREATE SEQUENCE region_sequence minvalue 0 maxvalue 9 cache 9 cycle
  2  /

Sequence created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE gsm (
  2     name            VARCHAR2(128)   NOT NULL,
  3     num             NUMBER          NOT NULL,
  4     endpoint1       VARCHAR2(512)   NOT NULL,
  5     endpoint2       VARCHAR2(512)   NOT NULL,
  6     ons_port_local  NUMBER          NOT NULL,
  7     ons_port_remote NUMBER          NOT NULL,
  8     region_num      NUMBER          NOT NULL REFERENCES region(num),
  9     oracle_home     VARCHAR2(4000),
 10     hostname        VARCHAR2(256),
 11     version         VARCHAR2(30)    DEFAULT NULL, --GSM version
 12     change_state    CHAR(1)         DEFAULT NULL,
 13     PRIMARY KEY (name)
 14   )
 15  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE cloud (
  2     name               VARCHAR2(128) NOT NULL,
  3     encryption_key     VARCHAR2(30),
  4     change_seq#        NUMBER,
  5     next_db_num        NUMBER,
  6     mastergsm          VARCHAR2(128) DEFAULT NULL,
  7     autovncr           NUMBER(1)     DEFAULT 1,       -- boolean (1 TRUE, 0 FALSE)
  8     max_instances      NUMBER        DEFAULT NULL ,
  9     private_key        RAW(2000)     DEFAULT NULL,    -- PKI private key
 10     public_key         RAW(2000)     DEFAULT NULL,    -- PKI public key
 11     prvk_enc_str       RAW(1000)     DEFAULT NULL,    -- private key sig string
 12     data_vers          VARCHAR2(30)  DEFAULT NULL,    -- Last update version
 13                                                       -- of catalog data
 14     last_ddl_num       NUMBER        DEFAULT 0,       --last ddl_num
 15     last_syncddl_num   NUMBER        DEFAULT 0,       --last sync ddl_num
 16     region_num         NUMBER,                        -- catalog region
 17     deploy_state       NUMBER        DEFAULT 0,
 18     objnum_gen         NUMBER        DEFAULT 1000000, -- object number generator
 19     sharding_type      NUMBER(1)     DEFAULT NULL,    -- 0 - not sharded
 20                                                       -- 1 - system managed
 21                                                       -- 2 - user-defined
 22                                                       -- 3 - composite
 23     replication_type   NUMBER(1)     DEFAULT NULL,    -- 0 - DataGuard
 24                                                       -- 1 - GoldenGate
 25     protection_mode    NUMBER(1)     DEFAULT NULL,    -- 0 - max protection
 26                                                       -- 1 - max availability
 27                                                       -- 2 - max performance
 28     replication_factor NUMBER        DEFAULT NULL,
 29     chunk_count        NUMBER        DEFAULT NULL,
 30     database_flags     CHAR(1)       DEFAULT NULL,    -- 'C' - catalog
 31                                                       -- 'S' or null - shard
 32     ddl_offset         NUMBER        DEFAULT 0,       -- ddl offset number
 33     PRIMARY KEY (name)
 34   )
 35  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE SEQUENCE msg_sequence NOCACHE
  2  /

Sequence created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE GDSCTL_MESSAGES(
  2     session_id      NUMBER   NOT NULL,
  3     message         VARCHAR2(1024),
  4     msg_type        NUMBER   default 0,
  5     -- 0 -regular
  6     -- 1 -start message
  7     -- 2 - end message
  8     -- 3 - warning message
  9     message_id      NUMBER,
 10     message_date    DATE default SYSDATE
 11   )
 12  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE SEQUENCE vncr_sequence
  2  /

Sequence created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE vncr(
  2     name            VARCHAR2(512)   NOT NULL,
  3     group_id        VARCHAR2(128),
  4     hostid          NUMBER          NOT NULL,
  5     hostname        VARCHAR2(256)
  6   )
  7  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> -- need to ignore pre-existing key for downgrade->upgrade
SQL> BEGIN
  2     EXECUTE IMMEDIATE
  3       'ALTER TABLE vncr ADD CONSTRAINT pk_vncr primary key(hostid)';
  4  EXCEPTION
  5     WHEN OTHERS THEN
  6        IF SQLCODE IN (-02260) THEN NULL;
  7        ELSE RAISE;
  8        END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE vncr ADD CONSTRAINT vncr_name UNIQUE(name)
  2  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> -- For compatibility with older code
SQL> CREATE OR REPLACE TRIGGER VNCR_INSERT
  2  BEFORE INSERT OR UPDATE
  3  ON VNCR
  4  FOR EACH ROW
  5  BEGIN
  6    IF :new.hostid IS NULL THEN
  7      :new.hostid := VNCR_SEQUENCE.NEXTVAL;
  8    END IF;
  9  END;
 10  /

Trigger created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE SEQUENCE gsm_sequence
  2  /

Sequence created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE database_pool (
  2     name             VARCHAR2(128) NOT NULL,
  3     broker_config    NUMBER(1),    -- boolean (1: TRUE, 0: FALSE),
  4     replication_type NUMBER(1)     DEFAULT NULL, -- 0 - DataGuard
  5                                                  -- 1 - GoldenGate
  6     pool_type        NUMBER(1)     DEFAULT 0,    -- 0 - GDS
  7                                                  -- 1 - Sharded
  8     PRIMARY KEY (name)
  9   )
 10  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE database_pool_admin (
  2     pool_name VARCHAR2(128) REFERENCES database_pool(name),
  3     user_name VARCHAR2(128) NOT NULL,  -- references "user" table
  4     PRIMARY KEY (pool_name, user_name)
  5   )
  6  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> -- for sharding
SQL> CREATE SEQUENCE shardspace_sequence
  2  /

Sequence created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE SHARD_SPACE (
  2     SHARDSPACE_ID    NUMBER        NOT NULL,
  3     NAME             VARCHAR2(128) NOT NULL,
  4     CHUNKS           NUMBER,
  5     ORIG_CHUNKS      NUMBER,
  6     CHUNKS_CREATED   NUMBER(1),
  7     DATABASE_POOL    VARCHAR(128),
  8     PROTECTION_MODE  NUMBER(1),
  9     STATUS           NUMBER(1)     DEFAULT NULL,
 10     PRIMARY KEY (shardspace_id),
 11     CONSTRAINT ss_name_unique UNIQUE (name)
 12   )
 13  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE shard_space ADD CONSTRAINT ss_in_pool
  2     FOREIGN KEY (database_pool)
  3     REFERENCES database_pool(name)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE BROKER_CONFIGS (
  2     DRSET_NUMBER    NUMBER         NOT NULL,
  3     SHARDSPACE_ID   NUMBER         DEFAULT NULL,
  4     PROTECTION_MODE NUMBER(1),     -- redundant copy of shardspace value
  5     STATUS          NUMBER,
  6     PARAMETERS      dbparams_list  DEFAULT NULL,
  7     DBID            NUMBER         DEFAULT NULL,
  8     DB_NAME         VARCHAR2(30)   DEFAULT NULL,
  9     IS_MONITORED    NUMBER(1)      DEFAULT 0,    -- Boolean (1 TRUE, 0 FALSE)
 10     MINOBJ_NUM      NUMBER         DEFAULT NULL, --obj number range min
 11     MAXOBJ_NUM      NUMBER         DEFAULT NULL, --obj number range max
 12     OBSERVER_STATE  VARCHAR2(512), -- observer state message
 13     PRIMARY KEY (drset_number)
 14   )
 15  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE broker_configs ADD CONSTRAINT bk_in_shardspace
  2     FOREIGN KEY (shardspace_id)
  3     REFERENCES shard_space(shardspace_id)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> -- For shardgroup surrogate key
SQL> CREATE SEQUENCE shardgroup_sequence
  2  /

Sequence created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE SHARD_GROUP (
  2       SHARDGROUP_ID     NUMBER        NOT NULL,
  3       NAME              VARCHAR2(128) NOT NULL,
  4       REGION_NUM        NUMBER        DEFAULT NULL,
  5       REPFACTOR         NUMBER,
  6       CHUNKS            NUMBER,
  7       CHUNK_LOC_CREATED NUMBER(1)     DEFAULT 0,  -- boolean (1 TRUE, 0 FALSE)
  8       DEPLOY_AS         NUMBER(1)     DEFAULT 0,  -- 0 = primary
  9                                                   -- 1 = non-active standby
 10                                                   -- 2 = active standby
 11       SHARDSPACE_ID     NUMBER        NOT NULL,
 12       STATUS            NUMBER        DEFAULT NULL,
 13       DEST              NUMBER,
 14       PRIMARY KEY (shardgroup_id),
 15       CONSTRAINT sg_name_unique UNIQUE (name)
 16      )
 17  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE shard_group ADD CONSTRAINT sg_in_region
  2     FOREIGN KEY (region_num)
  3     REFERENCES region(num)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE shard_group ADD CONSTRAINT sg_in_shardspace
  2     FOREIGN KEY (shardspace_id)
  3     REFERENCES shard_space(shardspace_id)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> -- ddl_requests needs to be in sys schema for security
SQL> CREATE TABLE sys.ddl_requests (
  2     ddl_num        NUMBER,
  3     ddl_text       CLOB          NOT NULL,
  4     pwd_count      NUMBER,
  5     schema_name    VARCHAR2(128) NOT NULL, -- really current user
  6                                            -- SHARD_TODO: need to fix this but
  7                                            --   requires a GSM change
  8     object_name    VARCHAR(128)  DEFAULT NULL,
  9     operation_type CHAR(1)       NOT NULL,     --'S' - sync signal (noop on db side)
 10                                                --'C' - DDL create object
 11                                                --'M' - DDL modify object
 12                                                --'D' - DDL drop object
 13                                                --'N' - New shardspace (GDSCTL)
 14                                                --'T' - New Table family
 15     object_type    NUMBER        DEFAULT NULL,
 16     params         VARCHAR(4000) DEFAULT NULL, -- same as gsm_change_message.params
 17     ignore_flag    NUMBER,
 18     sess_info      CLOB  DEFAULT NULL,
 19     shardspace     VARCHAR2(128) DEFAULT NULL,
 20     object_owner   VARCHAR2(128),
 21     op_code        CHAR(1) DEFAULT NULL,       -- Not used
 22     orig_ddl_text  CLOB          DEFAULT  NULL,
 23     ddl_flag       NUMBER,
 24                                                -- 0 - Run ddl_text
 25                                                -- 1 - Replace with orig_ddl_text
 26     ddl_intcode    NUMBER        DEFAULT NULL, -- OGG DDL internal code
 27     PRIMARY KEY (ddl_num)
 28   )
 29  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> GRANT SELECT,UPDATE,DELETE,INSERT ON sys.ddl_requests to gsmadmin_internal
  2  /

Grant succeeded.

SQL> show errors
No errors.
SQL> 
SQL> CREATE OR REPLACE synonym ddl_requests FOR sys.ddl_requests
  2  /

Synonym created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE table sys.ddl_requests_pwd (
  2     ddl_num            NUMBER,
  3     pwd_begin          NUMBER,
  4     enc_pwd            RAW(128) NOT NULL
  5   )
  6  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> GRANT SELECT,UPDATE,DELETE,INSERT ON sys.ddl_requests_pwd to gsmadmin_internal
  2  /

Grant succeeded.

SQL> show errors
No errors.
SQL> 
SQL> CREATE OR REPLACE synonym ddl_requests_pwd FOR sys.ddl_requests_pwd
  2  /

Synonym created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE SEQUENCE drset_sequence START WITH 1 NOCACHE
  2  /

Sequence created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE container_database (
  2     name                   VARCHAR2(30)    NOT NULL,
  3     connect_string         VARCHAR2(512)   NOT NULL,
  4     status                 CHAR(1)         NOT NULL,  -- TBD
  5     scan_address           VARCHAR2(512)   DEFAULT NULL,
  6     ons_port               NUMBER          DEFAULT NULL,
  7     num_assigned_instances NUMBER          NOT NULL,
  8     srlat_thresh           NUMBER          DEFAULT 20,  -- disk threhold
  9     cpu_thresh             NUMBER          DEFAULT 75,  -- cpu threshold
 10     version                VARCHAR2(30)    DEFAULT NULL, -- database version
 11     db_type                CHAR(1)         DEFAULT NULL, -- 'N': Non RAC
 12                                                          -- 'A': Admin RAC
 13                                                          -- 'P': Policy RAC
 14                                                          -- 'U': Unknown
 15     encrypted_gsm_password RAW(2000)       DEFAULT NULL, -- enc gsm password
 16     hostid                 NUMBER          DEFAULT NULL,
 17     oracle_home            VARCHAR2(4000)  DEFAULT NULL,
 18     create_state           CHAR(1)        DEFAULT NULL, -- 'N' – not created
 19                                                           -- 'C' - created
 20     DRSET_NUMBER           NUMBER         DEFAULT NULL,
 21     DEPLOY_AS              NUMBER(1)      DEFAULT 0,  -- 0 = primary
 22                                                       -- 1 = non-active standby
 23                                                       -- 2 = active standby
 24     is_monitored           NUMBER(1)      DEFAULT 0,
 25     dg_params              dbparams_list,
 26     FLAGS                  NUMBER         DEFAULT NULL,
 27     -- parameters from 'create cdb'
 28     DESTINATION            VARCHAR2(128)  DEFAULT NULL,
 29     CREDENTIAL             VARCHAR2(128)  DEFAULT NULL,
 30     DBPARAMFILE            VARCHAR2(128)  DEFAULT NULL,
 31     DBTEMPLATEFILE         VARCHAR2(128)  DEFAULT NULL,
 32     NETPARAMFILE           VARCHAR2(128)  DEFAULT NULL,
 33     -- database info passed from 'create cdb' to 'deploy'
 34     SYS_PASSWORD           VARCHAR2(128)  DEFAULT NULL,
 35     SYSTEM_PASSWORD        VARCHAR2(128)  DEFAULT NULL,
 36     SVCUSERCREDENTIAL      VARCHAR2(128)  DEFAULT NULL,
 37     DBNAME                 VARCHAR2(9)    DEFAULT NULL,
 38     DBDOMAIN               VARCHAR2(256)  DEFAULT NULL,
 39     DBUNIQUENAME           VARCHAR2(30)   DEFAULT NULL,
 40     INSTANCENAME           VARCHAR2(255)  DEFAULT NULL,
 41     RACK                   VARCHAR2(128)  DEFAULT NULL,
 42     DBID                   NUMBER         NOT NULL,
 43     PRIMARY KEY (name)
 44   )
 45   /

Table created.

SQL>  show errors
No errors.
SQL> 
SQL> -- generated internal DB number, this is a numeric unique value
SQL> -- assigned to each database which is as dense as possible
SQL> -- (avoids holes in the numbers), unlike databae_num, which is
SQL> -- generally very sparse because of holes left for multiple
SQL> -- instances on RAC (default 10 gaps per number)
SQL> CREATE SEQUENCE int_dbnum_sequence START WITH 1 NOCACHE
  2  /

Sequence created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE database (
  2     name                   VARCHAR2(159)   NOT NULL, -- 30 (dbun) + 128 (pdbname) + 1 (_)
  3     pool_name              VARCHAR2(128)   REFERENCES database_pool(name),
  4     region_num             NUMBER          DEFAULT NULL REFERENCES region(num),
  5     gsm_password           VARCHAR2(128)   DEFAULT '1' NOT NULL,
  6     connect_string         VARCHAR2(512)   NOT NULL,
  7     database_num           NUMBER          NOT NULL,
  8     status                 CHAR(1)         NOT NULL,  -- 'D': default
  9                                                       -- 'I': incomplete add
 10                                                       -- 'S': needs reSync
 11                                                       -- 'R': logically removed
 12                                                       -- 'U': Undeployed (ignored by GSM)
 13     scan_address           VARCHAR2(512)   DEFAULT NULL,
 14     ons_port               NUMBER          DEFAULT NULL,
 15     num_assigned_instances NUMBER          NOT NULL,
 16     srlat_thresh           NUMBER          DEFAULT 20,  -- disk threshold
 17                                            -- Should be the same value as
 18                                            -- dbms_gsm_common.default_srlat_thresh
 19     cpu_thresh             NUMBER          DEFAULT 75,  -- cpu threshold
 20                                            -- Should be the same value as
 21                                            -- dbms_gsm_common.default_cpu_thresh
 22     version                VARCHAR2(30)    DEFAULT NULL, -- database version
 23     db_type                CHAR(1)         DEFAULT NULL, -- 'N': Non RAC
 24                                                          -- 'A': Admin RAC
 25                                                          -- 'P': Policy RAC
 26                                                          -- 'U': Unknown
 27     encrypted_gsm_password RAW(2000)       DEFAULT NULL, -- enc gsm password
 28     hostid                 NUMBER          DEFAULT NULL,
 29     oracle_home            VARCHAR2(4000)  DEFAULT NULL,
 30     shardgroup_id          NUMBER         DEFAULT NULL,
 31     ddl_num                NUMBER         DEFAULT 0,
 32     ddl_error              VARCHAR2(4000) DEFAULT NULL, --DDL error message.
 33                                           -- If null, DB was unavailable
 34                                           -- this DB is subject for autorcv
 35     dpl_status             NUMBER         DEFAULT 0,    -- 0 - Not deployed
 36                                                         -- 1 - Deploy requested
 37                                                         -- 2 - Chunk deployment complete
 38                                                         -- 3 - Deployed
 39                                                         -- 4 - deployment error
 40     conv_state             CHAR(1)        DEFAULT NULL, -- 'S' - seed
 41                                                         -- 'C' - converted
 42     DRSET_NUMBER           NUMBER         DEFAULT NULL,
 43     DEPLOY_AS              NUMBER(1)      DEFAULT 0,    -- 0 = primary
 44                                                         -- 1 = non-active standby
 45                                                         -- 2 = active standby
 46     is_monitored           NUMBER(1)      DEFAULT 0,    -- Boolean (1 TRUE, 0 FALSE)
 47     SHARDSPACE_ID          NUMBER         DEFAULT NULL,
 48     dg_params              dbparams_list,
 49     FLAGS                  NUMBER         DEFAULT NULL,
 50     -- parameters from 'create database'
 51     DESTINATION            VARCHAR2(128)  DEFAULT NULL,
 52     CREDENTIAL             VARCHAR2(128)  DEFAULT NULL,
 53     DBPARAMFILE            VARCHAR2(128)  DEFAULT NULL,
 54     DBTEMPLATEFILE         VARCHAR2(128)  DEFAULT NULL,
 55     NETPARAMFILE           VARCHAR2(128)  DEFAULT NULL,
 56     -- database info passed from 'create database' to 'deploy'
 57     SYS_PASSWORD           VARCHAR2(128)  DEFAULT NULL,
 58     SYSTEM_PASSWORD        VARCHAR2(128)  DEFAULT NULL,
 59     SVCUSERCREDENTIAL      VARCHAR2(128)  DEFAULT NULL,
 60     DBNAME                 VARCHAR2(9)    DEFAULT NULL,
 61     DBDOMAIN               VARCHAR2(256)  DEFAULT NULL,
 62     DBUNIQUENAME           VARCHAR2(30)   DEFAULT NULL,
 63     INSTANCENAME           VARCHAR2(255)  DEFAULT NULL,
 64     MINOBJ_NUM             NUMBER         DEFAULT NULL, --obj number range min
 65     MAXOBJ_NUM             NUMBER         DEFAULT NULL, --obj number range max
 66     -- Pending requests on this database. If gsm_request# is non-zero
 67     -- other fields may contains info about request for this DB
 68     GSM_REQUEST#           NUMBER         DEFAULT 0,
 69     response_code          NUMBER         DEFAULT NULL,
 70     response_info          VARCHAR2(4000) DEFAULT NULL,
 71     error_info             VARCHAR2(4000) DEFAULT NULL,
 72     -- internal dense DB number, not used externally
 73     -- must be populated by int_dbnum_sequence
 74     int_dbnum              NUMBER         DEFAULT 0,
 75     RACK                   VARCHAR2(128)  DEFAULT NULL,
 76      -- following columns are required by OGG only
 77     cdb_name               VARCHAR2(128)  DEFAULT NULL, -- if db is a pdb, NULL if non-CDB
 78     gg_service             VARCHAR2(4000) DEFAULT NULL, -- OGG service descriptor
 79     gg_password            RAW(2000)      DEFAULT NULL, -- OGG admin password (encrypted)
 80     spare1                 VARCHAR2(4000) DEFAULT NULL,
 81     spare2                 VARCHAR2(4000) DEFAULT NULL,
 82     -- used for PDB as shard support...do NOT use cdb_name above
 83     --   unless in OGG code
 84     container              VARCHAR2(128)  DEFAULT NULL,
 85     PRIMARY KEY (database_num)
 86   )
 87  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE DATABASE ADD CONSTRAINT in_vncr
  2     FOREIGN KEY (hostid)
  3     REFERENCES vncr(hostid)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE DATABASE ADD CONSTRAINT in_shardgroup
  2     FOREIGN KEY (shardgroup_id)
  3     REFERENCES shard_group(shardgroup_id)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE DATABASE ADD CONSTRAINT in_drset
  2     FOREIGN KEY (drset_number)
  3     REFERENCES broker_configs(drset_number)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE DATABASE ADD CONSTRAINT in_shardspace
  2     FOREIGN KEY (shardspace_id)
  3     REFERENCES shard_space(shardspace_id)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE database ADD CONSTRAINT name_unique UNIQUE(name)
  2  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE database ADD CONSTRAINT in_container
  2     FOREIGN KEY (container)
  3     REFERENCES container_database(name)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> -- for 'create database'
SQL> CREATE SEQUENCE SID_SEQUENCE
  2  /

Sequence created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE SEQUENCE FILES_SEQUENCE
  2  /

Sequence created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE FILES (
  2     FILE_NAME VARCHAR2(128) NOT NULL,
  3     CONTENT   CLOB          NOT NULL,
  4     POOL_NAME VARCHAR2(128) REFERENCES database_pool(name),
  5     PRIMARY KEY (FILE_NAME)
  6   )
  7  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE SEQUENCE CREDENTIAL_SEQUENCE
  2  /

Sequence created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE CREDENTIAL (
  2     CREDENTIAL_NAME VARCHAR2(128) NOT NULL,
  3     POOL_NAME       VARCHAR2(128) REFERENCES database_pool(name),
  4     PRIMARY KEY (CREDENTIAL_NAME)
  5   )
  6  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE SEQUENCE family_sequence
  2  /

Sequence created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE TABLE_FAMILY (
  2      ROOT_NAME           VARCHAR2(128 BYTE) NOT NULL,
  3      FAMILY_ID           NUMBER             NOT NULL,
  4      PARTITION_SET_TYPE  NUMBER             DEFAULT NULL, -- SHARDSPACE type
  5      SHARD_TYPE          NUMBER             DEFAULT NULL,
  6      MAX_CHUNK_NUM       NUMBER             DEFAULT 0,
  7      -- Possible types are: 1, 'RANGE', 2, 'HASH', 4, 'LIST', 0 NONE
  8      SCHEMA_NAME         VARCHAR2(128 BYTE) DEFAULT NULL,
  9      PRIMARY KEY (family_id)
 10   )
 11  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE SHARDKEY_COLUMNS (
  2      FAMILY_ID  NUMBER        NOT NULL,
  3      KEY_LEVEL  NUMBER(1)     NOT NULL, -- 0 for shardspace key, 1 for shard key.
  4      COL_NAME   VARCHAR2(128) NOT NULL,
  5      COL_SEQ    NUMBER        NOT NULL, -- Column number inside the key
  6      -- (separate enumeration for group an shard keys)
  7      PRIMARY KEY (family_id, key_level, col_name)
  8   )
  9  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE shardkey_columns ADD CONSTRAINT sc_in_family
  2     FOREIGN KEY (family_id)
  3     REFERENCES table_family(family_id)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE service (
  2     name                      VARCHAR2(64)   NOT NULL,
  3     network_name              VARCHAR2(512)  NOT NULL,
  4     pool_name                 VARCHAR2(128)  REFERENCES database_pool(name),
  5     status                    CHAR(1),
  6                               -- 'S' (Started)
  7                               -- 'P' (Stopped)
  8     preferred_all             NUMBER(1),
  9                               -- boolean (1 TRUE, 0 FALSE)
 10     locality                  NUMBER(1),
 11                               -- anywhere (0), local_only (1)
 12     region_failover           NUMBER(1),
 13                               -- boolean (1 TRUE, 0 FALSE)
 14     role                      NUMBER(1),
 15                               -- primary (1), physical_standby (2), logical_standby (3)
 16     failover_primary          NUMBER(1),
 17                               -- boolean (1 TRUE, 0 FALSE)
 18     any_lag                   NUMBER(1),
 19                               -- boolean (1 TRUE, 0 FALSE)
 20     lag                       NUMBER,
 21                               -- lag value if 'any_lag' is FALSE
 22     runtime_balance           NUMBER(1),
 23                               -- none (0), service_time (1), throughput (2)
 24     load_balance              NUMBER(1),
 25                               -- none (0), short (1), long (2)
 26     notification              NUMBER(1),
 27                               -- boolean (1 TRUE, 0 FALSE)
 28     tafpolicy                 NUMBER(1),
 29                               -- none (0), basic (1), preconnect (2)
 30     policy                    NUMBER(1),
 31                               -- manual (1), automatic (2)
 32     dtp                       NUMBER(1),
 33                               -- boolean (1 TRUE, O FALSE)
 34     failover_method           VARCHAR2(64),
 35                               -- 'NONE' or 'BASIC'
 36     failover_type             VARCHAR2(64),
 37                               -- 'NONE', 'SESSION', 'SELECT', 'TRANSACTION'
 38                               -- or 'AUTO'
 39     failover_retries          NUMBER,
 40     failover_delay            NUMBER,
 41     edition                   VARCHAR2(128),
 42     pdb                       VARCHAR2(128),
 43     commit_outcome            NUMBER,
 44                               -- boolean (1 TRUE, 0 FALSE)
 45     retention_timeout         NUMBER,
 46     replay_initiation_timeout NUMBER,
 47     session_state_consistency VARCHAR2(128),
 48                               -- 'STATIC' or 'DYNAMIC'
 49     sql_translation_profile   VARCHAR2(261),
 50     change_state              CHAR(1)        DEFAULT NULL,
 51     table_family              NUMBER         DEFAULT NULL,
 52     stop_option               VARCHAR2(13),
 53                               -- 'NORMAL' or 'IMMEDIATE' or 'TRANSACTIONAL'
 54     drain_timeout             NUMBER         DEFAULT NULL,
 55     failover_restore          VARCHAR2(64)   DEFAULT NULL,
 56                               -- NONE or LEVEL1
 57     PRIMARY KEY (name, pool_name)
 58   )
 59  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE service ADD CONSTRAINT in_family
  2     FOREIGN KEY (table_family)
  3     REFERENCES table_family(family_id)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE service_preferred_available (
  2     service_name    VARCHAR2(64),
  3     pool_name       VARCHAR2(128),
  4     database        VARCHAR2(159), -- 30 (dbun) + 128 (pdbname) + 1 (_)
  5     preferred       NUMBER(1),     -- (1 preferred, 0 available)
  6     status          CHAR(1)        DEFAULT NULL,
  7                                    -- 'E' (Enabled)
  8                                    -- 'D' (Disabled)
  9     state           CHAR(1)        DEFAULT 'S',
 10                                    -- 'S' (Stopped)
 11                                    -- 'D' (Down - stopped by user)
 12                                    -- 'U' (Up and rUnning)
 13     dbparams        dbparams_list  DEFAULT NULL, -- database specific parameters
 14     instances       instance_list  DEFAULT NULL, -- list of preferred or
 15                                                  -- available instances for
 16                                                  -- admin managed clusters
 17                                                  -- (not currently used)
 18     change_state    CHAR(1)        DEFAULT NULL
 19   )
 20    NESTED TABLE instances STORE AS instances_nt
 21  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE service_preferred_available ADD constraint fk_db_spa
  2     foreign key(database) references database(name)
  3  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> -- need to ignore pre-existing key for downgrade->upgrade
SQL> BEGIN
  2     EXECUTE IMMEDIATE 'ALTER TABLE service_preferred_available ADD constraint
  3        pk_spa primary key(service_name, pool_name, database)';
  4  EXCEPTION
  5     WHEN OTHERS THEN
  6        IF SQLCODE IN (-02260 ) THEN NULL;
  7        ELSE RAISE;
  8        END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> show errors
No errors.
SQL> 
SQL> -- need to ignore pre-existing key for downgrade->upgrade
SQL> BEGIN
  2     EXECUTE IMMEDIATE 'ALTER TABLE service_preferred_available ADD constraint
  3        fk_sp_spa foreign key(service_name, pool_name) references service(name, pool_name)';
  4  EXCEPTION
  5     WHEN OTHERS THEN
  6        IF SQLCODE IN (-02260 ) THEN NULL;
  7        ELSE RAISE;
  8        END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE service_preferred_available ADD constraint spa_in_pool
  2     foreign key(pool_name) references database_pool(name)
  3  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> 
SQL> CREATE TABLE gsm_requests (
  2     change_seq#    NUMBER             NOT NULL,     -- copied from request
  3     request        gsm_change_message NOT NULL,
  4     failure_count  NUMBER             DEFAULT 0,
  5     error_message  VARCHAR2(4000)     DEFAULT NULL,
  6     status         CHAR(1)            DEFAULT 'N',  -- values 'N', 'D', 'F','A'
  7     change_date    DATE               DEFAULT SYSDATE,
  8     old_instances  instance_list      DEFAULT NULL, -- old instances for recovery
  9     error_num      NUMBER             DEFAULT NULL,
 10     ddl_num        NUMBER             DEFAULT NULL,
 11     parent_request NUMBER             DEFAULT NULL,
 12     PRIMARY KEY (change_seq#)
 13   )
 14   NESTED TABLE old_instances STORE AS old_instances_nt
 15  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE gsm_requests ADD CONSTRAINT prnt_req
  2     FOREIGN KEY (parent_request)
  3     REFERENCES gsm_requests(change_seq#)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> CREATE SEQUENCE cat_sequence
  2  /

Sequence created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE catalog_requests (
  2     cat_seq#       NUMBER,
  3     source_db      NUMBER      DEFAULT NULL, -- source database
  4     target_db      NUMBER      DEFAULT NULL, -- target database
  5     shspace_list   number_list DEFAULT NULL, -- shardspaces list
  6     exec_db        NUMBER      DEFAULT NULL,
  7     replica_num    NUMBER      DEFAULT NULL, -- needed by OGG only
  8     request_type   NUMBER,     -- 1 - move chunk, 2 - copy chunk
  9     obj_id         NUMBER,     -- ID of object that is the target of the request
 10                                -- for chunk move it is chunk ID
 11     status         NUMBER      DEFAULT 0,    -- status of request
 12     timeout        NUMBER      DEFAULT 0,    -- request timeout
 13     gsm_request#   NUMBER      DEFAULT NULL,  -- gsm_request number
 14     gdsctl_id      NUMBER      DEFAULT NULL  -- gsdsctl session id
 15   )
 16   nested table shspace_list store as shspace_nt
 17  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE catalog_requests ADD CONSTRAINT cr_dbsrc
  2     FOREIGN KEY (source_db)
  3     REFERENCES database(database_num)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE catalog_requests ADD CONSTRAINT cr_dbtrgt
  2     FOREIGN KEY (target_db)
  3     REFERENCES database(database_num)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE catalog_requests ADD CONSTRAINT cr_database
  2     FOREIGN KEY (exec_db)
  3     REFERENCES database(database_num)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> 
SQL> ------------------------------------------------------------------------------
SQL> -- TABLES RELATED TO SHARDING
SQL> ------------------------------------------------------------------------------
SQL> 
SQL> CREATE SEQUENCE cs_chunk_id
  2  /

Sequence created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE CHUNKS (
  2     CHUNK_NUMBER   NUMBER        NOT NULL ,
  3     SHARDSPACE_ID  NUMBER        DEFAULT NULL,
  4     LOW_KEY        NUMBER        DEFAULT NULL,
  5     HIGH_KEY       NUMBER        DEFAULT NULL,
  6     BHIBOUNDVAL    BLOB          DEFAULT NULL,
  7     BLOBOUNDVAL    BLOB          DEFAULT NULL,
  8     STATE          NUMBER        DEFAULT 0,
  9     -- Should be the same value as
 10     -- dbms_gsm_common.chunk_up
 11     RO_DBNUM       NUMBER        DEFAULT NULL, -- read only database id
 12     RW_DBNUM       NUMBER        DEFAULT NULL, -- read write database id
 13     CHUNK_ID       NUMBER        DEFAULT 0,    -- chunk id for cross sharding (catalog only)
 14     IS_RACAFF NUMBER DEFAULT 0, -- 1 if chunk is created for rac affinity
 15     PART_OBJ# NUMBER DEFAULT 0, -- RAC affinity: parittion object number
 16     PRIMARY KEY (chunk_number, shardspace_id)
 17   )
 18  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE chunks ADD CONSTRAINT chunk_shardspace
  2     FOREIGN KEY (shardspace_id)
  3     REFERENCES shard_space(shardspace_id)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE ALL_CHUNKS (
  2     CHUNK_NUMBER   NUMBER        NOT NULL ,
  3     SHARDSPACE_ID  NUMBER        DEFAULT NULL,
  4     LOW_KEY        NUMBER        DEFAULT NULL,
  5     HIGH_KEY       NUMBER        DEFAULT NULL,
  6     PRIMARY KEY (chunk_number, shardspace_id)
  7   )
  8  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE all_chunks ADD CONSTRAINT allchunk_shardspace
  2     FOREIGN KEY (shardspace_id)
  3     REFERENCES shard_space(shardspace_id)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE CHUNK_LOC (
  2     CHUNK_NUMBER  NUMBER        NOT NULL,
  3     DATABASE_NUM  NUMBER        NOT NULL,
  4     SHARDSPACE_ID NUMBER,
  5     IN_MOVE       NUMBER(1)     DEFAULT 0,
  6     -- following columns are required by OGG only
  7     -- denormalize shardgroup_id
  8     SHARDGROUP_ID NUMBER,
  9     REPLICA_NUM   NUMBER        DEFAULT NULL,
 10     -- values in interval [1..repfactor]
 11     -- a "one" means "primary copy" in a shardgroup
 12     PRIMARY KEY (chunk_number, database_num)
 13   )
 14  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE chunk_loc ADD CONSTRAINT cl_database
  2     FOREIGN KEY (database_num)
  3     REFERENCES database(database_num)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE chunk_loc ADD CONSTRAINT cl_shardgroup
  2     FOREIGN KEY (shardgroup_id)
  3     REFERENCES shard_group(shardgroup_id)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE chunk_loc ADD CONSTRAINT cl_shardspace
  2     FOREIGN KEY (shardspace_id)
  3     REFERENCES shard_space(shardspace_id)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE chunk_loc ADD CONSTRAINT cl_chunk
  2     FOREIGN KEY (chunk_number, shardspace_id)
  3     REFERENCES chunks(chunk_number, shardspace_id)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE PARTITION_SET (
  2     SET_NAME       VARCHAR2(128) NOT NULL,
  3     HIBOUNDLEN     NUMBER,
  4     HIBOUNDVAL     CLOB,
  5     BHIBOUNDVAL    BLOB,
  6     LOBOUNDLEN     NUMBER,
  7     LOBOUNDVAL     CLOB,
  8     BLOBOUNDVAL    BLOB,
  9     SHARDSPACE_ID  NUMBER,
 10     FAMILY_ID      NUMBER NOT NULL,
 11     PS_ORDER       NUMBER DEFAULT NULL,
 12     PRIMARY KEY (set_name)
 13   )
 14  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE partition_set ADD CONSTRAINT ps_family
  2     FOREIGN KEY (family_id)
  3     REFERENCES table_family(family_id)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE TABLESPACE_SET (
  2     SET_NAME      VARCHAR2 (30 BYTE) NOT NULL ,
  3     SHARDSPACE_ID NUMBER NOT NULL,
  4     FAMILY_ID     NUMBER DEFAULT NULL,
  5     PARTITION_SET VARCHAR2 (128) DEFAULT NULL,
  6     PRIMARY KEY (set_name)
  7   )
  8  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> --ALTER TABLE tablespace_set ADD CONSTRAINT ts_shardspace
SQL> --   FOREIGN KEY (shardspace_id)
SQL> --   REFERENCES shard_space(shardspace_id)
SQL> --/
SQL> --show errors
SQL> 
SQL> ALTER TABLE tablespace_set ADD CONSTRAINT ts_family
  2     FOREIGN KEY (family_id)
  3     REFERENCES table_family(family_id)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE tablespace_set ADD CONSTRAINT ts_partset
  2     FOREIGN KEY (partition_set)
  3     REFERENCES partition_set(set_name)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE SHARD_TS (
  2     TABLESPACE_NAME VARCHAR2(30)   NOT NULL,
  3     TABLESPACE_SET  VARCHAR2(30),
  4     CHUNK_NUMBER    NUMBER DEFAULT NULL, -- NULL for user-defined sharding
  5     SHARDSPACE_ID   NUMBER DEFAULT NULL, -- can be NULL for user-defined sharding
  6     MOVE_FLAG       NUMBER DEFAULT 0, -- if 1 then txn was set R/O during move
  7     PRIMARY KEY (tablespace_name),
  8     supplemental log group shard_ts$log_grp
  9      (tablespace_name, chunk_number) always
 10   ) SEGMENT CREATION IMMEDIATE TABLESPACE SYSTEM
 11  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE shard_ts ADD CONSTRAINT sts_ts
  2     FOREIGN KEY (tablespace_set)
  3     REFERENCES tablespace_set(set_name)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE shard_ts ADD CONSTRAINT sts_chunks
  2     FOREIGN KEY (chunk_number, shardspace_id)
  3     REFERENCES chunks(chunk_number, shardspace_id)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> -- temporary: re-enable this once split chunk
SQL> --  inserts into new chunks info into
SQL> --  chunks before inserting into shard_ts
SQL> ALTER TABLE shard_ts DISABLE CONSTRAINT sts_chunks
  2  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE GLOBAL_TABLE (
  2     TABLE_NAME     VARCHAR2(128)  NOT NULL,
  3     SCHEMA_NAME    VARCHAR2(128),
  4     FAMILY_ID      NUMBER,
  5     TABLE_OBJ#     NUMBER         NOT NULL, -- obj# in sys.obj$ table
  6     REF_TABLE_FLAG CHAR(1)        NOT NULL,
  7     SERVICE_ID     NUMBER         DEFAULT NULL,
  8     NUM_CHUNKS     NUMBER         DEFAULT NULL,
  9     CONSISTENT     NUMBER(1)      DEFAULT NULL,
 10     PRIMARY KEY (table_obj#)
 11   )
 12  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE global_table ADD CONSTRAINT gt_family
  2     FOREIGN KEY (family_id)
  3     REFERENCES table_family(family_id)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE TS_SET_TABLE (
  2     TABLESPACE_NAME VARCHAR2(30),
  3     TABLE_OBJ#      NUMBER,
  4     TS_USAGE_FLAG   CHAR(1)       NOT NULL,
  5     CHILD_OBJ#      NUMBER        DEFAULT NULL
  6   )
  7  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE ts_set_table ADD CONSTRAINT ts_set_ts
  2     FOREIGN KEY (tablespace_name)
  3     REFERENCES tablespace_set(set_name)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> ALTER TABLE ts_set_table ADD CONSTRAINT ts_set_gt
  2     FOREIGN KEY (table_obj#)
  3     REFERENCES global_table(table_obj#)
  4  /

Table altered.

SQL> show errors
No errors.
SQL> 
SQL> -- Table to hold DDL counter (1 column 1 row)
SQL> CREATE TABLE DDLID$ (
  2     ddlid      NUMBER NOT NULL,
  3     MINOBJ_NUM NUMBER DEFAULT NULL, --obj number range min
  4     MAXOBJ_NUM NUMBER DEFAULT NULL  --obj number range max
  5   )
  6  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> -- Idempotency, if row exists already, nothing, else insert
SQL> DECLARE
  2     ddl_count    number;
  3  BEGIN
  4     SELECT count(*) INTO ddl_count FROM ddlid$;
  5     IF ddl_count = 0 THEN
  6        INSERT INTO DDLID$ (ddlid) values (0);
  7     END IF;
  8  END;
  9  /

PL/SQL procedure successfully completed.

SQL> show errors
No errors.
SQL> 
SQL> CREATE TABLE verify_history (
  2     run_number     NUMBER         NOT NULL,
  3     message_number NUMBER         NOT NULL,
  4     message_string VARCHAR(1000),
  5     message_date   DATE           NOT NULL
  6   )
  7  /

Table created.

SQL> show errors
No errors.
SQL> 
SQL> GRANT SELECT on verify_history TO gsmadmin_role;

Grant succeeded.

SQL> /

Grant succeeded.

SQL> show errors
No errors.
SQL> 
SQL> CREATE SEQUENCE verify_run_number
  2  /

Sequence created.

SQL> show errors
No errors.
SQL> 
SQL> CREATE GLOBAL TEMPORARY TABLE CHUNKDATA_TMP (
  2  DATAFILE_NAME VARCHAR2(512))
  3  ON COMMIT PRESERVE ROWS
  4  /

Table created.

SQL> show errors
No errors.
SQL> -------------------------
SQL> -- Create AQ Change Queue
SQL> -------------------------
SQL> DECLARE
  2    stmt  VARCHAR2(500);
  3  BEGIN
  4      stmt := 'GRANT SELECT ON aq$_unflushed_dequeues to ' || 'gsmadmin_internal';
  5      EXECUTE IMMEDIATE stmt;
  6  
  7      dbms_aqadm.create_queue_table(
  8          queue_table => 'gsmadmin_internal.change_log_queue_table',
  9          multiple_consumers => TRUE,
 10          queue_payload_type => 'gsmadmin_internal.gsm_change_message',
 11          storage_clause => 'TABLESPACE "SYSAUX"',
 12          comment => 'Creating GSM change log queue table');
 13  
 14      dbms_aqadm.create_queue(
 15          queue_name => 'gsmadmin_internal.change_log_queue',
 16          queue_table => 'gsmadmin_internal.change_log_queue_table',
 17          comment => 'GSM Change Log Queue');
 18  EXCEPTION
 19  WHEN others THEN
 20    IF sqlcode = -24001 THEN NULL;
 21         -- suppress error for pre-existent queue table
 22    ELSE raise;
 23    END IF;
 24  END;
 25  /

PL/SQL procedure successfully completed.

SQL> show errors
No errors.
SQL> 
SQL> -- This can only be done by the queue owner (gsmadmin_internal) or
SQL> -- SYS.
SQL> BEGIN
  2    dbms_aqadm.grant_queue_privilege(
  3       privilege => 'dequeue',
  4       queue_name => 'gsmadmin_internal.change_log_queue',
  5       grantee => 'GSMCATUSER');
  6  END;
  7  /

PL/SQL procedure successfully completed.

SQL> show errors
No errors.
SQL> 
SQL> BEGIN
  2    dbms_aqadm.grant_queue_privilege(
  3       privilege => 'enqueue',
  4       queue_name => 'gsmadmin_internal.change_log_queue',
  5       grantee => 'GSMADMIN_INTERNAL');
  6  END;
  7  /

PL/SQL procedure successfully completed.

SQL> show errors
No errors.
SQL> 
SQL> BEGIN
  2     dbms_aqadm.start_queue('gsmadmin_internal.change_log_queue',
  3                            TRUE,
  4                            TRUE);
  5  END;
  6  /

PL/SQL procedure successfully completed.

SQL> show errors
No errors.
SQL> 
SQL> ----------------------------------
SQL> -- Grant resolve network privilege
SQL> ----------------------------------
SQL> 
SQL> BEGIN
  2    dbms_network_acl_admin.append_host_ace(
  3      host => '*',
  4      ace => xs$ace_type(privilege_list => xs$name_list('RESOLVE'),
  5                         principal_name => 'GSMADMIN_INTERNAL',
  6                         principal_type => xs_acl.ptype_db));
  7  END;
  8  /

PL/SQL procedure successfully completed.

SQL> show errors
No errors.
SQL> 
SQL> -----------------------
SQL> -- Set Table Privileges
SQL> -----------------------
SQL> 
SQL> GRANT select on cloud to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on region to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on gsm to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on vncr to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on database_pool to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on database_pool_admin to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on gsm_requests to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on container_database to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on database to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on files to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on credential to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on service to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on service_preferred_available to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on shard_group to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on tablespace_set to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on shard_space to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on broker_configs to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on shardkey_columns to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on partition_set to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on catalog_requests to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on chunk_loc to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on chunks to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on shard_ts to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on global_table to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on table_family to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on sys.ddl_requests to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> GRANT select on sys.ddl_requests_pwd to gsmadmin_role, gds_catalog_select;

Grant succeeded.

SQL> 
SQL> -- Import catalog permissions.
SQL> GRANT insert on vncr to gsmadmin_role;

Grant succeeded.

SQL> GRANT update on cloud to gsmadmin_role;

Grant succeeded.

SQL> GRANT insert,update on region to gsmadmin_role;

Grant succeeded.

SQL> GRANT insert on gsm to gsmadmin_role;

Grant succeeded.

SQL> 
SQL> GRANT insert on container_database to gsmadmin_role;

Grant succeeded.

SQL> GRANT insert on database to gsmadmin_role;

Grant succeeded.

SQL> GRANT insert on files to gsmadmin_role;

Grant succeeded.

SQL> GRANT insert on credential to gsmadmin_role;

Grant succeeded.

SQL> GRANT insert on database_pool to gsmadmin_role;

Grant succeeded.

SQL> GRANT insert on database_pool_admin to gsmadmin_role;

Grant succeeded.

SQL> GRANT insert on service to gsmadmin_role;

Grant succeeded.

SQL> GRANT insert on service_preferred_available to gsmadmin_role;

Grant succeeded.

SQL> -- End import catalog permissions
SQL> 
SQL> GRANT select on database_pool to gsm_pooladmin_role;

Grant succeeded.

SQL> GRANT select on container_database to gsm_pooladmin_role;

Grant succeeded.

SQL> GRANT select on database to gsm_pooladmin_role;

Grant succeeded.

SQL> GRANT select on files to gsm_pooladmin_role;

Grant succeeded.

SQL> GRANT select on credential to gsm_pooladmin_role;

Grant succeeded.

SQL> GRANT select on sys.ddl_requests to gsm_pooladmin_role;

Grant succeeded.

SQL> GRANT select on sys.ddl_requests_pwd to gsm_pooladmin_role;

Grant succeeded.

SQL> GRANT select on cloud to gsm_pooladmin_role;

Grant succeeded.

SQL> GRANT select on service to gsm_pooladmin_role;

Grant succeeded.

SQL> GRANT select on service_preferred_available to gsm_pooladmin_role;

Grant succeeded.

SQL> GRANT select on gsm_requests to gsm_pooladmin_role;

Grant succeeded.

SQL> 
SQL> -- Pool admin has to see regions in order to know which regions
SQL> -- to which to add databases.
SQL> GRANT select on region to gsm_pooladmin_role;

Grant succeeded.

SQL> 
SQL> -- set type privs (so that GDSCTL can select types from tables)
SQL> GRANT execute on gsmadmin_internal.gsm_change_message to gsmadmin_role;

Grant succeeded.

SQL> GRANT execute on gsmadmin_internal.dbparams_t to gsmadmin_role,
  2                                                   gsm_pooladmin_role;

Grant succeeded.

SQL> GRANT execute on gsmadmin_internal.dbparams_list to gsmadmin_role,
  2                                                      gsm_pooladmin_role;

Grant succeeded.

SQL> GRANT execute on gsmadmin_internal.rac_instance_t to gsmadmin_role,
  2                                                       gsm_pooladmin_role;

Grant succeeded.

SQL> GRANT execute on gsmadmin_internal.instance_list to gsmadmin_role,
  2                                                      gsm_pooladmin_role;

Grant succeeded.

SQL> GRANT execute on gsmadmin_internal.name_list to gsmadmin_role,
  2                                                      gsm_pooladmin_role;

Grant succeeded.

SQL> GRANT execute on gsmadmin_internal.number_list to gsmadmin_role,
  2                                                      gsm_pooladmin_role;

Grant succeeded.

SQL> 
SQL> GRANT select,insert,update,delete on gdsctl_messages to gsm_pooladmin_role,
  2                                                          gsmadmin_role;

Grant succeeded.

SQL> GRANT update,delete on gsm_requests to gsm_pooladmin_role, gsmadmin_role;

Grant succeeded.

SQL> GRANT update on service_preferred_available to gsmcatuser;

Grant succeeded.

SQL> GRANT update on container_database to gsmcatuser;

Grant succeeded.

SQL> GRANT update on database to gsmcatuser;

Grant succeeded.

SQL> GRANT update on broker_configs to gsmcatuser;

Grant succeeded.

SQL> GRANT update on files to gsmcatuser;

Grant succeeded.

SQL> GRANT update on credential to gsmcatuser;

Grant succeeded.

SQL> grant select on sys.gv_$dg_broker_config to gsmcatuser;

Grant succeeded.

SQL> 
SQL> 
SQL> GRANT gsmadmin_role, gsm_pooladmin_role to gsmcatuser;

Grant succeeded.

SQL> 
SQL> -- session context for cross-shard
SQL> CREATE OR REPLACE CONTEXT shard_ctx USING gsmadmin_internal.dbms_gsm_pooladmin;

Context created.

SQL> 
SQL> -- session context for ddl updates
SQL> CREATE OR REPLACE CONTEXT shard_ctx2 USING gsmadmin_internal.dbms_gsm_utility;

Context created.

SQL> 
SQL> --------------------- LOCAL_CHUNKS view and it's friends (for clients)
SQL> 
SQL> create or replace view LOCAL_TABLE_FAMILY_SERVICES
  2    (TABFAM_ID,
  3     FAMILY_NAME,  -- table family name in the form of <schemaname>.<rootname>
  4     SERVICE_NAME  -- networkname of the service associated with the table family
  5    )
  6  as select
  7    TF.FAMILY_ID, TF.SCHEMA_NAME||'.'||TF.ROOT_NAME,
  8    CASE WHEN INSTR(dbms_gsm_common.getParam_gwm_database_flags,'C')!=0
  9              THEN CSVC.NETWORK_NAME
 10         ELSE SVC.NETWORK_NAME
 11    END
 12  from TABLE_FAMILY TF
 13    LEFT JOIN SERVICE CSVC ON CSVC.TABLE_FAMILY = TF.FAMILY_ID
 14    LEFT JOIN SYS.SERVICE$ SVC ON SVC.TABLE_FAMILY_ID = TF.FAMILY_ID
 15                               AND SVC.DELETION_DATE IS NULL
 16  with read only
 17  /

View created.

SQL> 
SQL> create or replace public synonym LOCAL_TABLE_FAMILY_SERVICES
  2  for LOCAL_TABLE_FAMILY_SERVICES
  3  /

Synonym created.

SQL> 
SQL> grant read on LOCAL_TABLE_FAMILY_SERVICES to PUBLIC with grant option
  2  /

Grant succeeded.

SQL> show errors
No errors.
SQL> 
SQL> create or replace view LOCAL_CHUNK_TYPES
  2    (TABFAM_ID, TABLE_NAME, SCHEMA_NAME,
  3      GROUP_TYPE, GROUP_COL_NUM,   --   number of columns in super key
  4      SHARD_TYPE, SHARD_COL_NUM,   --  number of columns in shard key
  5      DEF_VERSION,                 --  version of the shard definition
  6      SHARDGROUP_NAME
  7    )
  8  as select
  9    TF.FAMILY_ID, GT.TABLE_NAME, GT.SCHEMA_NAME,
 10    decode(TF.PARTITION_SET_TYPE, 1, 'RANGE', 2, 'HASH', 4, 'LIST', 'NONE'),
 11    (select count(1) from SHARDKEY_COLUMNS PK where PK.FAMILY_ID = TF.FAMILY_ID and PK.KEY_LEVEL = 0),
 12    decode(TF.SHARD_TYPE, 1, 'RANGE', 2, 'HASH', 4, 'LIST', 'NONE'),
 13    (select count(1) from SHARDKEY_COLUMNS PK where PK.FAMILY_ID = TF.FAMILY_ID and PK.KEY_LEVEL = 1),
 14    D.ddlid, dbms_gsm_common.getParam_shardgroup_name
 15  from
 16    GLOBAL_TABLE GT, TABLE_FAMILY TF, DDLID$ D
 17  where GT.REF_TABLE_FLAG = 'R' AND
 18    TF.FAMILY_ID = GT.FAMILY_ID
 19  with read only
 20  /

View created.

SQL> 
SQL> create or replace public synonym LOCAL_CHUNK_TYPES for LOCAL_CHUNK_TYPES
  2  /

Synonym created.

SQL> 
SQL> grant read on LOCAL_CHUNK_TYPES to PUBLIC with grant option
  2  /

Grant succeeded.

SQL> show errors
No errors.
SQL> 
SQL> create or replace view LOCAL_CHUNK_COLUMNS
  2  (
  3    TABFAM_ID,
  4    SHARD_LEVEL,    -- SUPERSHARDING 0 / SHARDING 1
  5    COL_NAME, COL_IDX_IN_KEY,
  6    EFF_TYPE,       -- type of the column, which is used for routing and it's format
  7                    -- (currently, supposed to be the same as COL_TYPE)
  8    CHARACTER_SET,  -- Character set used on the database side in case of VARCHAR or NVARCHAR type
  9    COL_TYPE,       -- real type of the column (not important for client)
 10    COL_SIZE        -- size of a column if used (important for NCHAR/CHAR, 0 for anything else)
 11  )
 12  as
 13  select
 14    GT.FAMILY_ID, PK.KEY_LEVEL, PK.COL_NAME, COL_SEQ,
 15    c.type#, c.charsetid, c.type#, c.length
 16  from
 17    SYS.COL$ c, SHARDKEY_COLUMNS PK, GLOBAL_TABLE GT
 18  where
 19    c.NAME = PK.COL_NAME AND c.obj# = GT.TABLE_OBJ# AND GT.REF_TABLE_FLAG = 'R'
 20    AND GT.FAMILY_ID = PK.FAMILY_ID
 21  with read only
 22  /

View created.

SQL> create or replace public synonym LOCAL_CHUNK_COLUMNS for LOCAL_CHUNK_COLUMNS
  2  /

Synonym created.

SQL> grant read on LOCAL_CHUNK_COLUMNS to PUBLIC with grant option
  2  /

Grant succeeded.

SQL> show errors
No errors.
SQL> 
SQL> create or replace view LOCAL_CHUNKS
  2  (
  3    CHUNK_NAME, SHARD_KEY_LOW, SHARD_KEY_HIGH, GROUP_KEY_LOW, GROUP_KEY_HIGH,
  4    PRIORITY, TABFAM_ID, GRP_ID, CHUNK_ID, STATE, SHARD_NAME, SHARDSPACE_NAME,
  5    INST_ID, CHUNK_UNIQUE_ID
  6  )
  7  as
  8  with
  9   LOCAL_CHUNK_LOC as
 10    (SELECT CLX.REPLICA_NUM PRIORITY, NVL(CLX.SHARDSPACE_ID, 0) SSID,
 11      CLX.CHUNK_NUMBER CHUNK_NUMBER, D.NAME DB_NAME FROM CHUNK_LOC CLX
 12        LEFT JOIN DATABASE D ON (D.DATABASE_NUM = CLX.DATABASE_NUM)
 13        WHERE CLX.DATABASE_NUM =
 14        dbms_gsm_common.getParam_db_num_gsm
 15        or
 16        INSTR(dbms_gsm_common.getParam_gwm_database_flags,'C')
 17        !=0),
 18   LOCAL_CHUNK AS
 19    (SELECT NVL(C.SHARDSPACE_ID, 0) SHARDSPACE_ID, C.CHUNK_NUMBER CHUNK_NUMBER,
 20            C.BLOBOUNDVAL BLOBOUNDVAL, C.BHIBOUNDVAL BHIBOUNDVAL, C.STATE STATE,
 21            SS.NAME SHARDSPACE, C.PART_OBJ# PART_OBJECT_ID, C.CHUNK_ID CHUNK_UNIQUE_ID
 22       FROM CHUNKS C, SHARD_SPACE SS
 23      WHERE C.SHARDSPACE_ID = SS.SHARDSPACE_ID)
 24  select
 25   'CHUNK_' || TO_CHAR(LC.SHARDSPACE_ID) || '_' || TO_CHAR(LC.CHUNK_NUMBER),
 26   LC.BLOBOUNDVAL, LC.BHIBOUNDVAL, PS.BLOBOUNDVAL, PS.BHIBOUNDVAL,
 27    (SELECT CL.PRIORITY FROM LOCAL_CHUNK_LOC CL
 28      WHERE LC.CHUNK_NUMBER = CL.CHUNK_NUMBER AND LC.SHARDSPACE_ID = CL.SSID
 29        AND ROWNUM < 2) PRIORITY,
 30    TF.FAMILY_ID, LC.SHARDSPACE_ID, LC.CHUNK_NUMBER, LC.STATE,
 31    CL.DB_NAME,
 32    LC.SHARDSPACE SHARDSPACE_NAME,
 33    nvl2(LC.PART_OBJECT_ID,
 34         (CASE WHEN CM.INST_ID>0 THEN CM.INST_ID
 35         ELSE
 36                  (SELECT FUTURE_MASTER FROM GV$GCSPFMASTER_INFO GC
 37                   WHERE  GC.INST_ID=USERENV('Instance') AND
 38                          GC.DATA_OBJECT_ID = LC.PART_OBJECT_ID)
 39         END),
 40         NULL), LC.CHUNK_UNIQUE_ID
 41  from
 42    (LOCAL_CHUNK LC cross join TABLE_FAMILY TF)
 43      left outer join PARTITION_SET PS on (PS.SHARDSPACE_ID = LC.SHARDSPACE_ID)
 44      left outer join (select CHUNK_NUMBER, MIN(MASTER_INST) INST_ID
 45                       FROM GV$GWM_RAC_AFFINITY
 46                       GROUP BY CHUNK_NUMBER) CM
 47                 on  ( CM.CHUNK_NUMBER= LC.CHUNK_NUMBER)
 48      left outer join LOCAL_CHUNK_LOC CL on
 49          (LC.CHUNK_NUMBER = CL.CHUNK_NUMBER
 50              AND LC.SHARDSPACE_ID = CL.SSID)
 51  where
 52    LC.STATE in (0,1) --exclude chunks that are down
 53  with read only
 54  /

View created.

SQL> 
SQL> create or replace public synonym LOCAL_CHUNKS for LOCAL_CHUNKS
  2  /

Synonym created.

SQL> 
SQL> grant read on LOCAL_CHUNKS to PUBLIC with grant option
  2  /

Grant succeeded.

SQL> show errors
No errors.
SQL> 
SQL> ------------------------------------------------------------------------------
SQL> --
SQL> -- Usr visisble views for querying shard catalog
SQL> --
SQL> ------------------------------------------------------------------------------
SQL> 
SQL> -- Sharded databases
SQL> CREATE OR REPLACE VIEW sha_databases
  2     (db_unique_name, region_name, connect_string, db_created, status, version,
  3      rac_type, shardgroup, last_ddl, ddl_error, deployment_state, dg_broker_id,
  4      shardspace, db_up, is_primary, db_host, oracle_home
  5     )
  6  AS SELECT
  7     d.name,
  8     r.name,
  9     d.connect_string,
 10     CASE d.conv_state
 11        WHEN 'S' THEN 'N'
 12        WHEN 'C' THEN 'Y'
 13        ELSE 'UNKNOWN' END,
 14     CASE d.status
 15        WHEN 'U' THEN 'UNDEPLOYED'
 16        WHEN 'R' THEN 'REPLICATON_CONFIGURED'
 17        WHEN 'D' THEN 'GSM_SET_UP'
 18        WHEN 'I' THEN 'ADD_INCOMPLETE'
 19        WHEN 'S' THEN 'NEEDS_RESYNC'
 20        ELSE 'UNKNOWN' END,
 21     dbms_gsm_utility.dbVersRevLookup(d.version),
 22     CASE d.db_type
 23        WHEN 'N' THEN 'NON_RAC'
 24        WHEN 'A' THEN 'ADMIN_RAC'
 25        WHEN 'P' THEN 'POLICY_RAC'
 26        WHEN 'S' THEN 'SIHA'
 27        WHEN 'U' THEN 'UNKNOWN'
 28        ELSE 'UNKNOWN' END,
 29     s.name,
 30     d.ddl_num,
 31     d.ddl_error,
 32     CASE d.dpl_status
 33        WHEN 0 THEN 'NOT_DEPLOYED'
 34        WHEN 1 THEN 'DEPLOY_REQUESTED'
 35        WHEN 2 THEN 'REPLICATION_CONFIGURED'
 36        WHEN 3 THEN 'HAS_CHUNKS'
 37        WHEN 4 THEN 'DEPLOYED'
 38        WHEN 5 THEN 'OGG DEPLOYED'
 39        ELSE 'UNKNOWN' END,
 40     d.drset_number,
 41     ss.name,
 42     CASE BITAND(d.flags, 1)
 43        WHEN 1 THEN 'Y'
 44        ELSE 'N' END,
 45     CASE BITAND(d.flags,2)
 46        WHEN 2 THEN 'Y'
 47        ELSE 'N' END,
 48     v.hostname,
 49     d.oracle_home
 50  FROM database d
 51     LEFT JOIN region r ON (d.region_num = r.num)
 52     LEFT JOIN shard_group s ON (d.shardgroup_id = s.shardgroup_id)
 53     LEFT JOIN shard_space ss ON (d.shardspace_id = ss.shardspace_id)
 54     LEFT JOIN vncr v ON (d.hostid = v.hostid);

View created.

SQL> /

View created.

SQL> 
SQL> create or replace public synonym SHA_DATABASES for SHA_DATABASES
  2  /

Synonym created.

SQL> 
SQL> grant read on SHA_DATABASES to GSMADMIN_ROLE
  2  /

Grant succeeded.

SQL> 
SQL> grant select on sha_databases to gds_catalog_select
  2  /

Grant succeeded.

SQL> 
SQL> show errors
No errors.
SQL> 
SQL> ALTER SESSION SET CURRENT_SCHEMA = SYS;

Session altered.

SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem OGG sharding schema
SQL> Rem
SQL> @@catggshard.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/catggshard.sql /main/13 2018/08/17 09:21:26 ralekra Exp $
SQL> Rem
SQL> Rem catggshard.sql
SQL> Rem
SQL> Rem Copyright (c) 2015, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      catggshard.sql - GG SHARDing
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      GGSYS schema
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      .
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/catggshard.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/catggshard.sql
SQL> Rem    SQL_PHASE: CATGGSHARD
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    SQL_CALLING_FILE:  rdbms/admin/catpend.sql
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    ralekra     07/26/18 - Bug 28141150: remove unused privileges
SQL> Rem    sdball      05/15/18 - Bug 27965298: New secure paradigm for create user
SQL> Rem    raeburns    10/20/17 - RTI 20225108: Fix SQL_METADATA
SQL> Rem    sdball      03/09/16 - ddl_requests is now in sys schema
SQL> Rem    ralekra     02/15/16 - Bug 22346603 remove dbms_system privilege
SQL> Rem    ralekra     12/18/15 - grant network privileges to ggsys
SQL> Rem    ralekra     12/10/15 - Bug 22297600 revoke inherit privileges from public
SQL> Rem    vidgovin    12/07/15 - Bug 22204627
SQL> Rem    ralekra     11/23/15 - revisit ggsys grants and privileges
SQL> Rem    dcolello    11/02/15 - schema name changes for production
SQL> Rem    jorgrive    03/19/15 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> -------------------------------------------------------------------------------
SQL> -- create GGSYS user
SQL> -------------------------------------------------------------------------------
SQL> CREATE USER ggsys no authentication
  2  account lock
  3  DEFAULT TABLESPACE sysaux;

User created.

SQL> 
SQL> -------------------------------------------------------------------------------
SQL> -- grants required: roles and system privileges
SQL> -------------------------------------------------------------------------------
SQL> ALTER USER ggsys QUOTA unlimited ON sysaux;

User altered.

SQL> GRANT unlimited tablespace  TO ggsys;

Grant succeeded.

SQL> 
SQL> GRANT create database link  TO ggsys;

Grant succeeded.

SQL> GRANT select ANY dictionary TO ggsys;

Grant succeeded.

SQL> GRANT select ANY table      TO ggsys;

Grant succeeded.

SQL> GRANT create ANY table      TO ggsys;

Grant succeeded.

SQL> GRANT alter  ANY table      TO ggsys;

Grant succeeded.

SQL> GRANT alter  ANY index      TO ggsys;

Grant succeeded.

SQL> -------------------------------------------------------------------------------
SQL> -- grants required: SYS object privileges
SQL> -------------------------------------------------------------------------------
SQL> GRANT execute ON sys.dbms_lock           TO ggsys;

Grant succeeded.

SQL> GRANT execute ON sys.dbms_sys_error      TO ggsys;

Grant succeeded.

SQL> GRANT execute ON sys.dbms_logrep_util    TO ggsys;

Grant succeeded.

SQL> GRANT execute ON sys.dbms_goldengate_adm TO ggsys;

Grant succeeded.

SQL> GRANT execute ON sys.dbms_gsm_fixed      TO ggsys;

Grant succeeded.

SQL> GRANT execute ON sys.dbms_network_acl_admin TO ggsys;

Grant succeeded.

SQL> 
SQL> GRANT select, references, insert, update, delete ON sys.ddl_requests     TO ggsys;

Grant succeeded.

SQL> GRANT select, references, insert, update, delete ON sys.ddl_requests_pwd TO ggsys;

Grant succeeded.

SQL> 
SQL> -------------------------------------------------------------------------------
SQL> -- grants required: GSMADMIN_INTERNAL object privileges
SQL> -------------------------------------------------------------------------------
SQL> GRANT select ON gsmadmin_internal.gsm                         TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.cloud                       TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.database_pool_admin         TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.files                       TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.vncr                        TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.broker_configs              TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.credential                  TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.service                     TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.service_preferred_available TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.shardkey_columns            TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.partition_set               TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.tablespace_set              TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.shard_ts                    TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.global_table                TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.table_family                TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.ts_set_table                TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.ddlid$                      TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.verify_history              TO ggsys;

Grant succeeded.

SQL> 
SQL> GRANT select ON gsmadmin_internal.cat_sequence                TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.gsm_sequence                TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.region_sequence             TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.shardgroup_sequence         TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.shardspace_sequence         TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.cs_chunk_id                 TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.int_dbnum_sequence          TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.sid_sequence                TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.files_sequence              TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.family_sequence             TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.credential_sequence         TO ggsys;

Grant succeeded.

SQL> GRANT select ON gsmadmin_internal.verify_run_number           TO ggsys;

Grant succeeded.

SQL> 
SQL> GRANT select, references, insert, update, delete ON gsmadmin_internal.region           TO ggsys;

Grant succeeded.

SQL> GRANT select, references, insert, update, delete ON gsmadmin_internal.database_pool    TO ggsys;

Grant succeeded.

SQL> GRANT select, references, insert, update, delete ON gsmadmin_internal.database         TO ggsys;

Grant succeeded.

SQL> GRANT select, references, insert, update, delete ON gsmadmin_internal.shard_group      TO ggsys;

Grant succeeded.

SQL> GRANT select, references, insert, update, delete ON gsmadmin_internal.shard_space      TO ggsys;

Grant succeeded.

SQL> GRANT select, references, insert, update, delete ON gsmadmin_internal.chunks           TO ggsys;

Grant succeeded.

SQL> GRANT select, references, insert, update, delete ON gsmadmin_internal.chunk_loc        TO ggsys;

Grant succeeded.

SQL> GRANT select, references, insert, update, delete ON gsmadmin_internal.gsm_requests     TO ggsys;

Grant succeeded.

SQL> GRANT select, references, insert, update, delete ON gsmadmin_internal.catalog_requests TO ggsys;

Grant succeeded.

SQL> 
SQL> GRANT execute ON gsmadmin_internal.name_list          TO ggsys;

Grant succeeded.

SQL> GRANT execute ON gsmadmin_internal.number_list        TO ggsys;

Grant succeeded.

SQL> GRANT execute ON gsmadmin_internal.gsm_change_message TO ggsys;

Grant succeeded.

SQL> 
SQL> GRANT execute ON gsmadmin_internal.dbms_gsm_common    TO ggsys;

Grant succeeded.

SQL> GRANT execute ON gsmadmin_internal.dbms_gsm_utility   TO ggsys;

Grant succeeded.

SQL> GRANT execute ON gsmadmin_internal.dbms_gsm_dbadmin   TO ggsys;

Grant succeeded.

SQL> GRANT execute ON gsmadmin_internal.dbms_gsm_pooladmin TO ggsys;

Grant succeeded.

SQL> 
SQL> -------------------------------------------------------------------------------
SQL> -- grants required: network privileges
SQL> -------------------------------------------------------------------------------
SQL> BEGIN
  2      DBMS_NETWORK_ACL_ADMIN.append_host_ace(
  3          host => '*',
  4          ace  =>  xs$ace_type(privilege_list => xs$name_list('resolve'),
  5                               principal_name => 'ggsys',
  6                               principal_type => xs_acl.ptype_db));
  7  END;
  8  /

PL/SQL procedure successfully completed.

SQL> show errors
No errors.
SQL> 
SQL> -------------------------------------------------------------------------------
SQL> -- revoke inherit privileges from public
SQL> -------------------------------------------------------------------------------
SQL> DECLARE
  2      already_revoked EXCEPTION;
  3      PRAGMA exception_init (already_revoked,-01927);
  4  BEGIN
  5      execute immediate 'REVOKE inherit privileges ON USER ggsys FROM public';
  6  EXCEPTION
  7      WHEN already_revoked THEN
  8          NULL;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> show errors
No errors.
SQL> 
SQL> -------------------------------------------------------------------------------
SQL> -- create role ggsys_role
SQL> -------------------------------------------------------------------------------
SQL> CREATE ROLE ggsys_role;

Role created.

SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> Rem
SQL> Rem Invoke execlmnr.sql
SQL> Rem Gather stats on Logminer Dictionary tables to initialize incremental
SQL> Rem stats mode
SQL> Rem
SQL> @@execlmnr.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/execlmnr.sql /main/2 2018/04/03 16:01:14 bspeckha Exp $
SQL> Rem
SQL> Rem execlmnr.sql
SQL> Rem
SQL> Rem Copyright (c) 2014, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      execlmnr.sql - Set up incremental stats on Logminer tables during db creation.
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem              Set up incremental stats on Logminer tables.
SQL> Rem                     1. Set incremental stats table preferences on each
SQL> Rem                        Logminer table.
SQL> Rem                     2. Gather stats to establish incremental stats
SQL> Rem                        (Init synopsis for each partition, etc)
SQL> Rem
SQL> Rem    NOTES
SQL> Rem     These steps are performed on upgrade across 12.1 as well as
SQL> Rem     during db creation, however these steps are only run from
SQL> Rem     execlmnr.sql during db creation. On upgrade, these steps are
SQL> Rem     performed in a and post upgrade scripts.
SQL> Rem
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/execlmnr.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/execlmnr.sql
SQL> Rem    SQL_PHASE: EXECLMNR
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    SQL_CALLING_FILE: rdbms/admin/catpend.sql
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    bspeckha    02/14/18 - Bug 26145194 : Gather stats during upgrade mode
SQL> Rem    cderosa     07/03/14 - Script to set statistics gathering table
SQL> Rem                           preferences on logminer dictionary tables.
SQL> Rem    cderosa     07/03/14 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> 
SQL> 
SQL> Rem
SQL> Rem Set incremental stats preferences on Logminer tables and
SQL> Rem invoke log miner gather stats script if run during db creation.
SQL> Rem
SQL> 
SQL> DECLARE
  2   cursor table_name_cursor  is
  3        select  x.name table_name
  4        from sys.x$krvxdta x
  5        where bitand(x.flags, 12) != 0;
  6  BEGIN
  7     for table_name_rec in table_name_cursor loop
  8        begin
  9           DBMS_STATS.SET_TABLE_PREFS('SYSTEM',
 10           'LOGMNR_'|| table_name_rec.table_name||'', 'incremental', 'TRUE');
 11           DBMS_STATS.SET_TABLE_PREFS('SYSTEM',
 12           'LOGMNR_'|| table_name_rec.table_name||'',
 13           'incremental_staleness', 'use_stale_percent, use_locked_stats');
 14        end;
 15     end loop;
 16  END;
 17  /

PL/SQL procedure successfully completed.

SQL> 
SQL> @@execlmnrstats.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/execlmnrstats.sql /main/1 2014/12/17 08:57:27 cderosa Exp $
SQL> Rem
SQL> Rem execlmnrstats.sql
SQL> Rem
SQL> Rem Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      execlmnrstats.sql - Gather stats on Logminer dictionary tables.
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Gather stats on Logminer dictionary tables. This is the first
SQL> Rem      time stats are called after incremental prefs are set, so this
SQL> Rem      will set up the incremental infrastructure.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      This is called during db creation and during upgrade across 12.1
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/execlmnrstats.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/execlmnrstats.sql
SQL> Rem    SQL_PHASE: EXECLMNRSTATS
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    SQL_CALLING_FILE: rdbms/admin/execlmnr.sql
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    cderosa     07/03/14 - Initial statistics gathering after incremental
SQL> Rem                           table prefs are set.
SQL> Rem    cderosa     07/03/14 - Created
SQL> Rem
SQL> 
SQL> @@?/rdbms/admin/sqlsessstart.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessstart.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessstart.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessstart.sql - SQL session start
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the start of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessend.sql for the corresponding end script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessstart.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = true;

Session altered.

SQL> DECLARE
  2          cursor table_name_cursor  is
  3                  select  x.name table_name
  4                  from sys.x$krvxdta x
  5                  where bitand(x.flags, 12) != 0;
  6          filter_lst DBMS_STATS.OBJECTTAB := DBMS_STATS.OBJECTTAB();
  7          obj_lst    DBMS_STATS.OBJECTTAB := DBMS_STATS.OBJECTTAB();
  8          ind number := 1;
  9  BEGIN
 10     for rec in table_name_cursor loop
 11        begin
 12          filter_lst.extend(1);
 13          filter_lst(ind).ownname := 'SYSTEM';
 14          filter_lst(ind).objname := 'LOGMNR_'|| rec.table_name||'';
 15          ind := ind + 1;
 16        end;
 17     end loop;
 18     DBMS_STATS.GATHER_SCHEMA_STATS(OWNNAME=>'SYSTEM', objlist=>obj_lst, obj_filter_list=>filter_lst);
 19  END;
 20  /

PL/SQL procedure successfully completed.

SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> @?/rdbms/admin/sqlsessend.sql
SQL> Rem
SQL> Rem $Header: rdbms/admin/sqlsessend.sql /main/3 2018/07/25 13:50:02 surman Exp $
SQL> Rem
SQL> Rem sqlsessend.sql
SQL> Rem
SQL> Rem Copyright (c) 2013, 2018, Oracle and/or its affiliates.
SQL> Rem All rights reserved.
SQL> Rem
SQL> Rem    NAME
SQL> Rem      sqlsessend.sql - SQL session end
SQL> Rem
SQL> Rem    DESCRIPTION
SQL> Rem      Any commands which should be run at the end of all oracle
SQL> Rem      supplied scripts.
SQL> Rem
SQL> Rem    NOTES
SQL> Rem      See sqlsessstart.sql for the corresponding start script.
SQL> Rem
SQL> Rem    BEGIN SQL_FILE_METADATA
SQL> Rem    SQL_SOURCE_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_SHIPPED_FILE: rdbms/admin/sqlsessend.sql
SQL> Rem    SQL_PHASE: MISC
SQL> Rem    SQL_STARTUP_MODE: NORMAL
SQL> Rem    SQL_IGNORABLE_ERRORS: NONE
SQL> Rem    END SQL_FILE_METADATA
SQL> Rem
SQL> Rem    MODIFIED   (MM/DD/YY)
SQL> Rem    surman      05/04/18 - 27464252: Update SQL_PHASE
SQL> Rem    surman      03/08/13 - 16462837: Common start and end scripts
SQL> Rem    surman      03/08/13 - Created
SQL> Rem
SQL> 
SQL> alter session set "_ORACLE_SCRIPT" = false;

Session altered.

SQL> 
SQL> 
SQL> 
SQL> ---------------------------
SQL> -- Default Password Scanner
SQL> ----------------------------
SQL> -- Since 10G verifiers of default accounts will eventually be removed from
SQL> --   default-pwd$, we use 0x10 flag in ASTATUS column of user$ to indicate
SQL> --   default accounts who are using default passwords.
SQL> -- Hence this ASTATUS column flag should be set correctly, in all scenarios -
SQL> --   (a) Upgrade, (b) Fresh Install, (c) Password change & (d) Account creation
SQL> -- DBA_USERS_WITH_DEFPWD view definition will use only this flag to project
SQL> --   the required list of default accounts using default passwords.
SQL> 
SQL>   -- Fresh DB Install: set 0x10 flag for default accounts, who are
SQL>   --                   using default passwords
SQL>   -- DB Upgrade: set 0x10 flag for default accounts, who are
SQL>   --             using default passwords in pre-12.1 DB
SQL>   -- Bug 25406198: Do not set 0x10 flag in ASTATUS column of user$ for users
SQL>   -- created without passwords
SQL>   update user$ set astatus=(astatus + 16 - BITAND(astatus,16))
  2       where name in (select name from user$, default_pwd$
  3                      where name=user_name
  4                        AND (bitand(spare1,65536) != 65536)
  5                        AND ( (pv_type = 0 AND password=pwd_verifier)
  6                            OR pv_type = 1 ));

2 rows updated.

SQL> 
SQL>   -- Delete default accounts entries from default_pwd$, which contain 10G
SQL>   --   verifiers and for which accounts SHA-1 hash has already added.
SQL>   -- Since default_pwd$ has SHA-1 hash for such accounts, 10G verifiers are no
SQL>   --   longer needed and they should be deleted.
SQL>   delete from default_pwd$ dp
  2      where dp.pv_type=0 and
  3            dp.user_name IN (select user_name from default_pwd$ where pv_type=1);

1054 rows deleted.

SQL> 
SQL>   -- At this point, some default accounts would not have SHA-1 hash and hence
SQL>   --   their 10G verifiers are preserved in default_pwd$.
SQL>   -- Since such accounts are using non-trivial default passwords, we need to
SQL>   --   check with their product owners for generating and adding SHA-1 hash
SQL>   --   into default_pwd$.
SQL>   COMMIT;

Commit complete.

SQL> 
SQL> Rem
SQL> Rem
SQL> Rem
SQL> Rem
SQL> Rem NOTE: THIS IS THE LAST STEP IN THE INSTALL
SQL> Rem       THERE SHOULD BE NO CODE ADDED BEYOND THIS POINT.
SQL> Rem
SQL> Rem
SQL> Rem Indicate CATPROC load complete and check validity
SQL> Rem
SQL> 
SQL> DECLARE
  2     schema_list dbms_registry.schema_list_t;
  3  BEGIN
  4     -- Add all the ancillary schemas for CATPROC
  5     schema_list := dbms_registry.schema_list_t(
  6                  'SYSTEM', 'OUTLN', 'DBSNMP', 'DIP',
  7                  'AUDSYS', 'GSMCATUSER', 'GSMUSER', 'GSMADMIN_INTERNAL',
  8                  'SYS$UMF', 'SYSBACKUP', 'SYSDG', 'SYSKM', 'SYSRAC',
  9                  'DBSFWUSER',
 10                  'ORACLE_OCM', 'APPQOSSYS', 'REMOTE_SCHEDULER_AGENT',
 11                  'GGSYS');
 12     -- add CDB-only schema, if necessary
 13     IF SYS_CONTEXT('USERENV','CON_ID') = 1 THEN
 14       schema_list.extend;
 15       schema_list(schema_list.COUNT) := 'GSMROOTUSER';
 16     END IF;
 17     -- update the schema list for CATPROC
 18     dbms_registry.update_schema_list('CATPROC', schema_list);
 19     IF sys.dbms_registry.is_loaded('CATPROC') IS NULL THEN
 20     -- Only validate on initial install, not on any subsequent reruns
 21     -- CATALOG and CATPROC will be re-validated when utlrp.sql is run
 22        sys.dbms_registry.loaded('CATPROC');
 23        sys.dbms_registry_sys.validate_catproc;
 24        sys.dbms_registry_sys.validate_catalog;
 25     ELSE
 26        sys.dbms_registry.loaded('CATPROC');
 27     END IF;
 28  END;
 29  /
